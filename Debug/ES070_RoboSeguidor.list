
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b694  0800b694  0000c694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b748  0800b748  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b748  0800b748  0000c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b750  0800b750  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b750  0800b750  0000c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b754  0800b754  0000c754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800b758  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  20000098  0800b7f0  0000d098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800b7f0  0000da14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffe2  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418a  00000000  00000000  0002d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afc0  00000000  00000000  00034041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002240b  00000000  00000000  0005f001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116ced  00000000  00000000  0008140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001980f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007298  00000000  00000000  0019813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0019f3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b67c 	.word	0x0800b67c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800b67c 	.word	0x0800b67c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00a fbcf 	bl	800ad7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e6:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000608:	2204      	movs	r2, #4
 800060a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800060e:	2200      	movs	r2, #0
 8000610:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000614:	2201      	movs	r2, #1
 8000616:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800061a:	2201      	movs	r2, #1
 800061c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000642:	2201      	movs	r2, #1
 8000644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800064a:	220c      	movs	r2, #12
 800064c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800065c:	2201      	movs	r2, #1
 800065e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000662:	f002 fed9 	bl	8003418 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800066c:	f001 faea 	bl	8001c44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800067c:	f003 fff8 	bl	8004670 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000686:	f001 fadd 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_ADC1_Init+0x104>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80006a8:	f003 f964 	bl	8003974 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006b2:	f001 fac7 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000b4 	.word	0x200000b4
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fb51 	bl	800ad7c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006dc:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <MX_ADC2_Init+0xdc>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000702:	2204      	movs	r2, #4
 8000704:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800070e:	2201      	movs	r2, #1
 8000710:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000714:	2201      	movs	r2, #1
 8000716:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000744:	220c      	movs	r2, #12
 8000746:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000756:	2201      	movs	r2, #1
 8000758:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800075c:	f002 fe5c 	bl	8003418 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000766:	f001 fa6d 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC2_Init+0xe0>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000788:	f003 f8f4 	bl	8003974 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000792:	f001 fa57 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000120 	.word	0x20000120
 80007a4:	50000100 	.word	0x50000100
 80007a8:	0c900008 	.word	0x0c900008

080007ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00a fad9 	bl	800ad7c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007cc:	4a37      	ldr	r2, [pc, #220]	@ (80008ac <MX_ADC3_Init+0x100>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007d0:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007d2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80007d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d8:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800082c:	2201      	movs	r2, #1
 800082e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000834:	220c      	movs	r2, #12
 8000836:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000846:	2201      	movs	r2, #1
 8000848:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800084a:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800084c:	f002 fde4 	bl	8003418 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000856:	f001 f9f5 	bl	8001c44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000866:	f003 ff03 	bl	8004670 <HAL_ADCEx_MultiModeConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000870:	f001 f9e8 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_ADC3_Init+0x104>)
 8000876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000878:	2306      	movs	r3, #6
 800087a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000880:	237f      	movs	r3, #127	@ 0x7f
 8000882:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000884:	2304      	movs	r3, #4
 8000886:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000892:	f003 f86f 	bl	8003974 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 800089c:	f001 f9d2 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	@ 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000018c 	.word	0x2000018c
 80008ac:	50000400 	.word	0x50000400
 80008b0:	14f00020 	.word	0x14f00020

080008b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2220      	movs	r2, #32
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a fa5b 	bl	800ad7c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008c6:	4b31      	ldr	r3, [pc, #196]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008c8:	4a31      	ldr	r2, [pc, #196]	@ (8000990 <MX_ADC4_Init+0xdc>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ce:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000900:	2201      	movs	r2, #1
 8000902:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ADC4_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_ADC4_Init+0xd8>)
 800091a:	2201      	movs	r2, #1
 800091c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000930:	220c      	movs	r2, #12
 8000932:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_ADC4_Init+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000942:	2201      	movs	r2, #1
 8000944:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000948:	f002 fd66 	bl	8003418 <HAL_ADC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000952:	f001 f977 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_ADC4_Init+0xe0>)
 8000958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000962:	237f      	movs	r3, #127	@ 0x7f
 8000964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000966:	2304      	movs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000974:	f002 fffe 	bl	8003974 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 800097e:	f001 f961 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001f8 	.word	0x200001f8
 8000990:	50000500 	.word	0x50000500
 8000994:	14f00020 	.word	0x14f00020

08000998 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a f9e9 	bl	800ad7c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ac:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_ADC5_Init+0xdc>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009b2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a14:	220c      	movs	r2, #12
 8000a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a2a:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a2c:	f002 fcf4 	bl	8003418 <HAL_ADC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000a36:	f001 f905 	bl	8001c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_ADC5_Init+0xe0>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	@ 0x7f
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a58:	f002 ff8c 	bl	8003974 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000a62:	f001 f8ef 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000264 	.word	0x20000264
 8000a74:	50000600 	.word	0x50000600
 8000a78:	08600004 	.word	0x08600004

08000a7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a6      	sub	sp, #152	@ 0x98
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a98:	2254      	movs	r2, #84	@ 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00a f96d 	bl	800ad7c <memset>
  if(adcHandle->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aaa:	d16c      	bne.n	8000b86 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ab2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ab6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f91d 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ac8:	f001 f8bc 	bl	8001c44 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000acc:	4ba0      	ldr	r3, [pc, #640]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10b      	bne.n	8000af6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ade:	4b9d      	ldr	r3, [pc, #628]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a9c      	ldr	r2, [pc, #624]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b9a      	ldr	r3, [pc, #616]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b97      	ldr	r3, [pc, #604]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a96      	ldr	r2, [pc, #600]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b94      	ldr	r3, [pc, #592]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f004 faa1 	bl	8005070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b30:	4a8a      	ldr	r2, [pc, #552]	@ (8000d5c <HAL_ADC_MspInit+0x2e0>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b34:	4b88      	ldr	r3, [pc, #544]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b87      	ldr	r3, [pc, #540]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b84      	ldr	r3, [pc, #528]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4c:	4b82      	ldr	r3, [pc, #520]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b54:	4b80      	ldr	r3, [pc, #512]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b7d      	ldr	r3, [pc, #500]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b68:	487b      	ldr	r0, [pc, #492]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b6a:	f003 ff99 	bl	8004aa0 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b74:	f001 f866 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b7e:	4a76      	ldr	r2, [pc, #472]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b84:	e1e0      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a75      	ldr	r2, [pc, #468]	@ (8000d60 <HAL_ADC_MspInit+0x2e4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d16c      	bne.n	8000c6a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b9a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f007 f8ab 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000bac:	f001 f84a 	bl	8001c44 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bb0:	4b67      	ldr	r3, [pc, #412]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a66      	ldr	r2, [pc, #408]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bba:	4b65      	ldr	r3, [pc, #404]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10b      	bne.n	8000bda <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bc2:	4b64      	ldr	r3, [pc, #400]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a63      	ldr	r2, [pc, #396]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b61      	ldr	r3, [pc, #388]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b5e      	ldr	r3, [pc, #376]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a5d      	ldr	r2, [pc, #372]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0e:	f004 fa2f 	bl	8005070 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c12:	4b54      	ldr	r3, [pc, #336]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c14:	4a54      	ldr	r2, [pc, #336]	@ (8000d68 <HAL_ADC_MspInit+0x2ec>)
 8000c16:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c18:	4b52      	ldr	r3, [pc, #328]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c1a:	2224      	movs	r2, #36	@ 0x24
 8000c1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1e:	4b51      	ldr	r3, [pc, #324]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c24:	4b4f      	ldr	r3, [pc, #316]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c30:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c40:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c4c:	4845      	ldr	r0, [pc, #276]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c4e:	f003 ff27 	bl	8004aa0 <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000c58:	f000 fff4 	bl	8001c44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a41      	ldr	r2, [pc, #260]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c68:	e16e      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <HAL_ADC_MspInit+0x2f0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f040 8085 	bne.w	8000d80 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c86:	4618      	mov	r0, r3
 8000c88:	f007 f838 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c92:	f000 ffd7 	bl	8001c44 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c96:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a34      	ldr	r2, [pc, #208]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ca0:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cac:	4a29      	ldr	r2, [pc, #164]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a23      	ldr	r2, [pc, #140]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <HAL_ADC_MspInit+0x2f8>)
 8000cf4:	f004 f9bc 	bl	8005070 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <HAL_ADC_MspInit+0x300>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d00:	2225      	movs	r2, #37	@ 0x25
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d28:	2220      	movs	r2, #32
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d34:	f003 feb4 	bl	8004aa0 <HAL_DMA_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d3e:	f000 ff81 	bl	8001c44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d48:	4a0b      	ldr	r2, [pc, #44]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d4e:	e0fb      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
 8000d50:	200004b0 	.word	0x200004b0
 8000d54:	40021000 	.word	0x40021000
 8000d58:	200002d0 	.word	0x200002d0
 8000d5c:	40020008 	.word	0x40020008
 8000d60:	50000100 	.word	0x50000100
 8000d64:	20000330 	.word	0x20000330
 8000d68:	4002001c 	.word	0x4002001c
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	200004b4 	.word	0x200004b4
 8000d74:	48000400 	.word	0x48000400
 8000d78:	20000390 	.word	0x20000390
 8000d7c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a72      	ldr	r2, [pc, #456]	@ (8000f50 <HAL_ADC_MspInit+0x4d4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d16c      	bne.n	8000e64 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d94:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 ffae 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000da6:	f000 ff4d 	bl	8001c44 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000daa:	4b6a      	ldr	r3, [pc, #424]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000db4:	4b67      	ldr	r3, [pc, #412]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10b      	bne.n	8000dd4 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000dbc:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a65      	ldr	r2, [pc, #404]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e04:	4619      	mov	r1, r3
 8000e06:	4855      	ldr	r0, [pc, #340]	@ (8000f5c <HAL_ADC_MspInit+0x4e0>)
 8000e08:	f004 f932 	bl	8005070 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e0c:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e0e:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <HAL_ADC_MspInit+0x4e8>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e12:	4b53      	ldr	r3, [pc, #332]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e14:	2226      	movs	r2, #38	@ 0x26
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e18:	4b51      	ldr	r3, [pc, #324]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1e:	4b50      	ldr	r3, [pc, #320]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e24:	4b4e      	ldr	r3, [pc, #312]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e32:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e3a:	4b49      	ldr	r3, [pc, #292]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e40:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e46:	4846      	ldr	r0, [pc, #280]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e48:	f003 fe2a 	bl	8004aa0 <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000e52:	f000 fef7 	bl	8001c44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a41      	ldr	r2, [pc, #260]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e5c:	4a40      	ldr	r2, [pc, #256]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e62:	e071      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <HAL_ADC_MspInit+0x4ec>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d16c      	bne.n	8000f48 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e78:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 ff3c 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e8a:	f000 fedb 	bl	8001c44 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f004 f8bf 	bl	8005070 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_ADC_MspInit+0x4f4>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000efa:	2227      	movs	r2, #39	@ 0x27
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f2c:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f2e:	f003 fdb7 	bl	8004aa0 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f38:	f000 fe84 	bl	8001c44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f40:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	3798      	adds	r7, #152	@ 0x98
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	50000500 	.word	0x50000500
 8000f54:	200004b4 	.word	0x200004b4
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	200003f0 	.word	0x200003f0
 8000f64:	40020044 	.word	0x40020044
 8000f68:	50000600 	.word	0x50000600
 8000f6c:	20000450 	.word	0x20000450
 8000f70:	40020058 	.word	0x40020058

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f003 fd41 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f003 fd58 	bl	8004a6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f003 fd39 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f003 fd50 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f007 fb7d 	bl	80086e4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8000fea:	2100      	movs	r1, #0
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f007 fb79 	bl	80086e4 <HAL_TIM_IC_Start_IT>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <processarCaptura+0x94>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d108      	bne.n	8001022 <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <processarCaptura+0x98>)
 8001018:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <processarCaptura+0x94>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001020:	e02f      	b.n	8001082 <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <processarCaptura+0x9c>)
 800102a:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <processarCaptura+0x9c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <processarCaptura+0x98>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a19      	ldr	r2, [pc, #100]	@ (800109c <processarCaptura+0xa0>)
 8001038:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <processarCaptura+0xa4>)
 800103c:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <processarCaptura+0xa0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104a:	edd7 6a05 	vldr	s13, [r7, #20]
 800104e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010a4 <processarCaptura+0xa8>
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <processarCaptura+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200004cc 	.word	0x200004cc
 8001094:	200004b8 	.word	0x200004b8
 8001098:	200004bc 	.word	0x200004bc
 800109c:	200004c8 	.word	0x200004c8
 80010a0:	49742400 	.word	0x49742400
 80010a4:	41a347ae 	.word	0x41a347ae

080010a8 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <processarCaptura2+0x94>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d108      	bne.n	80010ce <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001140 <processarCaptura2+0x98>)
 80010c4:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <processarCaptura2+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 80010cc:	e02f      	b.n	800112e <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <processarCaptura2+0x9c>)
 80010d6:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <processarCaptura2+0x9c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <processarCaptura2+0x98>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <processarCaptura2+0xa0>)
 80010e4:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <processarCaptura2+0xa4>)
 80010e8:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <processarCaptura2+0xa0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001150 <processarCaptura2+0xa8>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <processarCaptura2+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200004d4 	.word	0x200004d4
 8001140:	200004c0 	.word	0x200004c0
 8001144:	200004c4 	.word	0x200004c4
 8001148:	200004d0 	.word	0x200004d0
 800114c:	49742400 	.word	0x49742400
 8001150:	41a347ae 	.word	0x41a347ae

08001154 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d105      	bne.n	8001170 <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001166:	490b      	ldr	r1, [pc, #44]	@ (8001194 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff47 	bl	8000ffc <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);

    }
}
 800116e:	e008      	b.n	8001182 <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <HAL_TIM_IC_CaptureCallback+0x48>)
 800117a:	4909      	ldr	r1, [pc, #36]	@ (80011a0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff93 	bl	80010a8 <processarCaptura2>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000079c 	.word	0x2000079c
 8001190:	200004e0 	.word	0x200004e0
 8001194:	200004d8 	.word	0x200004d8
 8001198:	200007e8 	.word	0x200007e8
 800119c:	200004e4 	.word	0x200004e4
 80011a0:	200004dc 	.word	0x200004dc

080011a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	4b35      	ldr	r3, [pc, #212]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a34      	ldr	r2, [pc, #208]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001220:	4822      	ldr	r0, [pc, #136]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001222:	f004 f8a7 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f004 f8a0 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <MX_GPIO_Init+0x10c>)
 800124c:	f003 ff10 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001250:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	@ (80012ac <MX_GPIO_Init+0x108>)
 800126a:	f003 ff01 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 800126e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f003 fef1 	bl	8005070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2107      	movs	r1, #7
 8001292:	2028      	movs	r0, #40	@ 0x28
 8001294:	f003 fbcf 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001298:	2028      	movs	r0, #40	@ 0x28
 800129a:	f003 fbe6 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000800 	.word	0x48000800

080012b4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <MX_I2C2_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <MX_I2C2_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012f0:	f004 f87b 	bl	80053ea <HAL_I2C_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012fa:	f000 fca3 	bl	8001c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <MX_I2C2_Init+0x74>)
 8001302:	f005 fe81 	bl	8007008 <HAL_I2CEx_ConfigAnalogFilter>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800130c:	f000 fc9a 	bl	8001c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_I2C2_Init+0x74>)
 8001314:	f005 fec3 	bl	800709e <HAL_I2CEx_ConfigDigitalFilter>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 fc91 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200004e8 	.word	0x200004e8
 800132c:	40005800 	.word	0x40005800
 8001330:	40b285c2 	.word	0x40b285c2

08001334 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0a0      	sub	sp, #128	@ 0x80
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	2254      	movs	r2, #84	@ 0x54
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f009 fd11 	bl	800ad7c <memset>
  if(i2cHandle->Instance==I2C2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a5f      	ldr	r2, [pc, #380]	@ (80014dc <HAL_I2C_MspInit+0x1a8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f040 80b6 	bne.w	80014d2 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fcc2 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f000 fc61 	bl	8001c44 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 80013b2:	2310      	movs	r3, #16
 80013b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	2312      	movs	r3, #18
 80013b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4845      	ldr	r0, [pc, #276]	@ (80014e4 <HAL_I2C_MspInit+0x1b0>)
 80013ce:	f003 fe4f 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 80013d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e4:	2304      	movs	r3, #4
 80013e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f003 fe3d 	bl	8005070 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013f6:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	4a39      	ldr	r2, [pc, #228]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6593      	str	r3, [r2, #88]	@ 0x58
 8001402:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001410:	4a36      	ldr	r2, [pc, #216]	@ (80014ec <HAL_I2C_MspInit+0x1b8>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001416:	2212      	movs	r2, #18
 8001418:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001444:	4828      	ldr	r0, [pc, #160]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001446:	f003 fb2b 	bl	8004aa0 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001450:	f000 fbf8 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001458:	63da      	str	r2, [r3, #60]	@ 0x3c
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001462:	4a24      	ldr	r2, [pc, #144]	@ (80014f4 <HAL_I2C_MspInit+0x1c0>)
 8001464:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001468:	2213      	movs	r2, #19
 800146a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800146e:	2210      	movs	r2, #16
 8001470:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001498:	f003 fb02 	bl	8004aa0 <HAL_DMA_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80014a2:	f000 fbcf 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ac:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2106      	movs	r1, #6
 80014b6:	2021      	movs	r0, #33	@ 0x21
 80014b8:	f003 fabd 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80014bc:	2021      	movs	r0, #33	@ 0x21
 80014be:	f003 fad4 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2106      	movs	r1, #6
 80014c6:	2022      	movs	r0, #34	@ 0x22
 80014c8:	f003 fab5 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80014cc:	2022      	movs	r0, #34	@ 0x22
 80014ce:	f003 facc 	bl	8004a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3780      	adds	r7, #128	@ 0x80
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005800 	.word	0x40005800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800
 80014e8:	2000053c 	.word	0x2000053c
 80014ec:	4002006c 	.word	0x4002006c
 80014f0:	2000059c 	.word	0x2000059c
 80014f4:	40020080 	.word	0x40020080

080014f8 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4603      	mov	r3, r0
 8001508:	70fb      	strb	r3, [r7, #3]
 800150a:	460b      	mov	r3, r1
 800150c:	70bb      	strb	r3, [r7, #2]
 800150e:	4613      	mov	r3, r2
 8001510:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001512:	2300      	movs	r3, #0
 8001514:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001516:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <lcdInit+0x16c>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b50      	ldr	r3, [pc, #320]	@ (8001664 <lcdInit+0x16c>)
 8001524:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001526:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <lcdInit+0x16c>)
 8001528:	78bb      	ldrb	r3, [r7, #2]
 800152a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 800152c:	4a4d      	ldr	r2, [pc, #308]	@ (8001664 <lcdInit+0x16c>)
 800152e:	787b      	ldrb	r3, [r7, #1]
 8001530:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001532:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <lcdInit+0x16c>)
 8001534:	2208      	movs	r2, #8
 8001536:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001538:	4b4b      	ldr	r3, [pc, #300]	@ (8001668 <lcdInit+0x170>)
 800153a:	2234      	movs	r2, #52	@ 0x34
 800153c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <lcdInit+0x170>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <lcdInit+0x170>)
 8001544:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001546:	4b48      	ldr	r3, [pc, #288]	@ (8001668 <lcdInit+0x170>)
 8001548:	2230      	movs	r2, #48	@ 0x30
 800154a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 800154c:	2300      	movs	r3, #0
 800154e:	737b      	strb	r3, [r7, #13]
 8001550:	e02f      	b.n	80015b2 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001552:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <lcdInit+0x16c>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <lcdInit+0x16c>)
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	4619      	mov	r1, r3
 800155c:	2303      	movs	r3, #3
 800155e:	4a42      	ldr	r2, [pc, #264]	@ (8001668 <lcdInit+0x170>)
 8001560:	f003 ffde 	bl	8005520 <HAL_I2C_Master_Transmit_DMA>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <lcdInit+0x76>
            return -1;
 800156a:	23ff      	movs	r3, #255	@ 0xff
 800156c:	e076      	b.n	800165c <lcdInit+0x164>
        }

        usCont = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001572:	e009      	b.n	8001588 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	81fa      	strh	r2, [r7, #14]
 800157a:	2bc8      	cmp	r3, #200	@ 0xc8
 800157c:	d101      	bne.n	8001582 <lcdInit+0x8a>
        		return -1;
 800157e:	23ff      	movs	r3, #255	@ 0xff
 8001580:	e06c      	b.n	800165c <lcdInit+0x164>
        	HAL_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f001 fce2 	bl	8002f4c <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <lcdInit+0x16c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f004 f9b8 	bl	8005902 <HAL_I2C_GetState>
 8001592:	4603      	mov	r3, r0
 8001594:	2b20      	cmp	r3, #32
 8001596:	d1ed      	bne.n	8001574 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d103      	bne.n	80015a6 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f001 fcd4 	bl	8002f4c <HAL_Delay>
 80015a4:	e002      	b.n	80015ac <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 80015a6:	2005      	movs	r0, #5
 80015a8:	f001 fcd0 	bl	8002f4c <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	3301      	adds	r3, #1
 80015b0:	737b      	strb	r3, [r7, #13]
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d9cc      	bls.n	8001552 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <lcdInit+0x170>)
 80015ba:	222c      	movs	r2, #44	@ 0x2c
 80015bc:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <lcdInit+0x170>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <lcdInit+0x170>)
 80015c4:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <lcdInit+0x170>)
 80015c8:	2228      	movs	r2, #40	@ 0x28
 80015ca:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <lcdInit+0x16c>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <lcdInit+0x16c>)
 80015d2:	799b      	ldrb	r3, [r3, #6]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2303      	movs	r3, #3
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <lcdInit+0x170>)
 80015da:	f003 ffa1 	bl	8005520 <HAL_I2C_Master_Transmit_DMA>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <lcdInit+0xf0>
        return -1;
 80015e4:	23ff      	movs	r3, #255	@ 0xff
 80015e6:	e039      	b.n	800165c <lcdInit+0x164>
    }

    usCont = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80015ec:	e009      	b.n	8001602 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	81fa      	strh	r2, [r7, #14]
 80015f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80015f6:	d101      	bne.n	80015fc <lcdInit+0x104>
    		return -1;
 80015f8:	23ff      	movs	r3, #255	@ 0xff
 80015fa:	e02f      	b.n	800165c <lcdInit+0x164>
    	HAL_Delay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f001 fca5 	bl	8002f4c <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <lcdInit+0x16c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f97b 	bl	8005902 <HAL_I2C_GetState>
 800160c:	4603      	mov	r3, r0
 800160e:	2b20      	cmp	r3, #32
 8001610:	d1ed      	bne.n	80015ee <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <lcdInit+0x16c>)
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d904      	bls.n	800162e <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f945 	bl	80018c4 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f000 f815 	bl	800166c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001642:	2101      	movs	r1, #1
 8001644:	2007      	movs	r0, #7
 8001646:	f000 f811 	bl	800166c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f000 f80d 	bl	800166c <lcdCommand>
    lcdCursorHome();
 8001652:	2101      	movs	r1, #1
 8001654:	2005      	movs	r0, #5
 8001656:	f000 f809 	bl	800166c <lcdCommand>

    return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000604 	.word	0x20000604
 8001668:	200005fc 	.word	0x200005fc

0800166c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <lcdCommand+0xe4>
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 80aa 	bne.w	80017e0 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	3b01      	subs	r3, #1
 8001690:	2b07      	cmp	r3, #7
 8001692:	d85a      	bhi.n	800174a <lcdCommand+0xde>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <lcdCommand+0x30>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016bd 	.word	0x080016bd
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	080016dd 	.word	0x080016dd
 80016ac:	08001707 	.word	0x08001707
 80016b0:	08001731 	.word	0x08001731
 80016b4:	08001721 	.word	0x08001721
 80016b8:	0800173b 	.word	0x0800173b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80016bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <lcdCommand+0x1c4>)
 80016be:	7a1b      	ldrb	r3, [r3, #8]
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <lcdCommand+0x1c4>)
 80016c8:	721a      	strb	r2, [r3, #8]
                    break;
 80016ca:	e040      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80016cc:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <lcdCommand+0x1c4>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <lcdCommand+0x1c4>)
 80016d8:	721a      	strb	r2, [r3, #8]
                    break;
 80016da:	e038      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80016dc:	4b54      	ldr	r3, [pc, #336]	@ (8001830 <lcdCommand+0x1c4>)
 80016de:	7a1b      	ldrb	r3, [r3, #8]
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b52      	ldr	r3, [pc, #328]	@ (8001830 <lcdCommand+0x1c4>)
 80016e8:	721a      	strb	r2, [r3, #8]
                    break;
 80016ea:	e030      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80016f0:	f107 030f 	add.w	r3, r7, #15
 80016f4:	4619      	mov	r1, r3
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f8e4 	bl	80018c4 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f001 fc25 	bl	8002f4c <HAL_Delay>
                        return 0;
 8001702:	2300      	movs	r3, #0
 8001704:	e090      	b.n	8001828 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001706:	2302      	movs	r3, #2
 8001708:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 800170a:	f107 030f 	add.w	r3, r7, #15
 800170e:	4619      	mov	r1, r3
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f8d7 	bl	80018c4 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001716:	2002      	movs	r0, #2
 8001718:	f001 fc18 	bl	8002f4c <HAL_Delay>
                        return 0;
 800171c:	2300      	movs	r3, #0
 800171e:	e083      	b.n	8001828 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <lcdCommand+0x1c4>)
 8001722:	7a5b      	ldrb	r3, [r3, #9]
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <lcdCommand+0x1c4>)
 800172c:	725a      	strb	r2, [r3, #9]
                    break;
 800172e:	e00e      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001730:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <lcdCommand+0x1c4>)
 8001732:	7a5a      	ldrb	r2, [r3, #9]
 8001734:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <lcdCommand+0x1c4>)
 8001736:	725a      	strb	r2, [r3, #9]
                    break;
 8001738:	e009      	b.n	800174e <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <lcdCommand+0x1c4>)
 800173c:	7a5b      	ldrb	r3, [r3, #9]
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <lcdCommand+0x1c4>)
 8001746:	725a      	strb	r2, [r3, #9]
                    break;
 8001748:	e001      	b.n	800174e <lcdCommand+0xe2>

                default:
                    return -1;
 800174a:	23ff      	movs	r3, #255	@ 0xff
 800174c:	e06c      	b.n	8001828 <lcdCommand+0x1bc>
            }

            break;
 800174e:	e049      	b.n	80017e4 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3b01      	subs	r3, #1
 8001754:	2b07      	cmp	r3, #7
 8001756:	d840      	bhi.n	80017da <lcdCommand+0x16e>
 8001758:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <lcdCommand+0xf4>)
 800175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175e:	bf00      	nop
 8001760:	08001781 	.word	0x08001781
 8001764:	080017db 	.word	0x080017db
 8001768:	08001791 	.word	0x08001791
 800176c:	080017a1 	.word	0x080017a1
 8001770:	080017db 	.word	0x080017db
 8001774:	080017c1 	.word	0x080017c1
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017cb 	.word	0x080017cb
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <lcdCommand+0x1c4>)
 8001782:	7a1b      	ldrb	r3, [r3, #8]
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <lcdCommand+0x1c4>)
 800178c:	721a      	strb	r2, [r3, #8]
                    break;
 800178e:	e026      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <lcdCommand+0x1c4>)
 8001792:	7a1b      	ldrb	r3, [r3, #8]
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <lcdCommand+0x1c4>)
 800179c:	721a      	strb	r2, [r3, #8]
                    break;
 800179e:	e01e      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80017a0:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <lcdCommand+0x1c4>)
 80017a2:	7a1b      	ldrb	r3, [r3, #8]
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <lcdCommand+0x1c4>)
 80017ac:	721a      	strb	r2, [r3, #8]
                    break;
 80017ae:	e016      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <lcdCommand+0x1c4>)
 80017b2:	7a5b      	ldrb	r3, [r3, #9]
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <lcdCommand+0x1c4>)
 80017bc:	725a      	strb	r2, [r3, #9]
                    break;
 80017be:	e00e      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <lcdCommand+0x1c4>)
 80017c2:	7a5a      	ldrb	r2, [r3, #9]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <lcdCommand+0x1c4>)
 80017c6:	725a      	strb	r2, [r3, #9]
                    break;
 80017c8:	e009      	b.n	80017de <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <lcdCommand+0x1c4>)
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <lcdCommand+0x1c4>)
 80017d6:	725a      	strb	r2, [r3, #9]
                    break;
 80017d8:	e001      	b.n	80017de <lcdCommand+0x172>

                default:
                    return -1;
 80017da:	23ff      	movs	r3, #255	@ 0xff
 80017dc:	e024      	b.n	8001828 <lcdCommand+0x1bc>
            }

            break;
 80017de:	e001      	b.n	80017e4 <lcdCommand+0x178>

        default:
            return -1;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	e021      	b.n	8001828 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	dc16      	bgt.n	8001818 <lcdCommand+0x1ac>
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	da0d      	bge.n	800180a <lcdCommand+0x19e>
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d004      	beq.n	80017fc <lcdCommand+0x190>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dd10      	ble.n	8001818 <lcdCommand+0x1ac>
 80017f6:	3b03      	subs	r3, #3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d80d      	bhi.n	8001818 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <lcdCommand+0x1c4>)
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73fb      	strb	r3, [r7, #15]
            break;
 8001808:	e007      	b.n	800181a <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <lcdCommand+0x1c4>)
 800180c:	7a5b      	ldrb	r3, [r3, #9]
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	b2db      	uxtb	r3, r3
 8001814:	73fb      	strb	r3, [r7, #15]
            break;
 8001816:	e000      	b.n	800181a <lcdCommand+0x1ae>

        default:
            break;
 8001818:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800181a:	f107 030f 	add.w	r3, r7, #15
 800181e:	4619      	mov	r1, r3
 8001820:	2000      	movs	r0, #0
 8001822:	f000 f84f 	bl	80018c4 <lcdWriteByte>
 8001826:	4603      	mov	r3, r0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000604 	.word	0x20000604

08001834 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <lcdSetCursorPosition+0x50>)
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	79ba      	ldrb	r2, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	d303      	bcc.n	8001856 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <lcdSetCursorPosition+0x50>)
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <lcdSetCursorPosition+0x54>)
 800185a:	5cd2      	ldrb	r2, [r2, r3]
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800186e:	f107 030f 	add.w	r3, r7, #15
 8001872:	4619      	mov	r1, r3
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f825 	bl	80018c4 <lcdWriteByte>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000604 	.word	0x20000604
 8001888:	0800b6d0 	.word	0x0800b6d0

0800188c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e009      	b.n	80018b2 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f80c 	bl	80018c4 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	3301      	adds	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3f1      	bcc.n	800189e <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80018d0:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <lcdWriteByte+0xf0>)
 80018d2:	79da      	ldrb	r2, [r3, #7]
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f023 030f 	bic.w	r3, r3, #15
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80018fa:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <lcdWriteByte+0xf0>)
 80018fc:	79da      	ldrb	r2, [r3, #7]
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4313      	orrs	r3, r2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	b25a      	sxtb	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b25b      	sxtb	r3, r3
 800190c:	f023 030f 	bic.w	r3, r3, #15
 8001910:	b25b      	sxtb	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <lcdWriteByte+0xf4>)
 800191a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <lcdWriteByte+0xf0>)
 800191e:	79da      	ldrb	r2, [r3, #7]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4313      	orrs	r3, r2
 8001924:	b2da      	uxtb	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <lcdWriteByte+0xf4>)
 800193a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <lcdWriteByte+0xf4>)
 800193e:	78da      	ldrb	r2, [r3, #3]
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001942:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001946:	79da      	ldrb	r2, [r3, #7]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4313      	orrs	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b25a      	sxtb	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001960:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	4619      	mov	r1, r3
 800196c:	2306      	movs	r3, #6
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001970:	f003 fdd6 	bl	8005520 <HAL_I2C_Master_Transmit_DMA>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <lcdWriteByte+0xba>
        return -1;
 800197a:	23ff      	movs	r3, #255	@ 0xff
 800197c:	e015      	b.n	80019aa <lcdWriteByte+0xe6>
    }

    usCont = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001982:	e009      	b.n	8001998 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	81fa      	strh	r2, [r7, #14]
 800198a:	2bc8      	cmp	r3, #200	@ 0xc8
 800198c:	d101      	bne.n	8001992 <lcdWriteByte+0xce>
    		return -1;
 800198e:	23ff      	movs	r3, #255	@ 0xff
 8001990:	e00b      	b.n	80019aa <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 fada 	bl	8002f4c <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <lcdWriteByte+0xf0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 ffb0 	bl	8005902 <HAL_I2C_GetState>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d1ed      	bne.n	8001984 <lcdWriteByte+0xc0>
    }

    return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000604 	.word	0x20000604
 80019b8:	200005fc 	.word	0x200005fc

080019bc <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	@ 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80019c6:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 80019d8:	edd7 7a00 	vldr	s15, [r7]
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 80019e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001a98 <vPrintMotorSpeed+0xdc>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a14:	ed97 7a00 	vldr	s14, [r7]
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a98 <vPrintMotorSpeed+0xdc>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    // Limpando o display
    //lcdDisplayClear();
    //lcdCursorHome();

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L:  %02d,%01d", iVEInteiro, iVEdec);
 8001a2e:	f107 001c 	add.w	r0, r7, #28
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a36:	4919      	ldr	r1, [pc, #100]	@ (8001a9c <vPrintMotorSpeed+0xe0>)
 8001a38:	f009 f980 	bl	800ad3c <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fef8 	bl	8001834 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fbe9 	bl	8000220 <strlen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff17 	bl	800188c <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R:  %02d,%01d", iVDInteiro, iVDdec);
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a66:	490e      	ldr	r1, [pc, #56]	@ (8001aa0 <vPrintMotorSpeed+0xe4>)
 8001a68:	f009 f968 	bl	800ad3c <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fee0 	bl	8001834 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fbd1 	bl	8000220 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff feff 	bl	800188c <lcdPrintStr>
}
 8001a8e:	bf00      	nop
 8001a90:	3740      	adds	r7, #64	@ 0x40
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	42c80000 	.word	0x42c80000
 8001a9c:	0800b694 	.word	0x0800b694
 8001aa0:	0800b6a8 	.word	0x0800b6a8

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f001 f9df 	bl	8002e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f858 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f7ff fb78 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab4:	f7ff fa5e 	bl	8000f74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001ab8:	f001 f90c 	bl	8002cd4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001abc:	f000 fdb2 	bl	8002624 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001ac0:	f7ff fbf8 	bl	80012b4 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001ac4:	f7fe fe72 	bl	80007ac <MX_ADC3_Init>
  MX_ADC1_Init();
 8001ac8:	f7fe fd7a 	bl	80005c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001acc:	f7fe fdfc 	bl	80006c8 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001ad0:	f7fe fef0 	bl	80008b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001ad4:	f7fe ff60 	bl	8000998 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001ad8:	f000 ff36 	bl	8002948 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001adc:	f000 ff7e 	bl	80029dc <MX_TIM17_Init>
  MX_TIM6_Init();
 8001ae0:	f000 feaa 	bl	8002838 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001ae4:	f000 fede 	bl	80028a4 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001ae8:	f000 fe58 	bl	800279c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8001aec:	4811      	ldr	r0, [pc, #68]	@ (8001b34 <main+0x90>)
 8001aee:	f000 f8af 	bl	8001c50 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8001af2:	4911      	ldr	r1, [pc, #68]	@ (8001b38 <main+0x94>)
 8001af4:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <main+0x98>)
 8001af6:	f7ff fa6f 	bl	8000fd8 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8001afa:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <main+0x9c>)
 8001afc:	f000 f936 	bl	8001d6c <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8001b00:	4810      	ldr	r0, [pc, #64]	@ (8001b44 <main+0xa0>)
 8001b02:	f000 f94f 	bl	8001da4 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8001b06:	4810      	ldr	r0, [pc, #64]	@ (8001b48 <main+0xa4>)
 8001b08:	f000 f968 	bl	8001ddc <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8001b0c:	480f      	ldr	r0, [pc, #60]	@ (8001b4c <main+0xa8>)
 8001b0e:	f000 f981 	bl	8001e14 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8001b12:	480f      	ldr	r0, [pc, #60]	@ (8001b50 <main+0xac>)
 8001b14:	f000 f99a 	bl	8001e4c <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8001b18:	2310      	movs	r3, #16
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	2127      	movs	r1, #39	@ 0x27
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <main+0xb0>)
 8001b20:	f7ff fcea 	bl	80014f8 <lcdInit>
  HAL_TIM_Base_Start_IT(&htim15);
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <main+0xb4>)
 8001b26:	f006 fb8f 	bl	8008248 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <main+0xb8>)
 8001b2c:	f006 fb8c 	bl	8008248 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	//vPrintMotorSpeed(0, 0);
    while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <main+0x8c>
 8001b34:	2000066c 	.word	0x2000066c
 8001b38:	200007e8 	.word	0x200007e8
 8001b3c:	2000079c 	.word	0x2000079c
 8001b40:	200000b4 	.word	0x200000b4
 8001b44:	20000120 	.word	0x20000120
 8001b48:	2000018c 	.word	0x2000018c
 8001b4c:	200001f8 	.word	0x200001f8
 8001b50:	20000264 	.word	0x20000264
 8001b54:	200004e8 	.word	0x200004e8
 8001b58:	20000750 	.word	0x20000750
 8001b5c:	200006b8 	.word	0x200006b8

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b094      	sub	sp, #80	@ 0x50
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0318 	add.w	r3, r7, #24
 8001b6a:	2238      	movs	r2, #56	@ 0x38
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f009 f904 	bl	800ad7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f005 fad8 	bl	8007138 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b92:	2340      	movs	r3, #64	@ 0x40
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ba2:	2355      	movs	r3, #85	@ 0x55
 8001ba4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fb72 	bl	80072a0 <HAL_RCC_OscConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bc2:	f000 f83f 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fe70 	bl	80078c4 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bea:	f000 f82b 	bl	8001c44 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3750      	adds	r7, #80	@ 0x50
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 8001c08:	f000 faf4 	bl	80021f4 <vLineSensorPIDControl>
	}
  if (htim == &htim2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d10b      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x34>
  {
    vPrintMotorSpeed(velocidadeRodaEsquerda, velocidadeRodaDireita);
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	eef0 0a47 	vmov.f32	s1, s14
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	f7ff fec8 	bl	80019bc <vPrintMotorSpeed>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000750 	.word	0x20000750
 8001c38:	200006b8 	.word	0x200006b8
 8001c3c:	200004e0 	.word	0x200004e0
 8001c40:	200004e4 	.word	0x200004e4

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <Error_Handler+0x8>

08001c50 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8001c58:	4a15      	ldr	r2, [pc, #84]	@ (8001cb0 <vMotorInit+0x60>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <vMotorInit+0x60>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fbc9 	bl	80083fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <vMotorInit+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fbc3 	bl	80083fc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c7c:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <vMotorInit+0x64>)
 8001c7e:	f003 fb79 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c88:	480a      	ldr	r0, [pc, #40]	@ (8001cb4 <vMotorInit+0x64>)
 8001c8a:	f003 fb73 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	4808      	ldr	r0, [pc, #32]	@ (8001cb4 <vMotorInit+0x64>)
 8001c94:	f003 fb6e 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f003 fb67 	bl	8005374 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000610 	.word	0x20000610
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cc2:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8001cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cca:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d64 <vSetRodasDC+0xac>
 8001cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <vSetRodasDC+0xb0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce4:	ee17 2a90 	vmov	r2, s15
 8001ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8001cea:	edd7 7a00 	vldr	s15, [r7]
 8001cee:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001d64 <vSetRodasDC+0xac>
 8001cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <vSetRodasDC+0xb0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d08:	ee17 2a90 	vmov	r2, s15
 8001d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8001d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d12:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001d64 <vSetRodasDC+0xac>
 8001d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <vSetRodasDC+0xb0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2c:	ee17 2a90 	vmov	r2, s15
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8001d32:	edd7 7a00 	vldr	s15, [r7]
 8001d36:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001d64 <vSetRodasDC+0xac>
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <vSetRodasDC+0xb0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d50:	ee17 2a90 	vmov	r2, s15
 8001d54:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	447a0000 	.word	0x447a0000
 8001d68:	20000610 	.word	0x20000610

08001d6c <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8001d74:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <vLineSensor1Init+0x30>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <vLineSensor1Init+0x30>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	217f      	movs	r1, #127	@ 0x7f
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fc13 	bl	80045ac <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <vLineSensor1Init+0x30>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4904      	ldr	r1, [pc, #16]	@ (8001da0 <vLineSensor1Init+0x34>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 fcfe 	bl	8003790 <HAL_ADC_Start_DMA>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000614 	.word	0x20000614
 8001da0:	20000628 	.word	0x20000628

08001da4 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <vLineSensor2Init+0x30>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <vLineSensor2Init+0x30>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	217f      	movs	r1, #127	@ 0x7f
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fbf7 	bl	80045ac <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <vLineSensor2Init+0x30>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4904      	ldr	r1, [pc, #16]	@ (8001dd8 <vLineSensor2Init+0x34>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fce2 	bl	8003790 <HAL_ADC_Start_DMA>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000618 	.word	0x20000618
 8001dd8:	2000062c 	.word	0x2000062c

08001ddc <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8001de4:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <vLineSensor3Init+0x30>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <vLineSensor3Init+0x30>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	217f      	movs	r1, #127	@ 0x7f
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fbdb 	bl	80045ac <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <vLineSensor3Init+0x30>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4904      	ldr	r1, [pc, #16]	@ (8001e10 <vLineSensor3Init+0x34>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fcc6 	bl	8003790 <HAL_ADC_Start_DMA>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000061c 	.word	0x2000061c
 8001e10:	20000630 	.word	0x20000630

08001e14 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8001e1c:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <vLineSensor4Init+0x30>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <vLineSensor4Init+0x30>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	217f      	movs	r1, #127	@ 0x7f
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fbbf 	bl	80045ac <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <vLineSensor4Init+0x30>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <vLineSensor4Init+0x34>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fcaa 	bl	8003790 <HAL_ADC_Start_DMA>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000620 	.word	0x20000620
 8001e48:	20000634 	.word	0x20000634

08001e4c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8001e54:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <vLineSensor5Init+0x30>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <vLineSensor5Init+0x30>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	217f      	movs	r1, #127	@ 0x7f
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fba3 	bl	80045ac <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <vLineSensor5Init+0x30>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <vLineSensor5Init+0x34>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fc8e 	bl	8003790 <HAL_ADC_Start_DMA>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000624 	.word	0x20000624
 8001e80:	20000638 	.word	0x20000638

08001e84 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8001e84:	b4b0      	push	{r4, r5, r7}
 8001e86:	b091      	sub	sp, #68	@ 0x44
 8001e88:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 8001e8a:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <fLineSensorCalculatePosition+0x120>)
 8001e8c:	f107 0418 	add.w	r4, r7, #24
 8001e90:	461d      	mov	r5, r3
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	682b      	ldr	r3, [r5, #0]
 8001e98:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8001ea6:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <fLineSensorCalculatePosition+0x124>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <fLineSensorCalculatePosition+0x128>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb0 <fLineSensorCalculatePosition+0x12c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <fLineSensorCalculatePosition+0x130>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb8 <fLineSensorCalculatePosition+0x134>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ec8:	e04c      	b.n	8001f64 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3340      	adds	r3, #64	@ 0x40
 8001ed0:	443b      	add	r3, r7
 8001ed2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001ed6:	4939      	ldr	r1, [pc, #228]	@ (8001fbc <fLineSensorCalculatePosition+0x138>)
 8001ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d33d      	bcc.n	8001f5e <fLineSensorCalculatePosition+0xda>
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3340      	adds	r3, #64	@ 0x40
 8001ee8:	443b      	add	r3, r7
 8001eea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001eee:	4934      	ldr	r1, [pc, #208]	@ (8001fc0 <fLineSensorCalculatePosition+0x13c>)
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d831      	bhi.n	8001f5e <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8001efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3340      	adds	r3, #64	@ 0x40
 8001f00:	443b      	add	r3, r7
 8001f02:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001f06:	492d      	ldr	r1, [pc, #180]	@ (8001fbc <fLineSensorCalculatePosition+0x138>)
 8001f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	3301      	adds	r3, #1
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8001f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	3340      	adds	r3, #64	@ 0x40
 8001f2c:	443b      	add	r3, r7
 8001f2e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8001f4e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001f52:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	3301      	adds	r3, #1
 8001f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	ddaf      	ble.n	8001eca <fLineSensorCalculatePosition+0x46>
        }
    }


    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8001f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001f6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	d101      	bne.n	8001f7c <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <fLineSensorCalculatePosition+0x140>)
 8001f7a:	e00b      	b.n	8001f94 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8001f7c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001f80:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <fLineSensorCalculatePosition+0x144>)
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f90:	6013      	str	r3, [r2, #0]
    return posicao;
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9c:	3744      	adds	r7, #68	@ 0x44
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bcb0      	pop	{r4, r5, r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	0800b6bc 	.word	0x0800b6bc
 8001fa8:	20000628 	.word	0x20000628
 8001fac:	2000062c 	.word	0x2000062c
 8001fb0:	20000630 	.word	0x20000630
 8001fb4:	20000634 	.word	0x20000634
 8001fb8:	20000638 	.word	0x20000638
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000014 	.word	0x20000014
 8001fc4:	42c60000 	.word	0x42c60000
 8001fc8:	20000648 	.word	0x20000648

08001fcc <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <isSensor3DetectingLine+0x38>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <isSensor3DetectingLine+0x3c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d808      	bhi.n	8001ff0 <isSensor3DetectingLine+0x24>
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <isSensor3DetectingLine+0x40>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <isSensor3DetectingLine+0x3c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d301      	bcc.n	8001ff0 <isSensor3DetectingLine+0x24>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <isSensor3DetectingLine+0x26>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	20000630 	.word	0x20000630
 800200c:	20000014 	.word	0x20000014

08002010 <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <isSensor4DetectingLine+0x38>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	461a      	mov	r2, r3
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <isSensor4DetectingLine+0x3c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d808      	bhi.n	8002034 <isSensor4DetectingLine+0x24>
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <isSensor4DetectingLine+0x40>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <isSensor4DetectingLine+0x3c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d301      	bcc.n	8002034 <isSensor4DetectingLine+0x24>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <isSensor4DetectingLine+0x26>
 8002034:	2300      	movs	r3, #0
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	20000634 	.word	0x20000634
 8002050:	20000014 	.word	0x20000014

08002054 <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[1]);
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <isSensor2DetectingLine+0x38>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	461a      	mov	r2, r3
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <isSensor2DetectingLine+0x3c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d808      	bhi.n	8002078 <isSensor2DetectingLine+0x24>
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <isSensor2DetectingLine+0x40>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <isSensor2DetectingLine+0x3c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d301      	bcc.n	8002078 <isSensor2DetectingLine+0x24>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <isSensor2DetectingLine+0x26>
 8002078:	2300      	movs	r3, #0
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	b2db      	uxtb	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000
 8002090:	2000062c 	.word	0x2000062c
 8002094:	20000014 	.word	0x20000014

08002098 <ajustarVelocidadeMotores>:
}
bool isSensor5DetectingLine() {
    return (lineSensor5Value >= minThresholds[4] && lineSensor2Value <= maxThresholds[4]);
}

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	ed87 0a01 	vstr	s0, [r7, #4]
 80020a2:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 80020a6:	4b4d      	ldr	r3, [pc, #308]	@ (80021dc <ajustarVelocidadeMotores+0x144>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 80020ac:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <ajustarVelocidadeMotores+0x148>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 estiverem detectando a linha branca e o 2 e 4 nao
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()&& !isSensor2DetectingLine()) {
 80020b2:	f7ff ff8b 	bl	8001fcc <isSensor3DetectingLine>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8085 	beq.w	80021c8 <ajustarVelocidadeMotores+0x130>
 80020be:	f7ff ffa7 	bl	8002010 <isSensor4DetectingLine>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d07c      	beq.n	80021c8 <ajustarVelocidadeMotores+0x130>
 80020ce:	f7ff ffc1 	bl	8002054 <isSensor2DetectingLine>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d074      	beq.n	80021c8 <ajustarVelocidadeMotores+0x130>
        left_duty_cycle = 0.341;
 80020de:	4b41      	ldr	r3, [pc, #260]	@ (80021e4 <ajustarVelocidadeMotores+0x14c>)
 80020e0:	607b      	str	r3, [r7, #4]
        right_duty_cycle = 0.341;
 80020e2:	4b40      	ldr	r3, [pc, #256]	@ (80021e4 <ajustarVelocidadeMotores+0x14c>)
 80020e4:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80020e6:	4a40      	ldr	r2, [pc, #256]	@ (80021e8 <ajustarVelocidadeMotores+0x150>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 80020ec:	4a3f      	ldr	r2, [pc, #252]	@ (80021ec <ajustarVelocidadeMotores+0x154>)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80020f2:	edd7 0a00 	vldr	s1, [r7]
 80020f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020fa:	f7ff fddd 	bl	8001cb8 <vSetRodasDC>
        // Se a velocidade da roda esquerda é maior, ajustamos a direita
        if (velEsquerda > velDireita) {
 80020fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002102:	edd7 7a04 	vldr	s15, [r7, #16]
 8002106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	dd29      	ble.n	8002164 <ajustarVelocidadeMotores+0xcc>
            float ajuste = velEsquerda / velDireita; // Fator de ajuste
 8002110:	edd7 6a05 	vldr	s13, [r7, #20]
 8002114:	ed97 7a04 	vldr	s14, [r7, #16]
 8002118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211c:	edc7 7a02 	vstr	s15, [r7, #8]
            float novoDutyCycleDireita = right_duty_cycle / ajuste;
 8002120:	edd7 6a00 	vldr	s13, [r7]
 8002124:	ed97 7a02 	vldr	s14, [r7, #8]
 8002128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212c:	edc7 7a07 	vstr	s15, [r7, #28]
            //EsquMaiorDir = novoDutyCycleDireita;
            fsaidaDutyDireita =novoDutyCycleDireita;
 8002130:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <ajustarVelocidadeMotores+0x154>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	6013      	str	r3, [r2, #0]
            fsaidaDutyEsquerda = left_duty_cycle;
 8002136:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <ajustarVelocidadeMotores+0x150>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleDireita > max_duty_cycle) {
 800213c:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <ajustarVelocidadeMotores+0x158>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ed97 7a07 	vldr	s14, [r7, #28]
 8002146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	dd02      	ble.n	8002156 <ajustarVelocidadeMotores+0xbe>
                novoDutyCycleDireita = max_duty_cycle;
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <ajustarVelocidadeMotores+0x158>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61fb      	str	r3, [r7, #28]
            }
            vSetRodasDC(left_duty_cycle, novoDutyCycleDireita);
 8002156:	edd7 0a07 	vldr	s1, [r7, #28]
 800215a:	ed97 0a01 	vldr	s0, [r7, #4]
 800215e:	f7ff fdab 	bl	8001cb8 <vSetRodasDC>
 8002162:	e031      	b.n	80021c8 <ajustarVelocidadeMotores+0x130>
        }
        // Se a velocidade da roda direita é maior, ajustamos a esquerda
        else if (velDireita > velEsquerda) {
 8002164:	ed97 7a04 	vldr	s14, [r7, #16]
 8002168:	edd7 7a05 	vldr	s15, [r7, #20]
 800216c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	dd28      	ble.n	80021c8 <ajustarVelocidadeMotores+0x130>
            float ajuste = velDireita / velEsquerda; // Fator de ajuste
 8002176:	edd7 6a04 	vldr	s13, [r7, #16]
 800217a:	ed97 7a05 	vldr	s14, [r7, #20]
 800217e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002182:	edc7 7a03 	vstr	s15, [r7, #12]
            float novoDutyCycleEsquerda = left_duty_cycle / ajuste;
 8002186:	edd7 6a01 	vldr	s13, [r7, #4]
 800218a:	ed97 7a03 	vldr	s14, [r7, #12]
 800218e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002192:	edc7 7a06 	vstr	s15, [r7, #24]
            fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 8002196:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <ajustarVelocidadeMotores+0x150>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6013      	str	r3, [r2, #0]
            fsaidaDutyDireita = right_duty_cycle;
 800219c:	4a13      	ldr	r2, [pc, #76]	@ (80021ec <ajustarVelocidadeMotores+0x154>)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleEsquerda > max_duty_cycle) {
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <ajustarVelocidadeMotores+0x158>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80021ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	dd02      	ble.n	80021bc <ajustarVelocidadeMotores+0x124>
                novoDutyCycleEsquerda = max_duty_cycle;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <ajustarVelocidadeMotores+0x158>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
            }
            vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle);
 80021bc:	edd7 0a00 	vldr	s1, [r7]
 80021c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80021c4:	f7ff fd78 	bl	8001cb8 <vSetRodasDC>
//    	left_duty_cycle = max_duty_cycle;
//    }
//    if (right_duty_cycle > max_duty_cycle) {
//    	right_duty_cycle = max_duty_cycle;
//    }
    vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80021c8:	edd7 0a00 	vldr	s1, [r7]
 80021cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80021d0:	f7ff fd72 	bl	8001cb8 <vSetRodasDC>
 }
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200004e0 	.word	0x200004e0
 80021e0:	200004e4 	.word	0x200004e4
 80021e4:	3eae978d 	.word	0x3eae978d
 80021e8:	20000640 	.word	0x20000640
 80021ec:	20000644 	.word	0x20000644
 80021f0:	20000038 	.word	0x20000038

080021f4 <vLineSensorPIDControl>:
//        vSetRodasDC(left_duty_cycle, right_duty_cycle);
//    }



void vLineSensorPIDControl(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80021fa:	f000 fe9b 	bl	8002f34 <HAL_GetTick>
 80021fe:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8002200:	4b77      	ldr	r3, [pc, #476]	@ (80023e0 <vLineSensorPIDControl+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002210:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80023e4 <vLineSensorPIDControl+0x1f0>
 8002214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002218:	4b73      	ldr	r3, [pc, #460]	@ (80023e8 <vLineSensorPIDControl+0x1f4>)
 800221a:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 800221e:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <vLineSensorPIDControl+0x1f4>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d802      	bhi.n	8002234 <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 800222e:	4b6e      	ldr	r3, [pc, #440]	@ (80023e8 <vLineSensorPIDControl+0x1f4>)
 8002230:	4a6e      	ldr	r2, [pc, #440]	@ (80023ec <vLineSensorPIDControl+0x1f8>)
 8002232:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 8002234:	f7ff fe26 	bl	8001e84 <fLineSensorCalculatePosition>
 8002238:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 800223c:	edd7 7a00 	vldr	s15, [r7]
 8002240:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80023f0 <vLineSensorPIDControl+0x1fc>
 8002244:	eef4 7a47 	vcmp.f32	s15, s14
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	d106      	bne.n	800225c <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
    	vSetRodasDC(0, 0);
 800224e:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80023f4 <vLineSensorPIDControl+0x200>
 8002252:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80023f4 <vLineSensorPIDControl+0x200>
 8002256:	f7ff fd2f 	bl	8001cb8 <vSetRodasDC>
        return;
 800225a:	e0be      	b.n	80023da <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 800225c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80023f4 <vLineSensorPIDControl+0x200>
 8002260:	edd7 7a00 	vldr	s15, [r7]
 8002264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002268:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <vLineSensorPIDControl+0x204>)
 800226a:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 800226e:	4b62      	ldr	r3, [pc, #392]	@ (80023f8 <vLineSensorPIDControl+0x204>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	4b5c      	ldr	r3, [pc, #368]	@ (80023e8 <vLineSensorPIDControl+0x1f4>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227e:	4b5f      	ldr	r3, [pc, #380]	@ (80023fc <vLineSensorPIDControl+0x208>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002288:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <vLineSensorPIDControl+0x208>)
 800228a:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 800228e:	4b5a      	ldr	r3, [pc, #360]	@ (80023f8 <vLineSensorPIDControl+0x204>)
 8002290:	ed93 7a00 	vldr	s14, [r3]
 8002294:	4b5a      	ldr	r3, [pc, #360]	@ (8002400 <vLineSensorPIDControl+0x20c>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800229e:	4b52      	ldr	r3, [pc, #328]	@ (80023e8 <vLineSensorPIDControl+0x1f4>)
 80022a0:	ed93 7a00 	vldr	s14, [r3]
 80022a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a8:	4b56      	ldr	r3, [pc, #344]	@ (8002404 <vLineSensorPIDControl+0x210>)
 80022aa:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 80022ae:	4b56      	ldr	r3, [pc, #344]	@ (8002408 <vLineSensorPIDControl+0x214>)
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <vLineSensorPIDControl+0x204>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022be:	4b53      	ldr	r3, [pc, #332]	@ (800240c <vLineSensorPIDControl+0x218>)
 80022c0:	edd3 6a00 	vldr	s13, [r3]
 80022c4:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <vLineSensorPIDControl+0x208>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002410 <vLineSensorPIDControl+0x21c>)
 80022d4:	edd3 6a00 	vldr	s13, [r3]
 80022d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002404 <vLineSensorPIDControl+0x210>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	eef1 7a67 	vneg.f32	s15, s15
 80022ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <vLineSensorPIDControl+0x220>)
 80022ec:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 80022f0:	4b48      	ldr	r3, [pc, #288]	@ (8002414 <vLineSensorPIDControl+0x220>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a48      	ldr	r2, [pc, #288]	@ (8002418 <vLineSensorPIDControl+0x224>)
 80022f6:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 80022f8:	4b46      	ldr	r3, [pc, #280]	@ (8002414 <vLineSensorPIDControl+0x220>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	4b47      	ldr	r3, [pc, #284]	@ (800241c <vLineSensorPIDControl+0x228>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	dd03      	ble.n	8002316 <vLineSensorPIDControl+0x122>
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <vLineSensorPIDControl+0x228>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a40      	ldr	r2, [pc, #256]	@ (8002414 <vLineSensorPIDControl+0x220>)
 8002314:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 8002316:	4b41      	ldr	r3, [pc, #260]	@ (800241c <vLineSensorPIDControl+0x228>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	eeb1 7a67 	vneg.f32	s14, s15
 8002320:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <vLineSensorPIDControl+0x220>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	dd07      	ble.n	8002340 <vLineSensorPIDControl+0x14c>
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <vLineSensorPIDControl+0x228>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	eef1 7a67 	vneg.f32	s15, s15
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <vLineSensorPIDControl+0x220>)
 800233c:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <vLineSensorPIDControl+0x204>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2e      	ldr	r2, [pc, #184]	@ (8002400 <vLineSensorPIDControl+0x20c>)
 8002346:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002348:	4a25      	ldr	r2, [pc, #148]	@ (80023e0 <vLineSensorPIDControl+0x1ec>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <vLineSensorPIDControl+0x22c>)
 8002350:	ed93 7a00 	vldr	s14, [r3]
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <vLineSensorPIDControl+0x220>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 8002362:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <vLineSensorPIDControl+0x22c>)
 8002364:	ed93 7a00 	vldr	s14, [r3]
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <vLineSensorPIDControl+0x220>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002372:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 0.5f) left_duty_cycle = max_duty_cycle;
 8002376:	edd7 7a03 	vldr	s15, [r7, #12]
 800237a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800237e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	dd02      	ble.n	800238e <vLineSensorPIDControl+0x19a>
 8002388:	4b24      	ldr	r3, [pc, #144]	@ (800241c <vLineSensorPIDControl+0x228>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = base_speed;
 800238e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	d502      	bpl.n	80023a2 <vLineSensorPIDControl+0x1ae>
 800239c:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <vLineSensorPIDControl+0x22c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 0.5f) right_duty_cycle = max_duty_cycle;
 80023a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80023aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	dd02      	ble.n	80023ba <vLineSensorPIDControl+0x1c6>
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <vLineSensorPIDControl+0x228>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = base_speed;
 80023ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80023be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	d502      	bpl.n	80023ce <vLineSensorPIDControl+0x1da>
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <vLineSensorPIDControl+0x22c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 80023ce:	edd7 0a02 	vldr	s1, [r7, #8]
 80023d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80023d6:	f7ff fe5f 	bl	8002098 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000664 	.word	0x20000664
 80023e4:	447a0000 	.word	0x447a0000
 80023e8:	20000030 	.word	0x20000030
 80023ec:	3c23d70a 	.word	0x3c23d70a
 80023f0:	42c60000 	.word	0x42c60000
 80023f4:	00000000 	.word	0x00000000
 80023f8:	20000650 	.word	0x20000650
 80023fc:	20000658 	.word	0x20000658
 8002400:	20000654 	.word	0x20000654
 8002404:	2000065c 	.word	0x2000065c
 8002408:	20000028 	.word	0x20000028
 800240c:	2000064c 	.word	0x2000064c
 8002410:	2000002c 	.word	0x2000002c
 8002414:	20000660 	.word	0x20000660
 8002418:	2000063c 	.word	0x2000063c
 800241c:	20000038 	.word	0x20000038
 8002420:	20000034 	.word	0x20000034

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_MspInit+0x44>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	4a0e      	ldr	r2, [pc, #56]	@ (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6613      	str	r3, [r2, #96]	@ 0x60
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_MspInit+0x44>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_MspInit+0x44>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	@ 0x58
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800245a:	f004 ff11 	bl	8007280 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <NMI_Handler+0x4>

08002474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <MemManage_Handler+0x4>

08002484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <UsageFault_Handler+0x4>

08002494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f000 fd25 	bl	8002f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA1_Channel6_IRQHandler+0x10>)
 80024d2:	f002 fc6f 	bl	8004db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000053c 	.word	0x2000053c

080024e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA1_Channel7_IRQHandler+0x10>)
 80024e6:	f002 fc65 	bl	8004db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000059c 	.word	0x2000059c

080024f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f8:	4803      	ldr	r0, [pc, #12]	@ (8002508 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80024fa:	f006 fa43 	bl	8008984 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80024fe:	4803      	ldr	r0, [pc, #12]	@ (800250c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002500:	f006 fa40 	bl	8008984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000066c 	.word	0x2000066c
 800250c:	20000750 	.word	0x20000750

08002510 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002514:	4803      	ldr	r0, [pc, #12]	@ (8002524 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002516:	f006 fa35 	bl	8008984 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800251a:	4803      	ldr	r0, [pc, #12]	@ (8002528 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800251c:	f006 fa32 	bl	8008984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000066c 	.word	0x2000066c
 8002528:	2000079c 	.word	0x2000079c

0800252c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002530:	4803      	ldr	r0, [pc, #12]	@ (8002540 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002532:	f006 fa27 	bl	8008984 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002536:	4803      	ldr	r0, [pc, #12]	@ (8002544 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002538:	f006 fa24 	bl	8008984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2000066c 	.word	0x2000066c
 8002544:	200007e8 	.word	0x200007e8

08002548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <TIM2_IRQHandler+0x10>)
 800254e:	f006 fa19 	bl	8008984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200006b8 	.word	0x200006b8

0800255c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <I2C2_EV_IRQHandler+0x10>)
 8002562:	f003 f8f1 	bl	8005748 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200004e8 	.word	0x200004e8

08002570 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <I2C2_ER_IRQHandler+0x10>)
 8002576:	f003 f901 	bl	800577c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200004e8 	.word	0x200004e8

08002584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002588:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800258c:	f002 ff0a 	bl	80053a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f008 fbe2 	bl	800ad8c <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000668 	.word	0x20000668
 80025fc:	20000a18 	.word	0x20000a18

08002600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09c      	sub	sp, #112	@ 0x70
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002644:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2234      	movs	r2, #52	@ 0x34
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f008 fb8c 	bl	800ad7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002666:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <MX_TIM1_Init+0x174>)
 8002668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <MX_TIM1_Init+0x170>)
 800266c:	22a9      	movs	r2, #169	@ 0xa9
 800266e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002678:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800267c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268a:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <MX_TIM1_Init+0x170>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002690:	4840      	ldr	r0, [pc, #256]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002692:	f005 fd81 	bl	8008198 <HAL_TIM_Base_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800269c:	f7ff fad2 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80026aa:	4619      	mov	r1, r3
 80026ac:	4839      	ldr	r0, [pc, #228]	@ (8002794 <MX_TIM1_Init+0x170>)
 80026ae:	f006 fc69 	bl	8008f84 <HAL_TIM_ConfigClockSource>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026b8:	f7ff fac4 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026bc:	4835      	ldr	r0, [pc, #212]	@ (8002794 <MX_TIM1_Init+0x170>)
 80026be:	f005 fe3b 	bl	8008338 <HAL_TIM_PWM_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026c8:	f7ff fabc 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026dc:	4619      	mov	r1, r3
 80026de:	482d      	ldr	r0, [pc, #180]	@ (8002794 <MX_TIM1_Init+0x170>)
 80026e0:	f007 fb4e 	bl	8009d80 <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80026ea:	f7ff faab 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	@ 0x60
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f6:	2300      	movs	r3, #0
 80026f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026fa:	2300      	movs	r3, #0
 80026fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800270a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800270e:	2200      	movs	r2, #0
 8002710:	4619      	mov	r1, r3
 8002712:	4820      	ldr	r0, [pc, #128]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002714:	f006 fb22 	bl	8008d5c <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800271e:	f7ff fa91 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002722:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002726:	2204      	movs	r2, #4
 8002728:	4619      	mov	r1, r3
 800272a:	481a      	ldr	r0, [pc, #104]	@ (8002794 <MX_TIM1_Init+0x170>)
 800272c:	f006 fb16 	bl	8008d5c <HAL_TIM_PWM_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002736:	f7ff fa85 	bl	8001c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800274e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800276a:	2300      	movs	r3, #0
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002778:	f007 fb98 	bl	8009eac <HAL_TIMEx_ConfigBreakDeadTime>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002782:	f7ff fa5f 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002786:	4803      	ldr	r0, [pc, #12]	@ (8002794 <MX_TIM1_Init+0x170>)
 8002788:	f000 fa6c 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 800278c:	bf00      	nop
 800278e:	3770      	adds	r7, #112	@ 0x70
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000066c 	.word	0x2000066c
 8002798:	40012c00 	.word	0x40012c00

0800279c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027c4:	f244 2267 	movw	r2, #16999	@ 0x4267
 80027c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80027d0:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027d2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80027d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e4:	4813      	ldr	r0, [pc, #76]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027e6:	f005 fcd7 	bl	8008198 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027f0:	f7ff fa28 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4619      	mov	r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <MX_TIM2_Init+0x98>)
 8002802:	f006 fbbf 	bl	8008f84 <HAL_TIM_ConfigClockSource>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800280c:	f7ff fa1a 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_TIM2_Init+0x98>)
 800281e:	f007 faaf 	bl	8009d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002828:	f7ff fa0c 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200006b8 	.word	0x200006b8

08002838 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002848:	4b14      	ldr	r3, [pc, #80]	@ (800289c <MX_TIM6_Init+0x64>)
 800284a:	4a15      	ldr	r2, [pc, #84]	@ (80028a0 <MX_TIM6_Init+0x68>)
 800284c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <MX_TIM6_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <MX_TIM6_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <MX_TIM6_Init+0x64>)
 800285c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002860:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <MX_TIM6_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002868:	480c      	ldr	r0, [pc, #48]	@ (800289c <MX_TIM6_Init+0x64>)
 800286a:	f005 fc95 	bl	8008198 <HAL_TIM_Base_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002874:	f7ff f9e6 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	@ (800289c <MX_TIM6_Init+0x64>)
 8002886:	f007 fa7b 	bl	8009d80 <HAL_TIMEx_MasterConfigSynchronization>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002890:	f7ff f9d8 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000704 	.word	0x20000704
 80028a0:	40001000 	.word	0x40001000

080028a4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002944 <MX_TIM15_Init+0xa0>)
 80028c6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028ca:	f244 2267 	movw	r2, #16999	@ 0x4267
 80028ce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028d8:	2263      	movs	r2, #99	@ 0x63
 80028da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80028ee:	4814      	ldr	r0, [pc, #80]	@ (8002940 <MX_TIM15_Init+0x9c>)
 80028f0:	f005 fc52 	bl	8008198 <HAL_TIM_Base_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80028fa:	f7ff f9a3 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4619      	mov	r1, r3
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <MX_TIM15_Init+0x9c>)
 800290c:	f006 fb3a 	bl	8008f84 <HAL_TIM_ConfigClockSource>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002916:	f7ff f995 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	@ (8002940 <MX_TIM15_Init+0x9c>)
 8002928:	f007 fa2a 	bl	8009d80 <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002932:	f7ff f987 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000750 	.word	0x20000750
 8002944:	40014000 	.word	0x40014000

08002948 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 800295c:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <MX_TIM16_Init+0x90>)
 800295e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002960:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002962:	22a9      	movs	r2, #169	@ 0xa9
 8002964:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002966:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 800296e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002972:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002974:	4b17      	ldr	r3, [pc, #92]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002980:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002986:	4813      	ldr	r0, [pc, #76]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002988:	f005 fc06 	bl	8008198 <HAL_TIM_Base_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002992:	f7ff f957 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002996:	480f      	ldr	r0, [pc, #60]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 8002998:	f005 fe42 	bl	8008620 <HAL_TIM_IC_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80029a2:	f7ff f94f 	bl	8001c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029aa:	2301      	movs	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80029b2:	230f      	movs	r3, #15
 80029b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029b6:	463b      	mov	r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <MX_TIM16_Init+0x8c>)
 80029be:	f006 f930 	bl	8008c22 <HAL_TIM_IC_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80029c8:	f7ff f93c 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000079c 	.word	0x2000079c
 80029d8:	40014400 	.word	0x40014400

080029dc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80029e2:	463b      	mov	r3, r7
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 80029f0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <MX_TIM17_Init+0x90>)
 80029f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 80029f6:	22a9      	movs	r2, #169	@ 0xa9
 80029f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a06:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a1a:	4813      	ldr	r0, [pc, #76]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a1c:	f005 fbbc 	bl	8008198 <HAL_TIM_Base_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002a26:	f7ff f90d 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002a2a:	480f      	ldr	r0, [pc, #60]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a2c:	f005 fdf8 	bl	8008620 <HAL_TIM_IC_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002a36:	f7ff f905 	bl	8001c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002a46:	230f      	movs	r3, #15
 8002a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <MX_TIM17_Init+0x8c>)
 8002a52:	f006 f8e6 	bl	8008c22 <HAL_TIM_IC_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002a5c:	f7ff f8f2 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200007e8 	.word	0x200007e8
 8002a6c:	40014800 	.word	0x40014800

08002a70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b090      	sub	sp, #64	@ 0x40
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c48 <HAL_TIM_Base_MspInit+0x1d8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d124      	bne.n	8002adc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a92:	4b6e      	ldr	r3, [pc, #440]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	4a6d      	ldr	r2, [pc, #436]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2107      	movs	r1, #7
 8002aae:	2018      	movs	r0, #24
 8002ab0:	f001 ffc1 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ab4:	2018      	movs	r0, #24
 8002ab6:	f001 ffd8 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2019      	movs	r0, #25
 8002ac0:	f001 ffb9 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ac4:	2019      	movs	r0, #25
 8002ac6:	f001 ffd0 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	201a      	movs	r0, #26
 8002ad0:	f001 ffb1 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002ad4:	201a      	movs	r0, #26
 8002ad6:	f001 ffc8 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ada:	e0b0      	b.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae4:	d114      	bne.n	8002b10 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae6:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af2:	4b56      	ldr	r3, [pc, #344]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2107      	movs	r1, #7
 8002b02:	201c      	movs	r0, #28
 8002b04:	f001 ff97 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b08:	201c      	movs	r0, #28
 8002b0a:	f001 ffae 	bl	8004a6a <HAL_NVIC_EnableIRQ>
}
 8002b0e:	e096      	b.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM6)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <HAL_TIM_Base_MspInit+0x1e0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10c      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b20:	f043 0310 	orr.w	r3, r3, #16
 8002b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b26:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
}
 8002b32:	e084      	b.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM15)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a46      	ldr	r2, [pc, #280]	@ (8002c54 <HAL_TIM_Base_MspInit+0x1e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d114      	bne.n	8002b68 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b3e:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	4a42      	ldr	r2, [pc, #264]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b4a:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2107      	movs	r1, #7
 8002b5a:	2018      	movs	r0, #24
 8002b5c:	f001 ff6b 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b60:	2018      	movs	r0, #24
 8002b62:	f001 ff82 	bl	8004a6a <HAL_NVIC_EnableIRQ>
}
 8002b66:	e06a      	b.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM16)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c58 <HAL_TIM_Base_MspInit+0x1e8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d130      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b76:	4a35      	ldr	r2, [pc, #212]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b7e:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4827      	ldr	r0, [pc, #156]	@ (8002c5c <HAL_TIM_Base_MspInit+0x1ec>)
 8002bbe:	f002 fa57 	bl	8005070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2019      	movs	r0, #25
 8002bc8:	f001 ff35 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bcc:	2019      	movs	r0, #25
 8002bce:	f001 ff4c 	bl	8004a6a <HAL_NVIC_EnableIRQ>
}
 8002bd2:	e034      	b.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM17)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a21      	ldr	r2, [pc, #132]	@ (8002c60 <HAL_TIM_Base_MspInit+0x1f0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12f      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_TIM_Base_MspInit+0x1dc>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002c1e:	230a      	movs	r3, #10
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <HAL_TIM_Base_MspInit+0x1ec>)
 8002c2a:	f002 fa21 	bl	8005070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	201a      	movs	r0, #26
 8002c34:	f001 feff 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c38:	201a      	movs	r0, #26
 8002c3a:	f001 ff16 	bl	8004a6a <HAL_NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3740      	adds	r7, #64	@ 0x40
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40001000 	.word	0x40001000
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	40014800 	.word	0x40014800

08002c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a11      	ldr	r2, [pc, #68]	@ (8002cc8 <HAL_TIM_MspPostInit+0x64>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d11b      	bne.n	8002cbe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	@ (8002cd0 <HAL_TIM_MspPostInit+0x6c>)
 8002cba:	f002 f9d9 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cbe:	bf00      	nop
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48000800 	.word	0x48000800

08002cd4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002cda:	4a22      	ldr	r2, [pc, #136]	@ (8002d64 <MX_LPUART1_UART_Init+0x90>)
 8002cdc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d04:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002d16:	4812      	ldr	r0, [pc, #72]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d18:	f007 f9a2 	bl	800a060 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d22:	f7fe ff8f 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d2a:	f007 ff3d 	bl	800aba8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002d34:	f7fe ff86 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4809      	ldr	r0, [pc, #36]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d3c:	f007 ff72 	bl	800ac24 <HAL_UARTEx_SetRxFifoThreshold>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002d46:	f7fe ff7d 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <MX_LPUART1_UART_Init+0x8c>)
 8002d4c:	f007 fef3 	bl	800ab36 <HAL_UARTEx_DisableFifoMode>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002d56:	f7fe ff75 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000834 	.word	0x20000834
 8002d64:	40008000 	.word	0x40008000

08002d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b09e      	sub	sp, #120	@ 0x78
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2254      	movs	r2, #84	@ 0x54
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f007 fff7 	bl	800ad7c <memset>
  if(uartHandle->Instance==LPUART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <HAL_UART_MspInit+0xa8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d136      	bne.n	8002e06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 ffa9 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002db0:	f7fe ff48 	bl	8001c44 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002db4:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	4a16      	ldr	r2, [pc, #88]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	4a10      	ldr	r2, [pc, #64]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <HAL_UART_MspInit+0xac>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002de4:	230c      	movs	r3, #12
 8002de6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002df4:	230c      	movs	r3, #12
 8002df6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e02:	f002 f935 	bl	8005070 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002e06:	bf00      	nop
 8002e08:	3778      	adds	r7, #120	@ 0x78
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40008000 	.word	0x40008000
 8002e14:	40021000 	.word	0x40021000

08002e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e18:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e1c:	f7ff fbf0 	bl	8002600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e20:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e22:	490d      	ldr	r1, [pc, #52]	@ (8002e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e24:	4a0d      	ldr	r2, [pc, #52]	@ (8002e5c <LoopForever+0xe>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e38:	4c0a      	ldr	r4, [pc, #40]	@ (8002e64 <LoopForever+0x16>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e46:	f007 ffa7 	bl	800ad98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e4a:	f7fe fe2b 	bl	8001aa4 <main>

08002e4e <LoopForever>:

LoopForever:
    b LoopForever
 8002e4e:	e7fe      	b.n	8002e4e <LoopForever>
  ldr   r0, =_estack
 8002e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002e5c:	0800b758 	.word	0x0800b758
  ldr r2, =_sbss
 8002e60:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002e64:	20000a14 	.word	0x20000a14

08002e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC1_2_IRQHandler>

08002e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f001 fdd3 	bl	8004a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 f80e 	bl	8002e9c <HAL_InitTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	71fb      	strb	r3, [r7, #7]
 8002e8a:	e001      	b.n	8002e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e8c:	f7ff faca 	bl	8002424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e90:	79fb      	ldrb	r3, [r7, #7]

}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <HAL_InitTick+0x68>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002eb0:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_InitTick+0x6c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <HAL_InitTick+0x68>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fdde 	bl	8004a86 <HAL_SYSTICK_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	d809      	bhi.n	8002eea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295
 8002ede:	f001 fdaa 	bl	8004a36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <HAL_InitTick+0x70>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e007      	b.n	8002efa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e004      	b.n	8002efa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e001      	b.n	8002efa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000044 	.word	0x20000044
 8002f08:	2000003c 	.word	0x2000003c
 8002f0c:	20000040 	.word	0x20000040

08002f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_IncTick+0x1c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_IncTick+0x20>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a03      	ldr	r2, [pc, #12]	@ (8002f2c <HAL_IncTick+0x1c>)
 8002f20:	6013      	str	r3, [r2, #0]
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	200008c8 	.word	0x200008c8
 8002f30:	20000044 	.word	0x20000044

08002f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return uwTick;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_GetTick+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200008c8 	.word	0x200008c8

08002f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff ffee 	bl	8002f34 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d004      	beq.n	8002f70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_Delay+0x40>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f70:	bf00      	nop
 8002f72:	f7ff ffdf 	bl	8002f34 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d8f7      	bhi.n	8002f72 <HAL_Delay+0x26>
  {
  }
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000044 	.word	0x20000044

08002f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3360      	adds	r3, #96	@ 0x60
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <LL_ADC_SetOffset+0x44>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	03fff000 	.word	0x03fff000

08003040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3360      	adds	r3, #96	@ 0x60
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3360      	adds	r3, #96	@ 0x60
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3360      	adds	r3, #96	@ 0x60
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3360      	adds	r3, #96	@ 0x60
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	615a      	str	r2, [r3, #20]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3330      	adds	r3, #48	@ 0x30
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	211f      	movs	r1, #31
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	f003 011f 	and.w	r1, r3, #31
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3314      	adds	r3, #20
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0e5b      	lsrs	r3, r3, #25
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	0d1b      	lsrs	r3, r3, #20
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2107      	movs	r1, #7
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0d1b      	lsrs	r3, r3, #20
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	431a      	orrs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0318 	and.w	r3, r3, #24
 800322a:	4908      	ldr	r1, [pc, #32]	@ (800324c <LL_ADC_SetChannelSingleDiff+0x44>)
 800322c:	40d9      	lsrs	r1, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	400b      	ands	r3, r1
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	0007ffff 	.word	0x0007ffff

08003250 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 031f 	and.w	r3, r3, #31
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6093      	str	r3, [r2, #8]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003344:	f043 0202 	orr.w	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d101      	bne.n	8003396 <LL_ADC_IsDisableOngoing+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_IsDisableOngoing+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b8:	f043 0204 	orr.w	r2, r3, #4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d101      	bne.n	80033e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d101      	bne.n	800340a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1a9      	b.n	8003786 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fb1b 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff19 	bl	8003290 <LL_ADC_IsDeepPowerDownEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff feff 	bl	800326c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff34 	bl	80032e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff18 	bl	80032b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003488:	4b9c      	ldr	r3, [pc, #624]	@ (80036fc <HAL_ADC_Init+0x2e4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	4a9c      	ldr	r2, [pc, #624]	@ (8003700 <HAL_ADC_Init+0x2e8>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff16 	bl	80032e0 <LL_ADC_IsInternalRegulatorEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f043 0210 	orr.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff76 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80034e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8142 	bne.w	8003774 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 813e 	bne.w	8003774 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff23 	bl	8003358 <LL_ADC_IsEnabled>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d141      	bne.n	800359c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003520:	d004      	beq.n	800352c <HAL_ADC_Init+0x114>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a77      	ldr	r2, [pc, #476]	@ (8003704 <HAL_ADC_Init+0x2ec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10f      	bne.n	800354c <HAL_ADC_Init+0x134>
 800352c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003530:	f7ff ff12 	bl	8003358 <LL_ADC_IsEnabled>
 8003534:	4604      	mov	r4, r0
 8003536:	4873      	ldr	r0, [pc, #460]	@ (8003704 <HAL_ADC_Init+0x2ec>)
 8003538:	f7ff ff0e 	bl	8003358 <LL_ADC_IsEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	4323      	orrs	r3, r4
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e012      	b.n	8003572 <HAL_ADC_Init+0x15a>
 800354c:	486e      	ldr	r0, [pc, #440]	@ (8003708 <HAL_ADC_Init+0x2f0>)
 800354e:	f7ff ff03 	bl	8003358 <LL_ADC_IsEnabled>
 8003552:	4604      	mov	r4, r0
 8003554:	486d      	ldr	r0, [pc, #436]	@ (800370c <HAL_ADC_Init+0x2f4>)
 8003556:	f7ff feff 	bl	8003358 <LL_ADC_IsEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	431c      	orrs	r4, r3
 800355e:	486c      	ldr	r0, [pc, #432]	@ (8003710 <HAL_ADC_Init+0x2f8>)
 8003560:	f7ff fefa 	bl	8003358 <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	4323      	orrs	r3, r4
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357e:	d004      	beq.n	800358a <HAL_ADC_Init+0x172>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5f      	ldr	r2, [pc, #380]	@ (8003704 <HAL_ADC_Init+0x2ec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_ADC_Init+0x176>
 800358a:	4a62      	ldr	r2, [pc, #392]	@ (8003714 <HAL_ADC_Init+0x2fc>)
 800358c:	e000      	b.n	8003590 <HAL_ADC_Init+0x178>
 800358e:	4a62      	ldr	r2, [pc, #392]	@ (8003718 <HAL_ADC_Init+0x300>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7ff fcfa 	bl	8002f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7f5b      	ldrb	r3, [r3, #29]
 80035a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80035ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80035b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d106      	bne.n	80035d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	3b01      	subs	r3, #1
 80035d0:	045b      	lsls	r3, r3, #17
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b48      	ldr	r3, [pc, #288]	@ (800371c <HAL_ADC_Init+0x304>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	430b      	orrs	r3, r1
 8003606:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fee5 	bl	80033f2 <LL_ADC_INJ_IsConversionOngoing>
 8003628:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d17f      	bne.n	8003730 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d17c      	bne.n	8003730 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800363a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003642:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003652:	f023 0302 	bic.w	r3, r3, #2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	430b      	orrs	r3, r1
 800365e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d017      	beq.n	8003698 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003676:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003680:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6911      	ldr	r1, [r2, #16]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003696:	e013      	b.n	80036c0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80036a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80036b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d12a      	bne.n	8003720 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036ec:	430a      	orrs	r2, r1
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	e019      	b.n	8003730 <HAL_ADC_Init+0x318>
 80036fc:	2000003c 	.word	0x2000003c
 8003700:	053e2d63 	.word	0x053e2d63
 8003704:	50000100 	.word	0x50000100
 8003708:	50000400 	.word	0x50000400
 800370c:	50000500 	.word	0x50000500
 8003710:	50000600 	.word	0x50000600
 8003714:	50000300 	.word	0x50000300
 8003718:	50000700 	.word	0x50000700
 800371c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10c      	bne.n	8003752 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f023 010f 	bic.w	r1, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	1e5a      	subs	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003750:	e007      	b.n	8003762 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003772:	e007      	b.n	8003784 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003784:	7ffb      	ldrb	r3, [r7, #31]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	@ 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop

08003790 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADC_Start_DMA+0x20>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003914 <HAL_ADC_Start_DMA+0x184>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_Start_DMA+0x24>
 80037b0:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_ADC_Start_DMA+0x188>)
 80037b2:	e000      	b.n	80037b6 <HAL_ADC_Start_DMA+0x26>
 80037b4:	4b59      	ldr	r3, [pc, #356]	@ (800391c <HAL_ADC_Start_DMA+0x18c>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fd4a 	bl	8003250 <LL_ADC_GetMultimode>
 80037bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe02 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 809b 	bne.w	8003906 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_ADC_Start_DMA+0x4e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e096      	b.n	800390c <HAL_ADC_Start_DMA+0x17c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003920 <HAL_ADC_Start_DMA+0x190>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d008      	beq.n	8003802 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d002      	beq.n	8003802 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d17a      	bne.n	80038f8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fcf6 	bl	80041f4 <ADC_Enable>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d16d      	bne.n	80038ee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3a      	ldr	r2, [pc, #232]	@ (8003914 <HAL_ADC_Start_DMA+0x184>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_ADC_Start_DMA+0xb4>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3b      	ldr	r2, [pc, #236]	@ (8003924 <HAL_ADC_Start_DMA+0x194>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_ADC_Start_DMA+0xb0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e003      	b.n	8003848 <HAL_ADC_Start_DMA+0xb8>
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_ADC_Start_DMA+0x198>)
 8003842:	e001      	b.n	8003848 <HAL_ADC_Start_DMA+0xb8>
 8003844:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4293      	cmp	r3, r2
 800384e:	d002      	beq.n	8003856 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f023 0206 	bic.w	r2, r3, #6
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
 800387a:	e002      	b.n	8003882 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	4a29      	ldr	r2, [pc, #164]	@ (800392c <HAL_ADC_Start_DMA+0x19c>)
 8003888:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	4a28      	ldr	r2, [pc, #160]	@ (8003930 <HAL_ADC_Start_DMA+0x1a0>)
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <HAL_ADC_Start_DMA+0x1a4>)
 8003898:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	221c      	movs	r2, #28
 80038a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0210 	orr.w	r2, r2, #16
 80038b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3340      	adds	r3, #64	@ 0x40
 80038d4:	4619      	mov	r1, r3
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f001 f989 	bl	8004bf0 <HAL_DMA_Start_IT>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fd5c 	bl	80033a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038ec:	e00d      	b.n	800390a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80038f6:	e008      	b.n	800390a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003904:	e001      	b.n	800390a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	50000100 	.word	0x50000100
 8003918:	50000300 	.word	0x50000300
 800391c:	50000700 	.word	0x50000700
 8003920:	50000600 	.word	0x50000600
 8003924:	50000500 	.word	0x50000500
 8003928:	50000400 	.word	0x50000400
 800392c:	080043df 	.word	0x080043df
 8003930:	080044b7 	.word	0x080044b7
 8003934:	080044d3 	.word	0x080044d3

08003938 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b0b6      	sub	sp, #216	@ 0xd8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x24>
 8003992:	2302      	movs	r3, #2
 8003994:	f000 bc13 	b.w	80041be <HAL_ADC_ConfigChannel+0x84a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd11 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 83f3 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7ff fbcb 	bl	800315a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fcff 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80039ce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fd0b 	bl	80033f2 <LL_ADC_INJ_IsConversionOngoing>
 80039dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 81d9 	bne.w	8003d9c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 81d4 	bne.w	8003d9c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039fc:	d10f      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7ff fbd2 	bl	80031b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fb79 	bl	800310e <LL_ADC_SetSamplingTimeCommonConfig>
 8003a1c:	e00e      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f7ff fbc1 	bl	80031b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fb69 	bl	800310e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d022      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6919      	ldr	r1, [r3, #16]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a6e:	f7ff fac3 	bl	8002ff8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6919      	ldr	r1, [r3, #16]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7ff fb0f 	bl	80030a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x126>
 8003a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a98:	e000      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x128>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f7ff fb1b 	bl	80030d8 <LL_ADC_SetOffsetSaturation>
 8003aa2:	e17b      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fac8 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x15c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fabd 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	f003 021f 	and.w	r2, r3, #31
 8003ace:	e01e      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x19a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fab2 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003af2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e004      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x1b2>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	e018      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x1e4>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e004      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d106      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fa81 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fa65 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x222>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fa5a 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	0e9b      	lsrs	r3, r3, #26
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	e01e      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x260>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fa4f 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003bb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e004      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x278>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0e9b      	lsrs	r3, r3, #26
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	e018      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x2aa>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e004      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d106      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fa1e 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2102      	movs	r1, #2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa02 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x2e8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff f9f7 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	f003 021f 	and.w	r2, r3, #31
 8003c5a:	e01e      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x326>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff f9ec 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e004      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x33e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	e016      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x36c>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	e004      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d106      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2102      	movs	r1, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f9bd 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff f9a1 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x3aa>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f996 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	0e9b      	lsrs	r3, r3, #26
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	e017      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x3da>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2103      	movs	r1, #3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff f98b 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d38:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x3f2>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	e011      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x416>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d106      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2103      	movs	r1, #3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f968 	bl	800306c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fad9 	bl	8003358 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 813d 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7ff fa24 	bl	8003208 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4aa2      	ldr	r2, [pc, #648]	@ (8004050 <HAL_ADC_ConfigChannel+0x6dc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f040 812e 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x480>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	3301      	adds	r3, #1
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e019      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x4b4>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e003      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2b09      	cmp	r3, #9
 8003e20:	bf94      	ite	ls
 8003e22:	2301      	movls	r3, #1
 8003e24:	2300      	movhi	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d079      	beq.n	8003f20 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x4d4>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e46:	e015      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x500>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x520>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	e017      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x550>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x576>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	051b      	lsls	r3, r3, #20
 8003ee8:	e018      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x5a8>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	e07e      	b.n	800401e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x5c8>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3a:	e015      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x5f4>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	069b      	lsls	r3, r3, #26
 8003f64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x614>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	e017      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x644>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	61fb      	str	r3, [r7, #28]
  return result;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x670>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	3b1e      	subs	r3, #30
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	e01b      	b.n	800401c <HAL_ADC_ConfigChannel+0x6a8>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	613b      	str	r3, [r7, #16]
  return result;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f003 021f 	and.w	r2, r3, #31
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3b1e      	subs	r3, #30
 8004016:	051b      	lsls	r3, r3, #20
 8004018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800401c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004022:	4619      	mov	r1, r3
 8004024:	f7ff f8c5 	bl	80031b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_ADC_ConfigChannel+0x6e0>)
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80be 	beq.w	80041b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800403e:	d004      	beq.n	800404a <HAL_ADC_ConfigChannel+0x6d6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <HAL_ADC_ConfigChannel+0x6e4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10a      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x6ec>
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <HAL_ADC_ConfigChannel+0x6e8>)
 800404c:	e009      	b.n	8004062 <HAL_ADC_ConfigChannel+0x6ee>
 800404e:	bf00      	nop
 8004050:	407f0000 	.word	0x407f0000
 8004054:	80080000 	.word	0x80080000
 8004058:	50000100 	.word	0x50000100
 800405c:	50000300 	.word	0x50000300
 8004060:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_ADC_ConfigChannel+0x854>)
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe ffba 	bl	8002fdc <LL_ADC_GetCommonPathInternalCh>
 8004068:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a56      	ldr	r2, [pc, #344]	@ (80041cc <HAL_ADC_ConfigChannel+0x858>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x70c>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a55      	ldr	r2, [pc, #340]	@ (80041d0 <HAL_ADC_ConfigChannel+0x85c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d13a      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d134      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004094:	d005      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x72e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a4e      	ldr	r2, [pc, #312]	@ (80041d4 <HAL_ADC_ConfigChannel+0x860>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 8085 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040aa:	d004      	beq.n	80040b6 <HAL_ADC_ConfigChannel+0x742>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a49      	ldr	r2, [pc, #292]	@ (80041d8 <HAL_ADC_ConfigChannel+0x864>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x746>
 80040b6:	4a49      	ldr	r2, [pc, #292]	@ (80041dc <HAL_ADC_ConfigChannel+0x868>)
 80040b8:	e000      	b.n	80040bc <HAL_ADC_ConfigChannel+0x748>
 80040ba:	4a43      	ldr	r2, [pc, #268]	@ (80041c8 <HAL_ADC_ConfigChannel+0x854>)
 80040bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7fe ff75 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040cc:	4b44      	ldr	r3, [pc, #272]	@ (80041e0 <HAL_ADC_ConfigChannel+0x86c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	099b      	lsrs	r3, r3, #6
 80040d2:	4a44      	ldr	r2, [pc, #272]	@ (80041e4 <HAL_ADC_ConfigChannel+0x870>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040e6:	e002      	b.n	80040ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040f4:	e05a      	b.n	80041ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3b      	ldr	r2, [pc, #236]	@ (80041e8 <HAL_ADC_ConfigChannel+0x874>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d125      	bne.n	800414c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11f      	bne.n	800414c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <HAL_ADC_ConfigChannel+0x864>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d104      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x7ac>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a34      	ldr	r2, [pc, #208]	@ (80041ec <HAL_ADC_ConfigChannel+0x878>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d047      	beq.n	80041b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004128:	d004      	beq.n	8004134 <HAL_ADC_ConfigChannel+0x7c0>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <HAL_ADC_ConfigChannel+0x864>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x7c4>
 8004134:	4a29      	ldr	r2, [pc, #164]	@ (80041dc <HAL_ADC_ConfigChannel+0x868>)
 8004136:	e000      	b.n	800413a <HAL_ADC_ConfigChannel+0x7c6>
 8004138:	4a23      	ldr	r2, [pc, #140]	@ (80041c8 <HAL_ADC_ConfigChannel+0x854>)
 800413a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe ff36 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800414a:	e031      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_ADC_ConfigChannel+0x87c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12d      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800415a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d127      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <HAL_ADC_ConfigChannel+0x864>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADC_ConfigChannel+0x80c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_ADC_ConfigChannel+0x864>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x810>
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <HAL_ADC_ConfigChannel+0x868>)
 8004182:	e000      	b.n	8004186 <HAL_ADC_ConfigChannel+0x812>
 8004184:	4a10      	ldr	r2, [pc, #64]	@ (80041c8 <HAL_ADC_ConfigChannel+0x854>)
 8004186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800418a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7fe ff10 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
 8004196:	e00c      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80041aa:	e002      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041be:	4618      	mov	r0, r3
 80041c0:	37d8      	adds	r7, #216	@ 0xd8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	50000700 	.word	0x50000700
 80041cc:	c3210000 	.word	0xc3210000
 80041d0:	90c00010 	.word	0x90c00010
 80041d4:	50000600 	.word	0x50000600
 80041d8:	50000100 	.word	0x50000100
 80041dc:	50000300 	.word	0x50000300
 80041e0:	2000003c 	.word	0x2000003c
 80041e4:	053e2d63 	.word	0x053e2d63
 80041e8:	c7520000 	.word	0xc7520000
 80041ec:	50000500 	.word	0x50000500
 80041f0:	cb840000 	.word	0xcb840000

080041f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff f8a7 	bl	8003358 <LL_ADC_IsEnabled>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d176      	bne.n	80042fe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <ADC_Enable+0x114>)
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	f043 0210 	orr.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e062      	b.n	8004300 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f862 	bl	8003308 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800424c:	d004      	beq.n	8004258 <ADC_Enable+0x64>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2e      	ldr	r2, [pc, #184]	@ (800430c <ADC_Enable+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <ADC_Enable+0x68>
 8004258:	4b2d      	ldr	r3, [pc, #180]	@ (8004310 <ADC_Enable+0x11c>)
 800425a:	e000      	b.n	800425e <ADC_Enable+0x6a>
 800425c:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <ADC_Enable+0x120>)
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe febc 	bl	8002fdc <LL_ADC_GetCommonPathInternalCh>
 8004264:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800426a:	2b00      	cmp	r3, #0
 800426c:	d013      	beq.n	8004296 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800426e:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <ADC_Enable+0x124>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	4a29      	ldr	r2, [pc, #164]	@ (800431c <ADC_Enable+0x128>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004288:	e002      	b.n	8004290 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3b01      	subs	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f9      	bne.n	800428a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004296:	f7fe fe4d 	bl	8002f34 <HAL_GetTick>
 800429a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800429c:	e028      	b.n	80042f0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f858 	bl	8003358 <LL_ADC_IsEnabled>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f828 	bl	8003308 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042b8:	f7fe fe3c 	bl	8002f34 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d914      	bls.n	80042f0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d00d      	beq.n	80042f0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d8:	f043 0210 	orr.w	r2, r3, #16
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d1cf      	bne.n	800429e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	8000003f 	.word	0x8000003f
 800430c:	50000100 	.word	0x50000100
 8004310:	50000300 	.word	0x50000300
 8004314:	50000700 	.word	0x50000700
 8004318:	2000003c 	.word	0x2000003c
 800431c:	053e2d63 	.word	0x053e2d63

08004320 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff f826 	bl	800337e <LL_ADC_IsDisableOngoing>
 8004332:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f80d 	bl	8003358 <LL_ADC_IsEnabled>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d047      	beq.n	80043d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d144      	bne.n	80043d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030d 	and.w	r3, r3, #13
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10c      	bne.n	8004372 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe ffe7 	bl	8003330 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2203      	movs	r2, #3
 8004368:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800436a:	f7fe fde3 	bl	8002f34 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004370:	e029      	b.n	80043c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e023      	b.n	80043d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800438e:	f7fe fdd1 	bl	8002f34 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d914      	bls.n	80043c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f043 0210 	orr.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ba:	f043 0201 	orr.w	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e007      	b.n	80043d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1dc      	bne.n	800438e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d14b      	bne.n	8004490 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fe8c 	bl	8003134 <LL_ADC_REG_IsTriggerSourceSWStart>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d032      	beq.n	8004488 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d12b      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11f      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444c:	f043 0201 	orr.w	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004454:	e018      	b.n	8004488 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff fa55 	bl	8003938 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800448e:	e00e      	b.n	80044ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fa5f 	bl	8003960 <HAL_ADC_ErrorCallback>
}
 80044a2:	e004      	b.n	80044ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff fa41 	bl	800394c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f0:	f043 0204 	orr.w	r2, r3, #4
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fa31 	bl	8003960 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <LL_ADC_IsEnabled>:
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <LL_ADC_IsEnabled+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_ADC_IsEnabled+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_StartCalibration>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800453e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004548:	4313      	orrs	r3, r2
 800454a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_ADC_IsCalibrationOnGoing>:
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800456e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004572:	d101      	bne.n	8004578 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_ADC_REG_IsConversionOngoing>:
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d101      	bne.n	800459e <LL_ADC_REG_IsConversionOngoing+0x18>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e04d      	b.n	8004664 <HAL_ADCEx_Calibration_Start+0xb8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fea5 	bl	8004320 <ADC_Disable>
 80045d6:	4603      	mov	r3, r0
 80045d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d136      	bne.n	800464e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045e8:	f023 0302 	bic.w	r3, r3, #2
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff96 	bl	800452c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004600:	e014      	b.n	800462c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <HAL_ADCEx_Calibration_Start+0xc0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d90d      	bls.n	800462c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004614:	f023 0312 	bic.w	r3, r3, #18
 8004618:	f043 0210 	orr.w	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01b      	b.n	8004664 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff94 	bl	800455e <LL_ADC_IsCalibrationOnGoing>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e2      	bne.n	8004602 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800464c:	e005      	b.n	800465a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0004de01 	.word	0x0004de01

08004670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b0a1      	sub	sp, #132	@ 0x84
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0e7      	b.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004696:	2300      	movs	r3, #0
 8004698:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800469a:	2300      	movs	r3, #0
 800469c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a6:	d102      	bne.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	e009      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6e      	ldr	r2, [pc, #440]	@ (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d102      	bne.n	80046be <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	e001      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0be      	b.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff4f 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 80046e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff49 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 80a0 	bne.w	800483c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 809c 	bne.w	800483c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470c:	d004      	beq.n	8004718 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a55      	ldr	r2, [pc, #340]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004718:	4b56      	ldr	r3, [pc, #344]	@ (8004874 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800471a:	e000      	b.n	800471e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800471c:	4b56      	ldr	r3, [pc, #344]	@ (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800471e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d04b      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800473a:	035b      	lsls	r3, r3, #13
 800473c:	430b      	orrs	r3, r1
 800473e:	431a      	orrs	r2, r3
 8004740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004742:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800474c:	d004      	beq.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a45      	ldr	r2, [pc, #276]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10f      	bne.n	8004778 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004758:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800475c:	f7ff fed3 	bl	8004506 <LL_ADC_IsEnabled>
 8004760:	4604      	mov	r4, r0
 8004762:	4841      	ldr	r0, [pc, #260]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004764:	f7ff fecf 	bl	8004506 <LL_ADC_IsEnabled>
 8004768:	4603      	mov	r3, r0
 800476a:	4323      	orrs	r3, r4
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e012      	b.n	800479e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004778:	483c      	ldr	r0, [pc, #240]	@ (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800477a:	f7ff fec4 	bl	8004506 <LL_ADC_IsEnabled>
 800477e:	4604      	mov	r4, r0
 8004780:	483b      	ldr	r0, [pc, #236]	@ (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004782:	f7ff fec0 	bl	8004506 <LL_ADC_IsEnabled>
 8004786:	4603      	mov	r3, r0
 8004788:	431c      	orrs	r4, r3
 800478a:	483c      	ldr	r0, [pc, #240]	@ (800487c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800478c:	f7ff febb 	bl	8004506 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	4323      	orrs	r3, r4
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d056      	beq.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6811      	ldr	r1, [r2, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6892      	ldr	r2, [r2, #8]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	431a      	orrs	r2, r3
 80047ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047bc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047be:	e047      	b.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d4:	d004      	beq.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10f      	bne.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047e4:	f7ff fe8f 	bl	8004506 <LL_ADC_IsEnabled>
 80047e8:	4604      	mov	r4, r0
 80047ea:	481f      	ldr	r0, [pc, #124]	@ (8004868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047ec:	f7ff fe8b 	bl	8004506 <LL_ADC_IsEnabled>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4323      	orrs	r3, r4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e012      	b.n	8004826 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004800:	481a      	ldr	r0, [pc, #104]	@ (800486c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004802:	f7ff fe80 	bl	8004506 <LL_ADC_IsEnabled>
 8004806:	4604      	mov	r4, r0
 8004808:	4819      	ldr	r0, [pc, #100]	@ (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800480a:	f7ff fe7c 	bl	8004506 <LL_ADC_IsEnabled>
 800480e:	4603      	mov	r3, r0
 8004810:	431c      	orrs	r4, r3
 8004812:	481a      	ldr	r0, [pc, #104]	@ (800487c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004814:	f7ff fe77 	bl	8004506 <LL_ADC_IsEnabled>
 8004818:	4603      	mov	r3, r0
 800481a:	4323      	orrs	r3, r4
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d012      	beq.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800482a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004832:	f023 030f 	bic.w	r3, r3, #15
 8004836:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004838:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800483a:	e009      	b.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800484e:	e000      	b.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004850:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800485a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800485e:	4618      	mov	r0, r3
 8004860:	3784      	adds	r7, #132	@ 0x84
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	50000100 	.word	0x50000100
 800486c:	50000400 	.word	0x50000400
 8004870:	50000500 	.word	0x50000500
 8004874:	50000300 	.word	0x50000300
 8004878:	50000700 	.word	0x50000700
 800487c:	50000600 	.word	0x50000600

08004880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800489c:	4013      	ands	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048b2:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <__NVIC_SetPriorityGrouping+0x44>)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	60d3      	str	r3, [r2, #12]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <__NVIC_GetPriorityGrouping+0x18>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0307 	and.w	r3, r3, #7
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db0b      	blt.n	800490e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	4907      	ldr	r1, [pc, #28]	@ (800491c <__NVIC_EnableIRQ+0x38>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2001      	movs	r0, #1
 8004906:	fa00 f202 	lsl.w	r2, r0, r2
 800490a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000e100 	.word	0xe000e100

08004920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db0a      	blt.n	800494a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	490c      	ldr	r1, [pc, #48]	@ (800496c <__NVIC_SetPriority+0x4c>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	440b      	add	r3, r1
 8004944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004948:	e00a      	b.n	8004960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	4908      	ldr	r1, [pc, #32]	@ (8004970 <__NVIC_SetPriority+0x50>)
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3b04      	subs	r3, #4
 8004958:	0112      	lsls	r2, r2, #4
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	440b      	add	r3, r1
 800495e:	761a      	strb	r2, [r3, #24]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000e100 	.word	0xe000e100
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	@ 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f1c3 0307 	rsb	r3, r3, #7
 800498e:	2b04      	cmp	r3, #4
 8004990:	bf28      	it	cs
 8004992:	2304      	movcs	r3, #4
 8004994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3304      	adds	r3, #4
 800499a:	2b06      	cmp	r3, #6
 800499c:	d902      	bls.n	80049a4 <NVIC_EncodePriority+0x30>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3b03      	subs	r3, #3
 80049a2:	e000      	b.n	80049a6 <NVIC_EncodePriority+0x32>
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049bc:	f04f 31ff 	mov.w	r1, #4294967295
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	43d9      	mvns	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	4313      	orrs	r3, r2
         );
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	@ 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049ec:	d301      	bcc.n	80049f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00f      	b.n	8004a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <SysTick_Config+0x40>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049fa:	210f      	movs	r1, #15
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	f7ff ff8e 	bl	8004920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <SysTick_Config+0x40>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <SysTick_Config+0x40>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000e010 	.word	0xe000e010

08004a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff29 	bl	8004880 <__NVIC_SetPriorityGrouping>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a44:	f7ff ff40 	bl	80048c8 <__NVIC_GetPriorityGrouping>
 8004a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff ff90 	bl	8004974 <NVIC_EncodePriority>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff5f 	bl	8004920 <__NVIC_SetPriority>
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff33 	bl	80048e4 <__NVIC_EnableIRQ>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ffa4 	bl	80049dc <SysTick_Config>
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e08d      	b.n	8004bce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_DMA_Init+0x138>)
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d80f      	bhi.n	8004ade <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b45      	ldr	r3, [pc, #276]	@ (8004bdc <HAL_DMA_Init+0x13c>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a45      	ldr	r2, [pc, #276]	@ (8004be0 <HAL_DMA_Init+0x140>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	009a      	lsls	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a42      	ldr	r2, [pc, #264]	@ (8004be4 <HAL_DMA_Init+0x144>)
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8004adc:	e00e      	b.n	8004afc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b40      	ldr	r3, [pc, #256]	@ (8004be8 <HAL_DMA_Init+0x148>)
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8004be0 <HAL_DMA_Init+0x140>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	009a      	lsls	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bec <HAL_DMA_Init+0x14c>)
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa2c 	bl	8004fac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5c:	d102      	bne.n	8004b64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <HAL_DMA_Init+0x104>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d80c      	bhi.n	8004ba4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa4c 	bl	8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	e008      	b.n	8004bb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40020407 	.word	0x40020407
 8004bdc:	bffdfff8 	.word	0xbffdfff8
 8004be0:	cccccccd 	.word	0xcccccccd
 8004be4:	40020000 	.word	0x40020000
 8004be8:	bffdfbf8 	.word	0xbffdfbf8
 8004bec:	40020400 	.word	0x40020400

08004bf0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_DMA_Start_IT+0x20>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e066      	b.n	8004cde <HAL_DMA_Start_IT+0xee>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d155      	bne.n	8004cd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f970 	bl	8004f2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 020e 	orr.w	r2, r2, #14
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e00f      	b.n	8004c88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 020a 	orr.w	r2, r2, #10
 8004c86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e005      	b.n	8004cdc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d00d      	beq.n	8004d1a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e047      	b.n	8004daa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 020e 	bic.w	r2, r2, #14
 8004d28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f003 021f 	and.w	r2, r3, #31
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
    }
  }
  return status;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d026      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x7a>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d021      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0c:	f003 021f 	and.w	r2, r3, #31
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	2104      	movs	r1, #4
 8004e16:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d071      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e2c:	e06c      	b.n	8004f08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2202      	movs	r2, #2
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d029      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 020a 	bic.w	r2, r2, #10
 8004e68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f003 021f 	and.w	r2, r3, #31
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	2102      	movs	r1, #2
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d038      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e9e:	e033      	b.n	8004f08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02a      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d025      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 020e 	bic.w	r2, r2, #14
 8004ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	f003 021f 	and.w	r2, r3, #31
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
}
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f20:	b2db      	uxtb	r3, r3
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f44:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	2101      	movs	r1, #1
 8004f66:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d108      	bne.n	8004f8e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f8c:	e007      	b.n	8004f9e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b16      	ldr	r3, [pc, #88]	@ (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d802      	bhi.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e001      	b.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004fc6:	4b15      	ldr	r3, [pc, #84]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004fc8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3b08      	subs	r3, #8
 8004fd6:	4a12      	ldr	r2, [pc, #72]	@ (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2201      	movs	r2, #1
 8005000:	409a      	lsls	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40020407 	.word	0x40020407
 8005018:	40020800 	.word	0x40020800
 800501c:	40020820 	.word	0x40020820
 8005020:	cccccccd 	.word	0xcccccccd
 8005024:	40020880 	.word	0x40020880

08005028 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a08      	ldr	r2, [pc, #32]	@ (800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800504a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b01      	subs	r3, #1
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	1000823f 	.word	0x1000823f
 800506c:	40020940 	.word	0x40020940

08005070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800507e:	e15a      	b.n	8005336 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2101      	movs	r1, #1
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 814c 	beq.w	8005330 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d005      	beq.n	80050b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d130      	bne.n	8005112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	2203      	movs	r2, #3
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050e6:	2201      	movs	r2, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 0201 	and.w	r2, r3, #1
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b03      	cmp	r3, #3
 800511c:	d017      	beq.n	800514e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d123      	bne.n	80051a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	08da      	lsrs	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3208      	adds	r2, #8
 8005162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	220f      	movs	r2, #15
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4013      	ands	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	08da      	lsrs	r2, r3, #3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3208      	adds	r2, #8
 800519c:	6939      	ldr	r1, [r7, #16]
 800519e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	2203      	movs	r2, #3
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 0203 	and.w	r2, r3, #3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80a6 	beq.w	8005330 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005354 <HAL_GPIO_Init+0x2e4>)
 80051e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005354 <HAL_GPIO_Init+0x2e4>)
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80051f0:	4b58      	ldr	r3, [pc, #352]	@ (8005354 <HAL_GPIO_Init+0x2e4>)
 80051f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fc:	4a56      	ldr	r2, [pc, #344]	@ (8005358 <HAL_GPIO_Init+0x2e8>)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	3302      	adds	r3, #2
 8005204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	220f      	movs	r2, #15
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4013      	ands	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005226:	d01f      	beq.n	8005268 <HAL_GPIO_Init+0x1f8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a4c      	ldr	r2, [pc, #304]	@ (800535c <HAL_GPIO_Init+0x2ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d019      	beq.n	8005264 <HAL_GPIO_Init+0x1f4>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a4b      	ldr	r2, [pc, #300]	@ (8005360 <HAL_GPIO_Init+0x2f0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_GPIO_Init+0x1f0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a4a      	ldr	r2, [pc, #296]	@ (8005364 <HAL_GPIO_Init+0x2f4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00d      	beq.n	800525c <HAL_GPIO_Init+0x1ec>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a49      	ldr	r2, [pc, #292]	@ (8005368 <HAL_GPIO_Init+0x2f8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <HAL_GPIO_Init+0x1e8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a48      	ldr	r2, [pc, #288]	@ (800536c <HAL_GPIO_Init+0x2fc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_GPIO_Init+0x1e4>
 8005250:	2305      	movs	r3, #5
 8005252:	e00a      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 8005254:	2306      	movs	r3, #6
 8005256:	e008      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 8005258:	2304      	movs	r3, #4
 800525a:	e006      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 800525c:	2303      	movs	r3, #3
 800525e:	e004      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 8005260:	2302      	movs	r3, #2
 8005262:	e002      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_GPIO_Init+0x1fa>
 8005268:	2300      	movs	r3, #0
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	f002 0203 	and.w	r2, r2, #3
 8005270:	0092      	lsls	r2, r2, #2
 8005272:	4093      	lsls	r3, r2
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800527a:	4937      	ldr	r1, [pc, #220]	@ (8005358 <HAL_GPIO_Init+0x2e8>)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	3302      	adds	r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005288:	4b39      	ldr	r3, [pc, #228]	@ (8005370 <HAL_GPIO_Init+0x300>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ac:	4a30      	ldr	r2, [pc, #192]	@ (8005370 <HAL_GPIO_Init+0x300>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005370 <HAL_GPIO_Init+0x300>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052d6:	4a26      	ldr	r2, [pc, #152]	@ (8005370 <HAL_GPIO_Init+0x300>)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052dc:	4b24      	ldr	r3, [pc, #144]	@ (8005370 <HAL_GPIO_Init+0x300>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005300:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <HAL_GPIO_Init+0x300>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005306:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <HAL_GPIO_Init+0x300>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	43db      	mvns	r3, r3
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800532a:	4a11      	ldr	r2, [pc, #68]	@ (8005370 <HAL_GPIO_Init+0x300>)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3301      	adds	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f ae9d 	bne.w	8005080 <HAL_GPIO_Init+0x10>
  }
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40021000 	.word	0x40021000
 8005358:	40010000 	.word	0x40010000
 800535c:	48000400 	.word	0x48000400
 8005360:	48000800 	.word	0x48000800
 8005364:	48000c00 	.word	0x48000c00
 8005368:	48001000 	.word	0x48001000
 800536c:	48001400 	.word	0x48001400
 8005370:	40010400 	.word	0x40010400

08005374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005384:	787b      	ldrb	r3, [r7, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005390:	e002      	b.n	8005398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053ae:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ba:	4a05      	ldr	r2, [pc, #20]	@ (80053d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f806 	bl	80053d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40010400 	.word	0x40010400

080053d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e08d      	b.n	8005518 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fb ff8f 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2224      	movs	r2, #36	@ 0x24
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800543a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	e006      	b.n	8005472 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005470:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d108      	bne.n	800548c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e007      	b.n	800549c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800549a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69d9      	ldr	r1, [r3, #28]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	461a      	mov	r2, r3
 800552c:	460b      	mov	r3, r1
 800552e:	817b      	strh	r3, [r7, #10]
 8005530:	4613      	mov	r3, r2
 8005532:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 80ef 	bne.w	8005724 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d101      	bne.n	800555a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
 8005558:	e0e5      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005564:	2302      	movs	r3, #2
 8005566:	e0de      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2221      	movs	r2, #33	@ 0x21
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2210      	movs	r2, #16
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	893a      	ldrh	r2, [r7, #8]
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a66      	ldr	r2, [pc, #408]	@ (8005730 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a66      	ldr	r2, [pc, #408]	@ (8005734 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2bff      	cmp	r3, #255	@ 0xff
 80055a6:	d906      	bls.n	80055b6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	22ff      	movs	r2, #255	@ 0xff
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e007      	b.n	80055c6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055c4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01a      	beq.n	8005604 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	d074      	beq.n	80056f6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	4a47      	ldr	r2, [pc, #284]	@ (8005738 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800561a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	4a46      	ldr	r2, [pc, #280]	@ (800573c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005622:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2200      	movs	r2, #0
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005644:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800564a:	f7ff fad1 	bl	8004bf0 <HAL_DMA_Start_IT>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13a      	bne.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005658:	e013      	b.n	8005682 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e051      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	4b2c      	ldr	r3, [pc, #176]	@ (8005740 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f001 fba3 	bl	8006de0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056b4:	2110      	movs	r1, #16
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 fbc4 	bl	8006e44 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e028      	b.n	8005720 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e017      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	8979      	ldrh	r1, [r7, #10]
 8005702:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f001 fb68 	bl	8006de0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005718:	2101      	movs	r1, #1
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f001 fb92 	bl	8006e44 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	ffff0000 	.word	0xffff0000
 8005734:	08005d5f 	.word	0x08005d5f
 8005738:	08006cdf 	.word	0x08006cdf
 800573c:	08006d75 	.word	0x08006d75
 8005740:	80002000 	.word	0x80002000
 8005744:	0800591f 	.word	0x0800591f

08005748 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
  }
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00f      	beq.n	80057be <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	f043 0201 	orr.w	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00f      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00f      	beq.n	8005812 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005800:	f043 0202 	orr.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005810:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 030b 	and.w	r3, r3, #11
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 f91f 	bl	8006a68 <I2C_ITError>
  }
}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
 800588e:	4613      	mov	r3, r2
 8005890:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005910:	b2db      	uxtb	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b088      	sub	sp, #32
 8005922:	af02      	add	r7, sp, #8
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <I2C_Master_ISR_IT+0x1e>
 8005938:	2302      	movs	r3, #2
 800593a:	e113      	b.n	8005b64 <I2C_Master_ISR_IT+0x246>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2210      	movs	r2, #16
 800595e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	f043 0204 	orr.w	r2, r3, #4
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f001 f992 	bl	8006c96 <I2C_Flush_TXDR>
 8005972:	e0e4      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01d      	beq.n	80059c4 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0304 	bic.w	r3, r3, #4
 800598e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059c2:	e0bc      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d128      	bne.n	8005a20 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d023      	beq.n	8005a20 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01e      	beq.n	8005a20 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a8 	beq.w	8005b3e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005a1e:	e08e      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d05c      	beq.n	8005ae4 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d057      	beq.n	8005ae4 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d040      	beq.n	8005ac0 <I2C_Master_ISR_IT+0x1a2>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d13c      	bne.n	8005ac0 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a52:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2bff      	cmp	r3, #255	@ 0xff
 8005a5c:	d90e      	bls.n	8005a7c <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	22ff      	movs	r2, #255	@ 0xff
 8005a62:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	8a79      	ldrh	r1, [r7, #18]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 f9b3 	bl	8006de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a7a:	e032      	b.n	8005ae2 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a8e:	d00b      	beq.n	8005aa8 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a9a:	8a79      	ldrh	r1, [r7, #18]
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	9000      	str	r0, [sp, #0]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f001 f99d 	bl	8006de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa6:	e01c      	b.n	8005ae2 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	8a79      	ldrh	r1, [r7, #18]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 f991 	bl	8006de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005abe:	e010      	b.n	8005ae2 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ace:	d003      	beq.n	8005ad8 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fcb0 	bl	8006436 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad6:	e032      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 ffc4 	bl	8006a68 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae0:	e02d      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
 8005ae2:	e02c      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d027      	beq.n	8005b3e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d022      	beq.n	8005b3e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d119      	bne.n	8005b36 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b10:	d015      	beq.n	8005b3e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b1a:	d108      	bne.n	8005b2e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	e007      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fc81 	bl	8006436 <I2C_ITMasterSeqCplt>
 8005b34:	e003      	b.n	8005b3e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b36:	2140      	movs	r1, #64	@ 0x40
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 ff95 	bl	8006a68 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fd07 	bl	8006568 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <I2C_Slave_ISR_IT+0x24>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0e2      	b.n	8005d56 <I2C_Slave_ISR_IT+0x1ea>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005bac:	6939      	ldr	r1, [r7, #16]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fda2 	bl	80066f8 <I2C_ITSlaveCplt>
 8005bb4:	e0ca      	b.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d04b      	beq.n	8005c58 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d046      	beq.n	8005c58 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d128      	bne.n	8005c26 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b28      	cmp	r3, #40	@ 0x28
 8005bde:	d108      	bne.n	8005bf2 <I2C_Slave_ISR_IT+0x86>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005be6:	d104      	bne.n	8005bf2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005be8:	6939      	ldr	r1, [r7, #16]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fee8 	bl	80069c0 <I2C_ITListenCplt>
 8005bf0:	e031      	b.n	8005c56 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b29      	cmp	r3, #41	@ 0x29
 8005bfc:	d10e      	bne.n	8005c1c <I2C_Slave_ISR_IT+0xb0>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c04:	d00a      	beq.n	8005c1c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f001 f841 	bl	8006c96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fc4b 	bl	80064b0 <I2C_ITSlaveSeqCplt>
 8005c1a:	e01c      	b.n	8005c56 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2210      	movs	r2, #16
 8005c22:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c24:	e08f      	b.n	8005d46 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2210      	movs	r2, #16
 8005c2c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <I2C_Slave_ISR_IT+0xdc>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c46:	d17e      	bne.n	8005d46 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 ff0a 	bl	8006a68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c54:	e077      	b.n	8005d46 <I2C_Slave_ISR_IT+0x1da>
 8005c56:	e076      	b.n	8005d46 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02f      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02a      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d14b      	bne.n	8005d4a <I2C_Slave_ISR_IT+0x1de>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cb8:	d047      	beq.n	8005d4a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fbf8 	bl	80064b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005cc0:	e043      	b.n	8005d4a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005cd6:	6939      	ldr	r1, [r7, #16]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fb28 	bl	800632e <I2C_ITAddrCplt>
 8005cde:	e035      	b.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d030      	beq.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02b      	beq.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d2e:	e00d      	b.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d36:	d002      	beq.n	8005d3e <I2C_Slave_ISR_IT+0x1d2>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fbb6 	bl	80064b0 <I2C_ITSlaveSeqCplt>
 8005d44:	e002      	b.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005d4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b088      	sub	sp, #32
 8005d62:	af02      	add	r7, sp, #8
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <I2C_Master_ISR_DMA+0x1a>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e0d9      	b.n	8005f2c <I2C_Master_ISR_DMA+0x1ce>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d011      	beq.n	8005db8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2210      	movs	r2, #16
 8005d9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	f043 0204 	orr.w	r2, r3, #4
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005da8:	2120      	movs	r1, #32
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 f84a 	bl	8006e44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 ff70 	bl	8006c96 <I2C_Flush_TXDR>
 8005db6:	e0b4      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d071      	beq.n	8005ea6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d06c      	beq.n	8005ea6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dda:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d04e      	beq.n	8005e84 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2bff      	cmp	r3, #255	@ 0xff
 8005dfc:	d906      	bls.n	8005e0c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	22ff      	movs	r2, #255	@ 0xff
 8005e02:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005e04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e010      	b.n	8005e2e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e1e:	d003      	beq.n	8005e28 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e002      	b.n	8005e2e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e2c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	8a79      	ldrh	r1, [r7, #18]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 ffcf 	bl	8006de0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b22      	cmp	r3, #34	@ 0x22
 8005e5e:	d108      	bne.n	8005e72 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e70:	e057      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e82:	e04e      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e92:	d003      	beq.n	8005e9c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 face 	bl	8006436 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005e9a:	e042      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e9c:	2140      	movs	r1, #64	@ 0x40
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fde2 	bl	8006a68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ea4:	e03d      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d028      	beq.n	8005f02 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d023      	beq.n	8005f02 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d119      	bne.n	8005ef8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed2:	d025      	beq.n	8005f20 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005edc:	d108      	bne.n	8005ef0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eec:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005eee:	e017      	b.n	8005f20 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 faa0 	bl	8006436 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005ef6:	e013      	b.n	8005f20 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ef8:	2140      	movs	r1, #64	@ 0x40
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fdb4 	bl	8006a68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f00:	e00e      	b.n	8005f20 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fb25 	bl	8006568 <I2C_ITMasterCplt>
 8005f1e:	e000      	b.n	8005f22 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005f20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005f40:	4b8d      	ldr	r3, [pc, #564]	@ (8006178 <I2C_Mem_ISR_DMA+0x244>)
 8005f42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <I2C_Mem_ISR_DMA+0x1e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e10e      	b.n	8006170 <I2C_Mem_ISR_DMA+0x23c>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d016      	beq.n	8005f92 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d011      	beq.n	8005f92 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2210      	movs	r2, #16
 8005f74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f043 0204 	orr.w	r2, r3, #4
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005f82:	2120      	movs	r1, #32
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 ff5d 	bl	8006e44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fe83 	bl	8006c96 <I2C_Flush_TXDR>
 8005f90:	e0e9      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fb8:	e0d5      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05f      	beq.n	8006084 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05a      	beq.n	8006084 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 ffbb 	bl	8006f4c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005fd6:	2110      	movs	r1, #16
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 ff33 	bl	8006e44 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d048      	beq.n	800607a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2bff      	cmp	r3, #255	@ 0xff
 8005ff0:	d910      	bls.n	8006014 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	22ff      	movs	r2, #255	@ 0xff
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffc:	b299      	uxth	r1, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006002:	b2da      	uxtb	r2, r3
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fee7 	bl	8006de0 <I2C_TransferConfig>
 8006012:	e011      	b.n	8006038 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	b299      	uxth	r1, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	2300      	movs	r3, #0
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fed4 	bl	8006de0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b22      	cmp	r3, #34	@ 0x22
 8006054:	d108      	bne.n	8006068 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006064:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006066:	e07e      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006076:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006078:	e075      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800607a:	2140      	movs	r1, #64	@ 0x40
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fcf3 	bl	8006a68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006082:	e070      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d05d      	beq.n	800614a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006094:	2b00      	cmp	r3, #0
 8006096:	d058      	beq.n	800614a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006098:	2101      	movs	r1, #1
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 ff56 	bl	8006f4c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80060a0:	2110      	movs	r1, #16
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fece 	bl	8006e44 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b22      	cmp	r3, #34	@ 0x22
 80060b2:	d101      	bne.n	80060b8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80060b4:	4b31      	ldr	r3, [pc, #196]	@ (800617c <I2C_Mem_ISR_DMA+0x248>)
 80060b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2bff      	cmp	r3, #255	@ 0xff
 80060c0:	d910      	bls.n	80060e4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	22ff      	movs	r2, #255	@ 0xff
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060cc:	b299      	uxth	r1, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fe7f 	bl	8006de0 <I2C_TransferConfig>
 80060e2:	e011      	b.n	8006108 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f2:	b299      	uxth	r1, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fe6c 	bl	8006de0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b22      	cmp	r3, #34	@ 0x22
 8006124:	d108      	bne.n	8006138 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006134:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006136:	e016      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006146:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006148:	e00d      	b.n	8006166 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fa01 	bl	8006568 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	80002000 	.word	0x80002000
 800617c:	80002400 	.word	0x80002400

08006180 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <I2C_Slave_ISR_DMA+0x24>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e0c0      	b.n	8006326 <I2C_Slave_ISR_DMA+0x1a6>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fa98 	bl	80066f8 <I2C_ITSlaveCplt>
 80061c8:	e0a8      	b.n	800631c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8095 	beq.w	8006300 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 808f 	beq.w	8006300 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d07d      	beq.n	80062f2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00c      	beq.n	8006218 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006236:	2301      	movs	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d128      	bne.n	8006292 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b28      	cmp	r3, #40	@ 0x28
 800624a:	d108      	bne.n	800625e <I2C_Slave_ISR_DMA+0xde>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006252:	d104      	bne.n	800625e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fbb2 	bl	80069c0 <I2C_ITListenCplt>
 800625c:	e048      	b.n	80062f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b29      	cmp	r3, #41	@ 0x29
 8006268:	d10e      	bne.n	8006288 <I2C_Slave_ISR_DMA+0x108>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006270:	d00a      	beq.n	8006288 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2210      	movs	r2, #16
 8006278:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fd0b 	bl	8006c96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f915 	bl	80064b0 <I2C_ITSlaveSeqCplt>
 8006286:	e033      	b.n	80062f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2210      	movs	r2, #16
 800628e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006290:	e034      	b.n	80062fc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2210      	movs	r2, #16
 8006298:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <I2C_Slave_ISR_DMA+0x13c>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ba:	d11f      	bne.n	80062fc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b21      	cmp	r3, #33	@ 0x21
 80062c0:	d002      	beq.n	80062c8 <I2C_Slave_ISR_DMA+0x148>
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b29      	cmp	r3, #41	@ 0x29
 80062c6:	d103      	bne.n	80062d0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2221      	movs	r2, #33	@ 0x21
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ce:	e008      	b.n	80062e2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	2b22      	cmp	r3, #34	@ 0x22
 80062d4:	d002      	beq.n	80062dc <I2C_Slave_ISR_DMA+0x15c>
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062da:	d102      	bne.n	80062e2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2222      	movs	r2, #34	@ 0x22
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	4619      	mov	r1, r3
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fbbd 	bl	8006a68 <I2C_ITError>
      if (treatdmanack == 1U)
 80062ee:	e005      	b.n	80062fc <I2C_Slave_ISR_DMA+0x17c>
 80062f0:	e004      	b.n	80062fc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2210      	movs	r2, #16
 80062f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062fa:	e00f      	b.n	800631c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80062fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062fe:	e00d      	b.n	800631c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f809 	bl	800632e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006344:	2b28      	cmp	r3, #40	@ 0x28
 8006346:	d16a      	bne.n	800641e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	b29b      	uxth	r3, r3
 8006362:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006366:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006374:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006382:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d138      	bne.n	80063fe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800638c:	897b      	ldrh	r3, [r7, #10]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	b29a      	uxth	r2, r3
 8006392:	89bb      	ldrh	r3, [r7, #12]
 8006394:	4053      	eors	r3, r2
 8006396:	b29b      	uxth	r3, r3
 8006398:	f003 0306 	and.w	r3, r3, #6
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11c      	bne.n	80063da <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80063a0:	897b      	ldrh	r3, [r7, #10]
 80063a2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d13b      	bne.n	800642e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063cc:	89ba      	ldrh	r2, [r7, #12]
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fa55 	bl	8005882 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063d8:	e029      	b.n	800642e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80063da:	893b      	ldrh	r3, [r7, #8]
 80063dc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fdb2 	bl	8006f4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063f0:	89ba      	ldrh	r2, [r7, #12]
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fa43 	bl	8005882 <HAL_I2C_AddrCallback>
}
 80063fc:	e017      	b.n	800642e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fda2 	bl	8006f4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006410:	89ba      	ldrh	r2, [r7, #12]
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fa33 	bl	8005882 <HAL_I2C_AddrCallback>
}
 800641c:	e007      	b.n	800642e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2208      	movs	r2, #8
 8006424:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b21      	cmp	r3, #33	@ 0x21
 8006450:	d115      	bne.n	800647e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2211      	movs	r2, #17
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd6f 	bl	8006f4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff f9db 	bl	8005832 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800647c:	e014      	b.n	80064a8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2212      	movs	r2, #18
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006492:	2102      	movs	r1, #2
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fd59 	bl	8006f4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff f9cf 	bl	8005846 <HAL_I2C_MasterRxCpltCallback>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e00c      	b.n	80064fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b29      	cmp	r3, #41	@ 0x29
 8006508:	d112      	bne.n	8006530 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2228      	movs	r2, #40	@ 0x28
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2221      	movs	r2, #33	@ 0x21
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006518:	2101      	movs	r1, #1
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fd16 	bl	8006f4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff f996 	bl	800585a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800652e:	e017      	b.n	8006560 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b2a      	cmp	r3, #42	@ 0x2a
 800653a:	d111      	bne.n	8006560 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2228      	movs	r2, #40	@ 0x28
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2222      	movs	r2, #34	@ 0x22
 8006548:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800654a:	2102      	movs	r1, #2
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fcfd 	bl	8006f4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff f987 	bl	800586e <HAL_I2C_SlaveRxCpltCallback>
}
 8006560:	bf00      	nop
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2220      	movs	r2, #32
 800657c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b21      	cmp	r3, #33	@ 0x21
 8006588:	d107      	bne.n	800659a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fcdd 	bl	8006f4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2211      	movs	r2, #17
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30
 8006598:	e00c      	b.n	80065b4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b22      	cmp	r3, #34	@ 0x22
 80065a4:	d106      	bne.n	80065b4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065a6:	2102      	movs	r1, #2
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fccf 	bl	8006f4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2212      	movs	r2, #18
 80065b2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b4c      	ldr	r3, [pc, #304]	@ (80066f0 <I2C_ITMasterCplt+0x188>)
 80065c0:	400b      	ands	r3, r1
 80065c2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a49      	ldr	r2, [pc, #292]	@ (80066f4 <I2C_ITMasterCplt+0x18c>)
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e6:	f043 0204 	orr.w	r2, r3, #4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b60      	cmp	r3, #96	@ 0x60
 80065f8:	d10a      	bne.n	8006610 <I2C_ITMasterCplt+0xa8>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	b2db      	uxtb	r3, r3
 800660c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800660e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fb40 	bl	8006c96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b60      	cmp	r3, #96	@ 0x60
 8006626:	d002      	beq.n	800662e <I2C_ITMasterCplt+0xc6>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d006      	beq.n	800663c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa17 	bl	8006a68 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800663a:	e054      	b.n	80066e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b21      	cmp	r3, #33	@ 0x21
 8006646:	d124      	bne.n	8006692 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b40      	cmp	r3, #64	@ 0x40
 8006660:	d10b      	bne.n	800667a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff f91d 	bl	80058b2 <HAL_I2C_MemTxCpltCallback>
}
 8006678:	e035      	b.n	80066e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff f8d1 	bl	8005832 <HAL_I2C_MasterTxCpltCallback>
}
 8006690:	e029      	b.n	80066e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	@ 0x22
 800669c:	d123      	bne.n	80066e6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b40      	cmp	r3, #64	@ 0x40
 80066b6:	d10b      	bne.n	80066d0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f8fc 	bl	80058c6 <HAL_I2C_MemRxCpltCallback>
}
 80066ce:	e00a      	b.n	80066e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff f8b0 	bl	8005846 <HAL_I2C_MasterRxCpltCallback>
}
 80066e6:	bf00      	nop
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	fe00e800 	.word	0xfe00e800
 80066f4:	ffff0000 	.word	0xffff0000

080066f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800671a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2220      	movs	r2, #32
 8006722:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	2b21      	cmp	r3, #33	@ 0x21
 8006728:	d002      	beq.n	8006730 <I2C_ITSlaveCplt+0x38>
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	2b29      	cmp	r3, #41	@ 0x29
 800672e:	d108      	bne.n	8006742 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006730:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc09 	bl	8006f4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2221      	movs	r2, #33	@ 0x21
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006740:	e019      	b.n	8006776 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006742:	7afb      	ldrb	r3, [r7, #11]
 8006744:	2b22      	cmp	r3, #34	@ 0x22
 8006746:	d002      	beq.n	800674e <I2C_ITSlaveCplt+0x56>
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	2b2a      	cmp	r3, #42	@ 0x2a
 800674c:	d108      	bne.n	8006760 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800674e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fbfa 	bl	8006f4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2222      	movs	r2, #34	@ 0x22
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
 800675e:	e00a      	b.n	8006776 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	2b28      	cmp	r3, #40	@ 0x28
 8006764:	d107      	bne.n	8006776 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006766:	f248 0103 	movw	r1, #32771	@ 0x8003
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fbee 	bl	8006f4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006784:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6859      	ldr	r1, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b89      	ldr	r3, [pc, #548]	@ (80069b8 <I2C_ITSlaveCplt+0x2c0>)
 8006792:	400b      	ands	r3, r1
 8006794:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa7d 	bl	8006c96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067cc:	e017      	b.n	80067fe <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d012      	beq.n	80067fe <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d020      	beq.n	800684a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0304 	bic.w	r3, r3, #4
 800680e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006858:	f043 0204 	orr.w	r2, r3, #4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	d049      	beq.n	80068fe <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d044      	beq.n	80068fe <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d128      	bne.n	80068d0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b28      	cmp	r3, #40	@ 0x28
 8006888:	d108      	bne.n	800689c <I2C_ITSlaveCplt+0x1a4>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006890:	d104      	bne.n	800689c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f893 	bl	80069c0 <I2C_ITListenCplt>
 800689a:	e030      	b.n	80068fe <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b29      	cmp	r3, #41	@ 0x29
 80068a6:	d10e      	bne.n	80068c6 <I2C_ITSlaveCplt+0x1ce>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068ae:	d00a      	beq.n	80068c6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2210      	movs	r2, #16
 80068b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9ec 	bl	8006c96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fdf6 	bl	80064b0 <I2C_ITSlaveSeqCplt>
 80068c4:	e01b      	b.n	80068fe <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	61da      	str	r2, [r3, #28]
 80068ce:	e016      	b.n	80068fe <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2210      	movs	r2, #16
 80068d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068dc:	f043 0204 	orr.w	r2, r3, #4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <I2C_ITSlaveCplt+0x1fa>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068f0:	d105      	bne.n	80068fe <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f8b5 	bl	8006a68 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8a4 	bl	8006a68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b28      	cmp	r3, #40	@ 0x28
 800692a:	d141      	bne.n	80069b0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f846 	bl	80069c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006934:	e03c      	b.n	80069b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800693e:	d014      	beq.n	800696a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fdb5 	bl	80064b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <I2C_ITSlaveCplt+0x2c4>)
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fe ff9b 	bl	800589e <HAL_I2C_ListenCpltCallback>
}
 8006968:	e022      	b.n	80069b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b22      	cmp	r3, #34	@ 0x22
 8006974:	d10e      	bne.n	8006994 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fe ff6e 	bl	800586e <HAL_I2C_SlaveRxCpltCallback>
}
 8006992:	e00d      	b.n	80069b0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fe ff55 	bl	800585a <HAL_I2C_SlaveTxCpltCallback>
}
 80069b0:	bf00      	nop
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	fe00e800 	.word	0xfe00e800
 80069bc:	ffff0000 	.word	0xffff0000

080069c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a25      	ldr	r2, [pc, #148]	@ (8006a64 <I2C_ITListenCplt+0xa4>)
 80069ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d022      	beq.n	8006a3c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d012      	beq.n	8006a3c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a34:	f043 0204 	orr.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a3c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa83 	bl	8006f4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fe ff21 	bl	800589e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	ffff0000 	.word	0xffff0000

08006a68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a78:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a6d      	ldr	r2, [pc, #436]	@ (8006c3c <I2C_ITError+0x1d4>)
 8006a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b28      	cmp	r3, #40	@ 0x28
 8006a9e:	d005      	beq.n	8006aac <I2C_ITError+0x44>
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b29      	cmp	r3, #41	@ 0x29
 8006aa4:	d002      	beq.n	8006aac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aaa:	d10b      	bne.n	8006ac4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006aac:	2103      	movs	r1, #3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa4c 	bl	8006f4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2228      	movs	r2, #40	@ 0x28
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a60      	ldr	r2, [pc, #384]	@ (8006c40 <I2C_ITError+0x1d8>)
 8006ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006ac2:	e030      	b.n	8006b26 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ac4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa3f 	bl	8006f4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8e1 	bl	8006c96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b60      	cmp	r3, #96	@ 0x60
 8006ade:	d01f      	beq.n	8006b20 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d114      	bne.n	8006b20 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d109      	bne.n	8006b18 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2210      	movs	r2, #16
 8006b0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d039      	beq.n	8006ba8 <I2C_ITError+0x140>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b11      	cmp	r3, #17
 8006b38:	d002      	beq.n	8006b40 <I2C_ITError+0xd8>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b21      	cmp	r3, #33	@ 0x21
 8006b3e:	d133      	bne.n	8006ba8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b4e:	d107      	bne.n	8006b60 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe f9d4 	bl	8004f12 <HAL_DMA_GetState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d017      	beq.n	8006ba0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	4a33      	ldr	r2, [pc, #204]	@ (8006c44 <I2C_ITError+0x1dc>)
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe f8ae 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d04d      	beq.n	8006c2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b9e:	e045      	b.n	8006c2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f851 	bl	8006c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ba6:	e041      	b.n	8006c2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d039      	beq.n	8006c24 <I2C_ITError+0x1bc>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b12      	cmp	r3, #18
 8006bb4:	d002      	beq.n	8006bbc <I2C_ITError+0x154>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b22      	cmp	r3, #34	@ 0x22
 8006bba:	d133      	bne.n	8006c24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bca:	d107      	bne.n	8006bdc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe f996 	bl	8004f12 <HAL_DMA_GetState>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d017      	beq.n	8006c1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf0:	4a14      	ldr	r2, [pc, #80]	@ (8006c44 <I2C_ITError+0x1dc>)
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe f870 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d011      	beq.n	8006c30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c16:	4610      	mov	r0, r2
 8006c18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c1a:	e009      	b.n	8006c30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f813 	bl	8006c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c22:	e005      	b.n	8006c30 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f80f 	bl	8006c48 <I2C_TreatErrorCallback>
  }
}
 8006c2a:	e002      	b.n	8006c32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c30:	bf00      	nop
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	ffff0000 	.word	0xffff0000
 8006c40:	08005b6d 	.word	0x08005b6d
 8006c44:	08006da3 	.word	0x08006da3

08006c48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b60      	cmp	r3, #96	@ 0x60
 8006c5a:	d10e      	bne.n	8006c7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe fe3b 	bl	80058ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c78:	e009      	b.n	8006c8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fe fe26 	bl	80058da <HAL_I2C_ErrorCallback>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d103      	bne.n	8006cb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d007      	beq.n	8006cd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	619a      	str	r2, [r3, #24]
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cfa:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d06:	2120      	movs	r1, #32
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f89b 	bl	8006e44 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006d0e:	e02d      	b.n	8006d6c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2bff      	cmp	r3, #255	@ 0xff
 8006d26:	d903      	bls.n	8006d30 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	22ff      	movs	r2, #255	@ 0xff
 8006d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d2e:	e004      	b.n	8006d3a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	4619      	mov	r1, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3328      	adds	r3, #40	@ 0x28
 8006d4a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006d50:	f7fd ff4e 	bl	8004bf0 <HAL_DMA_Start_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fe83 	bl	8006a68 <I2C_ITError>
}
 8006d62:	e003      	b.n	8006d6c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006d64:	2140      	movs	r1, #64	@ 0x40
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f86c 	bl	8006e44 <I2C_Enable_IRQ>
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d90:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d92:	2110      	movs	r1, #16
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fe67 	bl	8006a68 <I2C_ITError>
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	2200      	movs	r2, #0
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff ff39 	bl	8006c48 <I2C_TreatErrorCallback>
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	817b      	strh	r3, [r7, #10]
 8006dee:	4613      	mov	r3, r2
 8006df0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006df2:	897b      	ldrh	r3, [r7, #10]
 8006df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006df8:	7a7b      	ldrb	r3, [r7, #9]
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	0d5b      	lsrs	r3, r3, #21
 8006e1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006e1e:	4b08      	ldr	r3, [pc, #32]	@ (8006e40 <I2C_TransferConfig+0x60>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	43db      	mvns	r3, r3
 8006e24:	ea02 0103 	and.w	r1, r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	03ff63ff 	.word	0x03ff63ff

08006e44 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e58:	4a39      	ldr	r2, [pc, #228]	@ (8006f40 <I2C_Enable_IRQ+0xfc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d032      	beq.n	8006ec4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006e62:	4a38      	ldr	r2, [pc, #224]	@ (8006f44 <I2C_Enable_IRQ+0x100>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d02d      	beq.n	8006ec4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006e6c:	4a36      	ldr	r2, [pc, #216]	@ (8006f48 <I2C_Enable_IRQ+0x104>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d028      	beq.n	8006ec4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da03      	bge.n	8006e82 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006e80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006e92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006ea4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ea6:	887b      	ldrh	r3, [r7, #2]
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d103      	bne.n	8006eb4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006eb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d133      	bne.n	8006f22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f043 0320 	orr.w	r3, r3, #32
 8006ec0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ec2:	e02e      	b.n	8006f22 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ec4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da03      	bge.n	8006ed4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ed2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006ee4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006ef6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d103      	bne.n	8006f06 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006f04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d103      	bne.n	8006f14 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006f12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d103      	bne.n	8006f22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6819      	ldr	r1, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	08005d5f 	.word	0x08005d5f
 8006f44:	08006181 	.word	0x08006181
 8006f48:	08005f35 	.word	0x08005f35

08006f4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00f      	beq.n	8006f86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006f6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f7a:	2b28      	cmp	r3, #40	@ 0x28
 8006f7c:	d003      	beq.n	8006f86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006f84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f86:	887b      	ldrh	r3, [r7, #2]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00f      	beq.n	8006fb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006f96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fa4:	2b28      	cmp	r3, #40	@ 0x28
 8006fa6:	d003      	beq.n	8006fb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006fae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da03      	bge.n	8006fc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006fbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fc0:	887b      	ldrh	r3, [r7, #2]
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d103      	bne.n	8006fce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006fcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fce:	887b      	ldrh	r3, [r7, #2]
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d103      	bne.n	8006fdc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	2b40      	cmp	r3, #64	@ 0x40
 8006fe0:	d103      	bne.n	8006fea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6819      	ldr	r1, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	43da      	mvns	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	400a      	ands	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b20      	cmp	r3, #32
 800701c:	d138      	bne.n	8007090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007028:	2302      	movs	r3, #2
 800702a:	e032      	b.n	8007092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	@ 0x24
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800705a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e000      	b.n	8007092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d139      	bne.n	8007128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070be:	2302      	movs	r3, #2
 80070c0:	e033      	b.n	800712a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2224      	movs	r2, #36	@ 0x24
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d141      	bne.n	80071ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007146:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007152:	d131      	bne.n	80071b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007154:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715a:	4a46      	ldr	r2, [pc, #280]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800715c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007164:	4b43      	ldr	r3, [pc, #268]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800716c:	4a41      	ldr	r2, [pc, #260]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800716e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007174:	4b40      	ldr	r3, [pc, #256]	@ (8007278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2232      	movs	r2, #50	@ 0x32
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	4a3f      	ldr	r2, [pc, #252]	@ (800727c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	0c9b      	lsrs	r3, r3, #18
 8007186:	3301      	adds	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800718a:	e002      	b.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007192:	4b38      	ldr	r3, [pc, #224]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800719e:	d102      	bne.n	80071a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f2      	bne.n	800718c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071a6:	4b33      	ldr	r3, [pc, #204]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b2:	d158      	bne.n	8007266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e057      	b.n	8007268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071be:	4a2d      	ldr	r2, [pc, #180]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80071c8:	e04d      	b.n	8007266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d0:	d141      	bne.n	8007256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071d2:	4b28      	ldr	r3, [pc, #160]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071de:	d131      	bne.n	8007244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071e0:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e6:	4a23      	ldr	r2, [pc, #140]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071f0:	4b20      	ldr	r3, [pc, #128]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80071f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007200:	4b1d      	ldr	r3, [pc, #116]	@ (8007278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2232      	movs	r2, #50	@ 0x32
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	4a1c      	ldr	r2, [pc, #112]	@ (800727c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	0c9b      	lsrs	r3, r3, #18
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007216:	e002      	b.n	800721e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3b01      	subs	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800721e:	4b15      	ldr	r3, [pc, #84]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722a:	d102      	bne.n	8007232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f2      	bne.n	8007218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007232:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723e:	d112      	bne.n	8007266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e011      	b.n	8007268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007244:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800724a:	4a0a      	ldr	r2, [pc, #40]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800724c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007250:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007254:	e007      	b.n	8007266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800725e:	4a05      	ldr	r2, [pc, #20]	@ (8007274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40007000 	.word	0x40007000
 8007278:	2000003c 	.word	0x2000003c
 800727c:	431bde83 	.word	0x431bde83

08007280 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007284:	4b05      	ldr	r3, [pc, #20]	@ (800729c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	4a04      	ldr	r2, [pc, #16]	@ (800729c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800728a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800728e:	6093      	str	r3, [r2, #8]
}
 8007290:	bf00      	nop
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40007000 	.word	0x40007000

080072a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e2fe      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d075      	beq.n	80073aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072be:	4b97      	ldr	r3, [pc, #604]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072c8:	4b94      	ldr	r3, [pc, #592]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b0c      	cmp	r3, #12
 80072d6:	d102      	bne.n	80072de <HAL_RCC_OscConfig+0x3e>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d002      	beq.n	80072e4 <HAL_RCC_OscConfig+0x44>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d10b      	bne.n	80072fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e4:	4b8d      	ldr	r3, [pc, #564]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d05b      	beq.n	80073a8 <HAL_RCC_OscConfig+0x108>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d157      	bne.n	80073a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e2d9      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d106      	bne.n	8007314 <HAL_RCC_OscConfig+0x74>
 8007306:	4b85      	ldr	r3, [pc, #532]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a84      	ldr	r2, [pc, #528]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800730c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e01d      	b.n	8007350 <HAL_RCC_OscConfig+0xb0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800731c:	d10c      	bne.n	8007338 <HAL_RCC_OscConfig+0x98>
 800731e:	4b7f      	ldr	r3, [pc, #508]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a7e      	ldr	r2, [pc, #504]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4b7c      	ldr	r3, [pc, #496]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7b      	ldr	r2, [pc, #492]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e00b      	b.n	8007350 <HAL_RCC_OscConfig+0xb0>
 8007338:	4b78      	ldr	r3, [pc, #480]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a77      	ldr	r2, [pc, #476]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800733e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	4b75      	ldr	r3, [pc, #468]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a74      	ldr	r2, [pc, #464]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800734a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800734e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fb fdec 	bl	8002f34 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007360:	f7fb fde8 	bl	8002f34 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	@ 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e29e      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007372:	4b6a      	ldr	r3, [pc, #424]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0xc0>
 800737e:	e014      	b.n	80073aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fb fdd8 	bl	8002f34 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007388:	f7fb fdd4 	bl	8002f34 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	@ 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e28a      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800739a:	4b60      	ldr	r3, [pc, #384]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0xe8>
 80073a6:	e000      	b.n	80073aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d075      	beq.n	80074a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b6:	4b59      	ldr	r3, [pc, #356]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073c0:	4b56      	ldr	r3, [pc, #344]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d102      	bne.n	80073d6 <HAL_RCC_OscConfig+0x136>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d002      	beq.n	80073dc <HAL_RCC_OscConfig+0x13c>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d11f      	bne.n	800741c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073dc:	4b4f      	ldr	r3, [pc, #316]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_OscConfig+0x154>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e25d      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f4:	4b49      	ldr	r3, [pc, #292]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	4946      	ldr	r1, [pc, #280]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007408:	4b45      	ldr	r3, [pc, #276]	@ (8007520 <HAL_RCC_OscConfig+0x280>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f7fb fd45 	bl	8002e9c <HAL_InitTick>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d043      	beq.n	80074a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e249      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d023      	beq.n	800746c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007424:	4b3d      	ldr	r3, [pc, #244]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3c      	ldr	r2, [pc, #240]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800742a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fb fd80 	bl	8002f34 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007438:	f7fb fd7c 	bl	8002f34 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e232      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800744a:	4b34      	ldr	r3, [pc, #208]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007456:	4b31      	ldr	r3, [pc, #196]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	061b      	lsls	r3, r3, #24
 8007464:	492d      	ldr	r1, [pc, #180]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	604b      	str	r3, [r1, #4]
 800746a:	e01a      	b.n	80074a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800746c:	4b2b      	ldr	r3, [pc, #172]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2a      	ldr	r2, [pc, #168]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007478:	f7fb fd5c 	bl	8002f34 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007480:	f7fb fd58 	bl	8002f34 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e20e      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007492:	4b22      	ldr	r3, [pc, #136]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0x1e0>
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d041      	beq.n	8007532 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01c      	beq.n	80074f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074b6:	4b19      	ldr	r3, [pc, #100]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80074b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074bc:	4a17      	ldr	r2, [pc, #92]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c6:	f7fb fd35 	bl	8002f34 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ce:	f7fb fd31 	bl	8002f34 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e1e7      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074e0:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80074e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0ef      	beq.n	80074ce <HAL_RCC_OscConfig+0x22e>
 80074ee:	e020      	b.n	8007532 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f0:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80074f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f6:	4a09      	ldr	r2, [pc, #36]	@ (800751c <HAL_RCC_OscConfig+0x27c>)
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fb fd18 	bl	8002f34 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007506:	e00d      	b.n	8007524 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007508:	f7fb fd14 	bl	8002f34 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d906      	bls.n	8007524 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e1ca      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
 800751a:	bf00      	nop
 800751c:	40021000 	.word	0x40021000
 8007520:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007524:	4b8c      	ldr	r3, [pc, #560]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ea      	bne.n	8007508 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80a6 	beq.w	800768c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007540:	2300      	movs	r3, #0
 8007542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007544:	4b84      	ldr	r3, [pc, #528]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_RCC_OscConfig+0x2b4>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <HAL_RCC_OscConfig+0x2b6>
 8007554:	2300      	movs	r3, #0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800755a:	4b7f      	ldr	r3, [pc, #508]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 800755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755e:	4a7e      	ldr	r2, [pc, #504]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007564:	6593      	str	r3, [r2, #88]	@ 0x58
 8007566:	4b7c      	ldr	r3, [pc, #496]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007572:	2301      	movs	r3, #1
 8007574:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007576:	4b79      	ldr	r3, [pc, #484]	@ (800775c <HAL_RCC_OscConfig+0x4bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d118      	bne.n	80075b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007582:	4b76      	ldr	r3, [pc, #472]	@ (800775c <HAL_RCC_OscConfig+0x4bc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a75      	ldr	r2, [pc, #468]	@ (800775c <HAL_RCC_OscConfig+0x4bc>)
 8007588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800758c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800758e:	f7fb fcd1 	bl	8002f34 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007596:	f7fb fccd 	bl	8002f34 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e183      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075a8:	4b6c      	ldr	r3, [pc, #432]	@ (800775c <HAL_RCC_OscConfig+0x4bc>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d108      	bne.n	80075ce <HAL_RCC_OscConfig+0x32e>
 80075bc:	4b66      	ldr	r3, [pc, #408]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	4a65      	ldr	r2, [pc, #404]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075cc:	e024      	b.n	8007618 <HAL_RCC_OscConfig+0x378>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d110      	bne.n	80075f8 <HAL_RCC_OscConfig+0x358>
 80075d6:	4b60      	ldr	r3, [pc, #384]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075de:	f043 0304 	orr.w	r3, r3, #4
 80075e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075e6:	4b5c      	ldr	r3, [pc, #368]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ec:	4a5a      	ldr	r2, [pc, #360]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075f6:	e00f      	b.n	8007618 <HAL_RCC_OscConfig+0x378>
 80075f8:	4b57      	ldr	r3, [pc, #348]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fe:	4a56      	ldr	r2, [pc, #344]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007608:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760e:	4a52      	ldr	r2, [pc, #328]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007610:	f023 0304 	bic.w	r3, r3, #4
 8007614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d016      	beq.n	800764e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007620:	f7fb fc88 	bl	8002f34 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007626:	e00a      	b.n	800763e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007628:	f7fb fc84 	bl	8002f34 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e138      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763e:	4b46      	ldr	r3, [pc, #280]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0ed      	beq.n	8007628 <HAL_RCC_OscConfig+0x388>
 800764c:	e015      	b.n	800767a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764e:	f7fb fc71 	bl	8002f34 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007654:	e00a      	b.n	800766c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007656:	f7fb fc6d 	bl	8002f34 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007664:	4293      	cmp	r3, r2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e121      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800766c:	4b3a      	ldr	r3, [pc, #232]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1ed      	bne.n	8007656 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d105      	bne.n	800768c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007680:	4b35      	ldr	r3, [pc, #212]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007684:	4a34      	ldr	r2, [pc, #208]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800768a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0320 	and.w	r3, r3, #32
 8007694:	2b00      	cmp	r3, #0
 8007696:	d03c      	beq.n	8007712 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01c      	beq.n	80076da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80076a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b0:	f7fb fc40 	bl	8002f34 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076b8:	f7fb fc3c 	bl	8002f34 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e0f2      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076ca:	4b23      	ldr	r3, [pc, #140]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80076cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0ef      	beq.n	80076b8 <HAL_RCC_OscConfig+0x418>
 80076d8:	e01b      	b.n	8007712 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076da:	4b1f      	ldr	r3, [pc, #124]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80076dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ea:	f7fb fc23 	bl	8002f34 <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076f2:	f7fb fc1f 	bl	8002f34 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e0d5      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007704:	4b14      	ldr	r3, [pc, #80]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1ef      	bne.n	80076f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80c9 	beq.w	80078ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800771c:	4b0e      	ldr	r3, [pc, #56]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b0c      	cmp	r3, #12
 8007726:	f000 8083 	beq.w	8007830 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d15e      	bne.n	80077f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007732:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a08      	ldr	r2, [pc, #32]	@ (8007758 <HAL_RCC_OscConfig+0x4b8>)
 8007738:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800773c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773e:	f7fb fbf9 	bl	8002f34 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007744:	e00c      	b.n	8007760 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007746:	f7fb fbf5 	bl	8002f34 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d905      	bls.n	8007760 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e0ab      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
 8007758:	40021000 	.word	0x40021000
 800775c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007760:	4b55      	ldr	r3, [pc, #340]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ec      	bne.n	8007746 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800776c:	4b52      	ldr	r3, [pc, #328]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	4b52      	ldr	r3, [pc, #328]	@ (80078bc <HAL_RCC_OscConfig+0x61c>)
 8007772:	4013      	ands	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6a11      	ldr	r1, [r2, #32]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800777c:	3a01      	subs	r2, #1
 800777e:	0112      	lsls	r2, r2, #4
 8007780:	4311      	orrs	r1, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007786:	0212      	lsls	r2, r2, #8
 8007788:	4311      	orrs	r1, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800778e:	0852      	lsrs	r2, r2, #1
 8007790:	3a01      	subs	r2, #1
 8007792:	0552      	lsls	r2, r2, #21
 8007794:	4311      	orrs	r1, r2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800779a:	0852      	lsrs	r2, r2, #1
 800779c:	3a01      	subs	r2, #1
 800779e:	0652      	lsls	r2, r2, #25
 80077a0:	4311      	orrs	r1, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80077a6:	06d2      	lsls	r2, r2, #27
 80077a8:	430a      	orrs	r2, r1
 80077aa:	4943      	ldr	r1, [pc, #268]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077b0:	4b41      	ldr	r3, [pc, #260]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a40      	ldr	r2, [pc, #256]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077bc:	4b3e      	ldr	r3, [pc, #248]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a3d      	ldr	r2, [pc, #244]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c8:	f7fb fbb4 	bl	8002f34 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d0:	f7fb fbb0 	bl	8002f34 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e066      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	4b35      	ldr	r3, [pc, #212]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x530>
 80077ee:	e05e      	b.n	80078ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f0:	4b31      	ldr	r3, [pc, #196]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a30      	ldr	r2, [pc, #192]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 80077f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7fb fb9a 	bl	8002f34 <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007804:	f7fb fb96 	bl	8002f34 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e04c      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007816:	4b28      	ldr	r3, [pc, #160]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007822:	4b25      	ldr	r3, [pc, #148]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	4924      	ldr	r1, [pc, #144]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 8007828:	4b25      	ldr	r3, [pc, #148]	@ (80078c0 <HAL_RCC_OscConfig+0x620>)
 800782a:	4013      	ands	r3, r2
 800782c:	60cb      	str	r3, [r1, #12]
 800782e:	e03e      	b.n	80078ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e039      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800783c:	4b1e      	ldr	r3, [pc, #120]	@ (80078b8 <HAL_RCC_OscConfig+0x618>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0203 	and.w	r2, r3, #3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	429a      	cmp	r2, r3
 800784e:	d12c      	bne.n	80078aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785a:	3b01      	subs	r3, #1
 800785c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785e:	429a      	cmp	r2, r3
 8007860:	d123      	bne.n	80078aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800786e:	429a      	cmp	r2, r3
 8007870:	d11b      	bne.n	80078aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800787e:	429a      	cmp	r2, r3
 8007880:	d113      	bne.n	80078aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788c:	085b      	lsrs	r3, r3, #1
 800788e:	3b01      	subs	r3, #1
 8007890:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007892:	429a      	cmp	r2, r3
 8007894:	d109      	bne.n	80078aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	3b01      	subs	r3, #1
 80078a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d001      	beq.n	80078ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40021000 	.word	0x40021000
 80078bc:	019f800c 	.word	0x019f800c
 80078c0:	feeefffc 	.word	0xfeeefffc

080078c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e11e      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078dc:	4b91      	ldr	r3, [pc, #580]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d910      	bls.n	800790c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ea:	4b8e      	ldr	r3, [pc, #568]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f023 020f 	bic.w	r2, r3, #15
 80078f2:	498c      	ldr	r1, [pc, #560]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fa:	4b8a      	ldr	r3, [pc, #552]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e106      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d073      	beq.n	8007a00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d129      	bne.n	8007974 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007920:	4b81      	ldr	r3, [pc, #516]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0f4      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007930:	f000 f99e 	bl	8007c70 <RCC_GetSysClockFreqFromPLLSource>
 8007934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	4a7c      	ldr	r2, [pc, #496]	@ (8007b2c <HAL_RCC_ClockConfig+0x268>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d93f      	bls.n	80079be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800793e:	4b7a      	ldr	r3, [pc, #488]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007952:	2b00      	cmp	r3, #0
 8007954:	d033      	beq.n	80079be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12f      	bne.n	80079be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800795e:	4b72      	ldr	r3, [pc, #456]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007966:	4a70      	ldr	r2, [pc, #448]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800796e:	2380      	movs	r3, #128	@ 0x80
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	e024      	b.n	80079be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d107      	bne.n	800798c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800797c:	4b6a      	ldr	r3, [pc, #424]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e0c6      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800798c:	4b66      	ldr	r3, [pc, #408]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0be      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800799c:	f000 f8ce 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 80079a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4a61      	ldr	r2, [pc, #388]	@ (8007b2c <HAL_RCC_ClockConfig+0x268>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d909      	bls.n	80079be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80079aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079b2:	4a5d      	ldr	r2, [pc, #372]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 80079b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80079ba:	2380      	movs	r3, #128	@ 0x80
 80079bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079be:	4b5a      	ldr	r3, [pc, #360]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f023 0203 	bic.w	r2, r3, #3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	4957      	ldr	r1, [pc, #348]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d0:	f7fb fab0 	bl	8002f34 <HAL_GetTick>
 80079d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d6:	e00a      	b.n	80079ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d8:	f7fb faac 	bl	8002f34 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e095      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 020c 	and.w	r2, r3, #12
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d1eb      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d023      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a18:	4b43      	ldr	r3, [pc, #268]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4a42      	ldr	r2, [pc, #264]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007a22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d007      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007a30:	4b3d      	ldr	r3, [pc, #244]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a38:	4a3b      	ldr	r2, [pc, #236]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a40:	4b39      	ldr	r3, [pc, #228]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	4936      	ldr	r1, [pc, #216]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	608b      	str	r3, [r1, #8]
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b80      	cmp	r3, #128	@ 0x80
 8007a58:	d105      	bne.n	8007a66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007a5a:	4b33      	ldr	r3, [pc, #204]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4a32      	ldr	r2, [pc, #200]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a66:	4b2f      	ldr	r3, [pc, #188]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d21d      	bcs.n	8007ab0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a74:	4b2b      	ldr	r3, [pc, #172]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f023 020f 	bic.w	r2, r3, #15
 8007a7c:	4929      	ldr	r1, [pc, #164]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007a84:	f7fb fa56 	bl	8002f34 <HAL_GetTick>
 8007a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	e00a      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a8c:	f7fb fa52 	bl	8002f34 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e03b      	b.n	8007b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa2:	4b20      	ldr	r3, [pc, #128]	@ (8007b24 <HAL_RCC_ClockConfig+0x260>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d1ed      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007abc:	4b1a      	ldr	r3, [pc, #104]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4917      	ldr	r1, [pc, #92]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ada:	4b13      	ldr	r3, [pc, #76]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	490f      	ldr	r1, [pc, #60]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007aee:	f000 f825 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <HAL_RCC_ClockConfig+0x264>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	091b      	lsrs	r3, r3, #4
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	490c      	ldr	r1, [pc, #48]	@ (8007b30 <HAL_RCC_ClockConfig+0x26c>)
 8007b00:	5ccb      	ldrb	r3, [r1, r3]
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b34 <HAL_RCC_ClockConfig+0x270>)
 8007b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <HAL_RCC_ClockConfig+0x274>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fb f9c2 	bl	8002e9c <HAL_InitTick>
 8007b18:	4603      	mov	r3, r0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40022000 	.word	0x40022000
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	04c4b400 	.word	0x04c4b400
 8007b30:	0800b6d4 	.word	0x0800b6d4
 8007b34:	2000003c 	.word	0x2000003c
 8007b38:	20000040 	.word	0x20000040

08007b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007b42:	4b2c      	ldr	r3, [pc, #176]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 030c 	and.w	r3, r3, #12
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	e047      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b54:	4b27      	ldr	r3, [pc, #156]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b60:	4b26      	ldr	r3, [pc, #152]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	e03e      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b66:	4b23      	ldr	r3, [pc, #140]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 030c 	and.w	r3, r3, #12
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d136      	bne.n	8007be0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b72:	4b20      	ldr	r3, [pc, #128]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	3301      	adds	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d10c      	bne.n	8007baa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b90:	4a1a      	ldr	r2, [pc, #104]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	4a16      	ldr	r2, [pc, #88]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b9a:	68d2      	ldr	r2, [r2, #12]
 8007b9c:	0a12      	lsrs	r2, r2, #8
 8007b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	617b      	str	r3, [r7, #20]
      break;
 8007ba8:	e00c      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007baa:	4a13      	ldr	r2, [pc, #76]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	4a10      	ldr	r2, [pc, #64]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bb4:	68d2      	ldr	r2, [r2, #12]
 8007bb6:	0a12      	lsrs	r2, r2, #8
 8007bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]
      break;
 8007bc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	0e5b      	lsrs	r3, r3, #25
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	3301      	adds	r3, #1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	e001      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007be4:	693b      	ldr	r3, [r7, #16]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40021000 	.word	0x40021000
 8007bf8:	00f42400 	.word	0x00f42400
 8007bfc:	016e3600 	.word	0x016e3600

08007c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c04:	4b03      	ldr	r3, [pc, #12]	@ (8007c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c06:	681b      	ldr	r3, [r3, #0]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000003c 	.word	0x2000003c

08007c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007c1c:	f7ff fff0 	bl	8007c00 <HAL_RCC_GetHCLKFreq>
 8007c20:	4602      	mov	r2, r0
 8007c22:	4b06      	ldr	r3, [pc, #24]	@ (8007c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	4904      	ldr	r1, [pc, #16]	@ (8007c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c2e:	5ccb      	ldrb	r3, [r1, r3]
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40021000 	.word	0x40021000
 8007c40:	0800b6e4 	.word	0x0800b6e4

08007c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007c48:	f7ff ffda 	bl	8007c00 <HAL_RCC_GetHCLKFreq>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	0adb      	lsrs	r3, r3, #11
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	4904      	ldr	r1, [pc, #16]	@ (8007c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c5a:	5ccb      	ldrb	r3, [r1, r3]
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	0800b6e4 	.word	0x0800b6e4

08007c70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c76:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c80:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d10c      	bne.n	8007cae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c94:	4a17      	ldr	r2, [pc, #92]	@ (8007cf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c9e:	68d2      	ldr	r2, [r2, #12]
 8007ca0:	0a12      	lsrs	r2, r2, #8
 8007ca2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	617b      	str	r3, [r7, #20]
    break;
 8007cac:	e00c      	b.n	8007cc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cae:	4a12      	ldr	r2, [pc, #72]	@ (8007cf8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007cb8:	68d2      	ldr	r2, [r2, #12]
 8007cba:	0a12      	lsrs	r2, r2, #8
 8007cbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	617b      	str	r3, [r7, #20]
    break;
 8007cc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cc8:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	0e5b      	lsrs	r3, r3, #25
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007ce2:	687b      	ldr	r3, [r7, #4]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	016e3600 	.word	0x016e3600
 8007cf8:	00f42400 	.word	0x00f42400

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d04:	2300      	movs	r3, #0
 8007d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d08:	2300      	movs	r3, #0
 8007d0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8098 	beq.w	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d1e:	4b43      	ldr	r3, [pc, #268]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10d      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d2a:	4b40      	ldr	r3, [pc, #256]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d36:	4b3d      	ldr	r3, [pc, #244]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d3e:	60bb      	str	r3, [r7, #8]
 8007d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d42:	2301      	movs	r3, #1
 8007d44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d46:	4b3a      	ldr	r3, [pc, #232]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a39      	ldr	r2, [pc, #228]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d52:	f7fb f8ef 	bl	8002f34 <HAL_GetTick>
 8007d56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d58:	e009      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d5a:	f7fb f8eb 	bl	8002f34 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d902      	bls.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	74fb      	strb	r3, [r7, #19]
        break;
 8007d6c:	e005      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d6e:	4b30      	ldr	r3, [pc, #192]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0ef      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007d7a:	7cfb      	ldrb	r3, [r7, #19]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d159      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d80:	4b2a      	ldr	r3, [pc, #168]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01e      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d019      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d9c:	4b23      	ldr	r3, [pc, #140]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007da6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007da8:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dae:	4a1f      	ldr	r2, [pc, #124]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007db8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007dc8:	4a18      	ldr	r2, [pc, #96]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d016      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dda:	f7fb f8ab 	bl	8002f34 <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de0:	e00b      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de2:	f7fb f8a7 	bl	8002f34 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d902      	bls.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	74fb      	strb	r3, [r7, #19]
            break;
 8007df8:	e006      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ec      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007e08:	7cfb      	ldrb	r3, [r7, #19]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e0e:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1c:	4903      	ldr	r1, [pc, #12]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007e24:	e008      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e26:	7cfb      	ldrb	r3, [r7, #19]
 8007e28:	74bb      	strb	r3, [r7, #18]
 8007e2a:	e005      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	7cfb      	ldrb	r3, [r7, #19]
 8007e36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e38:	7c7b      	ldrb	r3, [r7, #17]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d105      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e3e:	4ba7      	ldr	r3, [pc, #668]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	4aa6      	ldr	r2, [pc, #664]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e56:	4ba1      	ldr	r3, [pc, #644]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e5c:	f023 0203 	bic.w	r2, r3, #3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	499d      	ldr	r1, [pc, #628]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e78:	4b98      	ldr	r3, [pc, #608]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7e:	f023 020c 	bic.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	4995      	ldr	r1, [pc, #596]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e9a:	4b90      	ldr	r3, [pc, #576]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	498c      	ldr	r1, [pc, #560]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ebc:	4b87      	ldr	r3, [pc, #540]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	4984      	ldr	r1, [pc, #528]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ede:	4b7f      	ldr	r3, [pc, #508]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	497b      	ldr	r1, [pc, #492]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f00:	4b76      	ldr	r3, [pc, #472]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	4973      	ldr	r1, [pc, #460]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f22:	4b6e      	ldr	r3, [pc, #440]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	496a      	ldr	r1, [pc, #424]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f44:	4b65      	ldr	r3, [pc, #404]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	4962      	ldr	r1, [pc, #392]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f66:	4b5d      	ldr	r3, [pc, #372]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f74:	4959      	ldr	r1, [pc, #356]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f88:	4b54      	ldr	r3, [pc, #336]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f8e:	f023 0203 	bic.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	4951      	ldr	r1, [pc, #324]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007faa:	4b4c      	ldr	r3, [pc, #304]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	4948      	ldr	r1, [pc, #288]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d015      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fcc:	4b43      	ldr	r3, [pc, #268]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fda:	4940      	ldr	r1, [pc, #256]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fea:	d105      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fec:	4b3b      	ldr	r3, [pc, #236]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ff6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008000:	2b00      	cmp	r3, #0
 8008002:	d015      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008004:	4b35      	ldr	r3, [pc, #212]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	4932      	ldr	r1, [pc, #200]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800801e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008022:	d105      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008024:	4b2d      	ldr	r3, [pc, #180]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4a2c      	ldr	r2, [pc, #176]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800802e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d015      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800803c:	4b27      	ldr	r3, [pc, #156]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008042:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804a:	4924      	ldr	r1, [pc, #144]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800805a:	d105      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800805c:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	4a1e      	ldr	r2, [pc, #120]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008066:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d015      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008074:	4b19      	ldr	r3, [pc, #100]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008082:	4916      	ldr	r1, [pc, #88]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008092:	d105      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008094:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800809e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d019      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080ac:	4b0b      	ldr	r3, [pc, #44]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ba:	4908      	ldr	r1, [pc, #32]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ca:	d109      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080cc:	4b03      	ldr	r3, [pc, #12]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	4a02      	ldr	r2, [pc, #8]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080d6:	60d3      	str	r3, [r2, #12]
 80080d8:	e002      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80080da:	bf00      	nop
 80080dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d015      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80080ec:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	4926      	ldr	r1, [pc, #152]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800810a:	d105      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800810c:	4b21      	ldr	r3, [pc, #132]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	4a20      	ldr	r2, [pc, #128]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008116:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d015      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008124:	4b1b      	ldr	r3, [pc, #108]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008132:	4918      	ldr	r1, [pc, #96]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008134:	4313      	orrs	r3, r2
 8008136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d105      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008144:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4a12      	ldr	r2, [pc, #72]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800814a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800814e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d015      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800815c:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800815e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816a:	490a      	ldr	r1, [pc, #40]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800817a:	d105      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008188:	7cbb      	ldrb	r3, [r7, #18]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40021000 	.word	0x40021000

08008198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e049      	b.n	800823e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fa fc56 	bl	8002a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f001 f808 	bl	80091ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b01      	cmp	r3, #1
 800825a:	d001      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e054      	b.n	800830a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a26      	ldr	r2, [pc, #152]	@ (8008318 <HAL_TIM_Base_Start_IT+0xd0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d022      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800828a:	d01d      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a22      	ldr	r2, [pc, #136]	@ (800831c <HAL_TIM_Base_Start_IT+0xd4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d018      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a21      	ldr	r2, [pc, #132]	@ (8008320 <HAL_TIM_Base_Start_IT+0xd8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008324 <HAL_TIM_Base_Start_IT+0xdc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00e      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008328 <HAL_TIM_Base_Start_IT+0xe0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d009      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1c      	ldr	r2, [pc, #112]	@ (800832c <HAL_TIM_Base_Start_IT+0xe4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d004      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x80>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008330 <HAL_TIM_Base_Start_IT+0xe8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d115      	bne.n	80082f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	4b19      	ldr	r3, [pc, #100]	@ (8008334 <HAL_TIM_Base_Start_IT+0xec>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b06      	cmp	r3, #6
 80082d8:	d015      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0xbe>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e0:	d011      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0201 	orr.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f2:	e008      	b.n	8008306 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0201 	orr.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e000      	b.n	8008308 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40012c00 	.word	0x40012c00
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40013400 	.word	0x40013400
 800832c:	40014000 	.word	0x40014000
 8008330:	40015000 	.word	0x40015000
 8008334:	00010007 	.word	0x00010007

08008338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e049      	b.n	80083de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f841 	bl	80083e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3304      	adds	r3, #4
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f000 ff38 	bl	80091ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <HAL_TIM_PWM_Start+0x24>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	bf14      	ite	ne
 8008418:	2301      	movne	r3, #1
 800841a:	2300      	moveq	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e03c      	b.n	800849a <HAL_TIM_PWM_Start+0x9e>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b04      	cmp	r3, #4
 8008424:	d109      	bne.n	800843a <HAL_TIM_PWM_Start+0x3e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b01      	cmp	r3, #1
 8008430:	bf14      	ite	ne
 8008432:	2301      	movne	r3, #1
 8008434:	2300      	moveq	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	e02f      	b.n	800849a <HAL_TIM_PWM_Start+0x9e>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d109      	bne.n	8008454 <HAL_TIM_PWM_Start+0x58>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf14      	ite	ne
 800844c:	2301      	movne	r3, #1
 800844e:	2300      	moveq	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	e022      	b.n	800849a <HAL_TIM_PWM_Start+0x9e>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b0c      	cmp	r3, #12
 8008458:	d109      	bne.n	800846e <HAL_TIM_PWM_Start+0x72>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	bf14      	ite	ne
 8008466:	2301      	movne	r3, #1
 8008468:	2300      	moveq	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e015      	b.n	800849a <HAL_TIM_PWM_Start+0x9e>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b10      	cmp	r3, #16
 8008472:	d109      	bne.n	8008488 <HAL_TIM_PWM_Start+0x8c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	bf14      	ite	ne
 8008480:	2301      	movne	r3, #1
 8008482:	2300      	moveq	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e008      	b.n	800849a <HAL_TIM_PWM_Start+0x9e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	bf14      	ite	ne
 8008494:	2301      	movne	r3, #1
 8008496:	2300      	moveq	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0a6      	b.n	80085f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <HAL_TIM_PWM_Start+0xb6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084b0:	e023      	b.n	80084fa <HAL_TIM_PWM_Start+0xfe>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d104      	bne.n	80084c2 <HAL_TIM_PWM_Start+0xc6>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084c0:	e01b      	b.n	80084fa <HAL_TIM_PWM_Start+0xfe>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Start+0xd6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084d0:	e013      	b.n	80084fa <HAL_TIM_PWM_Start+0xfe>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b0c      	cmp	r3, #12
 80084d6:	d104      	bne.n	80084e2 <HAL_TIM_PWM_Start+0xe6>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084e0:	e00b      	b.n	80084fa <HAL_TIM_PWM_Start+0xfe>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d104      	bne.n	80084f2 <HAL_TIM_PWM_Start+0xf6>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084f0:	e003      	b.n	80084fa <HAL_TIM_PWM_Start+0xfe>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2201      	movs	r2, #1
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fc16 	bl	8009d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3a      	ldr	r2, [pc, #232]	@ (80085f8 <HAL_TIM_PWM_Start+0x1fc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <HAL_TIM_PWM_Start+0x148>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a39      	ldr	r2, [pc, #228]	@ (80085fc <HAL_TIM_PWM_Start+0x200>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_TIM_PWM_Start+0x148>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a37      	ldr	r2, [pc, #220]	@ (8008600 <HAL_TIM_PWM_Start+0x204>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <HAL_TIM_PWM_Start+0x148>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a36      	ldr	r2, [pc, #216]	@ (8008604 <HAL_TIM_PWM_Start+0x208>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_TIM_PWM_Start+0x148>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a34      	ldr	r2, [pc, #208]	@ (8008608 <HAL_TIM_PWM_Start+0x20c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_TIM_PWM_Start+0x148>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a33      	ldr	r2, [pc, #204]	@ (800860c <HAL_TIM_PWM_Start+0x210>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d101      	bne.n	8008548 <HAL_TIM_PWM_Start+0x14c>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <HAL_TIM_PWM_Start+0x14e>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800855c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a25      	ldr	r2, [pc, #148]	@ (80085f8 <HAL_TIM_PWM_Start+0x1fc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d022      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008570:	d01d      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a26      	ldr	r2, [pc, #152]	@ (8008610 <HAL_TIM_PWM_Start+0x214>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d018      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a24      	ldr	r2, [pc, #144]	@ (8008614 <HAL_TIM_PWM_Start+0x218>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a23      	ldr	r2, [pc, #140]	@ (8008618 <HAL_TIM_PWM_Start+0x21c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00e      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a19      	ldr	r2, [pc, #100]	@ (80085fc <HAL_TIM_PWM_Start+0x200>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <HAL_TIM_PWM_Start+0x204>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_TIM_PWM_Start+0x1b2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a18      	ldr	r2, [pc, #96]	@ (800860c <HAL_TIM_PWM_Start+0x210>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d115      	bne.n	80085da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	4b19      	ldr	r3, [pc, #100]	@ (800861c <HAL_TIM_PWM_Start+0x220>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b06      	cmp	r3, #6
 80085be:	d015      	beq.n	80085ec <HAL_TIM_PWM_Start+0x1f0>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c6:	d011      	beq.n	80085ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d8:	e008      	b.n	80085ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e000      	b.n	80085ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40013400 	.word	0x40013400
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800
 800860c:	40015000 	.word	0x40015000
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	00010007 	.word	0x00010007

08008620 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e049      	b.n	80086c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f841 	bl	80086ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f000 fdc4 	bl	80091ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <HAL_TIM_IC_Start_IT+0x1e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	e023      	b.n	800874a <HAL_TIM_IC_Start_IT+0x66>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b04      	cmp	r3, #4
 8008706:	d104      	bne.n	8008712 <HAL_TIM_IC_Start_IT+0x2e>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800870e:	b2db      	uxtb	r3, r3
 8008710:	e01b      	b.n	800874a <HAL_TIM_IC_Start_IT+0x66>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d104      	bne.n	8008722 <HAL_TIM_IC_Start_IT+0x3e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800871e:	b2db      	uxtb	r3, r3
 8008720:	e013      	b.n	800874a <HAL_TIM_IC_Start_IT+0x66>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d104      	bne.n	8008732 <HAL_TIM_IC_Start_IT+0x4e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800872e:	b2db      	uxtb	r3, r3
 8008730:	e00b      	b.n	800874a <HAL_TIM_IC_Start_IT+0x66>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b10      	cmp	r3, #16
 8008736:	d104      	bne.n	8008742 <HAL_TIM_IC_Start_IT+0x5e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800873e:	b2db      	uxtb	r3, r3
 8008740:	e003      	b.n	800874a <HAL_TIM_IC_Start_IT+0x66>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008748:	b2db      	uxtb	r3, r3
 800874a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_TIM_IC_Start_IT+0x78>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008758:	b2db      	uxtb	r3, r3
 800875a:	e013      	b.n	8008784 <HAL_TIM_IC_Start_IT+0xa0>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d104      	bne.n	800876c <HAL_TIM_IC_Start_IT+0x88>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008768:	b2db      	uxtb	r3, r3
 800876a:	e00b      	b.n	8008784 <HAL_TIM_IC_Start_IT+0xa0>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b08      	cmp	r3, #8
 8008770:	d104      	bne.n	800877c <HAL_TIM_IC_Start_IT+0x98>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e003      	b.n	8008784 <HAL_TIM_IC_Start_IT+0xa0>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008782:	b2db      	uxtb	r3, r3
 8008784:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d102      	bne.n	8008792 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800878c:	7b7b      	ldrb	r3, [r7, #13]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d001      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e0e2      	b.n	800895c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <HAL_TIM_IC_Start_IT+0xc2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087a4:	e023      	b.n	80087ee <HAL_TIM_IC_Start_IT+0x10a>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d104      	bne.n	80087b6 <HAL_TIM_IC_Start_IT+0xd2>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087b4:	e01b      	b.n	80087ee <HAL_TIM_IC_Start_IT+0x10a>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d104      	bne.n	80087c6 <HAL_TIM_IC_Start_IT+0xe2>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087c4:	e013      	b.n	80087ee <HAL_TIM_IC_Start_IT+0x10a>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b0c      	cmp	r3, #12
 80087ca:	d104      	bne.n	80087d6 <HAL_TIM_IC_Start_IT+0xf2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087d4:	e00b      	b.n	80087ee <HAL_TIM_IC_Start_IT+0x10a>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d104      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x102>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087e4:	e003      	b.n	80087ee <HAL_TIM_IC_Start_IT+0x10a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_IC_Start_IT+0x11a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087fc:	e013      	b.n	8008826 <HAL_TIM_IC_Start_IT+0x142>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b04      	cmp	r3, #4
 8008802:	d104      	bne.n	800880e <HAL_TIM_IC_Start_IT+0x12a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800880c:	e00b      	b.n	8008826 <HAL_TIM_IC_Start_IT+0x142>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d104      	bne.n	800881e <HAL_TIM_IC_Start_IT+0x13a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800881c:	e003      	b.n	8008826 <HAL_TIM_IC_Start_IT+0x142>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b0c      	cmp	r3, #12
 800882a:	d841      	bhi.n	80088b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <HAL_TIM_IC_Start_IT+0x150>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008869 	.word	0x08008869
 8008838:	080088b1 	.word	0x080088b1
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	0800887b 	.word	0x0800887b
 8008848:	080088b1 	.word	0x080088b1
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088b1 	.word	0x080088b1
 8008854:	0800888d 	.word	0x0800888d
 8008858:	080088b1 	.word	0x080088b1
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080088b1 	.word	0x080088b1
 8008864:	0800889f 	.word	0x0800889f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0202 	orr.w	r2, r2, #2
 8008876:	60da      	str	r2, [r3, #12]
      break;
 8008878:	e01d      	b.n	80088b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0204 	orr.w	r2, r2, #4
 8008888:	60da      	str	r2, [r3, #12]
      break;
 800888a:	e014      	b.n	80088b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	60da      	str	r2, [r3, #12]
      break;
 800889c:	e00b      	b.n	80088b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0210 	orr.w	r2, r2, #16
 80088ac:	60da      	str	r2, [r3, #12]
      break;
 80088ae:	e002      	b.n	80088b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d14e      	bne.n	800895a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2201      	movs	r2, #1
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fa35 	bl	8009d34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a25      	ldr	r2, [pc, #148]	@ (8008964 <HAL_TIM_IC_Start_IT+0x280>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d022      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088dc:	d01d      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a21      	ldr	r2, [pc, #132]	@ (8008968 <HAL_TIM_IC_Start_IT+0x284>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d018      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1f      	ldr	r2, [pc, #124]	@ (800896c <HAL_TIM_IC_Start_IT+0x288>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008970 <HAL_TIM_IC_Start_IT+0x28c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00e      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1c      	ldr	r2, [pc, #112]	@ (8008974 <HAL_TIM_IC_Start_IT+0x290>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d009      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1b      	ldr	r2, [pc, #108]	@ (8008978 <HAL_TIM_IC_Start_IT+0x294>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <HAL_TIM_IC_Start_IT+0x236>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a19      	ldr	r2, [pc, #100]	@ (800897c <HAL_TIM_IC_Start_IT+0x298>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d115      	bne.n	8008946 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	4b17      	ldr	r3, [pc, #92]	@ (8008980 <HAL_TIM_IC_Start_IT+0x29c>)
 8008922:	4013      	ands	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b06      	cmp	r3, #6
 800892a:	d015      	beq.n	8008958 <HAL_TIM_IC_Start_IT+0x274>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008932:	d011      	beq.n	8008958 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008944:	e008      	b.n	8008958 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f042 0201 	orr.w	r2, r2, #1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e000      	b.n	800895a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008958:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40012c00 	.word	0x40012c00
 8008968:	40000400 	.word	0x40000400
 800896c:	40000800 	.word	0x40000800
 8008970:	40000c00 	.word	0x40000c00
 8008974:	40013400 	.word	0x40013400
 8008978:	40014000 	.word	0x40014000
 800897c:	40015000 	.word	0x40015000
 8008980:	00010007 	.word	0x00010007

08008984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d020      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01b      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0202 	mvn.w	r2, #2
 80089b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f8 fbc0 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbea 	bl	80091b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fbf1 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d020      	beq.n	8008a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0204 	mvn.w	r2, #4
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f8 fb9a 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fbc4 	bl	80091b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fbcb 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d020      	beq.n	8008a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01b      	beq.n	8008a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0208 	mvn.w	r2, #8
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2204      	movs	r2, #4
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7f8 fb74 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fb9e 	bl	80091b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fba5 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d020      	beq.n	8008acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01b      	beq.n	8008acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0210 	mvn.w	r2, #16
 8008a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f8 fb4e 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008ab8:	e005      	b.n	8008ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fb78 	bl	80091b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fb7f 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00c      	beq.n	8008af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0201 	mvn.w	r2, #1
 8008ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7f9 f884 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00c      	beq.n	8008b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d007      	beq.n	8008b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fa65 	bl	8009fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00c      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d007      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fa5d 	bl	8009ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb39 	bl	80091d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f06f 0220 	mvn.w	r2, #32
 8008b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 fa25 	bl	8009fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00c      	beq.n	8008bae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d007      	beq.n	8008bae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 fa31 	bl	800a010 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 fa29 	bl	800a024 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00c      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fa21 	bl	800a038 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00c      	beq.n	8008c1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fa19 	bl	800a04c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c1a:	bf00      	nop
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e088      	b.n	8008d52 <HAL_TIM_IC_ConfigChannel+0x130>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d11b      	bne.n	8008c86 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c5e:	f000 fea3 	bl	80099a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 020c 	bic.w	r2, r2, #12
 8008c70:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6999      	ldr	r1, [r3, #24]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	619a      	str	r2, [r3, #24]
 8008c84:	e060      	b.n	8008d48 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d11c      	bne.n	8008cc6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008c9c:	f000 ff27 	bl	8009aee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008cae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6999      	ldr	r1, [r3, #24]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	021a      	lsls	r2, r3, #8
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	619a      	str	r2, [r3, #24]
 8008cc4:	e040      	b.n	8008d48 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d11b      	bne.n	8008d04 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008cdc:	f000 ff74 	bl	8009bc8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69da      	ldr	r2, [r3, #28]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 020c 	bic.w	r2, r2, #12
 8008cee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	69d9      	ldr	r1, [r3, #28]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	61da      	str	r2, [r3, #28]
 8008d02:	e021      	b.n	8008d48 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b0c      	cmp	r3, #12
 8008d08:	d11c      	bne.n	8008d44 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008d1a:	f000 ff91 	bl	8009c40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d2c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69d9      	ldr	r1, [r3, #28]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	021a      	lsls	r2, r3, #8
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	61da      	str	r2, [r3, #28]
 8008d42:	e001      	b.n	8008d48 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e0ff      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b14      	cmp	r3, #20
 8008d86:	f200 80f0 	bhi.w	8008f6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008f6b 	.word	0x08008f6b
 8008d98:	08008f6b 	.word	0x08008f6b
 8008d9c:	08008f6b 	.word	0x08008f6b
 8008da0:	08008e25 	.word	0x08008e25
 8008da4:	08008f6b 	.word	0x08008f6b
 8008da8:	08008f6b 	.word	0x08008f6b
 8008dac:	08008f6b 	.word	0x08008f6b
 8008db0:	08008e67 	.word	0x08008e67
 8008db4:	08008f6b 	.word	0x08008f6b
 8008db8:	08008f6b 	.word	0x08008f6b
 8008dbc:	08008f6b 	.word	0x08008f6b
 8008dc0:	08008ea7 	.word	0x08008ea7
 8008dc4:	08008f6b 	.word	0x08008f6b
 8008dc8:	08008f6b 	.word	0x08008f6b
 8008dcc:	08008f6b 	.word	0x08008f6b
 8008dd0:	08008ee9 	.word	0x08008ee9
 8008dd4:	08008f6b 	.word	0x08008f6b
 8008dd8:	08008f6b 	.word	0x08008f6b
 8008ddc:	08008f6b 	.word	0x08008f6b
 8008de0:	08008f29 	.word	0x08008f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fab2 	bl	8009354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0208 	orr.w	r2, r2, #8
 8008dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0204 	bic.w	r2, r2, #4
 8008e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6999      	ldr	r1, [r3, #24]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	619a      	str	r2, [r3, #24]
      break;
 8008e22:	e0a5      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fb2c 	bl	8009488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6999      	ldr	r1, [r3, #24]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	021a      	lsls	r2, r3, #8
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	619a      	str	r2, [r3, #24]
      break;
 8008e64:	e084      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fb9f 	bl	80095b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0208 	orr.w	r2, r2, #8
 8008e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0204 	bic.w	r2, r2, #4
 8008e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69d9      	ldr	r1, [r3, #28]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	61da      	str	r2, [r3, #28]
      break;
 8008ea4:	e064      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fc11 	bl	80096d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69d9      	ldr	r1, [r3, #28]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	021a      	lsls	r2, r3, #8
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	61da      	str	r2, [r3, #28]
      break;
 8008ee6:	e043      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fc84 	bl	80097fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0208 	orr.w	r2, r2, #8
 8008f02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0204 	bic.w	r2, r2, #4
 8008f12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f26:	e023      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fcce 	bl	80098d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	021a      	lsls	r2, r3, #8
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f68:	e002      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop

08008f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e0f6      	b.n	800918e <HAL_TIM_ConfigClockSource+0x20a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008fbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a6f      	ldr	r2, [pc, #444]	@ (8009198 <HAL_TIM_ConfigClockSource+0x214>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f000 80c1 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8008fe0:	4a6d      	ldr	r2, [pc, #436]	@ (8009198 <HAL_TIM_ConfigClockSource+0x214>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f200 80c6 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe8:	4a6c      	ldr	r2, [pc, #432]	@ (800919c <HAL_TIM_ConfigClockSource+0x218>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f000 80b9 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff0:	4a6a      	ldr	r2, [pc, #424]	@ (800919c <HAL_TIM_ConfigClockSource+0x218>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f200 80be 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff8:	4a69      	ldr	r2, [pc, #420]	@ (80091a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f000 80b1 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009000:	4a67      	ldr	r2, [pc, #412]	@ (80091a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f200 80b6 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009008:	4a66      	ldr	r2, [pc, #408]	@ (80091a4 <HAL_TIM_ConfigClockSource+0x220>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f000 80a9 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009010:	4a64      	ldr	r2, [pc, #400]	@ (80091a4 <HAL_TIM_ConfigClockSource+0x220>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f200 80ae 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009018:	4a63      	ldr	r2, [pc, #396]	@ (80091a8 <HAL_TIM_ConfigClockSource+0x224>)
 800901a:	4293      	cmp	r3, r2
 800901c:	f000 80a1 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009020:	4a61      	ldr	r2, [pc, #388]	@ (80091a8 <HAL_TIM_ConfigClockSource+0x224>)
 8009022:	4293      	cmp	r3, r2
 8009024:	f200 80a6 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009028:	4a60      	ldr	r2, [pc, #384]	@ (80091ac <HAL_TIM_ConfigClockSource+0x228>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f000 8099 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009030:	4a5e      	ldr	r2, [pc, #376]	@ (80091ac <HAL_TIM_ConfigClockSource+0x228>)
 8009032:	4293      	cmp	r3, r2
 8009034:	f200 809e 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009038:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800903c:	f000 8091 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009040:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009044:	f200 8096 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800904c:	f000 8089 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009054:	f200 808e 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800905c:	d03e      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x158>
 800905e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009062:	f200 8087 	bhi.w	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800906a:	f000 8086 	beq.w	800917a <HAL_TIM_ConfigClockSource+0x1f6>
 800906e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009072:	d87f      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009074:	2b70      	cmp	r3, #112	@ 0x70
 8009076:	d01a      	beq.n	80090ae <HAL_TIM_ConfigClockSource+0x12a>
 8009078:	2b70      	cmp	r3, #112	@ 0x70
 800907a:	d87b      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 800907c:	2b60      	cmp	r3, #96	@ 0x60
 800907e:	d050      	beq.n	8009122 <HAL_TIM_ConfigClockSource+0x19e>
 8009080:	2b60      	cmp	r3, #96	@ 0x60
 8009082:	d877      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009084:	2b50      	cmp	r3, #80	@ 0x50
 8009086:	d03c      	beq.n	8009102 <HAL_TIM_ConfigClockSource+0x17e>
 8009088:	2b50      	cmp	r3, #80	@ 0x50
 800908a:	d873      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 800908c:	2b40      	cmp	r3, #64	@ 0x40
 800908e:	d058      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x1be>
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	d86f      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 8009094:	2b30      	cmp	r3, #48	@ 0x30
 8009096:	d064      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 8009098:	2b30      	cmp	r3, #48	@ 0x30
 800909a:	d86b      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 800909c:	2b20      	cmp	r3, #32
 800909e:	d060      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d867      	bhi.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d05c      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d05a      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x1de>
 80090ac:	e062      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090be:	f000 fe19 	bl	8009cf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	609a      	str	r2, [r3, #8]
      break;
 80090da:	e04f      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090ec:	f000 fe02 	bl	8009cf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090fe:	609a      	str	r2, [r3, #8]
      break;
 8009100:	e03c      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800910e:	461a      	mov	r2, r3
 8009110:	f000 fcbe 	bl	8009a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2150      	movs	r1, #80	@ 0x50
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fdcd 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 8009120:	e02c      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800912e:	461a      	mov	r2, r3
 8009130:	f000 fd1a 	bl	8009b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2160      	movs	r1, #96	@ 0x60
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fdbd 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 8009140:	e01c      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	461a      	mov	r2, r3
 8009150:	f000 fc9e 	bl	8009a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2140      	movs	r1, #64	@ 0x40
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fdad 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 8009160:	e00c      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f000 fda4 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 8009172:	e003      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	73fb      	strb	r3, [r7, #15]
      break;
 8009178:	e000      	b.n	800917c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800917a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	00100070 	.word	0x00100070
 800919c:	00100060 	.word	0x00100060
 80091a0:	00100050 	.word	0x00100050
 80091a4:	00100040 	.word	0x00100040
 80091a8:	00100030 	.word	0x00100030
 80091ac:	00100020 	.word	0x00100020

080091b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a4c      	ldr	r2, [pc, #304]	@ (8009330 <TIM_Base_SetConfig+0x144>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d017      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800920a:	d013      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a49      	ldr	r2, [pc, #292]	@ (8009334 <TIM_Base_SetConfig+0x148>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d00f      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a48      	ldr	r2, [pc, #288]	@ (8009338 <TIM_Base_SetConfig+0x14c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00b      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a47      	ldr	r2, [pc, #284]	@ (800933c <TIM_Base_SetConfig+0x150>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a46      	ldr	r2, [pc, #280]	@ (8009340 <TIM_Base_SetConfig+0x154>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_Base_SetConfig+0x48>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a45      	ldr	r2, [pc, #276]	@ (8009344 <TIM_Base_SetConfig+0x158>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d108      	bne.n	8009246 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800923a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a39      	ldr	r2, [pc, #228]	@ (8009330 <TIM_Base_SetConfig+0x144>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d023      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009254:	d01f      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a36      	ldr	r2, [pc, #216]	@ (8009334 <TIM_Base_SetConfig+0x148>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d01b      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a35      	ldr	r2, [pc, #212]	@ (8009338 <TIM_Base_SetConfig+0x14c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d017      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a34      	ldr	r2, [pc, #208]	@ (800933c <TIM_Base_SetConfig+0x150>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d013      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a33      	ldr	r2, [pc, #204]	@ (8009340 <TIM_Base_SetConfig+0x154>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00f      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a33      	ldr	r2, [pc, #204]	@ (8009348 <TIM_Base_SetConfig+0x15c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00b      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a32      	ldr	r2, [pc, #200]	@ (800934c <TIM_Base_SetConfig+0x160>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a31      	ldr	r2, [pc, #196]	@ (8009350 <TIM_Base_SetConfig+0x164>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d003      	beq.n	8009296 <TIM_Base_SetConfig+0xaa>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a2c      	ldr	r2, [pc, #176]	@ (8009344 <TIM_Base_SetConfig+0x158>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d108      	bne.n	80092a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800929c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a18      	ldr	r2, [pc, #96]	@ (8009330 <TIM_Base_SetConfig+0x144>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <TIM_Base_SetConfig+0x110>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009340 <TIM_Base_SetConfig+0x154>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00f      	beq.n	80092fc <TIM_Base_SetConfig+0x110>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a1a      	ldr	r2, [pc, #104]	@ (8009348 <TIM_Base_SetConfig+0x15c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00b      	beq.n	80092fc <TIM_Base_SetConfig+0x110>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a19      	ldr	r2, [pc, #100]	@ (800934c <TIM_Base_SetConfig+0x160>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_Base_SetConfig+0x110>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a18      	ldr	r2, [pc, #96]	@ (8009350 <TIM_Base_SetConfig+0x164>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_Base_SetConfig+0x110>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a13      	ldr	r2, [pc, #76]	@ (8009344 <TIM_Base_SetConfig+0x158>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d103      	bne.n	8009304 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b01      	cmp	r3, #1
 8009314:	d105      	bne.n	8009322 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	611a      	str	r2, [r3, #16]
  }
}
 8009322:	bf00      	nop
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	40012c00 	.word	0x40012c00
 8009334:	40000400 	.word	0x40000400
 8009338:	40000800 	.word	0x40000800
 800933c:	40000c00 	.word	0x40000c00
 8009340:	40013400 	.word	0x40013400
 8009344:	40015000 	.word	0x40015000
 8009348:	40014000 	.word	0x40014000
 800934c:	40014400 	.word	0x40014400
 8009350:	40014800 	.word	0x40014800

08009354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	f023 0201 	bic.w	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f023 0302 	bic.w	r3, r3, #2
 80093a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a30      	ldr	r2, [pc, #192]	@ (8009470 <TIM_OC1_SetConfig+0x11c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d013      	beq.n	80093dc <TIM_OC1_SetConfig+0x88>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009474 <TIM_OC1_SetConfig+0x120>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d00f      	beq.n	80093dc <TIM_OC1_SetConfig+0x88>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2e      	ldr	r2, [pc, #184]	@ (8009478 <TIM_OC1_SetConfig+0x124>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d00b      	beq.n	80093dc <TIM_OC1_SetConfig+0x88>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a2d      	ldr	r2, [pc, #180]	@ (800947c <TIM_OC1_SetConfig+0x128>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d007      	beq.n	80093dc <TIM_OC1_SetConfig+0x88>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009480 <TIM_OC1_SetConfig+0x12c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d003      	beq.n	80093dc <TIM_OC1_SetConfig+0x88>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009484 <TIM_OC1_SetConfig+0x130>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d10c      	bne.n	80093f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f023 0308 	bic.w	r3, r3, #8
 80093e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f023 0304 	bic.w	r3, r3, #4
 80093f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009470 <TIM_OC1_SetConfig+0x11c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d013      	beq.n	8009426 <TIM_OC1_SetConfig+0xd2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a1c      	ldr	r2, [pc, #112]	@ (8009474 <TIM_OC1_SetConfig+0x120>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d00f      	beq.n	8009426 <TIM_OC1_SetConfig+0xd2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1b      	ldr	r2, [pc, #108]	@ (8009478 <TIM_OC1_SetConfig+0x124>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00b      	beq.n	8009426 <TIM_OC1_SetConfig+0xd2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1a      	ldr	r2, [pc, #104]	@ (800947c <TIM_OC1_SetConfig+0x128>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d007      	beq.n	8009426 <TIM_OC1_SetConfig+0xd2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a19      	ldr	r2, [pc, #100]	@ (8009480 <TIM_OC1_SetConfig+0x12c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d003      	beq.n	8009426 <TIM_OC1_SetConfig+0xd2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <TIM_OC1_SetConfig+0x130>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d111      	bne.n	800944a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800942c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	621a      	str	r2, [r3, #32]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40014000 	.word	0x40014000
 800947c:	40014400 	.word	0x40014400
 8009480:	40014800 	.word	0x40014800
 8009484:	40015000 	.word	0x40015000

08009488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	f023 0210 	bic.w	r2, r3, #16
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	021b      	lsls	r3, r3, #8
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f023 0320 	bic.w	r3, r3, #32
 80094d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009598 <TIM_OC2_SetConfig+0x110>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d007      	beq.n	80094fc <TIM_OC2_SetConfig+0x74>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a2b      	ldr	r2, [pc, #172]	@ (800959c <TIM_OC2_SetConfig+0x114>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d003      	beq.n	80094fc <TIM_OC2_SetConfig+0x74>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a2a      	ldr	r2, [pc, #168]	@ (80095a0 <TIM_OC2_SetConfig+0x118>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d10d      	bne.n	8009518 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	4313      	orrs	r3, r2
 800950e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1f      	ldr	r2, [pc, #124]	@ (8009598 <TIM_OC2_SetConfig+0x110>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d013      	beq.n	8009548 <TIM_OC2_SetConfig+0xc0>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1e      	ldr	r2, [pc, #120]	@ (800959c <TIM_OC2_SetConfig+0x114>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00f      	beq.n	8009548 <TIM_OC2_SetConfig+0xc0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1e      	ldr	r2, [pc, #120]	@ (80095a4 <TIM_OC2_SetConfig+0x11c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <TIM_OC2_SetConfig+0xc0>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a1d      	ldr	r2, [pc, #116]	@ (80095a8 <TIM_OC2_SetConfig+0x120>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_OC2_SetConfig+0xc0>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1c      	ldr	r2, [pc, #112]	@ (80095ac <TIM_OC2_SetConfig+0x124>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC2_SetConfig+0xc0>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a17      	ldr	r2, [pc, #92]	@ (80095a0 <TIM_OC2_SetConfig+0x118>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d113      	bne.n	8009570 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800954e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	621a      	str	r2, [r3, #32]
}
 800958a:	bf00      	nop
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40013400 	.word	0x40013400
 80095a0:	40015000 	.word	0x40015000
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40014400 	.word	0x40014400
 80095ac:	40014800 	.word	0x40014800

080095b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a2b      	ldr	r2, [pc, #172]	@ (80096bc <TIM_OC3_SetConfig+0x10c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d007      	beq.n	8009622 <TIM_OC3_SetConfig+0x72>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2a      	ldr	r2, [pc, #168]	@ (80096c0 <TIM_OC3_SetConfig+0x110>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d003      	beq.n	8009622 <TIM_OC3_SetConfig+0x72>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a29      	ldr	r2, [pc, #164]	@ (80096c4 <TIM_OC3_SetConfig+0x114>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d10d      	bne.n	800963e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800963c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a1e      	ldr	r2, [pc, #120]	@ (80096bc <TIM_OC3_SetConfig+0x10c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d013      	beq.n	800966e <TIM_OC3_SetConfig+0xbe>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a1d      	ldr	r2, [pc, #116]	@ (80096c0 <TIM_OC3_SetConfig+0x110>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00f      	beq.n	800966e <TIM_OC3_SetConfig+0xbe>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a1d      	ldr	r2, [pc, #116]	@ (80096c8 <TIM_OC3_SetConfig+0x118>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00b      	beq.n	800966e <TIM_OC3_SetConfig+0xbe>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a1c      	ldr	r2, [pc, #112]	@ (80096cc <TIM_OC3_SetConfig+0x11c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d007      	beq.n	800966e <TIM_OC3_SetConfig+0xbe>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1b      	ldr	r2, [pc, #108]	@ (80096d0 <TIM_OC3_SetConfig+0x120>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC3_SetConfig+0xbe>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a16      	ldr	r2, [pc, #88]	@ (80096c4 <TIM_OC3_SetConfig+0x114>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d113      	bne.n	8009696 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800967c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	621a      	str	r2, [r3, #32]
}
 80096b0:	bf00      	nop
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	40013400 	.word	0x40013400
 80096c4:	40015000 	.word	0x40015000
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40014400 	.word	0x40014400
 80096d0:	40014800 	.word	0x40014800

080096d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800970e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	031b      	lsls	r3, r3, #12
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	4313      	orrs	r3, r2
 800972e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a2c      	ldr	r2, [pc, #176]	@ (80097e4 <TIM_OC4_SetConfig+0x110>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <TIM_OC4_SetConfig+0x74>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a2b      	ldr	r2, [pc, #172]	@ (80097e8 <TIM_OC4_SetConfig+0x114>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_OC4_SetConfig+0x74>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a2a      	ldr	r2, [pc, #168]	@ (80097ec <TIM_OC4_SetConfig+0x118>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d10d      	bne.n	8009764 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800974e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	031b      	lsls	r3, r3, #12
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1f      	ldr	r2, [pc, #124]	@ (80097e4 <TIM_OC4_SetConfig+0x110>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d013      	beq.n	8009794 <TIM_OC4_SetConfig+0xc0>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1e      	ldr	r2, [pc, #120]	@ (80097e8 <TIM_OC4_SetConfig+0x114>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d00f      	beq.n	8009794 <TIM_OC4_SetConfig+0xc0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1e      	ldr	r2, [pc, #120]	@ (80097f0 <TIM_OC4_SetConfig+0x11c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00b      	beq.n	8009794 <TIM_OC4_SetConfig+0xc0>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1d      	ldr	r2, [pc, #116]	@ (80097f4 <TIM_OC4_SetConfig+0x120>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_OC4_SetConfig+0xc0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a1c      	ldr	r2, [pc, #112]	@ (80097f8 <TIM_OC4_SetConfig+0x124>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC4_SetConfig+0xc0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a17      	ldr	r2, [pc, #92]	@ (80097ec <TIM_OC4_SetConfig+0x118>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d113      	bne.n	80097bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800979a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	019b      	lsls	r3, r3, #6
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	019b      	lsls	r3, r3, #6
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	621a      	str	r2, [r3, #32]
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40012c00 	.word	0x40012c00
 80097e8:	40013400 	.word	0x40013400
 80097ec:	40015000 	.word	0x40015000
 80097f0:	40014000 	.word	0x40014000
 80097f4:	40014400 	.word	0x40014400
 80097f8:	40014800 	.word	0x40014800

080097fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800982a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a19      	ldr	r2, [pc, #100]	@ (80098b8 <TIM_OC5_SetConfig+0xbc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <TIM_OC5_SetConfig+0x82>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <TIM_OC5_SetConfig+0xc0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00f      	beq.n	800987e <TIM_OC5_SetConfig+0x82>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a17      	ldr	r2, [pc, #92]	@ (80098c0 <TIM_OC5_SetConfig+0xc4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00b      	beq.n	800987e <TIM_OC5_SetConfig+0x82>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a16      	ldr	r2, [pc, #88]	@ (80098c4 <TIM_OC5_SetConfig+0xc8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <TIM_OC5_SetConfig+0x82>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a15      	ldr	r2, [pc, #84]	@ (80098c8 <TIM_OC5_SetConfig+0xcc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d003      	beq.n	800987e <TIM_OC5_SetConfig+0x82>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a14      	ldr	r2, [pc, #80]	@ (80098cc <TIM_OC5_SetConfig+0xd0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d109      	bne.n	8009892 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	621a      	str	r2, [r3, #32]
}
 80098ac:	bf00      	nop
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800
 80098cc:	40015000 	.word	0x40015000

080098d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	021b      	lsls	r3, r3, #8
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	051b      	lsls	r3, r3, #20
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a1a      	ldr	r2, [pc, #104]	@ (8009990 <TIM_OC6_SetConfig+0xc0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d013      	beq.n	8009954 <TIM_OC6_SetConfig+0x84>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a19      	ldr	r2, [pc, #100]	@ (8009994 <TIM_OC6_SetConfig+0xc4>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00f      	beq.n	8009954 <TIM_OC6_SetConfig+0x84>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a18      	ldr	r2, [pc, #96]	@ (8009998 <TIM_OC6_SetConfig+0xc8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d00b      	beq.n	8009954 <TIM_OC6_SetConfig+0x84>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a17      	ldr	r2, [pc, #92]	@ (800999c <TIM_OC6_SetConfig+0xcc>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d007      	beq.n	8009954 <TIM_OC6_SetConfig+0x84>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a16      	ldr	r2, [pc, #88]	@ (80099a0 <TIM_OC6_SetConfig+0xd0>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d003      	beq.n	8009954 <TIM_OC6_SetConfig+0x84>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a15      	ldr	r2, [pc, #84]	@ (80099a4 <TIM_OC6_SetConfig+0xd4>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d109      	bne.n	8009968 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800995a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	029b      	lsls	r3, r3, #10
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	621a      	str	r2, [r3, #32]
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40012c00 	.word	0x40012c00
 8009994:	40013400 	.word	0x40013400
 8009998:	40014000 	.word	0x40014000
 800999c:	40014400 	.word	0x40014400
 80099a0:	40014800 	.word	0x40014800
 80099a4:	40015000 	.word	0x40015000

080099a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	f023 0201 	bic.w	r2, r3, #1
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a28      	ldr	r2, [pc, #160]	@ (8009a74 <TIM_TI1_SetConfig+0xcc>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d01b      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099dc:	d017      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4a25      	ldr	r2, [pc, #148]	@ (8009a78 <TIM_TI1_SetConfig+0xd0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d013      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4a24      	ldr	r2, [pc, #144]	@ (8009a7c <TIM_TI1_SetConfig+0xd4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00f      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a23      	ldr	r2, [pc, #140]	@ (8009a80 <TIM_TI1_SetConfig+0xd8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00b      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4a22      	ldr	r2, [pc, #136]	@ (8009a84 <TIM_TI1_SetConfig+0xdc>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d007      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <TIM_TI1_SetConfig+0xe0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d003      	beq.n	8009a0e <TIM_TI1_SetConfig+0x66>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4a20      	ldr	r2, [pc, #128]	@ (8009a8c <TIM_TI1_SetConfig+0xe4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d101      	bne.n	8009a12 <TIM_TI1_SetConfig+0x6a>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <TIM_TI1_SetConfig+0x6c>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d008      	beq.n	8009a2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	e003      	b.n	8009a32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f043 0301 	orr.w	r3, r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f023 030a 	bic.w	r3, r3, #10
 8009a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f003 030a 	and.w	r3, r3, #10
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	40000c00 	.word	0x40000c00
 8009a84:	40013400 	.word	0x40013400
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40015000 	.word	0x40015000

08009a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f023 0201 	bic.w	r2, r3, #1
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f023 030a 	bic.w	r3, r3, #10
 8009acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	621a      	str	r2, [r3, #32]
}
 8009ae2:	bf00      	nop
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b087      	sub	sp, #28
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	f023 0210 	bic.w	r2, r3, #16
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	031b      	lsls	r3, r3, #12
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	621a      	str	r2, [r3, #32]
}
 8009b5c:	bf00      	nop
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	f023 0210 	bic.w	r2, r3, #16
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	031b      	lsls	r3, r3, #12
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	621a      	str	r2, [r3, #32]
}
 8009bbc:	bf00      	nop
 8009bbe:	371c      	adds	r7, #28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f023 0303 	bic.w	r3, r3, #3
 8009bf4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009c18:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	621a      	str	r2, [r3, #32]
}
 8009c34:	bf00      	nop
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	031b      	lsls	r3, r3, #12
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009c92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	031b      	lsls	r3, r3, #12
 8009c98:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f043 0307 	orr.w	r3, r3, #7
 8009ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	609a      	str	r2, [r3, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	021a      	lsls	r2, r3, #8
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	609a      	str	r2, [r3, #8]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f003 031f 	and.w	r3, r3, #31
 8009d46:	2201      	movs	r2, #1
 8009d48:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1a      	ldr	r2, [r3, #32]
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	43db      	mvns	r3, r3
 8009d56:	401a      	ands	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a1a      	ldr	r2, [r3, #32]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f003 031f 	and.w	r3, r3, #31
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	621a      	str	r2, [r3, #32]
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e074      	b.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a34      	ldr	r2, [pc, #208]	@ (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d009      	beq.n	8009dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a33      	ldr	r2, [pc, #204]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d004      	beq.n	8009dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a31      	ldr	r2, [pc, #196]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d108      	bne.n	8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a21      	ldr	r2, [pc, #132]	@ (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d022      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e18:	d01d      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d018      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d013      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a15      	ldr	r2, [pc, #84]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a18      	ldr	r2, [pc, #96]	@ (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a11      	ldr	r2, [pc, #68]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d10c      	bne.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40012c00 	.word	0x40012c00
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40015000 	.word	0x40015000
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	40000800 	.word	0x40000800
 8009ea4:	40000c00 	.word	0x40000c00
 8009ea8:	40014000 	.word	0x40014000

08009eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e078      	b.n	8009fba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a1c      	ldr	r2, [pc, #112]	@ (8009fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d009      	beq.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8009fcc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d004      	beq.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a19      	ldr	r2, [pc, #100]	@ (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d11c      	bne.n	8009fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	051b      	lsls	r3, r3, #20
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40013400 	.word	0x40013400
 8009fd0:	40015000 	.word	0x40015000

08009fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e042      	b.n	800a0f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7f8 fe6f 	bl	8002d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2224      	movs	r2, #36	@ 0x24
 800a08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0201 	bic.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fb24 	bl	800a6f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f825 	bl	800a100 <UART_SetConfig>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e01b      	b.n	800a0f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fba3 	bl	800a83c <UART_CheckIdleState>
 800a0f6:	4603      	mov	r3, r0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a104:	b08c      	sub	sp, #48	@ 0x30
 800a106:	af00      	add	r7, sp, #0
 800a108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	431a      	orrs	r2, r3
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	431a      	orrs	r2, r3
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	4313      	orrs	r3, r2
 800a126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4baa      	ldr	r3, [pc, #680]	@ (800a3d8 <UART_SetConfig+0x2d8>)
 800a130:	4013      	ands	r3, r2
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	6812      	ldr	r2, [r2, #0]
 800a136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a138:	430b      	orrs	r3, r1
 800a13a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a9f      	ldr	r2, [pc, #636]	@ (800a3dc <UART_SetConfig+0x2dc>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a168:	4313      	orrs	r3, r2
 800a16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a176:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	6812      	ldr	r2, [r2, #0]
 800a17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a180:	430b      	orrs	r3, r1
 800a182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	f023 010f 	bic.w	r1, r3, #15
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a90      	ldr	r2, [pc, #576]	@ (800a3e0 <UART_SetConfig+0x2e0>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d125      	bne.n	800a1f0 <UART_SetConfig+0xf0>
 800a1a4:	4b8f      	ldr	r3, [pc, #572]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1aa:	f003 0303 	and.w	r3, r3, #3
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d81a      	bhi.n	800a1e8 <UART_SetConfig+0xe8>
 800a1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b8 <UART_SetConfig+0xb8>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a1c9 	.word	0x0800a1c9
 800a1bc:	0800a1d9 	.word	0x0800a1d9
 800a1c0:	0800a1d1 	.word	0x0800a1d1
 800a1c4:	0800a1e1 	.word	0x0800a1e1
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	e116      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d6:	e112      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a1d8:	2304      	movs	r3, #4
 800a1da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1de:	e10e      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e6:	e10a      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a1e8:	2310      	movs	r3, #16
 800a1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ee:	e106      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a7c      	ldr	r2, [pc, #496]	@ (800a3e8 <UART_SetConfig+0x2e8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d138      	bne.n	800a26c <UART_SetConfig+0x16c>
 800a1fa:	4b7a      	ldr	r3, [pc, #488]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a200:	f003 030c 	and.w	r3, r3, #12
 800a204:	2b0c      	cmp	r3, #12
 800a206:	d82d      	bhi.n	800a264 <UART_SetConfig+0x164>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <UART_SetConfig+0x110>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a245 	.word	0x0800a245
 800a214:	0800a265 	.word	0x0800a265
 800a218:	0800a265 	.word	0x0800a265
 800a21c:	0800a265 	.word	0x0800a265
 800a220:	0800a255 	.word	0x0800a255
 800a224:	0800a265 	.word	0x0800a265
 800a228:	0800a265 	.word	0x0800a265
 800a22c:	0800a265 	.word	0x0800a265
 800a230:	0800a24d 	.word	0x0800a24d
 800a234:	0800a265 	.word	0x0800a265
 800a238:	0800a265 	.word	0x0800a265
 800a23c:	0800a265 	.word	0x0800a265
 800a240:	0800a25d 	.word	0x0800a25d
 800a244:	2300      	movs	r3, #0
 800a246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24a:	e0d8      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a24c:	2302      	movs	r3, #2
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a252:	e0d4      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25a:	e0d0      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a262:	e0cc      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26a:	e0c8      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a5e      	ldr	r2, [pc, #376]	@ (800a3ec <UART_SetConfig+0x2ec>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d125      	bne.n	800a2c2 <UART_SetConfig+0x1c2>
 800a276:	4b5b      	ldr	r3, [pc, #364]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a27c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a280:	2b30      	cmp	r3, #48	@ 0x30
 800a282:	d016      	beq.n	800a2b2 <UART_SetConfig+0x1b2>
 800a284:	2b30      	cmp	r3, #48	@ 0x30
 800a286:	d818      	bhi.n	800a2ba <UART_SetConfig+0x1ba>
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d00a      	beq.n	800a2a2 <UART_SetConfig+0x1a2>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d814      	bhi.n	800a2ba <UART_SetConfig+0x1ba>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <UART_SetConfig+0x19a>
 800a294:	2b10      	cmp	r3, #16
 800a296:	d008      	beq.n	800a2aa <UART_SetConfig+0x1aa>
 800a298:	e00f      	b.n	800a2ba <UART_SetConfig+0x1ba>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a0:	e0ad      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a8:	e0a9      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b0:	e0a5      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b8:	e0a1      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2ba:	2310      	movs	r3, #16
 800a2bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2c0:	e09d      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a3f0 <UART_SetConfig+0x2f0>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d125      	bne.n	800a318 <UART_SetConfig+0x218>
 800a2cc:	4b45      	ldr	r3, [pc, #276]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2d8:	d016      	beq.n	800a308 <UART_SetConfig+0x208>
 800a2da:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2dc:	d818      	bhi.n	800a310 <UART_SetConfig+0x210>
 800a2de:	2b80      	cmp	r3, #128	@ 0x80
 800a2e0:	d00a      	beq.n	800a2f8 <UART_SetConfig+0x1f8>
 800a2e2:	2b80      	cmp	r3, #128	@ 0x80
 800a2e4:	d814      	bhi.n	800a310 <UART_SetConfig+0x210>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <UART_SetConfig+0x1f0>
 800a2ea:	2b40      	cmp	r3, #64	@ 0x40
 800a2ec:	d008      	beq.n	800a300 <UART_SetConfig+0x200>
 800a2ee:	e00f      	b.n	800a310 <UART_SetConfig+0x210>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f6:	e082      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fe:	e07e      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a306:	e07a      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30e:	e076      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a316:	e072      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a35      	ldr	r2, [pc, #212]	@ (800a3f4 <UART_SetConfig+0x2f4>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d12a      	bne.n	800a378 <UART_SetConfig+0x278>
 800a322:	4b30      	ldr	r3, [pc, #192]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a32c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a330:	d01a      	beq.n	800a368 <UART_SetConfig+0x268>
 800a332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a336:	d81b      	bhi.n	800a370 <UART_SetConfig+0x270>
 800a338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33c:	d00c      	beq.n	800a358 <UART_SetConfig+0x258>
 800a33e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a342:	d815      	bhi.n	800a370 <UART_SetConfig+0x270>
 800a344:	2b00      	cmp	r3, #0
 800a346:	d003      	beq.n	800a350 <UART_SetConfig+0x250>
 800a348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a34c:	d008      	beq.n	800a360 <UART_SetConfig+0x260>
 800a34e:	e00f      	b.n	800a370 <UART_SetConfig+0x270>
 800a350:	2300      	movs	r3, #0
 800a352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a356:	e052      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a358:	2302      	movs	r3, #2
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35e:	e04e      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a366:	e04a      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36e:	e046      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a376:	e042      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a17      	ldr	r2, [pc, #92]	@ (800a3dc <UART_SetConfig+0x2dc>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d13a      	bne.n	800a3f8 <UART_SetConfig+0x2f8>
 800a382:	4b18      	ldr	r3, [pc, #96]	@ (800a3e4 <UART_SetConfig+0x2e4>)
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a388:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a38c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a390:	d01a      	beq.n	800a3c8 <UART_SetConfig+0x2c8>
 800a392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a396:	d81b      	bhi.n	800a3d0 <UART_SetConfig+0x2d0>
 800a398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a39c:	d00c      	beq.n	800a3b8 <UART_SetConfig+0x2b8>
 800a39e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3a2:	d815      	bhi.n	800a3d0 <UART_SetConfig+0x2d0>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <UART_SetConfig+0x2b0>
 800a3a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3ac:	d008      	beq.n	800a3c0 <UART_SetConfig+0x2c0>
 800a3ae:	e00f      	b.n	800a3d0 <UART_SetConfig+0x2d0>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b6:	e022      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3be:	e01e      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3c6:	e01a      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ce:	e016      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3d6:	e012      	b.n	800a3fe <UART_SetConfig+0x2fe>
 800a3d8:	cfff69f3 	.word	0xcfff69f3
 800a3dc:	40008000 	.word	0x40008000
 800a3e0:	40013800 	.word	0x40013800
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	40004400 	.word	0x40004400
 800a3ec:	40004800 	.word	0x40004800
 800a3f0:	40004c00 	.word	0x40004c00
 800a3f4:	40005000 	.word	0x40005000
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4aae      	ldr	r2, [pc, #696]	@ (800a6bc <UART_SetConfig+0x5bc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	f040 8097 	bne.w	800a538 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a40a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a40e:	2b08      	cmp	r3, #8
 800a410:	d823      	bhi.n	800a45a <UART_SetConfig+0x35a>
 800a412:	a201      	add	r2, pc, #4	@ (adr r2, 800a418 <UART_SetConfig+0x318>)
 800a414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a45b 	.word	0x0800a45b
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a45b 	.word	0x0800a45b
 800a428:	0800a44b 	.word	0x0800a44b
 800a42c:	0800a45b 	.word	0x0800a45b
 800a430:	0800a45b 	.word	0x0800a45b
 800a434:	0800a45b 	.word	0x0800a45b
 800a438:	0800a453 	.word	0x0800a453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a43c:	f7fd fbec 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 800a440:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a442:	e010      	b.n	800a466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a444:	4b9e      	ldr	r3, [pc, #632]	@ (800a6c0 <UART_SetConfig+0x5c0>)
 800a446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a448:	e00d      	b.n	800a466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a44a:	f7fd fb77 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 800a44e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a450:	e009      	b.n	800a466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a458:	e005      	b.n	800a466 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 8130 	beq.w	800a6ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a472:	4a94      	ldr	r2, [pc, #592]	@ (800a6c4 <UART_SetConfig+0x5c4>)
 800a474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a478:	461a      	mov	r2, r3
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a480:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4413      	add	r3, r2
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d305      	bcc.n	800a49e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d903      	bls.n	800a4a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4a4:	e113      	b.n	800a6ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	60bb      	str	r3, [r7, #8]
 800a4ac:	60fa      	str	r2, [r7, #12]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b2:	4a84      	ldr	r2, [pc, #528]	@ (800a6c4 <UART_SetConfig+0x5c4>)
 800a4b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	603b      	str	r3, [r7, #0]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c8:	f7f5 ff02 	bl	80002d0 <__aeabi_uldivmod>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	f04f 0200 	mov.w	r2, #0
 800a4d8:	f04f 0300 	mov.w	r3, #0
 800a4dc:	020b      	lsls	r3, r1, #8
 800a4de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4e2:	0202      	lsls	r2, r0, #8
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	6849      	ldr	r1, [r1, #4]
 800a4e8:	0849      	lsrs	r1, r1, #1
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	eb12 0804 	adds.w	r8, r2, r4
 800a4f4:	eb43 0905 	adc.w	r9, r3, r5
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	469a      	mov	sl, r3
 800a500:	4693      	mov	fp, r2
 800a502:	4652      	mov	r2, sl
 800a504:	465b      	mov	r3, fp
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f5 fee1 	bl	80002d0 <__aeabi_uldivmod>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4613      	mov	r3, r2
 800a514:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a51c:	d308      	bcc.n	800a530 <UART_SetConfig+0x430>
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a524:	d204      	bcs.n	800a530 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6a3a      	ldr	r2, [r7, #32]
 800a52c:	60da      	str	r2, [r3, #12]
 800a52e:	e0ce      	b.n	800a6ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a536:	e0ca      	b.n	800a6ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a540:	d166      	bne.n	800a610 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a542:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a546:	2b08      	cmp	r3, #8
 800a548:	d827      	bhi.n	800a59a <UART_SetConfig+0x49a>
 800a54a:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <UART_SetConfig+0x450>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a585 	.word	0x0800a585
 800a55c:	0800a59b 	.word	0x0800a59b
 800a560:	0800a58b 	.word	0x0800a58b
 800a564:	0800a59b 	.word	0x0800a59b
 800a568:	0800a59b 	.word	0x0800a59b
 800a56c:	0800a59b 	.word	0x0800a59b
 800a570:	0800a593 	.word	0x0800a593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a574:	f7fd fb50 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 800a578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a57a:	e014      	b.n	800a5a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a57c:	f7fd fb62 	bl	8007c44 <HAL_RCC_GetPCLK2Freq>
 800a580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a582:	e010      	b.n	800a5a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a584:	4b4e      	ldr	r3, [pc, #312]	@ (800a6c0 <UART_SetConfig+0x5c0>)
 800a586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a588:	e00d      	b.n	800a5a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a58a:	f7fd fad7 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 800a58e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a590:	e009      	b.n	800a5a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a598:	e005      	b.n	800a5a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a59a:	2300      	movs	r3, #0
 800a59c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 8090 	beq.w	800a6ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b2:	4a44      	ldr	r2, [pc, #272]	@ (800a6c4 <UART_SetConfig+0x5c4>)
 800a5b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c0:	005a      	lsls	r2, r3, #1
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	085b      	lsrs	r3, r3, #1
 800a5c8:	441a      	add	r2, r3
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	2b0f      	cmp	r3, #15
 800a5d8:	d916      	bls.n	800a608 <UART_SetConfig+0x508>
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5e0:	d212      	bcs.n	800a608 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f023 030f 	bic.w	r3, r3, #15
 800a5ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	085b      	lsrs	r3, r3, #1
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	8bfb      	ldrh	r3, [r7, #30]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	8bfa      	ldrh	r2, [r7, #30]
 800a604:	60da      	str	r2, [r3, #12]
 800a606:	e062      	b.n	800a6ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a60e:	e05e      	b.n	800a6ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a610:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a614:	2b08      	cmp	r3, #8
 800a616:	d828      	bhi.n	800a66a <UART_SetConfig+0x56a>
 800a618:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <UART_SetConfig+0x520>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a64d 	.word	0x0800a64d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	0800a66b 	.word	0x0800a66b
 800a630:	0800a65b 	.word	0x0800a65b
 800a634:	0800a66b 	.word	0x0800a66b
 800a638:	0800a66b 	.word	0x0800a66b
 800a63c:	0800a66b 	.word	0x0800a66b
 800a640:	0800a663 	.word	0x0800a663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a644:	f7fd fae8 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 800a648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a64a:	e014      	b.n	800a676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a64c:	f7fd fafa 	bl	8007c44 <HAL_RCC_GetPCLK2Freq>
 800a650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a652:	e010      	b.n	800a676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a654:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c0 <UART_SetConfig+0x5c0>)
 800a656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a658:	e00d      	b.n	800a676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a65a:	f7fd fa6f 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 800a65e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a660:	e009      	b.n	800a676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a668:	e005      	b.n	800a676 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a674:	bf00      	nop
    }

    if (pclk != 0U)
 800a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d028      	beq.n	800a6ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a680:	4a10      	ldr	r2, [pc, #64]	@ (800a6c4 <UART_SetConfig+0x5c4>)
 800a682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a686:	461a      	mov	r2, r3
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	085b      	lsrs	r3, r3, #1
 800a694:	441a      	add	r2, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	2b0f      	cmp	r3, #15
 800a6a4:	d910      	bls.n	800a6c8 <UART_SetConfig+0x5c8>
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ac:	d20c      	bcs.n	800a6c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60da      	str	r2, [r3, #12]
 800a6b8:	e009      	b.n	800a6ce <UART_SetConfig+0x5ce>
 800a6ba:	bf00      	nop
 800a6bc:	40008000 	.word	0x40008000
 800a6c0:	00f42400 	.word	0x00f42400
 800a6c4:	0800b6ec 	.word	0x0800b6ec
      }
      else
      {
        ret = HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3730      	adds	r7, #48	@ 0x30
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a6f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00a      	beq.n	800a722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	430a      	orrs	r2, r1
 800a742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ae:	f003 0320 	and.w	r3, r3, #32
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01a      	beq.n	800a80e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f6:	d10a      	bne.n	800a80e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	605a      	str	r2, [r3, #4]
  }
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b098      	sub	sp, #96	@ 0x60
 800a840:	af02      	add	r7, sp, #8
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a84c:	f7f8 fb72 	bl	8002f34 <HAL_GetTick>
 800a850:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0308 	and.w	r3, r3, #8
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d12f      	bne.n	800a8c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a860:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a868:	2200      	movs	r2, #0
 800a86a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f88e 	bl	800a990 <UART_WaitOnFlagUntilTimeout>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d022      	beq.n	800a8c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a88e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	461a      	mov	r2, r3
 800a896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a898:	647b      	str	r3, [r7, #68]	@ 0x44
 800a89a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a89e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8a0:	e841 2300 	strex	r3, r2, [r1]
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e6      	bne.n	800a87a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e063      	b.n	800a988 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0304 	and.w	r3, r3, #4
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d149      	bne.n	800a962 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f857 	bl	800a990 <UART_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d03c      	beq.n	800a962 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a906:	633b      	str	r3, [r7, #48]	@ 0x30
 800a908:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a90c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e6      	bne.n	800a8e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	e853 3f00 	ldrex	r3, [r3]
 800a928:	60fb      	str	r3, [r7, #12]
   return(result);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f023 0301 	bic.w	r3, r3, #1
 800a930:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a93a:	61fa      	str	r2, [r7, #28]
 800a93c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	69b9      	ldr	r1, [r7, #24]
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	617b      	str	r3, [r7, #20]
   return(result);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e5      	bne.n	800a91a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e012      	b.n	800a988 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3758      	adds	r7, #88	@ 0x58
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	4613      	mov	r3, r2
 800a99e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a0:	e04f      	b.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a8:	d04b      	beq.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9aa:	f7f8 fac3 	bl	8002f34 <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d302      	bcc.n	800a9c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e04e      	b.n	800aa62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d037      	beq.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b80      	cmp	r3, #128	@ 0x80
 800a9d6:	d034      	beq.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b40      	cmp	r3, #64	@ 0x40
 800a9dc:	d031      	beq.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d110      	bne.n	800aa0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f838 	bl	800aa6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2208      	movs	r2, #8
 800a9fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e029      	b.n	800aa62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa1c:	d111      	bne.n	800aa42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 f81e 	bl	800aa6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e00f      	b.n	800aa62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	69da      	ldr	r2, [r3, #28]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	bf0c      	ite	eq
 800aa52:	2301      	moveq	r3, #1
 800aa54:	2300      	movne	r3, #0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d0a0      	beq.n	800a9a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b095      	sub	sp, #84	@ 0x54
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7a:	e853 3f00 	ldrex	r3, [r3]
 800aa7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa90:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa98:	e841 2300 	strex	r3, r2, [r1]
 800aa9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e6      	bne.n	800aa72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aaca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e3      	bne.n	800aaa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d118      	bne.n	800ab16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f023 0310 	bic.w	r3, r3, #16
 800aaf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab02:	61bb      	str	r3, [r7, #24]
 800ab04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6979      	ldr	r1, [r7, #20]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e6      	bne.n	800aae4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab2a:	bf00      	nop
 800ab2c:	3754      	adds	r7, #84	@ 0x54
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_UARTEx_DisableFifoMode+0x16>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e027      	b.n	800ab9c <HAL_UARTEx_DisableFifoMode+0x66>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2224      	movs	r2, #36	@ 0x24
 800ab58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0201 	bic.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d101      	bne.n	800abc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abbc:	2302      	movs	r3, #2
 800abbe:	e02d      	b.n	800ac1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2224      	movs	r2, #36	@ 0x24
 800abcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f022 0201 	bic.w	r2, r2, #1
 800abe6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f84f 	bl	800aca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	e02d      	b.n	800ac98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2224      	movs	r2, #36	@ 0x24
 800ac48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0201 	bic.w	r2, r2, #1
 800ac62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f811 	bl	800aca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acac:	2b00      	cmp	r3, #0
 800acae:	d108      	bne.n	800acc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acc0:	e031      	b.n	800ad26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acc2:	2308      	movs	r3, #8
 800acc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acc6:	2308      	movs	r3, #8
 800acc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	0e5b      	lsrs	r3, r3, #25
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	0f5b      	lsrs	r3, r3, #29
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f003 0307 	and.w	r3, r3, #7
 800ace8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	7b3a      	ldrb	r2, [r7, #12]
 800acee:	4911      	ldr	r1, [pc, #68]	@ (800ad34 <UARTEx_SetNbDataToProcess+0x94>)
 800acf0:	5c8a      	ldrb	r2, [r1, r2]
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800acf6:	7b3a      	ldrb	r2, [r7, #12]
 800acf8:	490f      	ldr	r1, [pc, #60]	@ (800ad38 <UARTEx_SetNbDataToProcess+0x98>)
 800acfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	7b7a      	ldrb	r2, [r7, #13]
 800ad0c:	4909      	ldr	r1, [pc, #36]	@ (800ad34 <UARTEx_SetNbDataToProcess+0x94>)
 800ad0e:	5c8a      	ldrb	r2, [r1, r2]
 800ad10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad14:	7b7a      	ldrb	r2, [r7, #13]
 800ad16:	4908      	ldr	r1, [pc, #32]	@ (800ad38 <UARTEx_SetNbDataToProcess+0x98>)
 800ad18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	0800b704 	.word	0x0800b704
 800ad38:	0800b70c 	.word	0x0800b70c

0800ad3c <siprintf>:
 800ad3c:	b40e      	push	{r1, r2, r3}
 800ad3e:	b500      	push	{lr}
 800ad40:	b09c      	sub	sp, #112	@ 0x70
 800ad42:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad44:	9002      	str	r0, [sp, #8]
 800ad46:	9006      	str	r0, [sp, #24]
 800ad48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad4c:	4809      	ldr	r0, [pc, #36]	@ (800ad74 <siprintf+0x38>)
 800ad4e:	9107      	str	r1, [sp, #28]
 800ad50:	9104      	str	r1, [sp, #16]
 800ad52:	4909      	ldr	r1, [pc, #36]	@ (800ad78 <siprintf+0x3c>)
 800ad54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad58:	9105      	str	r1, [sp, #20]
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	a902      	add	r1, sp, #8
 800ad60:	f000 f994 	bl	800b08c <_svfiprintf_r>
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	b01c      	add	sp, #112	@ 0x70
 800ad6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad70:	b003      	add	sp, #12
 800ad72:	4770      	bx	lr
 800ad74:	20000048 	.word	0x20000048
 800ad78:	ffff0208 	.word	0xffff0208

0800ad7c <memset>:
 800ad7c:	4402      	add	r2, r0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d100      	bne.n	800ad86 <memset+0xa>
 800ad84:	4770      	bx	lr
 800ad86:	f803 1b01 	strb.w	r1, [r3], #1
 800ad8a:	e7f9      	b.n	800ad80 <memset+0x4>

0800ad8c <__errno>:
 800ad8c:	4b01      	ldr	r3, [pc, #4]	@ (800ad94 <__errno+0x8>)
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000048 	.word	0x20000048

0800ad98 <__libc_init_array>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	4d0d      	ldr	r5, [pc, #52]	@ (800add0 <__libc_init_array+0x38>)
 800ad9c:	4c0d      	ldr	r4, [pc, #52]	@ (800add4 <__libc_init_array+0x3c>)
 800ad9e:	1b64      	subs	r4, r4, r5
 800ada0:	10a4      	asrs	r4, r4, #2
 800ada2:	2600      	movs	r6, #0
 800ada4:	42a6      	cmp	r6, r4
 800ada6:	d109      	bne.n	800adbc <__libc_init_array+0x24>
 800ada8:	4d0b      	ldr	r5, [pc, #44]	@ (800add8 <__libc_init_array+0x40>)
 800adaa:	4c0c      	ldr	r4, [pc, #48]	@ (800addc <__libc_init_array+0x44>)
 800adac:	f000 fc66 	bl	800b67c <_init>
 800adb0:	1b64      	subs	r4, r4, r5
 800adb2:	10a4      	asrs	r4, r4, #2
 800adb4:	2600      	movs	r6, #0
 800adb6:	42a6      	cmp	r6, r4
 800adb8:	d105      	bne.n	800adc6 <__libc_init_array+0x2e>
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc0:	4798      	blx	r3
 800adc2:	3601      	adds	r6, #1
 800adc4:	e7ee      	b.n	800ada4 <__libc_init_array+0xc>
 800adc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adca:	4798      	blx	r3
 800adcc:	3601      	adds	r6, #1
 800adce:	e7f2      	b.n	800adb6 <__libc_init_array+0x1e>
 800add0:	0800b750 	.word	0x0800b750
 800add4:	0800b750 	.word	0x0800b750
 800add8:	0800b750 	.word	0x0800b750
 800addc:	0800b754 	.word	0x0800b754

0800ade0 <__retarget_lock_acquire_recursive>:
 800ade0:	4770      	bx	lr

0800ade2 <__retarget_lock_release_recursive>:
 800ade2:	4770      	bx	lr

0800ade4 <_free_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4605      	mov	r5, r0
 800ade8:	2900      	cmp	r1, #0
 800adea:	d041      	beq.n	800ae70 <_free_r+0x8c>
 800adec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf0:	1f0c      	subs	r4, r1, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfb8      	it	lt
 800adf6:	18e4      	addlt	r4, r4, r3
 800adf8:	f000 f8e0 	bl	800afbc <__malloc_lock>
 800adfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ae74 <_free_r+0x90>)
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	b933      	cbnz	r3, 800ae10 <_free_r+0x2c>
 800ae02:	6063      	str	r3, [r4, #4]
 800ae04:	6014      	str	r4, [r2, #0]
 800ae06:	4628      	mov	r0, r5
 800ae08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0c:	f000 b8dc 	b.w	800afc8 <__malloc_unlock>
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d908      	bls.n	800ae26 <_free_r+0x42>
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	1821      	adds	r1, r4, r0
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	bf01      	itttt	eq
 800ae1c:	6819      	ldreq	r1, [r3, #0]
 800ae1e:	685b      	ldreq	r3, [r3, #4]
 800ae20:	1809      	addeq	r1, r1, r0
 800ae22:	6021      	streq	r1, [r4, #0]
 800ae24:	e7ed      	b.n	800ae02 <_free_r+0x1e>
 800ae26:	461a      	mov	r2, r3
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	b10b      	cbz	r3, 800ae30 <_free_r+0x4c>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d9fa      	bls.n	800ae26 <_free_r+0x42>
 800ae30:	6811      	ldr	r1, [r2, #0]
 800ae32:	1850      	adds	r0, r2, r1
 800ae34:	42a0      	cmp	r0, r4
 800ae36:	d10b      	bne.n	800ae50 <_free_r+0x6c>
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	4401      	add	r1, r0
 800ae3c:	1850      	adds	r0, r2, r1
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	6011      	str	r1, [r2, #0]
 800ae42:	d1e0      	bne.n	800ae06 <_free_r+0x22>
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	6053      	str	r3, [r2, #4]
 800ae4a:	4408      	add	r0, r1
 800ae4c:	6010      	str	r0, [r2, #0]
 800ae4e:	e7da      	b.n	800ae06 <_free_r+0x22>
 800ae50:	d902      	bls.n	800ae58 <_free_r+0x74>
 800ae52:	230c      	movs	r3, #12
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	e7d6      	b.n	800ae06 <_free_r+0x22>
 800ae58:	6820      	ldr	r0, [r4, #0]
 800ae5a:	1821      	adds	r1, r4, r0
 800ae5c:	428b      	cmp	r3, r1
 800ae5e:	bf04      	itt	eq
 800ae60:	6819      	ldreq	r1, [r3, #0]
 800ae62:	685b      	ldreq	r3, [r3, #4]
 800ae64:	6063      	str	r3, [r4, #4]
 800ae66:	bf04      	itt	eq
 800ae68:	1809      	addeq	r1, r1, r0
 800ae6a:	6021      	streq	r1, [r4, #0]
 800ae6c:	6054      	str	r4, [r2, #4]
 800ae6e:	e7ca      	b.n	800ae06 <_free_r+0x22>
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
 800ae72:	bf00      	nop
 800ae74:	20000a10 	.word	0x20000a10

0800ae78 <sbrk_aligned>:
 800ae78:	b570      	push	{r4, r5, r6, lr}
 800ae7a:	4e0f      	ldr	r6, [pc, #60]	@ (800aeb8 <sbrk_aligned+0x40>)
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	6831      	ldr	r1, [r6, #0]
 800ae80:	4605      	mov	r5, r0
 800ae82:	b911      	cbnz	r1, 800ae8a <sbrk_aligned+0x12>
 800ae84:	f000 fba6 	bl	800b5d4 <_sbrk_r>
 800ae88:	6030      	str	r0, [r6, #0]
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 fba1 	bl	800b5d4 <_sbrk_r>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	d103      	bne.n	800ae9e <sbrk_aligned+0x26>
 800ae96:	f04f 34ff 	mov.w	r4, #4294967295
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	1cc4      	adds	r4, r0, #3
 800aea0:	f024 0403 	bic.w	r4, r4, #3
 800aea4:	42a0      	cmp	r0, r4
 800aea6:	d0f8      	beq.n	800ae9a <sbrk_aligned+0x22>
 800aea8:	1a21      	subs	r1, r4, r0
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 fb92 	bl	800b5d4 <_sbrk_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d1f2      	bne.n	800ae9a <sbrk_aligned+0x22>
 800aeb4:	e7ef      	b.n	800ae96 <sbrk_aligned+0x1e>
 800aeb6:	bf00      	nop
 800aeb8:	20000a0c 	.word	0x20000a0c

0800aebc <_malloc_r>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	1ccd      	adds	r5, r1, #3
 800aec2:	f025 0503 	bic.w	r5, r5, #3
 800aec6:	3508      	adds	r5, #8
 800aec8:	2d0c      	cmp	r5, #12
 800aeca:	bf38      	it	cc
 800aecc:	250c      	movcc	r5, #12
 800aece:	2d00      	cmp	r5, #0
 800aed0:	4606      	mov	r6, r0
 800aed2:	db01      	blt.n	800aed8 <_malloc_r+0x1c>
 800aed4:	42a9      	cmp	r1, r5
 800aed6:	d904      	bls.n	800aee2 <_malloc_r+0x26>
 800aed8:	230c      	movs	r3, #12
 800aeda:	6033      	str	r3, [r6, #0]
 800aedc:	2000      	movs	r0, #0
 800aede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afb8 <_malloc_r+0xfc>
 800aee6:	f000 f869 	bl	800afbc <__malloc_lock>
 800aeea:	f8d8 3000 	ldr.w	r3, [r8]
 800aeee:	461c      	mov	r4, r3
 800aef0:	bb44      	cbnz	r4, 800af44 <_malloc_r+0x88>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff ffbf 	bl	800ae78 <sbrk_aligned>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	4604      	mov	r4, r0
 800aefe:	d158      	bne.n	800afb2 <_malloc_r+0xf6>
 800af00:	f8d8 4000 	ldr.w	r4, [r8]
 800af04:	4627      	mov	r7, r4
 800af06:	2f00      	cmp	r7, #0
 800af08:	d143      	bne.n	800af92 <_malloc_r+0xd6>
 800af0a:	2c00      	cmp	r4, #0
 800af0c:	d04b      	beq.n	800afa6 <_malloc_r+0xea>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	4639      	mov	r1, r7
 800af12:	4630      	mov	r0, r6
 800af14:	eb04 0903 	add.w	r9, r4, r3
 800af18:	f000 fb5c 	bl	800b5d4 <_sbrk_r>
 800af1c:	4581      	cmp	r9, r0
 800af1e:	d142      	bne.n	800afa6 <_malloc_r+0xea>
 800af20:	6821      	ldr	r1, [r4, #0]
 800af22:	1a6d      	subs	r5, r5, r1
 800af24:	4629      	mov	r1, r5
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ffa6 	bl	800ae78 <sbrk_aligned>
 800af2c:	3001      	adds	r0, #1
 800af2e:	d03a      	beq.n	800afa6 <_malloc_r+0xea>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	442b      	add	r3, r5
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	f8d8 3000 	ldr.w	r3, [r8]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	bb62      	cbnz	r2, 800af98 <_malloc_r+0xdc>
 800af3e:	f8c8 7000 	str.w	r7, [r8]
 800af42:	e00f      	b.n	800af64 <_malloc_r+0xa8>
 800af44:	6822      	ldr	r2, [r4, #0]
 800af46:	1b52      	subs	r2, r2, r5
 800af48:	d420      	bmi.n	800af8c <_malloc_r+0xd0>
 800af4a:	2a0b      	cmp	r2, #11
 800af4c:	d917      	bls.n	800af7e <_malloc_r+0xc2>
 800af4e:	1961      	adds	r1, r4, r5
 800af50:	42a3      	cmp	r3, r4
 800af52:	6025      	str	r5, [r4, #0]
 800af54:	bf18      	it	ne
 800af56:	6059      	strne	r1, [r3, #4]
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	bf08      	it	eq
 800af5c:	f8c8 1000 	streq.w	r1, [r8]
 800af60:	5162      	str	r2, [r4, r5]
 800af62:	604b      	str	r3, [r1, #4]
 800af64:	4630      	mov	r0, r6
 800af66:	f000 f82f 	bl	800afc8 <__malloc_unlock>
 800af6a:	f104 000b 	add.w	r0, r4, #11
 800af6e:	1d23      	adds	r3, r4, #4
 800af70:	f020 0007 	bic.w	r0, r0, #7
 800af74:	1ac2      	subs	r2, r0, r3
 800af76:	bf1c      	itt	ne
 800af78:	1a1b      	subne	r3, r3, r0
 800af7a:	50a3      	strne	r3, [r4, r2]
 800af7c:	e7af      	b.n	800aede <_malloc_r+0x22>
 800af7e:	6862      	ldr	r2, [r4, #4]
 800af80:	42a3      	cmp	r3, r4
 800af82:	bf0c      	ite	eq
 800af84:	f8c8 2000 	streq.w	r2, [r8]
 800af88:	605a      	strne	r2, [r3, #4]
 800af8a:	e7eb      	b.n	800af64 <_malloc_r+0xa8>
 800af8c:	4623      	mov	r3, r4
 800af8e:	6864      	ldr	r4, [r4, #4]
 800af90:	e7ae      	b.n	800aef0 <_malloc_r+0x34>
 800af92:	463c      	mov	r4, r7
 800af94:	687f      	ldr	r7, [r7, #4]
 800af96:	e7b6      	b.n	800af06 <_malloc_r+0x4a>
 800af98:	461a      	mov	r2, r3
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	d1fb      	bne.n	800af98 <_malloc_r+0xdc>
 800afa0:	2300      	movs	r3, #0
 800afa2:	6053      	str	r3, [r2, #4]
 800afa4:	e7de      	b.n	800af64 <_malloc_r+0xa8>
 800afa6:	230c      	movs	r3, #12
 800afa8:	6033      	str	r3, [r6, #0]
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 f80c 	bl	800afc8 <__malloc_unlock>
 800afb0:	e794      	b.n	800aedc <_malloc_r+0x20>
 800afb2:	6005      	str	r5, [r0, #0]
 800afb4:	e7d6      	b.n	800af64 <_malloc_r+0xa8>
 800afb6:	bf00      	nop
 800afb8:	20000a10 	.word	0x20000a10

0800afbc <__malloc_lock>:
 800afbc:	4801      	ldr	r0, [pc, #4]	@ (800afc4 <__malloc_lock+0x8>)
 800afbe:	f7ff bf0f 	b.w	800ade0 <__retarget_lock_acquire_recursive>
 800afc2:	bf00      	nop
 800afc4:	20000a08 	.word	0x20000a08

0800afc8 <__malloc_unlock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__malloc_unlock+0x8>)
 800afca:	f7ff bf0a 	b.w	800ade2 <__retarget_lock_release_recursive>
 800afce:	bf00      	nop
 800afd0:	20000a08 	.word	0x20000a08

0800afd4 <__ssputs_r>:
 800afd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd8:	688e      	ldr	r6, [r1, #8]
 800afda:	461f      	mov	r7, r3
 800afdc:	42be      	cmp	r6, r7
 800afde:	680b      	ldr	r3, [r1, #0]
 800afe0:	4682      	mov	sl, r0
 800afe2:	460c      	mov	r4, r1
 800afe4:	4690      	mov	r8, r2
 800afe6:	d82d      	bhi.n	800b044 <__ssputs_r+0x70>
 800afe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aff0:	d026      	beq.n	800b040 <__ssputs_r+0x6c>
 800aff2:	6965      	ldr	r5, [r4, #20]
 800aff4:	6909      	ldr	r1, [r1, #16]
 800aff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800affa:	eba3 0901 	sub.w	r9, r3, r1
 800affe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b002:	1c7b      	adds	r3, r7, #1
 800b004:	444b      	add	r3, r9
 800b006:	106d      	asrs	r5, r5, #1
 800b008:	429d      	cmp	r5, r3
 800b00a:	bf38      	it	cc
 800b00c:	461d      	movcc	r5, r3
 800b00e:	0553      	lsls	r3, r2, #21
 800b010:	d527      	bpl.n	800b062 <__ssputs_r+0x8e>
 800b012:	4629      	mov	r1, r5
 800b014:	f7ff ff52 	bl	800aebc <_malloc_r>
 800b018:	4606      	mov	r6, r0
 800b01a:	b360      	cbz	r0, 800b076 <__ssputs_r+0xa2>
 800b01c:	6921      	ldr	r1, [r4, #16]
 800b01e:	464a      	mov	r2, r9
 800b020:	f000 fae8 	bl	800b5f4 <memcpy>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02e:	81a3      	strh	r3, [r4, #12]
 800b030:	6126      	str	r6, [r4, #16]
 800b032:	6165      	str	r5, [r4, #20]
 800b034:	444e      	add	r6, r9
 800b036:	eba5 0509 	sub.w	r5, r5, r9
 800b03a:	6026      	str	r6, [r4, #0]
 800b03c:	60a5      	str	r5, [r4, #8]
 800b03e:	463e      	mov	r6, r7
 800b040:	42be      	cmp	r6, r7
 800b042:	d900      	bls.n	800b046 <__ssputs_r+0x72>
 800b044:	463e      	mov	r6, r7
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	4632      	mov	r2, r6
 800b04a:	4641      	mov	r1, r8
 800b04c:	f000 faa8 	bl	800b5a0 <memmove>
 800b050:	68a3      	ldr	r3, [r4, #8]
 800b052:	1b9b      	subs	r3, r3, r6
 800b054:	60a3      	str	r3, [r4, #8]
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	4433      	add	r3, r6
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	2000      	movs	r0, #0
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	462a      	mov	r2, r5
 800b064:	f000 fad4 	bl	800b610 <_realloc_r>
 800b068:	4606      	mov	r6, r0
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d1e0      	bne.n	800b030 <__ssputs_r+0x5c>
 800b06e:	6921      	ldr	r1, [r4, #16]
 800b070:	4650      	mov	r0, sl
 800b072:	f7ff feb7 	bl	800ade4 <_free_r>
 800b076:	230c      	movs	r3, #12
 800b078:	f8ca 3000 	str.w	r3, [sl]
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b082:	81a3      	strh	r3, [r4, #12]
 800b084:	f04f 30ff 	mov.w	r0, #4294967295
 800b088:	e7e9      	b.n	800b05e <__ssputs_r+0x8a>
	...

0800b08c <_svfiprintf_r>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	4698      	mov	r8, r3
 800b092:	898b      	ldrh	r3, [r1, #12]
 800b094:	061b      	lsls	r3, r3, #24
 800b096:	b09d      	sub	sp, #116	@ 0x74
 800b098:	4607      	mov	r7, r0
 800b09a:	460d      	mov	r5, r1
 800b09c:	4614      	mov	r4, r2
 800b09e:	d510      	bpl.n	800b0c2 <_svfiprintf_r+0x36>
 800b0a0:	690b      	ldr	r3, [r1, #16]
 800b0a2:	b973      	cbnz	r3, 800b0c2 <_svfiprintf_r+0x36>
 800b0a4:	2140      	movs	r1, #64	@ 0x40
 800b0a6:	f7ff ff09 	bl	800aebc <_malloc_r>
 800b0aa:	6028      	str	r0, [r5, #0]
 800b0ac:	6128      	str	r0, [r5, #16]
 800b0ae:	b930      	cbnz	r0, 800b0be <_svfiprintf_r+0x32>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	b01d      	add	sp, #116	@ 0x74
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	2340      	movs	r3, #64	@ 0x40
 800b0c0:	616b      	str	r3, [r5, #20]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d0:	2330      	movs	r3, #48	@ 0x30
 800b0d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b270 <_svfiprintf_r+0x1e4>
 800b0d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0da:	f04f 0901 	mov.w	r9, #1
 800b0de:	4623      	mov	r3, r4
 800b0e0:	469a      	mov	sl, r3
 800b0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e6:	b10a      	cbz	r2, 800b0ec <_svfiprintf_r+0x60>
 800b0e8:	2a25      	cmp	r2, #37	@ 0x25
 800b0ea:	d1f9      	bne.n	800b0e0 <_svfiprintf_r+0x54>
 800b0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f0:	d00b      	beq.n	800b10a <_svfiprintf_r+0x7e>
 800b0f2:	465b      	mov	r3, fp
 800b0f4:	4622      	mov	r2, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7ff ff6b 	bl	800afd4 <__ssputs_r>
 800b0fe:	3001      	adds	r0, #1
 800b100:	f000 80a7 	beq.w	800b252 <_svfiprintf_r+0x1c6>
 800b104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b106:	445a      	add	r2, fp
 800b108:	9209      	str	r2, [sp, #36]	@ 0x24
 800b10a:	f89a 3000 	ldrb.w	r3, [sl]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 809f 	beq.w	800b252 <_svfiprintf_r+0x1c6>
 800b114:	2300      	movs	r3, #0
 800b116:	f04f 32ff 	mov.w	r2, #4294967295
 800b11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b11e:	f10a 0a01 	add.w	sl, sl, #1
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	9307      	str	r3, [sp, #28]
 800b126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b12a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b12c:	4654      	mov	r4, sl
 800b12e:	2205      	movs	r2, #5
 800b130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b134:	484e      	ldr	r0, [pc, #312]	@ (800b270 <_svfiprintf_r+0x1e4>)
 800b136:	f7f5 f87b 	bl	8000230 <memchr>
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	b9d8      	cbnz	r0, 800b176 <_svfiprintf_r+0xea>
 800b13e:	06d0      	lsls	r0, r2, #27
 800b140:	bf44      	itt	mi
 800b142:	2320      	movmi	r3, #32
 800b144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b148:	0711      	lsls	r1, r2, #28
 800b14a:	bf44      	itt	mi
 800b14c:	232b      	movmi	r3, #43	@ 0x2b
 800b14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b152:	f89a 3000 	ldrb.w	r3, [sl]
 800b156:	2b2a      	cmp	r3, #42	@ 0x2a
 800b158:	d015      	beq.n	800b186 <_svfiprintf_r+0xfa>
 800b15a:	9a07      	ldr	r2, [sp, #28]
 800b15c:	4654      	mov	r4, sl
 800b15e:	2000      	movs	r0, #0
 800b160:	f04f 0c0a 	mov.w	ip, #10
 800b164:	4621      	mov	r1, r4
 800b166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16a:	3b30      	subs	r3, #48	@ 0x30
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	d94b      	bls.n	800b208 <_svfiprintf_r+0x17c>
 800b170:	b1b0      	cbz	r0, 800b1a0 <_svfiprintf_r+0x114>
 800b172:	9207      	str	r2, [sp, #28]
 800b174:	e014      	b.n	800b1a0 <_svfiprintf_r+0x114>
 800b176:	eba0 0308 	sub.w	r3, r0, r8
 800b17a:	fa09 f303 	lsl.w	r3, r9, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	9304      	str	r3, [sp, #16]
 800b182:	46a2      	mov	sl, r4
 800b184:	e7d2      	b.n	800b12c <_svfiprintf_r+0xa0>
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	1d19      	adds	r1, r3, #4
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	9103      	str	r1, [sp, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	bfbb      	ittet	lt
 800b192:	425b      	neglt	r3, r3
 800b194:	f042 0202 	orrlt.w	r2, r2, #2
 800b198:	9307      	strge	r3, [sp, #28]
 800b19a:	9307      	strlt	r3, [sp, #28]
 800b19c:	bfb8      	it	lt
 800b19e:	9204      	strlt	r2, [sp, #16]
 800b1a0:	7823      	ldrb	r3, [r4, #0]
 800b1a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1a4:	d10a      	bne.n	800b1bc <_svfiprintf_r+0x130>
 800b1a6:	7863      	ldrb	r3, [r4, #1]
 800b1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1aa:	d132      	bne.n	800b212 <_svfiprintf_r+0x186>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	1d1a      	adds	r2, r3, #4
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	9203      	str	r2, [sp, #12]
 800b1b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1b8:	3402      	adds	r4, #2
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b280 <_svfiprintf_r+0x1f4>
 800b1c0:	7821      	ldrb	r1, [r4, #0]
 800b1c2:	2203      	movs	r2, #3
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	f7f5 f833 	bl	8000230 <memchr>
 800b1ca:	b138      	cbz	r0, 800b1dc <_svfiprintf_r+0x150>
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	eba0 000a 	sub.w	r0, r0, sl
 800b1d2:	2240      	movs	r2, #64	@ 0x40
 800b1d4:	4082      	lsls	r2, r0
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	3401      	adds	r4, #1
 800b1da:	9304      	str	r3, [sp, #16]
 800b1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e0:	4824      	ldr	r0, [pc, #144]	@ (800b274 <_svfiprintf_r+0x1e8>)
 800b1e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e6:	2206      	movs	r2, #6
 800b1e8:	f7f5 f822 	bl	8000230 <memchr>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d036      	beq.n	800b25e <_svfiprintf_r+0x1d2>
 800b1f0:	4b21      	ldr	r3, [pc, #132]	@ (800b278 <_svfiprintf_r+0x1ec>)
 800b1f2:	bb1b      	cbnz	r3, 800b23c <_svfiprintf_r+0x1b0>
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	3307      	adds	r3, #7
 800b1f8:	f023 0307 	bic.w	r3, r3, #7
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	9303      	str	r3, [sp, #12]
 800b200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b202:	4433      	add	r3, r6
 800b204:	9309      	str	r3, [sp, #36]	@ 0x24
 800b206:	e76a      	b.n	800b0de <_svfiprintf_r+0x52>
 800b208:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20c:	460c      	mov	r4, r1
 800b20e:	2001      	movs	r0, #1
 800b210:	e7a8      	b.n	800b164 <_svfiprintf_r+0xd8>
 800b212:	2300      	movs	r3, #0
 800b214:	3401      	adds	r4, #1
 800b216:	9305      	str	r3, [sp, #20]
 800b218:	4619      	mov	r1, r3
 800b21a:	f04f 0c0a 	mov.w	ip, #10
 800b21e:	4620      	mov	r0, r4
 800b220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b224:	3a30      	subs	r2, #48	@ 0x30
 800b226:	2a09      	cmp	r2, #9
 800b228:	d903      	bls.n	800b232 <_svfiprintf_r+0x1a6>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0c6      	beq.n	800b1bc <_svfiprintf_r+0x130>
 800b22e:	9105      	str	r1, [sp, #20]
 800b230:	e7c4      	b.n	800b1bc <_svfiprintf_r+0x130>
 800b232:	fb0c 2101 	mla	r1, ip, r1, r2
 800b236:	4604      	mov	r4, r0
 800b238:	2301      	movs	r3, #1
 800b23a:	e7f0      	b.n	800b21e <_svfiprintf_r+0x192>
 800b23c:	ab03      	add	r3, sp, #12
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	462a      	mov	r2, r5
 800b242:	4b0e      	ldr	r3, [pc, #56]	@ (800b27c <_svfiprintf_r+0x1f0>)
 800b244:	a904      	add	r1, sp, #16
 800b246:	4638      	mov	r0, r7
 800b248:	f3af 8000 	nop.w
 800b24c:	1c42      	adds	r2, r0, #1
 800b24e:	4606      	mov	r6, r0
 800b250:	d1d6      	bne.n	800b200 <_svfiprintf_r+0x174>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	065b      	lsls	r3, r3, #25
 800b256:	f53f af2d 	bmi.w	800b0b4 <_svfiprintf_r+0x28>
 800b25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b25c:	e72c      	b.n	800b0b8 <_svfiprintf_r+0x2c>
 800b25e:	ab03      	add	r3, sp, #12
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	462a      	mov	r2, r5
 800b264:	4b05      	ldr	r3, [pc, #20]	@ (800b27c <_svfiprintf_r+0x1f0>)
 800b266:	a904      	add	r1, sp, #16
 800b268:	4638      	mov	r0, r7
 800b26a:	f000 f879 	bl	800b360 <_printf_i>
 800b26e:	e7ed      	b.n	800b24c <_svfiprintf_r+0x1c0>
 800b270:	0800b714 	.word	0x0800b714
 800b274:	0800b71e 	.word	0x0800b71e
 800b278:	00000000 	.word	0x00000000
 800b27c:	0800afd5 	.word	0x0800afd5
 800b280:	0800b71a 	.word	0x0800b71a

0800b284 <_printf_common>:
 800b284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b288:	4616      	mov	r6, r2
 800b28a:	4698      	mov	r8, r3
 800b28c:	688a      	ldr	r2, [r1, #8]
 800b28e:	690b      	ldr	r3, [r1, #16]
 800b290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b294:	4293      	cmp	r3, r2
 800b296:	bfb8      	it	lt
 800b298:	4613      	movlt	r3, r2
 800b29a:	6033      	str	r3, [r6, #0]
 800b29c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	b10a      	cbz	r2, 800b2aa <_printf_common+0x26>
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	6033      	str	r3, [r6, #0]
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	0699      	lsls	r1, r3, #26
 800b2ae:	bf42      	ittt	mi
 800b2b0:	6833      	ldrmi	r3, [r6, #0]
 800b2b2:	3302      	addmi	r3, #2
 800b2b4:	6033      	strmi	r3, [r6, #0]
 800b2b6:	6825      	ldr	r5, [r4, #0]
 800b2b8:	f015 0506 	ands.w	r5, r5, #6
 800b2bc:	d106      	bne.n	800b2cc <_printf_common+0x48>
 800b2be:	f104 0a19 	add.w	sl, r4, #25
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	6832      	ldr	r2, [r6, #0]
 800b2c6:	1a9b      	subs	r3, r3, r2
 800b2c8:	42ab      	cmp	r3, r5
 800b2ca:	dc26      	bgt.n	800b31a <_printf_common+0x96>
 800b2cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2d0:	6822      	ldr	r2, [r4, #0]
 800b2d2:	3b00      	subs	r3, #0
 800b2d4:	bf18      	it	ne
 800b2d6:	2301      	movne	r3, #1
 800b2d8:	0692      	lsls	r2, r2, #26
 800b2da:	d42b      	bmi.n	800b334 <_printf_common+0xb0>
 800b2dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	47c8      	blx	r9
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d01e      	beq.n	800b328 <_printf_common+0xa4>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	6922      	ldr	r2, [r4, #16]
 800b2ee:	f003 0306 	and.w	r3, r3, #6
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	bf02      	ittt	eq
 800b2f6:	68e5      	ldreq	r5, [r4, #12]
 800b2f8:	6833      	ldreq	r3, [r6, #0]
 800b2fa:	1aed      	subeq	r5, r5, r3
 800b2fc:	68a3      	ldr	r3, [r4, #8]
 800b2fe:	bf0c      	ite	eq
 800b300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b304:	2500      	movne	r5, #0
 800b306:	4293      	cmp	r3, r2
 800b308:	bfc4      	itt	gt
 800b30a:	1a9b      	subgt	r3, r3, r2
 800b30c:	18ed      	addgt	r5, r5, r3
 800b30e:	2600      	movs	r6, #0
 800b310:	341a      	adds	r4, #26
 800b312:	42b5      	cmp	r5, r6
 800b314:	d11a      	bne.n	800b34c <_printf_common+0xc8>
 800b316:	2000      	movs	r0, #0
 800b318:	e008      	b.n	800b32c <_printf_common+0xa8>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4652      	mov	r2, sl
 800b31e:	4641      	mov	r1, r8
 800b320:	4638      	mov	r0, r7
 800b322:	47c8      	blx	r9
 800b324:	3001      	adds	r0, #1
 800b326:	d103      	bne.n	800b330 <_printf_common+0xac>
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b330:	3501      	adds	r5, #1
 800b332:	e7c6      	b.n	800b2c2 <_printf_common+0x3e>
 800b334:	18e1      	adds	r1, r4, r3
 800b336:	1c5a      	adds	r2, r3, #1
 800b338:	2030      	movs	r0, #48	@ 0x30
 800b33a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b33e:	4422      	add	r2, r4
 800b340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b348:	3302      	adds	r3, #2
 800b34a:	e7c7      	b.n	800b2dc <_printf_common+0x58>
 800b34c:	2301      	movs	r3, #1
 800b34e:	4622      	mov	r2, r4
 800b350:	4641      	mov	r1, r8
 800b352:	4638      	mov	r0, r7
 800b354:	47c8      	blx	r9
 800b356:	3001      	adds	r0, #1
 800b358:	d0e6      	beq.n	800b328 <_printf_common+0xa4>
 800b35a:	3601      	adds	r6, #1
 800b35c:	e7d9      	b.n	800b312 <_printf_common+0x8e>
	...

0800b360 <_printf_i>:
 800b360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	7e0f      	ldrb	r7, [r1, #24]
 800b366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b368:	2f78      	cmp	r7, #120	@ 0x78
 800b36a:	4691      	mov	r9, r2
 800b36c:	4680      	mov	r8, r0
 800b36e:	460c      	mov	r4, r1
 800b370:	469a      	mov	sl, r3
 800b372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b376:	d807      	bhi.n	800b388 <_printf_i+0x28>
 800b378:	2f62      	cmp	r7, #98	@ 0x62
 800b37a:	d80a      	bhi.n	800b392 <_printf_i+0x32>
 800b37c:	2f00      	cmp	r7, #0
 800b37e:	f000 80d2 	beq.w	800b526 <_printf_i+0x1c6>
 800b382:	2f58      	cmp	r7, #88	@ 0x58
 800b384:	f000 80b9 	beq.w	800b4fa <_printf_i+0x19a>
 800b388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b38c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b390:	e03a      	b.n	800b408 <_printf_i+0xa8>
 800b392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b396:	2b15      	cmp	r3, #21
 800b398:	d8f6      	bhi.n	800b388 <_printf_i+0x28>
 800b39a:	a101      	add	r1, pc, #4	@ (adr r1, 800b3a0 <_printf_i+0x40>)
 800b39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3a0:	0800b3f9 	.word	0x0800b3f9
 800b3a4:	0800b40d 	.word	0x0800b40d
 800b3a8:	0800b389 	.word	0x0800b389
 800b3ac:	0800b389 	.word	0x0800b389
 800b3b0:	0800b389 	.word	0x0800b389
 800b3b4:	0800b389 	.word	0x0800b389
 800b3b8:	0800b40d 	.word	0x0800b40d
 800b3bc:	0800b389 	.word	0x0800b389
 800b3c0:	0800b389 	.word	0x0800b389
 800b3c4:	0800b389 	.word	0x0800b389
 800b3c8:	0800b389 	.word	0x0800b389
 800b3cc:	0800b50d 	.word	0x0800b50d
 800b3d0:	0800b437 	.word	0x0800b437
 800b3d4:	0800b4c7 	.word	0x0800b4c7
 800b3d8:	0800b389 	.word	0x0800b389
 800b3dc:	0800b389 	.word	0x0800b389
 800b3e0:	0800b52f 	.word	0x0800b52f
 800b3e4:	0800b389 	.word	0x0800b389
 800b3e8:	0800b437 	.word	0x0800b437
 800b3ec:	0800b389 	.word	0x0800b389
 800b3f0:	0800b389 	.word	0x0800b389
 800b3f4:	0800b4cf 	.word	0x0800b4cf
 800b3f8:	6833      	ldr	r3, [r6, #0]
 800b3fa:	1d1a      	adds	r2, r3, #4
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6032      	str	r2, [r6, #0]
 800b400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b408:	2301      	movs	r3, #1
 800b40a:	e09d      	b.n	800b548 <_printf_i+0x1e8>
 800b40c:	6833      	ldr	r3, [r6, #0]
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	1d19      	adds	r1, r3, #4
 800b412:	6031      	str	r1, [r6, #0]
 800b414:	0606      	lsls	r6, r0, #24
 800b416:	d501      	bpl.n	800b41c <_printf_i+0xbc>
 800b418:	681d      	ldr	r5, [r3, #0]
 800b41a:	e003      	b.n	800b424 <_printf_i+0xc4>
 800b41c:	0645      	lsls	r5, r0, #25
 800b41e:	d5fb      	bpl.n	800b418 <_printf_i+0xb8>
 800b420:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b424:	2d00      	cmp	r5, #0
 800b426:	da03      	bge.n	800b430 <_printf_i+0xd0>
 800b428:	232d      	movs	r3, #45	@ 0x2d
 800b42a:	426d      	negs	r5, r5
 800b42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b430:	4859      	ldr	r0, [pc, #356]	@ (800b598 <_printf_i+0x238>)
 800b432:	230a      	movs	r3, #10
 800b434:	e011      	b.n	800b45a <_printf_i+0xfa>
 800b436:	6821      	ldr	r1, [r4, #0]
 800b438:	6833      	ldr	r3, [r6, #0]
 800b43a:	0608      	lsls	r0, r1, #24
 800b43c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b440:	d402      	bmi.n	800b448 <_printf_i+0xe8>
 800b442:	0649      	lsls	r1, r1, #25
 800b444:	bf48      	it	mi
 800b446:	b2ad      	uxthmi	r5, r5
 800b448:	2f6f      	cmp	r7, #111	@ 0x6f
 800b44a:	4853      	ldr	r0, [pc, #332]	@ (800b598 <_printf_i+0x238>)
 800b44c:	6033      	str	r3, [r6, #0]
 800b44e:	bf14      	ite	ne
 800b450:	230a      	movne	r3, #10
 800b452:	2308      	moveq	r3, #8
 800b454:	2100      	movs	r1, #0
 800b456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b45a:	6866      	ldr	r6, [r4, #4]
 800b45c:	60a6      	str	r6, [r4, #8]
 800b45e:	2e00      	cmp	r6, #0
 800b460:	bfa2      	ittt	ge
 800b462:	6821      	ldrge	r1, [r4, #0]
 800b464:	f021 0104 	bicge.w	r1, r1, #4
 800b468:	6021      	strge	r1, [r4, #0]
 800b46a:	b90d      	cbnz	r5, 800b470 <_printf_i+0x110>
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	d04b      	beq.n	800b508 <_printf_i+0x1a8>
 800b470:	4616      	mov	r6, r2
 800b472:	fbb5 f1f3 	udiv	r1, r5, r3
 800b476:	fb03 5711 	mls	r7, r3, r1, r5
 800b47a:	5dc7      	ldrb	r7, [r0, r7]
 800b47c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b480:	462f      	mov	r7, r5
 800b482:	42bb      	cmp	r3, r7
 800b484:	460d      	mov	r5, r1
 800b486:	d9f4      	bls.n	800b472 <_printf_i+0x112>
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d10b      	bne.n	800b4a4 <_printf_i+0x144>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	07df      	lsls	r7, r3, #31
 800b490:	d508      	bpl.n	800b4a4 <_printf_i+0x144>
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6861      	ldr	r1, [r4, #4]
 800b496:	4299      	cmp	r1, r3
 800b498:	bfde      	ittt	le
 800b49a:	2330      	movle	r3, #48	@ 0x30
 800b49c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4a4:	1b92      	subs	r2, r2, r6
 800b4a6:	6122      	str	r2, [r4, #16]
 800b4a8:	f8cd a000 	str.w	sl, [sp]
 800b4ac:	464b      	mov	r3, r9
 800b4ae:	aa03      	add	r2, sp, #12
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	f7ff fee6 	bl	800b284 <_printf_common>
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d14a      	bne.n	800b552 <_printf_i+0x1f2>
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	b004      	add	sp, #16
 800b4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	f043 0320 	orr.w	r3, r3, #32
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	4833      	ldr	r0, [pc, #204]	@ (800b59c <_printf_i+0x23c>)
 800b4d0:	2778      	movs	r7, #120	@ 0x78
 800b4d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	6831      	ldr	r1, [r6, #0]
 800b4da:	061f      	lsls	r7, r3, #24
 800b4dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4e0:	d402      	bmi.n	800b4e8 <_printf_i+0x188>
 800b4e2:	065f      	lsls	r7, r3, #25
 800b4e4:	bf48      	it	mi
 800b4e6:	b2ad      	uxthmi	r5, r5
 800b4e8:	6031      	str	r1, [r6, #0]
 800b4ea:	07d9      	lsls	r1, r3, #31
 800b4ec:	bf44      	itt	mi
 800b4ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b4f2:	6023      	strmi	r3, [r4, #0]
 800b4f4:	b11d      	cbz	r5, 800b4fe <_printf_i+0x19e>
 800b4f6:	2310      	movs	r3, #16
 800b4f8:	e7ac      	b.n	800b454 <_printf_i+0xf4>
 800b4fa:	4827      	ldr	r0, [pc, #156]	@ (800b598 <_printf_i+0x238>)
 800b4fc:	e7e9      	b.n	800b4d2 <_printf_i+0x172>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f023 0320 	bic.w	r3, r3, #32
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	e7f6      	b.n	800b4f6 <_printf_i+0x196>
 800b508:	4616      	mov	r6, r2
 800b50a:	e7bd      	b.n	800b488 <_printf_i+0x128>
 800b50c:	6833      	ldr	r3, [r6, #0]
 800b50e:	6825      	ldr	r5, [r4, #0]
 800b510:	6961      	ldr	r1, [r4, #20]
 800b512:	1d18      	adds	r0, r3, #4
 800b514:	6030      	str	r0, [r6, #0]
 800b516:	062e      	lsls	r6, r5, #24
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	d501      	bpl.n	800b520 <_printf_i+0x1c0>
 800b51c:	6019      	str	r1, [r3, #0]
 800b51e:	e002      	b.n	800b526 <_printf_i+0x1c6>
 800b520:	0668      	lsls	r0, r5, #25
 800b522:	d5fb      	bpl.n	800b51c <_printf_i+0x1bc>
 800b524:	8019      	strh	r1, [r3, #0]
 800b526:	2300      	movs	r3, #0
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	4616      	mov	r6, r2
 800b52c:	e7bc      	b.n	800b4a8 <_printf_i+0x148>
 800b52e:	6833      	ldr	r3, [r6, #0]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	6032      	str	r2, [r6, #0]
 800b534:	681e      	ldr	r6, [r3, #0]
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	2100      	movs	r1, #0
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7f4 fe78 	bl	8000230 <memchr>
 800b540:	b108      	cbz	r0, 800b546 <_printf_i+0x1e6>
 800b542:	1b80      	subs	r0, r0, r6
 800b544:	6060      	str	r0, [r4, #4]
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	2300      	movs	r3, #0
 800b54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b550:	e7aa      	b.n	800b4a8 <_printf_i+0x148>
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	4632      	mov	r2, r6
 800b556:	4649      	mov	r1, r9
 800b558:	4640      	mov	r0, r8
 800b55a:	47d0      	blx	sl
 800b55c:	3001      	adds	r0, #1
 800b55e:	d0ad      	beq.n	800b4bc <_printf_i+0x15c>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	079b      	lsls	r3, r3, #30
 800b564:	d413      	bmi.n	800b58e <_printf_i+0x22e>
 800b566:	68e0      	ldr	r0, [r4, #12]
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	4298      	cmp	r0, r3
 800b56c:	bfb8      	it	lt
 800b56e:	4618      	movlt	r0, r3
 800b570:	e7a6      	b.n	800b4c0 <_printf_i+0x160>
 800b572:	2301      	movs	r3, #1
 800b574:	4632      	mov	r2, r6
 800b576:	4649      	mov	r1, r9
 800b578:	4640      	mov	r0, r8
 800b57a:	47d0      	blx	sl
 800b57c:	3001      	adds	r0, #1
 800b57e:	d09d      	beq.n	800b4bc <_printf_i+0x15c>
 800b580:	3501      	adds	r5, #1
 800b582:	68e3      	ldr	r3, [r4, #12]
 800b584:	9903      	ldr	r1, [sp, #12]
 800b586:	1a5b      	subs	r3, r3, r1
 800b588:	42ab      	cmp	r3, r5
 800b58a:	dcf2      	bgt.n	800b572 <_printf_i+0x212>
 800b58c:	e7eb      	b.n	800b566 <_printf_i+0x206>
 800b58e:	2500      	movs	r5, #0
 800b590:	f104 0619 	add.w	r6, r4, #25
 800b594:	e7f5      	b.n	800b582 <_printf_i+0x222>
 800b596:	bf00      	nop
 800b598:	0800b725 	.word	0x0800b725
 800b59c:	0800b736 	.word	0x0800b736

0800b5a0 <memmove>:
 800b5a0:	4288      	cmp	r0, r1
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	eb01 0402 	add.w	r4, r1, r2
 800b5a8:	d902      	bls.n	800b5b0 <memmove+0x10>
 800b5aa:	4284      	cmp	r4, r0
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	d807      	bhi.n	800b5c0 <memmove+0x20>
 800b5b0:	1e43      	subs	r3, r0, #1
 800b5b2:	42a1      	cmp	r1, r4
 800b5b4:	d008      	beq.n	800b5c8 <memmove+0x28>
 800b5b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5be:	e7f8      	b.n	800b5b2 <memmove+0x12>
 800b5c0:	4402      	add	r2, r0
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	428a      	cmp	r2, r1
 800b5c6:	d100      	bne.n	800b5ca <memmove+0x2a>
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5d2:	e7f7      	b.n	800b5c4 <memmove+0x24>

0800b5d4 <_sbrk_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4d06      	ldr	r5, [pc, #24]	@ (800b5f0 <_sbrk_r+0x1c>)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	602b      	str	r3, [r5, #0]
 800b5e0:	f7f6 ffd8 	bl	8002594 <_sbrk>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_sbrk_r+0x1a>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_sbrk_r+0x1a>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	20000a04 	.word	0x20000a04

0800b5f4 <memcpy>:
 800b5f4:	440a      	add	r2, r1
 800b5f6:	4291      	cmp	r1, r2
 800b5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5fc:	d100      	bne.n	800b600 <memcpy+0xc>
 800b5fe:	4770      	bx	lr
 800b600:	b510      	push	{r4, lr}
 800b602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b60a:	4291      	cmp	r1, r2
 800b60c:	d1f9      	bne.n	800b602 <memcpy+0xe>
 800b60e:	bd10      	pop	{r4, pc}

0800b610 <_realloc_r>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	4680      	mov	r8, r0
 800b616:	4615      	mov	r5, r2
 800b618:	460c      	mov	r4, r1
 800b61a:	b921      	cbnz	r1, 800b626 <_realloc_r+0x16>
 800b61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4611      	mov	r1, r2
 800b622:	f7ff bc4b 	b.w	800aebc <_malloc_r>
 800b626:	b92a      	cbnz	r2, 800b634 <_realloc_r+0x24>
 800b628:	f7ff fbdc 	bl	800ade4 <_free_r>
 800b62c:	2400      	movs	r4, #0
 800b62e:	4620      	mov	r0, r4
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	f000 f81a 	bl	800b66c <_malloc_usable_size_r>
 800b638:	4285      	cmp	r5, r0
 800b63a:	4606      	mov	r6, r0
 800b63c:	d802      	bhi.n	800b644 <_realloc_r+0x34>
 800b63e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b642:	d8f4      	bhi.n	800b62e <_realloc_r+0x1e>
 800b644:	4629      	mov	r1, r5
 800b646:	4640      	mov	r0, r8
 800b648:	f7ff fc38 	bl	800aebc <_malloc_r>
 800b64c:	4607      	mov	r7, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0ec      	beq.n	800b62c <_realloc_r+0x1c>
 800b652:	42b5      	cmp	r5, r6
 800b654:	462a      	mov	r2, r5
 800b656:	4621      	mov	r1, r4
 800b658:	bf28      	it	cs
 800b65a:	4632      	movcs	r2, r6
 800b65c:	f7ff ffca 	bl	800b5f4 <memcpy>
 800b660:	4621      	mov	r1, r4
 800b662:	4640      	mov	r0, r8
 800b664:	f7ff fbbe 	bl	800ade4 <_free_r>
 800b668:	463c      	mov	r4, r7
 800b66a:	e7e0      	b.n	800b62e <_realloc_r+0x1e>

0800b66c <_malloc_usable_size_r>:
 800b66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b670:	1f18      	subs	r0, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	bfbc      	itt	lt
 800b676:	580b      	ldrlt	r3, [r1, r0]
 800b678:	18c0      	addlt	r0, r0, r3
 800b67a:	4770      	bx	lr

0800b67c <_init>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	bf00      	nop
 800b680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b682:	bc08      	pop	{r3}
 800b684:	469e      	mov	lr, r3
 800b686:	4770      	bx	lr

0800b688 <_fini>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	bf00      	nop
 800b68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68e:	bc08      	pop	{r3}
 800b690:	469e      	mov	lr, r3
 800b692:	4770      	bx	lr
