
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be04  0800be04  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800be04  0800be04  0000ce04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be0c  0800be0c  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be0c  0800be0c  0000ce0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be10  0800be10  0000ce10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800be14  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  20000098  0800beac  0000d098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800beac  0000da14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffdd  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004198  00000000  00000000  0002d0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00032c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002acbb  00000000  00000000  00034049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222a8  00000000  00000000  0005ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001166ce  00000000  00000000  00080fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019767a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007398  00000000  00000000  001976c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0019ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd38 	.word	0x0800bd38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800bd38 	.word	0x0800bd38

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b96a 	b.w	8000c28 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	460c      	mov	r4, r1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d14e      	bne.n	8000a16 <__udivmoddi4+0xaa>
 8000978:	4694      	mov	ip, r2
 800097a:	458c      	cmp	ip, r1
 800097c:	4686      	mov	lr, r0
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	d962      	bls.n	8000a4a <__udivmoddi4+0xde>
 8000984:	b14a      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000986:	f1c2 0320 	rsb	r3, r2, #32
 800098a:	4091      	lsls	r1, r2
 800098c:	fa20 f303 	lsr.w	r3, r0, r3
 8000990:	fa0c fc02 	lsl.w	ip, ip, r2
 8000994:	4319      	orrs	r1, r3
 8000996:	fa00 fe02 	lsl.w	lr, r0, r2
 800099a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099e:	fa1f f68c 	uxth.w	r6, ip
 80009a2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009aa:	fb07 1114 	mls	r1, r7, r4, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb04 f106 	mul.w	r1, r4, r6
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x64>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f104 30ff 	add.w	r0, r4, #4294967295
 80009c2:	f080 8112 	bcs.w	8000bea <__udivmoddi4+0x27e>
 80009c6:	4299      	cmp	r1, r3
 80009c8:	f240 810f 	bls.w	8000bea <__udivmoddi4+0x27e>
 80009cc:	3c02      	subs	r4, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009da:	fb07 1110 	mls	r1, r7, r0, r1
 80009de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e2:	fb00 f606 	mul.w	r6, r0, r6
 80009e6:	429e      	cmp	r6, r3
 80009e8:	d90a      	bls.n	8000a00 <__udivmoddi4+0x94>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f2:	f080 80fc 	bcs.w	8000bee <__udivmoddi4+0x282>
 80009f6:	429e      	cmp	r6, r3
 80009f8:	f240 80f9 	bls.w	8000bee <__udivmoddi4+0x282>
 80009fc:	4463      	add	r3, ip
 80009fe:	3802      	subs	r0, #2
 8000a00:	1b9b      	subs	r3, r3, r6
 8000a02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a06:	2100      	movs	r1, #0
 8000a08:	b11d      	cbz	r5, 8000a12 <__udivmoddi4+0xa6>
 8000a0a:	40d3      	lsrs	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d905      	bls.n	8000a26 <__udivmoddi4+0xba>
 8000a1a:	b10d      	cbz	r5, 8000a20 <__udivmoddi4+0xb4>
 8000a1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a20:	2100      	movs	r1, #0
 8000a22:	4608      	mov	r0, r1
 8000a24:	e7f5      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a26:	fab3 f183 	clz	r1, r3
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d146      	bne.n	8000abc <__udivmoddi4+0x150>
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	d302      	bcc.n	8000a38 <__udivmoddi4+0xcc>
 8000a32:	4290      	cmp	r0, r2
 8000a34:	f0c0 80f0 	bcc.w	8000c18 <__udivmoddi4+0x2ac>
 8000a38:	1a86      	subs	r6, r0, r2
 8000a3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d0e6      	beq.n	8000a12 <__udivmoddi4+0xa6>
 8000a44:	e9c5 6300 	strd	r6, r3, [r5]
 8000a48:	e7e3      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	f040 8090 	bne.w	8000b70 <__udivmoddi4+0x204>
 8000a50:	eba1 040c 	sub.w	r4, r1, ip
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	fa1f f78c 	uxth.w	r7, ip
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a66:	fb08 4416 	mls	r4, r8, r6, r4
 8000a6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6e:	fb07 f006 	mul.w	r0, r7, r6
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x11c>
 8000a76:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x11a>
 8000a80:	4298      	cmp	r0, r3
 8000a82:	f200 80cd 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a86:	4626      	mov	r6, r4
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a92:	fb08 4410 	mls	r4, r8, r0, r4
 8000a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a9a:	fb00 f707 	mul.w	r7, r0, r7
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x148>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aaa:	d202      	bcs.n	8000ab2 <__udivmoddi4+0x146>
 8000aac:	429f      	cmp	r7, r3
 8000aae:	f200 80b0 	bhi.w	8000c12 <__udivmoddi4+0x2a6>
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	1bdb      	subs	r3, r3, r7
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	e7a5      	b.n	8000a08 <__udivmoddi4+0x9c>
 8000abc:	f1c1 0620 	rsb	r6, r1, #32
 8000ac0:	408b      	lsls	r3, r1
 8000ac2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000acc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad0:	ea43 030c 	orr.w	r3, r3, ip
 8000ad4:	40f4      	lsrs	r4, r6
 8000ad6:	fa00 f801 	lsl.w	r8, r0, r1
 8000ada:	0c38      	lsrs	r0, r7, #16
 8000adc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af0:	fb0e f90c 	mul.w	r9, lr, ip
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	fa02 f201 	lsl.w	r2, r2, r1
 8000afa:	d90a      	bls.n	8000b12 <__udivmoddi4+0x1a6>
 8000afc:	193c      	adds	r4, r7, r4
 8000afe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b02:	f080 8084 	bcs.w	8000c0e <__udivmoddi4+0x2a2>
 8000b06:	45a1      	cmp	r9, r4
 8000b08:	f240 8081 	bls.w	8000c0e <__udivmoddi4+0x2a2>
 8000b0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b10:	443c      	add	r4, r7
 8000b12:	eba4 0409 	sub.w	r4, r4, r9
 8000b16:	fa1f f983 	uxth.w	r9, r3
 8000b1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b2a:	45a4      	cmp	ip, r4
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x1d2>
 8000b2e:	193c      	adds	r4, r7, r4
 8000b30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b34:	d267      	bcs.n	8000c06 <__udivmoddi4+0x29a>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d965      	bls.n	8000c06 <__udivmoddi4+0x29a>
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	443c      	add	r4, r7
 8000b3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b42:	fba0 9302 	umull	r9, r3, r0, r2
 8000b46:	eba4 040c 	sub.w	r4, r4, ip
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	46ce      	mov	lr, r9
 8000b4e:	469c      	mov	ip, r3
 8000b50:	d351      	bcc.n	8000bf6 <__udivmoddi4+0x28a>
 8000b52:	d04e      	beq.n	8000bf2 <__udivmoddi4+0x286>
 8000b54:	b155      	cbz	r5, 8000b6c <__udivmoddi4+0x200>
 8000b56:	ebb8 030e 	subs.w	r3, r8, lr
 8000b5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b62:	40cb      	lsrs	r3, r1
 8000b64:	431e      	orrs	r6, r3
 8000b66:	40cc      	lsrs	r4, r1
 8000b68:	e9c5 6400 	strd	r6, r4, [r5]
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e750      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f103 	lsr.w	r1, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b80:	4094      	lsls	r4, r2
 8000b82:	430c      	orrs	r4, r1
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8c:	fa1f f78c 	uxth.w	r7, ip
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3110 	mls	r1, r8, r0, r3
 8000b98:	0c23      	lsrs	r3, r4, #16
 8000b9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9e:	fb00 f107 	mul.w	r1, r0, r7
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x24c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bae:	d22c      	bcs.n	8000c0a <__udivmoddi4+0x29e>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d92a      	bls.n	8000c0a <__udivmoddi4+0x29e>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb01 f307 	mul.w	r3, r1, r7
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x276>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bd8:	d213      	bcs.n	8000c02 <__udivmoddi4+0x296>
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	d911      	bls.n	8000c02 <__udivmoddi4+0x296>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4464      	add	r4, ip
 8000be2:	1ae4      	subs	r4, r4, r3
 8000be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000be8:	e739      	b.n	8000a5e <__udivmoddi4+0xf2>
 8000bea:	4604      	mov	r4, r0
 8000bec:	e6f0      	b.n	80009d0 <__udivmoddi4+0x64>
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e706      	b.n	8000a00 <__udivmoddi4+0x94>
 8000bf2:	45c8      	cmp	r8, r9
 8000bf4:	d2ae      	bcs.n	8000b54 <__udivmoddi4+0x1e8>
 8000bf6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bfe:	3801      	subs	r0, #1
 8000c00:	e7a8      	b.n	8000b54 <__udivmoddi4+0x1e8>
 8000c02:	4631      	mov	r1, r6
 8000c04:	e7ed      	b.n	8000be2 <__udivmoddi4+0x276>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e799      	b.n	8000b3e <__udivmoddi4+0x1d2>
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	e7d4      	b.n	8000bb8 <__udivmoddi4+0x24c>
 8000c0e:	46d6      	mov	lr, sl
 8000c10:	e77f      	b.n	8000b12 <__udivmoddi4+0x1a6>
 8000c12:	4463      	add	r3, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e74d      	b.n	8000ab4 <__udivmoddi4+0x148>
 8000c18:	4606      	mov	r6, r0
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	e70f      	b.n	8000a40 <__udivmoddi4+0xd4>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	e730      	b.n	8000a88 <__udivmoddi4+0x11c>
 8000c26:	bf00      	nop

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	@ 0x30
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fbf7 	bl	800b438 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c52:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c60:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c74:	2204      	movs	r2, #4
 8000c76:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c84:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cbc:	2280      	movs	r2, #128	@ 0x80
 8000cbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ccc:	4817      	ldr	r0, [pc, #92]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000cce:	f002 ff01 	bl	8003ad4 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000cd8:	f001 faec 	bl	80022b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000ce8:	f004 f820 	bl	8004d2c <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000cf2:	f001 fadf 	bl	80022b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_ADC1_Init+0x104>)
 8000cf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d02:	237f      	movs	r3, #127	@ 0x7f
 8000d04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d06:	2304      	movs	r3, #4
 8000d08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_ADC1_Init+0x100>)
 8000d14:	f003 f98c 	bl	8004030 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000d1e:	f001 fac9 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000b4 	.word	0x200000b4
 8000d30:	04300002 	.word	0x04300002

08000d34 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00a fb79 	bl	800b438 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d48:	4a31      	ldr	r2, [pc, #196]	@ (8000e10 <MX_ADC2_Init+0xdc>)
 8000d4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d52:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000db0:	220c      	movs	r2, #12
 8000db2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000db6:	2280      	movs	r2, #128	@ 0x80
 8000db8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dc6:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000dc8:	f002 fe84 	bl	8003ad4 <HAL_ADC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000dd2:	f001 fa6f 	bl	80022b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC2_Init+0xe0>)
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de2:	237f      	movs	r3, #127	@ 0x7f
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de6:	2304      	movs	r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <MX_ADC2_Init+0xd8>)
 8000df4:	f003 f91c 	bl	8004030 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000dfe:	f001 fa59 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000120 	.word	0x20000120
 8000e10:	50000100 	.word	0x50000100
 8000e14:	0c900008 	.word	0x0c900008

08000e18 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00a fb01 	bl	800b438 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e36:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e38:	4a37      	ldr	r2, [pc, #220]	@ (8000f18 <MX_ADC3_Init+0x100>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e3c:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e3e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000e42:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eb6:	4817      	ldr	r0, [pc, #92]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000eb8:	f002 fe0c 	bl	8003ad4 <HAL_ADC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000ec2:	f001 f9f7 	bl	80022b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4810      	ldr	r0, [pc, #64]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000ed2:	f003 ff2b 	bl	8004d2c <HAL_ADCEx_MultiModeConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000edc:	f001 f9ea 	bl	80022b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_ADC3_Init+0x104>)
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eec:	237f      	movs	r3, #127	@ 0x7f
 8000eee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_ADC3_Init+0xfc>)
 8000efe:	f003 f897 	bl	8004030 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000f08:	f001 f9d4 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3730      	adds	r7, #48	@ 0x30
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000018c 	.word	0x2000018c
 8000f18:	50000400 	.word	0x50000400
 8000f1c:	14f00020 	.word	0x14f00020

08000f20 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00a fa83 	bl	800b438 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f32:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f34:	4a31      	ldr	r2, [pc, #196]	@ (8000ffc <MX_ADC4_Init+0xdc>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f3a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fb2:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000fb4:	f002 fd8e 	bl	8003ad4 <HAL_ADC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000fbe:	f001 f979 	bl	80022b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_ADC4_Init+0xe0>)
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fce:	237f      	movs	r3, #127	@ 0x7f
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_ADC4_Init+0xd8>)
 8000fe0:	f003 f826 	bl	8004030 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000fea:	f001 f963 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001f8 	.word	0x200001f8
 8000ffc:	50000500 	.word	0x50000500
 8001000:	14f00020 	.word	0x14f00020

08001004 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00a fa11 	bl	800b438 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001018:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <MX_ADC5_Init+0xdc>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800101e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001022:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800103e:	2204      	movs	r2, #4
 8001040:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800104a:	2201      	movs	r2, #1
 800104c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800104e:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001080:	220c      	movs	r2, #12
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_ADC5_Init+0xd8>)
 800108c:	2200      	movs	r2, #0
 800108e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001092:	2201      	movs	r2, #1
 8001094:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001096:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_ADC5_Init+0xd8>)
 8001098:	f002 fd1c 	bl	8003ad4 <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 80010a2:	f001 f907 	bl	80022b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_ADC5_Init+0xe0>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	237f      	movs	r3, #127	@ 0x7f
 80010b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b6:	2304      	movs	r3, #4
 80010b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC5_Init+0xd8>)
 80010c4:	f002 ffb4 	bl	8004030 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 80010ce:	f001 f8f1 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000264 	.word	0x20000264
 80010e0:	50000600 	.word	0x50000600
 80010e4:	08600004 	.word	0x08600004

080010e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0a6      	sub	sp, #152	@ 0x98
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001104:	2254      	movs	r2, #84	@ 0x54
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00a f995 	bl	800b438 <memset>
  if(adcHandle->Instance==ADC1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001116:	d16c      	bne.n	80011f2 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800111e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001122:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001128:	4618      	mov	r0, r3
 800112a:	f007 f945 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001134:	f001 f8be 	bl	80022b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001138:	4ba0      	ldr	r3, [pc, #640]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a9f      	ldr	r2, [pc, #636]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 8001140:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001142:	4b9e      	ldr	r3, [pc, #632]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10b      	bne.n	8001162 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800114a:	4b9d      	ldr	r3, [pc, #628]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a9c      	ldr	r2, [pc, #624]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001150:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b9a      	ldr	r3, [pc, #616]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b97      	ldr	r3, [pc, #604]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a96      	ldr	r2, [pc, #600]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b94      	ldr	r3, [pc, #592]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 800117a:	2301      	movs	r3, #1
 800117c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f004 fac9 	bl	800572c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800119a:	4b8a      	ldr	r3, [pc, #552]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 800119c:	4a8a      	ldr	r2, [pc, #552]	@ (80013c8 <HAL_ADC_MspInit+0x2e0>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011a0:	4b88      	ldr	r3, [pc, #544]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a6:	4b87      	ldr	r3, [pc, #540]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ac:	4b85      	ldr	r3, [pc, #532]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b2:	4b84      	ldr	r3, [pc, #528]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b8:	4b82      	ldr	r3, [pc, #520]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c0:	4b80      	ldr	r3, [pc, #512]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c8:	4b7e      	ldr	r3, [pc, #504]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011ca:	2220      	movs	r2, #32
 80011cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ce:	4b7d      	ldr	r3, [pc, #500]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d4:	487b      	ldr	r0, [pc, #492]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011d6:	f003 ffc1 	bl	800515c <HAL_DMA_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80011e0:	f001 f868 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a77      	ldr	r2, [pc, #476]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80011ea:	4a76      	ldr	r2, [pc, #472]	@ (80013c4 <HAL_ADC_MspInit+0x2dc>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80011f0:	e1e0      	b.n	80015b4 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	@ (80013cc <HAL_ADC_MspInit+0x2e4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d16c      	bne.n	80012d6 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001202:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800120c:	4618      	mov	r0, r3
 800120e:	f007 f8d3 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8001218:	f001 f84c 	bl	80022b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800121c:	4b67      	ldr	r3, [pc, #412]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a66      	ldr	r2, [pc, #408]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 8001224:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001226:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <HAL_ADC_MspInit+0x2d4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10b      	bne.n	8001246 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800122e:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a63      	ldr	r2, [pc, #396]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b61      	ldr	r3, [pc, #388]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b5e      	ldr	r3, [pc, #376]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a5d      	ldr	r2, [pc, #372]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b5b      	ldr	r3, [pc, #364]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	623b      	str	r3, [r7, #32]
 800125c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 800125e:	2340      	movs	r3, #64	@ 0x40
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	2303      	movs	r3, #3
 8001266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f004 fa57 	bl	800572c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800127e:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 8001280:	4a54      	ldr	r2, [pc, #336]	@ (80013d4 <HAL_ADC_MspInit+0x2ec>)
 8001282:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001284:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 8001286:	2224      	movs	r2, #36	@ 0x24
 8001288:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800129c:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 800129e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a4:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012ac:	4b48      	ldr	r3, [pc, #288]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012ae:	2220      	movs	r2, #32
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012b8:	4845      	ldr	r0, [pc, #276]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012ba:	f003 ff4f 	bl	800515c <HAL_DMA_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80012c4:	f000 fff6 	bl	80022b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a41      	ldr	r2, [pc, #260]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80012ce:	4a40      	ldr	r2, [pc, #256]	@ (80013d0 <HAL_ADC_MspInit+0x2e8>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80012d4:	e16e      	b.n	80015b4 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3f      	ldr	r2, [pc, #252]	@ (80013d8 <HAL_ADC_MspInit+0x2f0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	f040 8085 	bne.w	80013ec <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012f2:	4618      	mov	r0, r3
 80012f4:	f007 f860 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80012fe:	f000 ffd9 	bl	80022b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <HAL_ADC_MspInit+0x2f4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a34      	ldr	r2, [pc, #208]	@ (80013dc <HAL_ADC_MspInit+0x2f4>)
 800130a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <HAL_ADC_MspInit+0x2f4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_ADC_MspInit+0x2d8>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800135c:	4619      	mov	r1, r3
 800135e:	4820      	ldr	r0, [pc, #128]	@ (80013e0 <HAL_ADC_MspInit+0x2f8>)
 8001360:	f004 f9e4 	bl	800572c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 8001366:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <HAL_ADC_MspInit+0x300>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 800136c:	2225      	movs	r2, #37	@ 0x25
 800136e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 8001384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001388:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 800138c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001390:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 8001394:	2220      	movs	r2, #32
 8001396:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800139e:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 80013a0:	f003 fedc 	bl	800515c <HAL_DMA_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 80013aa:	f000 ff83 	bl	80022b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 80013b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_ADC_MspInit+0x2fc>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80013ba:	e0fb      	b.n	80015b4 <HAL_ADC_MspInit+0x4cc>
 80013bc:	200004b0 	.word	0x200004b0
 80013c0:	40021000 	.word	0x40021000
 80013c4:	200002d0 	.word	0x200002d0
 80013c8:	40020008 	.word	0x40020008
 80013cc:	50000100 	.word	0x50000100
 80013d0:	20000330 	.word	0x20000330
 80013d4:	4002001c 	.word	0x4002001c
 80013d8:	50000400 	.word	0x50000400
 80013dc:	200004b4 	.word	0x200004b4
 80013e0:	48000400 	.word	0x48000400
 80013e4:	20000390 	.word	0x20000390
 80013e8:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a72      	ldr	r2, [pc, #456]	@ (80015bc <HAL_ADC_MspInit+0x4d4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d16c      	bne.n	80014d0 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001400:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001406:	4618      	mov	r0, r3
 8001408:	f006 ffd6 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001412:	f000 ff4f 	bl	80022b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001416:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a68      	ldr	r2, [pc, #416]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 800141e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001420:	4b67      	ldr	r3, [pc, #412]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001428:	4b66      	ldr	r3, [pc, #408]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001434:	4b63      	ldr	r3, [pc, #396]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001444:	4a5f      	ldr	r2, [pc, #380]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144c:	4b5d      	ldr	r3, [pc, #372]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800145c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001470:	4619      	mov	r1, r3
 8001472:	4855      	ldr	r0, [pc, #340]	@ (80015c8 <HAL_ADC_MspInit+0x4e0>)
 8001474:	f004 f95a 	bl	800572c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 800147a:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_ADC_MspInit+0x4e8>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 8001480:	2226      	movs	r2, #38	@ 0x26
 8001482:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001484:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b50      	ldr	r3, [pc, #320]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001496:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 8001498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800149c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149e:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014a8:	2220      	movs	r2, #32
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80014b2:	4846      	ldr	r0, [pc, #280]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014b4:	f003 fe52 	bl	800515c <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80014be:	f000 fef9 	bl	80022b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a41      	ldr	r2, [pc, #260]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80014c8:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_ADC_MspInit+0x4e4>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80014ce:	e071      	b.n	80015b4 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a3f      	ldr	r2, [pc, #252]	@ (80015d4 <HAL_ADC_MspInit+0x4ec>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d16c      	bne.n	80015b4 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 ff64 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80014f6:	f000 fedd 	bl	80022b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014fa:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a2f      	ldr	r2, [pc, #188]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 8001502:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001504:	4b2e      	ldr	r3, [pc, #184]	@ (80015c0 <HAL_ADC_MspInit+0x4d8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a2c      	ldr	r2, [pc, #176]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <HAL_ADC_MspInit+0x4dc>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 800153c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001544:	2303      	movs	r3, #3
 8001546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f004 f8e7 	bl	800572c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001560:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <HAL_ADC_MspInit+0x4f4>)
 8001562:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001566:	2227      	movs	r2, #39	@ 0x27
 8001568:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 800157e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001582:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800158a:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 800159a:	f003 fddf 	bl	800515c <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 80015a4:	f000 fe86 	bl	80022b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_ADC_MspInit+0x4f0>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015b4:	bf00      	nop
 80015b6:	3798      	adds	r7, #152	@ 0x98
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	50000500 	.word	0x50000500
 80015c0:	200004b4 	.word	0x200004b4
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	200003f0 	.word	0x200003f0
 80015d0:	40020044 	.word	0x40020044
 80015d4:	50000600 	.word	0x50000600
 80015d8:	20000450 	.word	0x20000450
 80015dc:	40020058 	.word	0x40020058

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_DMA_Init+0x60>)
 80015e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <MX_DMA_Init+0x60>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <MX_DMA_Init+0x60>)
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_DMA_Init+0x60>)
 8001600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001602:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <MX_DMA_Init+0x60>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6493      	str	r3, [r2, #72]	@ 0x48
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <MX_DMA_Init+0x60>)
 800160c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2010      	movs	r0, #16
 800161c:	f003 fd69 	bl	80050f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001620:	2010      	movs	r0, #16
 8001622:	f003 fd80 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2011      	movs	r0, #17
 800162c:	f003 fd61 	bl	80050f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001630:	2011      	movs	r0, #17
 8001632:	f003 fd78 	bl	8005126 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 800164e:	2100      	movs	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f007 fba5 	bl	8008da0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f007 fba1 	bl	8008da0 <HAL_TIM_IC_Start_IT>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001674:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <processarCaptura+0x94>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001682:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <processarCaptura+0x98>)
 8001684:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <processarCaptura+0x94>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 800168c:	e02f      	b.n	80016ee <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <processarCaptura+0x9c>)
 8001696:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <processarCaptura+0x9c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <processarCaptura+0x98>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <processarCaptura+0xa0>)
 80016a4:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <processarCaptura+0xa4>)
 80016a8:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <processarCaptura+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80016ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80016ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001710 <processarCaptura+0xa8>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <processarCaptura+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200004cc 	.word	0x200004cc
 8001700:	200004b8 	.word	0x200004b8
 8001704:	200004bc 	.word	0x200004bc
 8001708:	200004c8 	.word	0x200004c8
 800170c:	49742400 	.word	0x49742400
 8001710:	41a347ae 	.word	0x41a347ae

08001714 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <processarCaptura2+0x94>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <processarCaptura2+0x98>)
 8001730:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <processarCaptura2+0x94>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 8001738:	e02f      	b.n	800179a <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <processarCaptura2+0x9c>)
 8001742:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <processarCaptura2+0x9c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <processarCaptura2+0x98>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <processarCaptura2+0xa0>)
 8001750:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <processarCaptura2+0xa4>)
 8001754:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <processarCaptura2+0xa0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001762:	edd7 6a05 	vldr	s13, [r7, #20]
 8001766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800177a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80017bc <processarCaptura2+0xa8>
 8001782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <processarCaptura2+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200004d4 	.word	0x200004d4
 80017ac:	200004c0 	.word	0x200004c0
 80017b0:	200004c4 	.word	0x200004c4
 80017b4:	200004d0 	.word	0x200004d0
 80017b8:	49742400 	.word	0x49742400
 80017bc:	41a347ae 	.word	0x41a347ae

080017c0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d105      	bne.n	80017dc <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 80017d0:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_TIM_IC_CaptureCallback+0x3c>)
 80017d2:	490b      	ldr	r1, [pc, #44]	@ (8001800 <HAL_TIM_IC_CaptureCallback+0x40>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff47 	bl	8001668 <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);

    }
}
 80017da:	e008      	b.n	80017ee <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_TIM_IC_CaptureCallback+0x44>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d104      	bne.n	80017ee <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_TIM_IC_CaptureCallback+0x48>)
 80017e6:	4909      	ldr	r1, [pc, #36]	@ (800180c <HAL_TIM_IC_CaptureCallback+0x4c>)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff93 	bl	8001714 <processarCaptura2>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000079c 	.word	0x2000079c
 80017fc:	200004e0 	.word	0x200004e0
 8001800:	200004d8 	.word	0x200004d8
 8001804:	200007e8 	.word	0x200007e8
 8001808:	200004e4 	.word	0x200004e4
 800180c:	200004dc 	.word	0x200004dc

08001810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a3a      	ldr	r2, [pc, #232]	@ (8001914 <MX_GPIO_Init+0x104>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a34      	ldr	r2, [pc, #208]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <MX_GPIO_Init+0x104>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b2f      	ldr	r3, [pc, #188]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a2e      	ldr	r2, [pc, #184]	@ (8001914 <MX_GPIO_Init+0x104>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <MX_GPIO_Init+0x104>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 800188c:	4822      	ldr	r0, [pc, #136]	@ (8001918 <MX_GPIO_Init+0x108>)
 800188e:	f004 f8cf 	bl	8005a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f004 f8c8 	bl	8005a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4819      	ldr	r0, [pc, #100]	@ (800191c <MX_GPIO_Init+0x10c>)
 80018b8:	f003 ff38 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 80018bc:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4810      	ldr	r0, [pc, #64]	@ (8001918 <MX_GPIO_Init+0x108>)
 80018d6:	f003 ff29 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80018da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f003 ff19 	bl	800572c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2028      	movs	r0, #40	@ 0x28
 8001900:	f003 fbf7 	bl	80050f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001904:	2028      	movs	r0, #40	@ 0x28
 8001906:	f003 fc0e 	bl	8005126 <HAL_NVIC_EnableIRQ>

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800

08001920 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001926:	4a1c      	ldr	r2, [pc, #112]	@ (8001998 <MX_I2C2_Init+0x78>)
 8001928:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_I2C2_Init+0x74>)
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <MX_I2C2_Init+0x7c>)
 800192e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001938:	2201      	movs	r2, #1
 800193a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <MX_I2C2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <MX_I2C2_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800195a:	480e      	ldr	r0, [pc, #56]	@ (8001994 <MX_I2C2_Init+0x74>)
 800195c:	f004 f8a3 	bl	8005aa6 <HAL_I2C_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001966:	f000 fca5 	bl	80022b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800196a:	2100      	movs	r1, #0
 800196c:	4809      	ldr	r0, [pc, #36]	@ (8001994 <MX_I2C2_Init+0x74>)
 800196e:	f005 fea9 	bl	80076c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001978:	f000 fc9c 	bl	80022b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800197c:	2100      	movs	r1, #0
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_I2C2_Init+0x74>)
 8001980:	f005 feeb 	bl	800775a <HAL_I2CEx_ConfigDigitalFilter>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800198a:	f000 fc93 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004e8 	.word	0x200004e8
 8001998:	40005800 	.word	0x40005800
 800199c:	40b285c2 	.word	0x40b285c2

080019a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0a0      	sub	sp, #128	@ 0x80
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	2254      	movs	r2, #84	@ 0x54
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f009 fd39 	bl	800b438 <memset>
  if(i2cHandle->Instance==I2C2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001b48 <HAL_I2C_MspInit+0x1a8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	f040 80b6 	bne.w	8001b3e <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fcea 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019ea:	f000 fc63 	bl	80022b4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b57      	ldr	r3, [pc, #348]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b51      	ldr	r3, [pc, #324]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a50      	ldr	r2, [pc, #320]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b4e      	ldr	r3, [pc, #312]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4845      	ldr	r0, [pc, #276]	@ (8001b50 <HAL_I2C_MspInit+0x1b0>)
 8001a3a:	f003 fe77 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a50:	2304      	movs	r3, #4
 8001a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5e:	f003 fe65 	bl	800572c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a62:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	4a39      	ldr	r2, [pc, #228]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_I2C_MspInit+0x1ac>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a7c:	4a36      	ldr	r2, [pc, #216]	@ (8001b58 <HAL_I2C_MspInit+0x1b8>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a82:	2212      	movs	r2, #18
 8001a84:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a92:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a94:	2280      	movs	r2, #128	@ 0x80
 8001a96:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001ab0:	4828      	ldr	r0, [pc, #160]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001ab2:	f003 fb53 	bl	800515c <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001abc:	f000 fbfa 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a24      	ldr	r2, [pc, #144]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ac6:	4a23      	ldr	r2, [pc, #140]	@ (8001b54 <HAL_I2C_MspInit+0x1b4>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <HAL_I2C_MspInit+0x1c0>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001ada:	2210      	movs	r2, #16
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001b02:	4816      	ldr	r0, [pc, #88]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001b04:	f003 fb2a 	bl	800515c <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001b0e:	f000 fbd1 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001b16:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b18:	4a10      	ldr	r2, [pc, #64]	@ (8001b5c <HAL_I2C_MspInit+0x1bc>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2021      	movs	r0, #33	@ 0x21
 8001b24:	f003 fae5 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b28:	2021      	movs	r0, #33	@ 0x21
 8001b2a:	f003 fafc 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2022      	movs	r0, #34	@ 0x22
 8001b34:	f003 fadd 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b38:	2022      	movs	r0, #34	@ 0x22
 8001b3a:	f003 faf4 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3780      	adds	r7, #128	@ 0x80
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000800 	.word	0x48000800
 8001b54:	2000053c 	.word	0x2000053c
 8001b58:	4002006c 	.word	0x4002006c
 8001b5c:	2000059c 	.word	0x2000059c
 8001b60:	40020080 	.word	0x40020080

08001b64 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	70fb      	strb	r3, [r7, #3]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70bb      	strb	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001b82:	4a53      	ldr	r2, [pc, #332]	@ (8001cd0 <lcdInit+0x16c>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b50      	ldr	r3, [pc, #320]	@ (8001cd0 <lcdInit+0x16c>)
 8001b90:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001b92:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd0 <lcdInit+0x16c>)
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001b98:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <lcdInit+0x16c>)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd0 <lcdInit+0x16c>)
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd4 <lcdInit+0x170>)
 8001ba6:	2234      	movs	r2, #52	@ 0x34
 8001ba8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <lcdInit+0x170>)
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <lcdInit+0x170>)
 8001bb0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001bb2:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <lcdInit+0x170>)
 8001bb4:	2230      	movs	r2, #48	@ 0x30
 8001bb6:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	737b      	strb	r3, [r7, #13]
 8001bbc:	e02f      	b.n	8001c1e <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001bbe:	4b44      	ldr	r3, [pc, #272]	@ (8001cd0 <lcdInit+0x16c>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <lcdInit+0x16c>)
 8001bc4:	799b      	ldrb	r3, [r3, #6]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2303      	movs	r3, #3
 8001bca:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <lcdInit+0x170>)
 8001bcc:	f004 f806 	bl	8005bdc <HAL_I2C_Master_Transmit_DMA>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <lcdInit+0x76>
            return -1;
 8001bd6:	23ff      	movs	r3, #255	@ 0xff
 8001bd8:	e076      	b.n	8001cc8 <lcdInit+0x164>
        }

        usCont = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001bde:	e009      	b.n	8001bf4 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	81fa      	strh	r2, [r7, #14]
 8001be6:	2bc8      	cmp	r3, #200	@ 0xc8
 8001be8:	d101      	bne.n	8001bee <lcdInit+0x8a>
        		return -1;
 8001bea:	23ff      	movs	r3, #255	@ 0xff
 8001bec:	e06c      	b.n	8001cc8 <lcdInit+0x164>
        	HAL_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f001 fd0a 	bl	8003608 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001bf4:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <lcdInit+0x16c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f9e0 	bl	8005fbe <HAL_I2C_GetState>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d1ed      	bne.n	8001be0 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001c04:	7b7b      	ldrb	r3, [r7, #13]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d103      	bne.n	8001c12 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f001 fcfc 	bl	8003608 <HAL_Delay>
 8001c10:	e002      	b.n	8001c18 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001c12:	2005      	movs	r0, #5
 8001c14:	f001 fcf8 	bl	8003608 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	737b      	strb	r3, [r7, #13]
 8001c1e:	7b7b      	ldrb	r3, [r7, #13]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d9cc      	bls.n	8001bbe <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001c24:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <lcdInit+0x170>)
 8001c26:	222c      	movs	r2, #44	@ 0x2c
 8001c28:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <lcdInit+0x170>)
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <lcdInit+0x170>)
 8001c30:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <lcdInit+0x170>)
 8001c34:	2228      	movs	r2, #40	@ 0x28
 8001c36:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <lcdInit+0x16c>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <lcdInit+0x16c>)
 8001c3e:	799b      	ldrb	r3, [r3, #6]
 8001c40:	4619      	mov	r1, r3
 8001c42:	2303      	movs	r3, #3
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <lcdInit+0x170>)
 8001c46:	f003 ffc9 	bl	8005bdc <HAL_I2C_Master_Transmit_DMA>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <lcdInit+0xf0>
        return -1;
 8001c50:	23ff      	movs	r3, #255	@ 0xff
 8001c52:	e039      	b.n	8001cc8 <lcdInit+0x164>
    }

    usCont = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001c58:	e009      	b.n	8001c6e <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	81fa      	strh	r2, [r7, #14]
 8001c60:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c62:	d101      	bne.n	8001c68 <lcdInit+0x104>
    		return -1;
 8001c64:	23ff      	movs	r3, #255	@ 0xff
 8001c66:	e02f      	b.n	8001cc8 <lcdInit+0x164>
    	HAL_Delay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f001 fccd 	bl	8003608 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <lcdInit+0x16c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 f9a3 	bl	8005fbe <HAL_I2C_GetState>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d1ed      	bne.n	8001c5a <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001c7e:	7b3b      	ldrb	r3, [r7, #12]
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <lcdInit+0x16c>)
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d904      	bls.n	8001c9a <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 f945 	bl	8001f30 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 f815 	bl	8001cd8 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2007      	movs	r0, #7
 8001cb2:	f000 f811 	bl	8001cd8 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 f80d 	bl	8001cd8 <lcdCommand>
    lcdCursorHome();
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2005      	movs	r0, #5
 8001cc2:	f000 f809 	bl	8001cd8 <lcdCommand>

    return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000604 	.word	0x20000604
 8001cd4:	200005fc 	.word	0x200005fc

08001cd8 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d064      	beq.n	8001dbc <lcdCommand+0xe4>
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	f040 80aa 	bne.w	8001e4c <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d85a      	bhi.n	8001db6 <lcdCommand+0xde>
 8001d00:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <lcdCommand+0x30>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d29 	.word	0x08001d29
 8001d0c:	08001d59 	.word	0x08001d59
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08001d73 	.word	0x08001d73
 8001d1c:	08001d9d 	.word	0x08001d9d
 8001d20:	08001d8d 	.word	0x08001d8d
 8001d24:	08001da7 	.word	0x08001da7
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001d28:	4b5c      	ldr	r3, [pc, #368]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d2a:	7a1b      	ldrb	r3, [r3, #8]
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b5a      	ldr	r3, [pc, #360]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d34:	721a      	strb	r2, [r3, #8]
                    break;
 8001d36:	e040      	b.n	8001dba <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001d38:	4b58      	ldr	r3, [pc, #352]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d3a:	7a1b      	ldrb	r3, [r3, #8]
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b56      	ldr	r3, [pc, #344]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d44:	721a      	strb	r2, [r3, #8]
                    break;
 8001d46:	e038      	b.n	8001dba <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001d48:	4b54      	ldr	r3, [pc, #336]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d4a:	7a1b      	ldrb	r3, [r3, #8]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b52      	ldr	r3, [pc, #328]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d54:	721a      	strb	r2, [r3, #8]
                    break;
 8001d56:	e030      	b.n	8001dba <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001d5c:	f107 030f 	add.w	r3, r7, #15
 8001d60:	4619      	mov	r1, r3
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f8e4 	bl	8001f30 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f001 fc4d 	bl	8003608 <HAL_Delay>
                        return 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e090      	b.n	8001e94 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001d72:	2302      	movs	r3, #2
 8001d74:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001d76:	f107 030f 	add.w	r3, r7, #15
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f8d7 	bl	8001f30 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f001 fc40 	bl	8003608 <HAL_Delay>
                        return 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e083      	b.n	8001e94 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001d8c:	4b43      	ldr	r3, [pc, #268]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d98:	725a      	strb	r2, [r3, #9]
                    break;
 8001d9a:	e00e      	b.n	8001dba <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <lcdCommand+0x1c4>)
 8001d9e:	7a5a      	ldrb	r2, [r3, #9]
 8001da0:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <lcdCommand+0x1c4>)
 8001da2:	725a      	strb	r2, [r3, #9]
                    break;
 8001da4:	e009      	b.n	8001dba <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <lcdCommand+0x1c4>)
 8001da8:	7a5b      	ldrb	r3, [r3, #9]
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <lcdCommand+0x1c4>)
 8001db2:	725a      	strb	r2, [r3, #9]
                    break;
 8001db4:	e001      	b.n	8001dba <lcdCommand+0xe2>

                default:
                    return -1;
 8001db6:	23ff      	movs	r3, #255	@ 0xff
 8001db8:	e06c      	b.n	8001e94 <lcdCommand+0x1bc>
            }

            break;
 8001dba:	e049      	b.n	8001e50 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d840      	bhi.n	8001e46 <lcdCommand+0x16e>
 8001dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <lcdCommand+0xf4>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ded 	.word	0x08001ded
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001dfd 	.word	0x08001dfd
 8001dd8:	08001e0d 	.word	0x08001e0d
 8001ddc:	08001e47 	.word	0x08001e47
 8001de0:	08001e2d 	.word	0x08001e2d
 8001de4:	08001e1d 	.word	0x08001e1d
 8001de8:	08001e37 	.word	0x08001e37
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <lcdCommand+0x1c4>)
 8001dee:	7a1b      	ldrb	r3, [r3, #8]
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <lcdCommand+0x1c4>)
 8001df8:	721a      	strb	r2, [r3, #8]
                    break;
 8001dfa:	e026      	b.n	8001e4a <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <lcdCommand+0x1c4>)
 8001dfe:	7a1b      	ldrb	r3, [r3, #8]
 8001e00:	f023 0302 	bic.w	r3, r3, #2
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e08:	721a      	strb	r2, [r3, #8]
                    break;
 8001e0a:	e01e      	b.n	8001e4a <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e0e:	7a1b      	ldrb	r3, [r3, #8]
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e18:	721a      	strb	r2, [r3, #8]
                    break;
 8001e1a:	e016      	b.n	8001e4a <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e1e:	7a5b      	ldrb	r3, [r3, #9]
 8001e20:	f023 0302 	bic.w	r3, r3, #2
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e28:	725a      	strb	r2, [r3, #9]
                    break;
 8001e2a:	e00e      	b.n	8001e4a <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e2e:	7a5a      	ldrb	r2, [r3, #9]
 8001e30:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e32:	725a      	strb	r2, [r3, #9]
                    break;
 8001e34:	e009      	b.n	8001e4a <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001e36:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e38:	7a5b      	ldrb	r3, [r3, #9]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e42:	725a      	strb	r2, [r3, #9]
                    break;
 8001e44:	e001      	b.n	8001e4a <lcdCommand+0x172>

                default:
                    return -1;
 8001e46:	23ff      	movs	r3, #255	@ 0xff
 8001e48:	e024      	b.n	8001e94 <lcdCommand+0x1bc>
            }

            break;
 8001e4a:	e001      	b.n	8001e50 <lcdCommand+0x178>

        default:
            return -1;
 8001e4c:	23ff      	movs	r3, #255	@ 0xff
 8001e4e:	e021      	b.n	8001e94 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	dc16      	bgt.n	8001e84 <lcdCommand+0x1ac>
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	da0d      	bge.n	8001e76 <lcdCommand+0x19e>
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d004      	beq.n	8001e68 <lcdCommand+0x190>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	dd10      	ble.n	8001e84 <lcdCommand+0x1ac>
 8001e62:	3b03      	subs	r3, #3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d80d      	bhi.n	8001e84 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e6a:	7a1b      	ldrb	r3, [r3, #8]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	73fb      	strb	r3, [r7, #15]
            break;
 8001e74:	e007      	b.n	8001e86 <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <lcdCommand+0x1c4>)
 8001e78:	7a5b      	ldrb	r3, [r3, #9]
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
            break;
 8001e82:	e000      	b.n	8001e86 <lcdCommand+0x1ae>

        default:
            break;
 8001e84:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001e86:	f107 030f 	add.w	r3, r7, #15
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f84f 	bl	8001f30 <lcdWriteByte>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000604 	.word	0x20000604

08001ea0 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <lcdSetCursorPosition+0x50>)
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	79ba      	ldrb	r2, [r7, #6]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d303      	bcc.n	8001ec2 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <lcdSetCursorPosition+0x50>)
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef4 <lcdSetCursorPosition+0x54>)
 8001ec6:	5cd2      	ldrb	r2, [r2, r3]
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	b25b      	sxtb	r3, r3
 8001ed0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001eda:	f107 030f 	add.w	r3, r7, #15
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 f825 	bl	8001f30 <lcdWriteByte>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000604 	.word	0x20000604
 8001ef4:	0800bd8c 	.word	0x0800bd8c

08001ef8 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e009      	b.n	8001f1e <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 f80c 	bl	8001f30 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3f1      	bcc.n	8001f0a <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001f3c:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <lcdWriteByte+0xf0>)
 8001f3e:	79da      	ldrb	r2, [r3, #7]
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f023 030f 	bic.w	r3, r3, #15
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <lcdWriteByte+0xf4>)
 8001f5c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <lcdWriteByte+0xf4>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b30      	ldr	r3, [pc, #192]	@ (8002024 <lcdWriteByte+0xf4>)
 8001f64:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001f66:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <lcdWriteByte+0xf0>)
 8001f68:	79da      	ldrb	r2, [r3, #7]
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	b25a      	sxtb	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	f023 030f 	bic.w	r3, r3, #15
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <lcdWriteByte+0xf4>)
 8001f86:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001f88:	4b25      	ldr	r3, [pc, #148]	@ (8002020 <lcdWriteByte+0xf0>)
 8001f8a:	79da      	ldrb	r2, [r3, #7]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <lcdWriteByte+0xf4>)
 8001fa6:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <lcdWriteByte+0xf4>)
 8001faa:	78da      	ldrb	r2, [r3, #3]
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <lcdWriteByte+0xf4>)
 8001fae:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <lcdWriteByte+0xf0>)
 8001fb2:	79da      	ldrb	r2, [r3, #7]
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	b25a      	sxtb	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <lcdWriteByte+0xf4>)
 8001fcc:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <lcdWriteByte+0xf0>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <lcdWriteByte+0xf0>)
 8001fd4:	799b      	ldrb	r3, [r3, #6]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2306      	movs	r3, #6
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <lcdWriteByte+0xf4>)
 8001fdc:	f003 fdfe 	bl	8005bdc <HAL_I2C_Master_Transmit_DMA>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <lcdWriteByte+0xba>
        return -1;
 8001fe6:	23ff      	movs	r3, #255	@ 0xff
 8001fe8:	e015      	b.n	8002016 <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001fee:	e009      	b.n	8002004 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	81fa      	strh	r2, [r7, #14]
 8001ff6:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ff8:	d101      	bne.n	8001ffe <lcdWriteByte+0xce>
    		return -1;
 8001ffa:	23ff      	movs	r3, #255	@ 0xff
 8001ffc:	e00b      	b.n	8002016 <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f001 fb02 	bl	8003608 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <lcdWriteByte+0xf0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 ffd8 	bl	8005fbe <HAL_I2C_GetState>
 800200e:	4603      	mov	r3, r0
 8002010:	2b20      	cmp	r3, #32
 8002012:	d1ed      	bne.n	8001ff0 <lcdWriteByte+0xc0>
    }

    return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000604 	.word	0x20000604
 8002024:	200005fc 	.word	0x200005fc

08002028 <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	@ 0x40
 800202c:	af00      	add	r7, sp, #0
 800202e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002032:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 8002036:	edd7 7a01 	vldr	s15, [r7, #4]
 800203a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203e:	ee17 3a90 	vmov	r3, s15
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 8002044:	edd7 7a00 	vldr	s15, [r7]
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 8002052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002104 <vPrintMotorSpeed+0xdc>
 8002068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	ed97 7a00 	vldr	s14, [r7]
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002104 <vPrintMotorSpeed+0xdc>
 800208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002094:	ee17 3a90 	vmov	r3, s15
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
    // Limpando o display
    //lcdDisplayClear();
    //lcdCursorHome();

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L:  %02d,%01d", iVEInteiro, iVEdec);
 800209a:	f107 001c 	add.w	r0, r7, #28
 800209e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a2:	4919      	ldr	r1, [pc, #100]	@ (8002108 <vPrintMotorSpeed+0xe0>)
 80020a4:	f009 f9a8 	bl	800b3f8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 80020a8:	2100      	movs	r1, #0
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fef8 	bl	8001ea0 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f8b3 	bl	8000220 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff17 	bl	8001ef8 <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R:  %02d,%01d", iVDInteiro, iVDdec);
 80020ca:	f107 0008 	add.w	r0, r7, #8
 80020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020d2:	490e      	ldr	r1, [pc, #56]	@ (800210c <vPrintMotorSpeed+0xe4>)
 80020d4:	f009 f990 	bl	800b3f8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 80020d8:	2101      	movs	r1, #1
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fee0 	bl	8001ea0 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f89b 	bl	8000220 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff feff 	bl	8001ef8 <lcdPrintStr>
}
 80020fa:	bf00      	nop
 80020fc:	3740      	adds	r7, #64	@ 0x40
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	42c80000 	.word	0x42c80000
 8002108:	0800bd50 	.word	0x0800bd50
 800210c:	0800bd64 	.word	0x0800bd64

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002114:	f001 fa07 	bl	8003526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002118:	f000 f870 	bl	80021fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f7ff fb78 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8002120:	f7ff fa5e 	bl	80015e0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002124:	f001 f934 	bl	8003390 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8002128:	f000 fdda 	bl	8002ce0 <MX_TIM1_Init>
  MX_I2C2_Init();
 800212c:	f7ff fbf8 	bl	8001920 <MX_I2C2_Init>
  MX_ADC3_Init();
 8002130:	f7fe fe72 	bl	8000e18 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002134:	f7fe fd7a 	bl	8000c2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002138:	f7fe fdfc 	bl	8000d34 <MX_ADC2_Init>
  MX_ADC4_Init();
 800213c:	f7fe fef0 	bl	8000f20 <MX_ADC4_Init>
  MX_ADC5_Init();
 8002140:	f7fe ff60 	bl	8001004 <MX_ADC5_Init>
  MX_TIM16_Init();
 8002144:	f000 ff5e 	bl	8003004 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002148:	f000 ffa6 	bl	8003098 <MX_TIM17_Init>
  MX_TIM6_Init();
 800214c:	f000 fed2 	bl	8002ef4 <MX_TIM6_Init>
  MX_TIM15_Init();
 8002150:	f000 ff06 	bl	8002f60 <MX_TIM15_Init>
  MX_TIM2_Init();
 8002154:	f000 fe80 	bl	8002e58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8002158:	481b      	ldr	r0, [pc, #108]	@ (80021c8 <main+0xb8>)
 800215a:	f000 f8b1 	bl	80022c0 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 800215e:	491b      	ldr	r1, [pc, #108]	@ (80021cc <main+0xbc>)
 8002160:	481b      	ldr	r0, [pc, #108]	@ (80021d0 <main+0xc0>)
 8002162:	f7ff fa6f 	bl	8001644 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8002166:	481b      	ldr	r0, [pc, #108]	@ (80021d4 <main+0xc4>)
 8002168:	f000 f938 	bl	80023dc <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 800216c:	481a      	ldr	r0, [pc, #104]	@ (80021d8 <main+0xc8>)
 800216e:	f000 f951 	bl	8002414 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8002172:	481a      	ldr	r0, [pc, #104]	@ (80021dc <main+0xcc>)
 8002174:	f000 f96a 	bl	800244c <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8002178:	4819      	ldr	r0, [pc, #100]	@ (80021e0 <main+0xd0>)
 800217a:	f000 f983 	bl	8002484 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 800217e:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <main+0xd4>)
 8002180:	f000 f99c 	bl	80024bc <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8002184:	2310      	movs	r3, #16
 8002186:	2202      	movs	r2, #2
 8002188:	2127      	movs	r1, #39	@ 0x27
 800218a:	4817      	ldr	r0, [pc, #92]	@ (80021e8 <main+0xd8>)
 800218c:	f7ff fcea 	bl	8001b64 <lcdInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	HAL_TIM_Base_Start_IT(&htim15);
 8002190:	4816      	ldr	r0, [pc, #88]	@ (80021ec <main+0xdc>)
 8002192:	f006 fbb7 	bl	8008904 <HAL_TIM_Base_Start_IT>
  	vPrintMotorSpeed(0, 0);
 8002196:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80021f0 <main+0xe0>
 800219a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80021f0 <main+0xe0>
 800219e:	f7ff ff43 	bl	8002028 <vPrintMotorSpeed>
    while (1)
    {
    	vPrintMotorSpeed(velocidadeRodaEsquerda, velocidadeRodaDireita);
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <main+0xe4>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <main+0xe8>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	eef0 0a47 	vmov.f32	s1, s14
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	f7ff ff37 	bl	8002028 <vPrintMotorSpeed>
    	HAL_Delay(500);
 80021ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021be:	f001 fa23 	bl	8003608 <HAL_Delay>
    	vPrintMotorSpeed(velocidadeRodaEsquerda, velocidadeRodaDireita);
 80021c2:	bf00      	nop
 80021c4:	e7ed      	b.n	80021a2 <main+0x92>
 80021c6:	bf00      	nop
 80021c8:	2000066c 	.word	0x2000066c
 80021cc:	200007e8 	.word	0x200007e8
 80021d0:	2000079c 	.word	0x2000079c
 80021d4:	200000b4 	.word	0x200000b4
 80021d8:	20000120 	.word	0x20000120
 80021dc:	2000018c 	.word	0x2000018c
 80021e0:	200001f8 	.word	0x200001f8
 80021e4:	20000264 	.word	0x20000264
 80021e8:	200004e8 	.word	0x200004e8
 80021ec:	20000750 	.word	0x20000750
 80021f0:	00000000 	.word	0x00000000
 80021f4:	200004e0 	.word	0x200004e0
 80021f8:	200004e4 	.word	0x200004e4

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b094      	sub	sp, #80	@ 0x50
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	2238      	movs	r2, #56	@ 0x38
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f009 f914 	bl	800b438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800221e:	2000      	movs	r0, #0
 8002220:	f005 fae8 	bl	80077f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800222e:	2340      	movs	r3, #64	@ 0x40
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002232:	2302      	movs	r3, #2
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002236:	2302      	movs	r3, #2
 8002238:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800223a:	2304      	movs	r3, #4
 800223c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800223e:	2355      	movs	r3, #85	@ 0x55
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002246:	2302      	movs	r3, #2
 8002248:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800224a:	2302      	movs	r3, #2
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f005 fb82 	bl	800795c <HAL_RCC_OscConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800225e:	f000 f829 	bl	80022b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002262:	230f      	movs	r3, #15
 8002264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002266:	2303      	movs	r3, #3
 8002268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2104      	movs	r1, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fe80 	bl	8007f80 <HAL_RCC_ClockConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002286:	f000 f815 	bl	80022b4 <Error_Handler>
  }
}
 800228a:	bf00      	nop
 800228c:	3750      	adds	r7, #80	@ 0x50
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 80022a4:	f000 fb04 	bl	80028b0 <vLineSensorPIDControl>
	}
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000750 	.word	0x20000750

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <Error_Handler+0x8>

080022c0 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80022c8:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <vMotorInit+0x60>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <vMotorInit+0x60>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 fbef 	bl	8008ab8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <vMotorInit+0x60>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2104      	movs	r1, #4
 80022e0:	4618      	mov	r0, r3
 80022e2:	f006 fbe9 	bl	8008ab8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022ec:	480d      	ldr	r0, [pc, #52]	@ (8002324 <vMotorInit+0x64>)
 80022ee:	f003 fb9f 	bl	8005a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022f8:	480a      	ldr	r0, [pc, #40]	@ (8002324 <vMotorInit+0x64>)
 80022fa:	f003 fb99 	bl	8005a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2180      	movs	r1, #128	@ 0x80
 8002302:	4808      	ldr	r0, [pc, #32]	@ (8002324 <vMotorInit+0x64>)
 8002304:	f003 fb94 	bl	8005a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800230e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002312:	f003 fb8d 	bl	8005a30 <HAL_GPIO_WritePin>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000610 	.word	0x20000610
 8002324:	48000400 	.word	0x48000400

08002328 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002332:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8002336:	edd7 7a01 	vldr	s15, [r7, #4]
 800233a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80023d4 <vSetRodasDC+0xac>
 800233e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <vSetRodasDC+0xb0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002354:	ee17 2a90 	vmov	r2, s15
 8002358:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 800235a:	edd7 7a00 	vldr	s15, [r7]
 800235e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80023d4 <vSetRodasDC+0xac>
 8002362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800236a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800236e:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <vSetRodasDC+0xb0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002378:	ee17 2a90 	vmov	r2, s15
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 800237e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002382:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80023d4 <vSetRodasDC+0xac>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800238e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <vSetRodasDC+0xb0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 80023a2:	edd7 7a00 	vldr	s15, [r7]
 80023a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80023d4 <vSetRodasDC+0xac>
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <vSetRodasDC+0xb0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c0:	ee17 2a90 	vmov	r2, s15
 80023c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	447a0000 	.word	0x447a0000
 80023d8:	20000610 	.word	0x20000610

080023dc <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 80023e4:	4a09      	ldr	r2, [pc, #36]	@ (800240c <vLineSensor1Init+0x30>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <vLineSensor1Init+0x30>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	217f      	movs	r1, #127	@ 0x7f
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fc39 	bl	8004c68 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <vLineSensor1Init+0x30>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2201      	movs	r2, #1
 80023fc:	4904      	ldr	r1, [pc, #16]	@ (8002410 <vLineSensor1Init+0x34>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fd24 	bl	8003e4c <HAL_ADC_Start_DMA>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000614 	.word	0x20000614
 8002410:	20000628 	.word	0x20000628

08002414 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 800241c:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <vLineSensor2Init+0x30>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <vLineSensor2Init+0x30>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	217f      	movs	r1, #127	@ 0x7f
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fc1d 	bl	8004c68 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <vLineSensor2Init+0x30>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4904      	ldr	r1, [pc, #16]	@ (8002448 <vLineSensor2Init+0x34>)
 8002436:	4618      	mov	r0, r3
 8002438:	f001 fd08 	bl	8003e4c <HAL_ADC_Start_DMA>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000618 	.word	0x20000618
 8002448:	2000062c 	.word	0x2000062c

0800244c <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8002454:	4a09      	ldr	r2, [pc, #36]	@ (800247c <vLineSensor3Init+0x30>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <vLineSensor3Init+0x30>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	217f      	movs	r1, #127	@ 0x7f
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fc01 	bl	8004c68 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <vLineSensor3Init+0x30>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4904      	ldr	r1, [pc, #16]	@ (8002480 <vLineSensor3Init+0x34>)
 800246e:	4618      	mov	r0, r3
 8002470:	f001 fcec 	bl	8003e4c <HAL_ADC_Start_DMA>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000061c 	.word	0x2000061c
 8002480:	20000630 	.word	0x20000630

08002484 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 800248c:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <vLineSensor4Init+0x30>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <vLineSensor4Init+0x30>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	217f      	movs	r1, #127	@ 0x7f
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fbe5 	bl	8004c68 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <vLineSensor4Init+0x30>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4904      	ldr	r1, [pc, #16]	@ (80024b8 <vLineSensor4Init+0x34>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fcd0 	bl	8003e4c <HAL_ADC_Start_DMA>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000620 	.word	0x20000620
 80024b8:	20000634 	.word	0x20000634

080024bc <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 80024c4:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <vLineSensor5Init+0x30>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <vLineSensor5Init+0x30>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	217f      	movs	r1, #127	@ 0x7f
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fbc9 	bl	8004c68 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <vLineSensor5Init+0x30>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4904      	ldr	r1, [pc, #16]	@ (80024f0 <vLineSensor5Init+0x34>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 fcb4 	bl	8003e4c <HAL_ADC_Start_DMA>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000624 	.word	0x20000624
 80024f0:	20000638 	.word	0x20000638

080024f4 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 80024f4:	b4b0      	push	{r4, r5, r7}
 80024f6:	b091      	sub	sp, #68	@ 0x44
 80024f8:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 80024fa:	4b46      	ldr	r3, [pc, #280]	@ (8002614 <fLineSensorCalculatePosition+0x120>)
 80024fc:	f107 0418 	add.w	r4, r7, #24
 8002500:	461d      	mov	r5, r3
 8002502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002506:	682b      	ldr	r3, [r5, #0]
 8002508:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8002516:	4b40      	ldr	r3, [pc, #256]	@ (8002618 <fLineSensorCalculatePosition+0x124>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	4b3f      	ldr	r3, [pc, #252]	@ (800261c <fLineSensorCalculatePosition+0x128>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <fLineSensorCalculatePosition+0x12c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <fLineSensorCalculatePosition+0x130>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b3e      	ldr	r3, [pc, #248]	@ (8002628 <fLineSensorCalculatePosition+0x134>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	@ 0x34
 8002538:	e04c      	b.n	80025d4 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 800253a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3340      	adds	r3, #64	@ 0x40
 8002540:	443b      	add	r3, r7
 8002542:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002546:	4939      	ldr	r1, [pc, #228]	@ (800262c <fLineSensorCalculatePosition+0x138>)
 8002548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800254a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800254e:	4293      	cmp	r3, r2
 8002550:	d33d      	bcc.n	80025ce <fLineSensorCalculatePosition+0xda>
 8002552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	3340      	adds	r3, #64	@ 0x40
 8002558:	443b      	add	r3, r7
 800255a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800255e:	4934      	ldr	r1, [pc, #208]	@ (8002630 <fLineSensorCalculatePosition+0x13c>)
 8002560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002562:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002566:	4293      	cmp	r3, r2
 8002568:	d831      	bhi.n	80025ce <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3340      	adds	r3, #64	@ 0x40
 8002570:	443b      	add	r3, r7
 8002572:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002576:	492d      	ldr	r1, [pc, #180]	@ (800262c <fLineSensorCalculatePosition+0x138>)
 8002578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800257a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	3301      	adds	r3, #1
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3340      	adds	r3, #64	@ 0x40
 800259c:	443b      	add	r3, r7
 800259e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025aa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 80025be:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80025c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 80025ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d0:	3301      	adds	r3, #1
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	ddaf      	ble.n	800253a <fLineSensorCalculatePosition+0x46>
        }
    }

    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 80025da:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	d101      	bne.n	80025ec <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <fLineSensorCalculatePosition+0x140>)
 80025ea:	e00b      	b.n	8002604 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 80025ec:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80025f0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80025f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 80025fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <fLineSensorCalculatePosition+0x144>)
 80025fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002600:	6013      	str	r3, [r2, #0]
    return posicao;
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	3744      	adds	r7, #68	@ 0x44
 800260e:	46bd      	mov	sp, r7
 8002610:	bcb0      	pop	{r4, r5, r7}
 8002612:	4770      	bx	lr
 8002614:	0800bd78 	.word	0x0800bd78
 8002618:	20000628 	.word	0x20000628
 800261c:	2000062c 	.word	0x2000062c
 8002620:	20000630 	.word	0x20000630
 8002624:	20000634 	.word	0x20000634
 8002628:	20000638 	.word	0x20000638
 800262c:	20000000 	.word	0x20000000
 8002630:	20000014 	.word	0x20000014
 8002634:	42c60000 	.word	0x42c60000
 8002638:	20000648 	.word	0x20000648

0800263c <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <isSensor3DetectingLine+0x38>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	461a      	mov	r2, r3
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <isSensor3DetectingLine+0x3c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d808      	bhi.n	8002660 <isSensor3DetectingLine+0x24>
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <isSensor3DetectingLine+0x40>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	461a      	mov	r2, r3
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <isSensor3DetectingLine+0x3c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d301      	bcc.n	8002660 <isSensor3DetectingLine+0x24>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <isSensor3DetectingLine+0x26>
 8002660:	2300      	movs	r3, #0
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	b2db      	uxtb	r3, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000
 8002678:	20000630 	.word	0x20000630
 800267c:	20000014 	.word	0x20000014

08002680 <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <isSensor4DetectingLine+0x38>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	461a      	mov	r2, r3
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <isSensor4DetectingLine+0x3c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d808      	bhi.n	80026a4 <isSensor4DetectingLine+0x24>
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <isSensor4DetectingLine+0x40>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <isSensor4DetectingLine+0x3c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d301      	bcc.n	80026a4 <isSensor4DetectingLine+0x24>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <isSensor4DetectingLine+0x26>
 80026a4:	2300      	movs	r3, #0
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000634 	.word	0x20000634
 80026c0:	20000014 	.word	0x20000014

080026c4 <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[1]);
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <isSensor2DetectingLine+0x38>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <isSensor2DetectingLine+0x3c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d808      	bhi.n	80026e8 <isSensor2DetectingLine+0x24>
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <isSensor2DetectingLine+0x40>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <isSensor2DetectingLine+0x3c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d301      	bcc.n	80026e8 <isSensor2DetectingLine+0x24>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <isSensor2DetectingLine+0x26>
 80026e8:	2300      	movs	r3, #0
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000
 8002700:	2000062c 	.word	0x2000062c
 8002704:	20000014 	.word	0x20000014

08002708 <ajustarVelocidadeMotores>:
}
bool isSensor5DetectingLine() {
    return (lineSensor5Value >= minThresholds[4] && lineSensor2Value <= maxThresholds[4]);
}

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002712:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 8002716:	4b60      	ldr	r3, [pc, #384]	@ (8002898 <ajustarVelocidadeMotores+0x190>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 800271c:	4b5f      	ldr	r3, [pc, #380]	@ (800289c <ajustarVelocidadeMotores+0x194>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 estiverem detectando a linha branca e o 2 e 4 nao
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()&& !isSensor2DetectingLine()) {
 8002722:	f7ff ff8b 	bl	800263c <isSensor3DetectingLine>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a5 	beq.w	8002878 <ajustarVelocidadeMotores+0x170>
 800272e:	f7ff ffa7 	bl	8002680 <isSensor4DetectingLine>
 8002732:	4603      	mov	r3, r0
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 809c 	beq.w	8002878 <ajustarVelocidadeMotores+0x170>
 8002740:	f7ff ffc0 	bl	80026c4 <isSensor2DetectingLine>
 8002744:	4603      	mov	r3, r0
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8093 	beq.w	8002878 <ajustarVelocidadeMotores+0x170>
        left_duty_cycle = 0.339;
 8002752:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <ajustarVelocidadeMotores+0x198>)
 8002754:	607b      	str	r3, [r7, #4]
        right_duty_cycle = 0.339;
 8002756:	4b52      	ldr	r3, [pc, #328]	@ (80028a0 <ajustarVelocidadeMotores+0x198>)
 8002758:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 800275a:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <ajustarVelocidadeMotores+0x19c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8002760:	4a51      	ldr	r2, [pc, #324]	@ (80028a8 <ajustarVelocidadeMotores+0x1a0>)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8002766:	edd7 0a00 	vldr	s1, [r7]
 800276a:	ed97 0a01 	vldr	s0, [r7, #4]
 800276e:	f7ff fddb 	bl	8002328 <vSetRodasDC>
        // Se a velocidade da roda esquerda é maior, ajustamos a direita
        if (velEsquerda > velDireita) {
 8002772:	ed97 7a05 	vldr	s14, [r7, #20]
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	dd38      	ble.n	80027f6 <ajustarVelocidadeMotores+0xee>
            float ajuste = velEsquerda / velDireita; // Fator de ajuste
 8002784:	edd7 6a05 	vldr	s13, [r7, #20]
 8002788:	ed97 7a04 	vldr	s14, [r7, #16]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	edc7 7a02 	vstr	s15, [r7, #8]
            float novoDutyCycleDireita = right_duty_cycle / ajuste;
 8002794:	edd7 6a00 	vldr	s13, [r7]
 8002798:	ed97 7a02 	vldr	s14, [r7, #8]
 800279c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a0:	edc7 7a07 	vstr	s15, [r7, #28]
            //EsquMaiorDir = novoDutyCycleDireita;
            fsaidaDutyDireita =novoDutyCycleDireita;
 80027a4:	4a40      	ldr	r2, [pc, #256]	@ (80028a8 <ajustarVelocidadeMotores+0x1a0>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	6013      	str	r3, [r2, #0]
            fsaidaDutyEsquerda = left_duty_cycle;
 80027aa:	4a3e      	ldr	r2, [pc, #248]	@ (80028a4 <ajustarVelocidadeMotores+0x19c>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleDireita > max_duty_cycle) {
 80027b0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <ajustarVelocidadeMotores+0x1a4>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	dd02      	ble.n	80027ca <ajustarVelocidadeMotores+0xc2>
                novoDutyCycleDireita = max_duty_cycle;
 80027c4:	4b39      	ldr	r3, [pc, #228]	@ (80028ac <ajustarVelocidadeMotores+0x1a4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61fb      	str	r3, [r7, #28]
            }
            vSetRodasDC(left_duty_cycle* 0.8, novoDutyCycleDireita);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe f80e 	bl	80007ec <__aeabi_f2d>
 80027d0:	a32f      	add	r3, pc, #188	@ (adr r3, 8002890 <ajustarVelocidadeMotores+0x188>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd fd7b 	bl	80002d0 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe f85b 	bl	800089c <__aeabi_d2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	edd7 0a07 	vldr	s1, [r7, #28]
 80027ec:	ee00 3a10 	vmov	s0, r3
 80027f0:	f7ff fd9a 	bl	8002328 <vSetRodasDC>
 80027f4:	e040      	b.n	8002878 <ajustarVelocidadeMotores+0x170>
        }
        // Se a velocidade da roda direita é maior, ajustamos a esquerda
        else if (velDireita > velEsquerda) {
 80027f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80027fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	dd37      	ble.n	8002878 <ajustarVelocidadeMotores+0x170>
            float ajuste = velDireita / velEsquerda; // Fator de ajuste
 8002808:	edd7 6a04 	vldr	s13, [r7, #16]
 800280c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002814:	edc7 7a03 	vstr	s15, [r7, #12]
            float novoDutyCycleEsquerda = left_duty_cycle / ajuste;
 8002818:	edd7 6a01 	vldr	s13, [r7, #4]
 800281c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002824:	edc7 7a06 	vstr	s15, [r7, #24]
            fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 8002828:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <ajustarVelocidadeMotores+0x19c>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]
            fsaidaDutyDireita = right_duty_cycle;
 800282e:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <ajustarVelocidadeMotores+0x1a0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleEsquerda > max_duty_cycle) {
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <ajustarVelocidadeMotores+0x1a4>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ed97 7a06 	vldr	s14, [r7, #24]
 800283e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	dd02      	ble.n	800284e <ajustarVelocidadeMotores+0x146>
                novoDutyCycleEsquerda = max_duty_cycle;
 8002848:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <ajustarVelocidadeMotores+0x1a4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
            }
            vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle * 0.8);
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f7fd ffcc 	bl	80007ec <__aeabi_f2d>
 8002854:	a30e      	add	r3, pc, #56	@ (adr r3, 8002890 <ajustarVelocidadeMotores+0x188>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fd39 	bl	80002d0 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f819 	bl	800089c <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	ee00 3a90 	vmov	s1, r3
 8002870:	ed97 0a06 	vldr	s0, [r7, #24]
 8002874:	f7ff fd58 	bl	8002328 <vSetRodasDC>
        }
    }
    vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8002878:	edd7 0a00 	vldr	s1, [r7]
 800287c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002880:	f7ff fd52 	bl	8002328 <vSetRodasDC>
//    }
//    else {
//        // Se as velocidades estão equilibradas, aplica os duty cycles normais
//        vSetRodasDC(left_duty_cycle, right_duty_cycle);
//    }
}
 8002884:	bf00      	nop
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f3af 8000 	nop.w
 8002890:	9999999a 	.word	0x9999999a
 8002894:	3fe99999 	.word	0x3fe99999
 8002898:	200004e0 	.word	0x200004e0
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	3ead9168 	.word	0x3ead9168
 80028a4:	20000640 	.word	0x20000640
 80028a8:	20000644 	.word	0x20000644
 80028ac:	20000038 	.word	0x20000038

080028b0 <vLineSensorPIDControl>:


void vLineSensorPIDControl(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80028b6:	f000 fe9b 	bl	80035f0 <HAL_GetTick>
 80028ba:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 80028bc:	4b77      	ldr	r3, [pc, #476]	@ (8002a9c <vLineSensorPIDControl+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028cc:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002aa0 <vLineSensorPIDControl+0x1f0>
 80028d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <vLineSensorPIDControl+0x1f4>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 80028da:	4b72      	ldr	r3, [pc, #456]	@ (8002aa4 <vLineSensorPIDControl+0x1f4>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	d802      	bhi.n	80028f0 <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 80028ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <vLineSensorPIDControl+0x1f4>)
 80028ec:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <vLineSensorPIDControl+0x1f8>)
 80028ee:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 80028f0:	f7ff fe00 	bl	80024f4 <fLineSensorCalculatePosition>
 80028f4:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 80028f8:	edd7 7a00 	vldr	s15, [r7]
 80028fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002aac <vLineSensorPIDControl+0x1fc>
 8002900:	eef4 7a47 	vcmp.f32	s15, s14
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	d106      	bne.n	8002918 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        vSetRodasDC(0, 0);
 800290a:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002ab0 <vLineSensorPIDControl+0x200>
 800290e:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8002ab0 <vLineSensorPIDControl+0x200>
 8002912:	f7ff fd09 	bl	8002328 <vSetRodasDC>
        return;
 8002916:	e0be      	b.n	8002a96 <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 8002918:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002ab0 <vLineSensorPIDControl+0x200>
 800291c:	edd7 7a00 	vldr	s15, [r7]
 8002920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002924:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <vLineSensorPIDControl+0x204>)
 8002926:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 800292a:	4b62      	ldr	r3, [pc, #392]	@ (8002ab4 <vLineSensorPIDControl+0x204>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <vLineSensorPIDControl+0x1f4>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <vLineSensorPIDControl+0x208>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab8 <vLineSensorPIDControl+0x208>)
 8002946:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 800294a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab4 <vLineSensorPIDControl+0x204>)
 800294c:	ed93 7a00 	vldr	s14, [r3]
 8002950:	4b5a      	ldr	r3, [pc, #360]	@ (8002abc <vLineSensorPIDControl+0x20c>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee77 6a67 	vsub.f32	s13, s14, s15
 800295a:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <vLineSensorPIDControl+0x1f4>)
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002964:	4b56      	ldr	r3, [pc, #344]	@ (8002ac0 <vLineSensorPIDControl+0x210>)
 8002966:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 800296a:	4b56      	ldr	r3, [pc, #344]	@ (8002ac4 <vLineSensorPIDControl+0x214>)
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	4b50      	ldr	r3, [pc, #320]	@ (8002ab4 <vLineSensorPIDControl+0x204>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297a:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <vLineSensorPIDControl+0x218>)
 800297c:	edd3 6a00 	vldr	s13, [r3]
 8002980:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab8 <vLineSensorPIDControl+0x208>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	4b4f      	ldr	r3, [pc, #316]	@ (8002acc <vLineSensorPIDControl+0x21c>)
 8002990:	edd3 6a00 	vldr	s13, [r3]
 8002994:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <vLineSensorPIDControl+0x210>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	eef1 7a67 	vneg.f32	s15, s15
 80029a6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 80029ac:	4b48      	ldr	r3, [pc, #288]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <vLineSensorPIDControl+0x224>)
 80029b2:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 80029b4:	4b46      	ldr	r3, [pc, #280]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029b6:	ed93 7a00 	vldr	s14, [r3]
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	dd03      	ble.n	80029d2 <vLineSensorPIDControl+0x122>
 80029ca:	4b43      	ldr	r3, [pc, #268]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a40      	ldr	r2, [pc, #256]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029d0:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eeb1 7a67 	vneg.f32	s14, s15
 80029dc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	dd07      	ble.n	80029fc <vLineSensorPIDControl+0x14c>
 80029ec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	eef1 7a67 	vneg.f32	s15, s15
 80029f6:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 80029f8:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 80029fc:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <vLineSensorPIDControl+0x204>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <vLineSensorPIDControl+0x20c>)
 8002a02:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002a04:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <vLineSensorPIDControl+0x1ec>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 8002a0a:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <vLineSensorPIDControl+0x22c>)
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002adc <vLineSensorPIDControl+0x22c>)
 8002a20:	ed93 7a00 	vldr	s14, [r3]
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <vLineSensorPIDControl+0x220>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2e:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 1.0f) left_duty_cycle = max_duty_cycle;
 8002a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a42:	dd02      	ble.n	8002a4a <vLineSensorPIDControl+0x19a>
 8002a44:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = base_speed;
 8002a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	d502      	bpl.n	8002a5e <vLineSensorPIDControl+0x1ae>
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <vLineSensorPIDControl+0x22c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 1.0f) right_duty_cycle = max_duty_cycle;
 8002a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	dd02      	ble.n	8002a76 <vLineSensorPIDControl+0x1c6>
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <vLineSensorPIDControl+0x228>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = base_speed;
 8002a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	d502      	bpl.n	8002a8a <vLineSensorPIDControl+0x1da>
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <vLineSensorPIDControl+0x22c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 8002a8a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a92:	f7ff fe39 	bl	8002708 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000664 	.word	0x20000664
 8002aa0:	447a0000 	.word	0x447a0000
 8002aa4:	20000030 	.word	0x20000030
 8002aa8:	3c23d70a 	.word	0x3c23d70a
 8002aac:	42c60000 	.word	0x42c60000
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	20000650 	.word	0x20000650
 8002ab8:	20000658 	.word	0x20000658
 8002abc:	20000654 	.word	0x20000654
 8002ac0:	2000065c 	.word	0x2000065c
 8002ac4:	20000028 	.word	0x20000028
 8002ac8:	2000064c 	.word	0x2000064c
 8002acc:	2000002c 	.word	0x2000002c
 8002ad0:	20000660 	.word	0x20000660
 8002ad4:	2000063c 	.word	0x2000063c
 8002ad8:	20000038 	.word	0x20000038
 8002adc:	20000034 	.word	0x20000034

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <HAL_MspInit+0x44>)
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aea:	4a0e      	ldr	r2, [pc, #56]	@ (8002b24 <HAL_MspInit+0x44>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002af2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <HAL_MspInit+0x44>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_MspInit+0x44>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <HAL_MspInit+0x44>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_MspInit+0x44>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b16:	f004 ff11 	bl	800793c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <NMI_Handler+0x4>

08002b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <MemManage_Handler+0x4>

08002b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7e:	f000 fd25 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <DMA1_Channel6_IRQHandler+0x10>)
 8002b8e:	f002 fc6f 	bl	8005470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000053c 	.word	0x2000053c

08002b9c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <DMA1_Channel7_IRQHandler+0x10>)
 8002ba2:	f002 fc65 	bl	8005470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000059c 	.word	0x2000059c

08002bb0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bb4:	4803      	ldr	r0, [pc, #12]	@ (8002bc4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002bb6:	f006 fa43 	bl	8009040 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002bba:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002bbc:	f006 fa40 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000066c 	.word	0x2000066c
 8002bc8:	20000750 	.word	0x20000750

08002bcc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bd0:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002bd2:	f006 fa35 	bl	8009040 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002bd6:	4803      	ldr	r0, [pc, #12]	@ (8002be4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002bd8:	f006 fa32 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000066c 	.word	0x2000066c
 8002be4:	2000079c 	.word	0x2000079c

08002be8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bec:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002bee:	f006 fa27 	bl	8009040 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002bf2:	4803      	ldr	r0, [pc, #12]	@ (8002c00 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002bf4:	f006 fa24 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	2000066c 	.word	0x2000066c
 8002c00:	200007e8 	.word	0x200007e8

08002c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <TIM2_IRQHandler+0x10>)
 8002c0a:	f006 fa19 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200006b8 	.word	0x200006b8

08002c18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <I2C2_EV_IRQHandler+0x10>)
 8002c1e:	f003 f8f1 	bl	8005e04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200004e8 	.word	0x200004e8

08002c2c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <I2C2_ER_IRQHandler+0x10>)
 8002c32:	f003 f901 	bl	8005e38 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004e8 	.word	0x200004e8

08002c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c48:	f002 ff0a 	bl	8005a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <_sbrk+0x5c>)
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <_sbrk+0x60>)
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <_sbrk+0x64>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <_sbrk+0x68>)
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c80:	f008 fbe2 	bl	800b448 <__errno>
 8002c84:	4603      	mov	r3, r0
 8002c86:	220c      	movs	r2, #12
 8002c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e009      	b.n	8002ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_sbrk+0x64>)
 8002ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20020000 	.word	0x20020000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	20000668 	.word	0x20000668
 8002cb8:	20000a18 	.word	0x20000a18

08002cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <SystemInit+0x20>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <SystemInit+0x20>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b09c      	sub	sp, #112	@ 0x70
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
 8002d10:	615a      	str	r2, [r3, #20]
 8002d12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	2234      	movs	r2, #52	@ 0x34
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f008 fb8c 	bl	800b438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d20:	4b4b      	ldr	r3, [pc, #300]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d22:	4a4c      	ldr	r2, [pc, #304]	@ (8002e54 <MX_TIM1_Init+0x174>)
 8002d24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002d26:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d28:	22a9      	movs	r2, #169	@ 0xa9
 8002d2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b48      	ldr	r3, [pc, #288]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b45      	ldr	r3, [pc, #276]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d40:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d46:	4b42      	ldr	r3, [pc, #264]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d4c:	4840      	ldr	r0, [pc, #256]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d4e:	f005 fd81 	bl	8008854 <HAL_TIM_Base_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d58:	f7ff faac 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d66:	4619      	mov	r1, r3
 8002d68:	4839      	ldr	r0, [pc, #228]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d6a:	f006 fc69 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d74:	f7ff fa9e 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d78:	4835      	ldr	r0, [pc, #212]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d7a:	f005 fe3b 	bl	80089f4 <HAL_TIM_PWM_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d84:	f7ff fa96 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d98:	4619      	mov	r1, r3
 8002d9a:	482d      	ldr	r0, [pc, #180]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002d9c:	f007 fb4e 	bl	800a43c <HAL_TIMEx_MasterConfigSynchronization>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002da6:	f7ff fa85 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002daa:	2360      	movs	r3, #96	@ 0x60
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db2:	2300      	movs	r3, #0
 8002db4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002db6:	2300      	movs	r3, #0
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4820      	ldr	r0, [pc, #128]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002dd0:	f006 fb22 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002dda:	f7ff fa6b 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002de2:	2204      	movs	r2, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	481a      	ldr	r0, [pc, #104]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002de8:	f006 fb16 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002df2:	f7ff fa5f 	bl	80022b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4807      	ldr	r0, [pc, #28]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002e34:	f007 fb98 	bl	800a568 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002e3e:	f7ff fa39 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e42:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <MX_TIM1_Init+0x170>)
 8002e44:	f000 fa6c 	bl	8003320 <HAL_TIM_MspPostInit>

}
 8002e48:	bf00      	nop
 8002e4a:	3770      	adds	r7, #112	@ 0x70
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	2000066c 	.word	0x2000066c
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e80:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002e84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e8e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea0:	4813      	ldr	r0, [pc, #76]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002ea2:	f005 fcd7 	bl	8008854 <HAL_TIM_Base_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002eac:	f7ff fa02 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002ebe:	f006 fbbf 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002ec8:	f7ff f9f4 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <MX_TIM2_Init+0x98>)
 8002eda:	f007 faaf 	bl	800a43c <HAL_TIMEx_MasterConfigSynchronization>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002ee4:	f7ff f9e6 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200006b8 	.word	0x200006b8

08002ef4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f04:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f06:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <MX_TIM6_Init+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f24:	480c      	ldr	r0, [pc, #48]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f26:	f005 fc95 	bl	8008854 <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f30:	f7ff f9c0 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_TIM6_Init+0x64>)
 8002f42:	f007 fa7b 	bl	800a43c <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f4c:	f7ff f9b2 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000704 	.word	0x20000704
 8002f5c:	40001000 	.word	0x40001000

08002f60 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <MX_TIM15_Init+0xa0>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002f86:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002f8a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002f94:	2263      	movs	r2, #99	@ 0x63
 8002f96:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002faa:	4814      	ldr	r0, [pc, #80]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002fac:	f005 fc52 	bl	8008854 <HAL_TIM_Base_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002fb6:	f7ff f97d 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480d      	ldr	r0, [pc, #52]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002fc8:	f006 fb3a 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002fd2:	f7ff f96f 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	@ (8002ffc <MX_TIM15_Init+0x9c>)
 8002fe4:	f007 fa2a 	bl	800a43c <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002fee:	f7ff f961 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000750 	.word	0x20000750
 8003000:	40014000 	.word	0x40014000

08003004 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800300a:	463b      	mov	r3, r7
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003016:	4b1e      	ldr	r3, [pc, #120]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003018:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <MX_TIM16_Init+0x90>)
 800301a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 800301c:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <MX_TIM16_Init+0x8c>)
 800301e:	22a9      	movs	r2, #169	@ 0xa9
 8003020:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <MX_TIM16_Init+0x8c>)
 800302a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800302e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003030:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003036:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303c:	4b14      	ldr	r3, [pc, #80]	@ (8003090 <MX_TIM16_Init+0x8c>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003042:	4813      	ldr	r0, [pc, #76]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003044:	f005 fc06 	bl	8008854 <HAL_TIM_Base_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800304e:	f7ff f931 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8003052:	480f      	ldr	r0, [pc, #60]	@ (8003090 <MX_TIM16_Init+0x8c>)
 8003054:	f005 fe42 	bl	8008cdc <HAL_TIM_IC_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800305e:	f7ff f929 	bl	80022b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003066:	2301      	movs	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800306e:	230f      	movs	r3, #15
 8003070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	2200      	movs	r2, #0
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	@ (8003090 <MX_TIM16_Init+0x8c>)
 800307a:	f006 f930 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8003084:	f7ff f916 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000079c 	.word	0x2000079c
 8003094:	40014400 	.word	0x40014400

08003098 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800309e:	463b      	mov	r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <MX_TIM17_Init+0x90>)
 80030ae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80030b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030b2:	22a9      	movs	r2, #169	@ 0xa9
 80030b4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80030ca:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80030d6:	4813      	ldr	r0, [pc, #76]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030d8:	f005 fbbc 	bl	8008854 <HAL_TIM_Base_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80030e2:	f7ff f8e7 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80030e6:	480f      	ldr	r0, [pc, #60]	@ (8003124 <MX_TIM17_Init+0x8c>)
 80030e8:	f005 fdf8 	bl	8008cdc <HAL_TIM_IC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80030f2:	f7ff f8df 	bl	80022b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030fa:	2301      	movs	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003102:	230f      	movs	r3, #15
 8003104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003106:	463b      	mov	r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	4619      	mov	r1, r3
 800310c:	4805      	ldr	r0, [pc, #20]	@ (8003124 <MX_TIM17_Init+0x8c>)
 800310e:	f006 f8e6 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8003118:	f7ff f8cc 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200007e8 	.word	0x200007e8
 8003128:	40014800 	.word	0x40014800

0800312c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b090      	sub	sp, #64	@ 0x40
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6e      	ldr	r2, [pc, #440]	@ (8003304 <HAL_TIM_Base_MspInit+0x1d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d124      	bne.n	8003198 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800314e:	4b6e      	ldr	r3, [pc, #440]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	4a6d      	ldr	r2, [pc, #436]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003154:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003158:	6613      	str	r3, [r2, #96]	@ 0x60
 800315a:	4b6b      	ldr	r3, [pc, #428]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2018      	movs	r0, #24
 800316c:	f001 ffc1 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003170:	2018      	movs	r0, #24
 8003172:	f001 ffd8 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2019      	movs	r0, #25
 800317c:	f001 ffb9 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003180:	2019      	movs	r0, #25
 8003182:	f001 ffd0 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	201a      	movs	r0, #26
 800318c:	f001 ffb1 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003190:	201a      	movs	r0, #26
 8003192:	f001 ffc8 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003196:	e0b0      	b.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a0:	d114      	bne.n	80031cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a2:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ae:	4b56      	ldr	r3, [pc, #344]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	201c      	movs	r0, #28
 80031c0:	f001 ff97 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c4:	201c      	movs	r0, #28
 80031c6:	f001 ffae 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 80031ca:	e096      	b.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM6)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4e      	ldr	r2, [pc, #312]	@ (800330c <HAL_TIM_Base_MspInit+0x1e0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	4a4b      	ldr	r2, [pc, #300]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031e2:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
}
 80031ee:	e084      	b.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM15)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a46      	ldr	r2, [pc, #280]	@ (8003310 <HAL_TIM_Base_MspInit+0x1e4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d114      	bne.n	8003224 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80031fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fe:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	6613      	str	r3, [r2, #96]	@ 0x60
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2018      	movs	r0, #24
 8003218:	f001 ff6b 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800321c:	2018      	movs	r0, #24
 800321e:	f001 ff82 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 8003222:	e06a      	b.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM16)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3a      	ldr	r2, [pc, #232]	@ (8003314 <HAL_TIM_Base_MspInit+0x1e8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d130      	bne.n	8003290 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800322e:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	4a35      	ldr	r2, [pc, #212]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003238:	6613      	str	r3, [r2, #96]	@ 0x60
 800323a:	4b33      	ldr	r3, [pc, #204]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324a:	4a2f      	ldr	r2, [pc, #188]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003252:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 800325e:	2310      	movs	r3, #16
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800326e:	2301      	movs	r3, #1
 8003270:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8003272:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003276:	4619      	mov	r1, r3
 8003278:	4827      	ldr	r0, [pc, #156]	@ (8003318 <HAL_TIM_Base_MspInit+0x1ec>)
 800327a:	f002 fa57 	bl	800572c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	2019      	movs	r0, #25
 8003284:	f001 ff35 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003288:	2019      	movs	r0, #25
 800328a:	f001 ff4c 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 800328e:	e034      	b.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM17)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_TIM_Base_MspInit+0x1f0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d12f      	bne.n	80032fa <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	4a1a      	ldr	r2, [pc, #104]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a6:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_TIM_Base_MspInit+0x1dc>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 80032ca:	2320      	movs	r3, #32
 80032cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80032da:	230a      	movs	r3, #10
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e2:	4619      	mov	r1, r3
 80032e4:	480c      	ldr	r0, [pc, #48]	@ (8003318 <HAL_TIM_Base_MspInit+0x1ec>)
 80032e6:	f002 fa21 	bl	800572c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	201a      	movs	r0, #26
 80032f0:	f001 feff 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80032f4:	201a      	movs	r0, #26
 80032f6:	f001 ff16 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3740      	adds	r7, #64	@ 0x40
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40001000 	.word	0x40001000
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	48000400 	.word	0x48000400
 800331c:	40014800 	.word	0x40014800

08003320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a11      	ldr	r2, [pc, #68]	@ (8003384 <HAL_TIM_MspPostInit+0x64>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d11b      	bne.n	800337a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_TIM_MspPostInit+0x68>)
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	4a10      	ldr	r2, [pc, #64]	@ (8003388 <HAL_TIM_MspPostInit+0x68>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800334e:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <HAL_TIM_MspPostInit+0x68>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 800335a:	2303      	movs	r3, #3
 800335c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800336a:	2302      	movs	r3, #2
 800336c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	@ (800338c <HAL_TIM_MspPostInit+0x6c>)
 8003376:	f002 f9d9 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800337a:	bf00      	nop
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40021000 	.word	0x40021000
 800338c:	48000800 	.word	0x48000800

08003390 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 8003396:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <MX_LPUART1_UART_Init+0x90>)
 8003398:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800339a:	4b20      	ldr	r3, [pc, #128]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 800339c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80033a8:	4b1c      	ldr	r3, [pc, #112]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80033ae:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80033b4:	4b19      	ldr	r3, [pc, #100]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033b6:	220c      	movs	r2, #12
 80033b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ba:	4b18      	ldr	r3, [pc, #96]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033c0:	4b16      	ldr	r3, [pc, #88]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033cc:	4b13      	ldr	r3, [pc, #76]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80033d2:	4812      	ldr	r0, [pc, #72]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033d4:	f007 f9a2 	bl	800a71c <HAL_UART_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80033de:	f7fe ff69 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e2:	2100      	movs	r1, #0
 80033e4:	480d      	ldr	r0, [pc, #52]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033e6:	f007 ff3d 	bl	800b264 <HAL_UARTEx_SetTxFifoThreshold>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80033f0:	f7fe ff60 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f4:	2100      	movs	r1, #0
 80033f6:	4809      	ldr	r0, [pc, #36]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 80033f8:	f007 ff72 	bl	800b2e0 <HAL_UARTEx_SetRxFifoThreshold>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003402:	f7fe ff57 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	@ (800341c <MX_LPUART1_UART_Init+0x8c>)
 8003408:	f007 fef3 	bl	800b1f2 <HAL_UARTEx_DisableFifoMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003412:	f7fe ff4f 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000834 	.word	0x20000834
 8003420:	40008000 	.word	0x40008000

08003424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b09e      	sub	sp, #120	@ 0x78
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	2254      	movs	r2, #84	@ 0x54
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f007 fff7 	bl	800b438 <memset>
  if(uartHandle->Instance==LPUART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_UART_MspInit+0xa8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d136      	bne.n	80034c2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003454:	2320      	movs	r3, #32
 8003456:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4618      	mov	r0, r3
 8003462:	f004 ffa9 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800346c:	f7fe ff22 	bl	80022b4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003470:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 800348a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348c:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_UART_MspInit+0xac>)
 8003496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80034a0:	230c      	movs	r3, #12
 80034a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80034b0:	230c      	movs	r3, #12
 80034b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034b8:	4619      	mov	r1, r3
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034be:	f002 f935 	bl	800572c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80034c2:	bf00      	nop
 80034c4:	3778      	adds	r7, #120	@ 0x78
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40008000 	.word	0x40008000
 80034d0:	40021000 	.word	0x40021000

080034d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034d4:	480d      	ldr	r0, [pc, #52]	@ (800350c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034d8:	f7ff fbf0 	bl	8002cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	@ (8003510 <LoopForever+0x6>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	@ (8003514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <LoopForever+0xe>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <LoopForever+0x12>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003520 <LoopForever+0x16>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003502:	f007 ffa7 	bl	800b454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003506:	f7fe fe03 	bl	8002110 <main>

0800350a <LoopForever>:

LoopForever:
    b LoopForever
 800350a:	e7fe      	b.n	800350a <LoopForever>
  ldr   r0, =_estack
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003518:	0800be14 	.word	0x0800be14
  ldr r2, =_sbss
 800351c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003520:	20000a14 	.word	0x20000a14

08003524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC1_2_IRQHandler>

08003526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003530:	2003      	movs	r0, #3
 8003532:	f001 fdd3 	bl	80050dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003536:	2000      	movs	r0, #0
 8003538:	f000 f80e 	bl	8003558 <HAL_InitTick>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	71fb      	strb	r3, [r7, #7]
 8003546:	e001      	b.n	800354c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003548:	f7ff faca 	bl	8002ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800354c:	79fb      	ldrb	r3, [r7, #7]

}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003564:	4b16      	ldr	r3, [pc, #88]	@ (80035c0 <HAL_InitTick+0x68>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800356c:	4b15      	ldr	r3, [pc, #84]	@ (80035c4 <HAL_InitTick+0x6c>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b13      	ldr	r3, [pc, #76]	@ (80035c0 <HAL_InitTick+0x68>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003578:	fbb1 f3f3 	udiv	r3, r1, r3
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fdde 	bl	8005142 <HAL_SYSTICK_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	d809      	bhi.n	80035a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003592:	2200      	movs	r2, #0
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	f001 fdaa 	bl	80050f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800359e:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <HAL_InitTick+0x70>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e007      	b.n	80035b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e004      	b.n	80035b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000044 	.word	0x20000044
 80035c4:	2000003c 	.word	0x2000003c
 80035c8:	20000040 	.word	0x20000040

080035cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_IncTick+0x1c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_IncTick+0x20>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	4a03      	ldr	r2, [pc, #12]	@ (80035e8 <HAL_IncTick+0x1c>)
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	200008c8 	.word	0x200008c8
 80035ec:	20000044 	.word	0x20000044

080035f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return uwTick;
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_GetTick+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	200008c8 	.word	0x200008c8

08003608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7ff ffee 	bl	80035f0 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d004      	beq.n	800362c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003622:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <HAL_Delay+0x40>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800362c:	bf00      	nop
 800362e:	f7ff ffdf 	bl	80035f0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	429a      	cmp	r2, r3
 800363c:	d8f7      	bhi.n	800362e <HAL_Delay+0x26>
  {
  }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000044 	.word	0x20000044

0800364c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3360      	adds	r3, #96	@ 0x60
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <LL_ADC_SetOffset+0x44>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	03fff000 	.word	0x03fff000

080036fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3360      	adds	r3, #96	@ 0x60
 800370a:	461a      	mov	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3360      	adds	r3, #96	@ 0x60
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3360      	adds	r3, #96	@ 0x60
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3360      	adds	r3, #96	@ 0x60
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	615a      	str	r2, [r3, #20]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3330      	adds	r3, #48	@ 0x30
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	211f      	movs	r1, #31
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	f003 011f 	and.w	r1, r3, #31
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800386e:	b480      	push	{r7}
 8003870:	b087      	sub	sp, #28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3314      	adds	r3, #20
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0e5b      	lsrs	r3, r3, #25
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0d1b      	lsrs	r3, r3, #20
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2107      	movs	r1, #7
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	401a      	ands	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0d1b      	lsrs	r3, r3, #20
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	431a      	orrs	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	43db      	mvns	r3, r3
 80038de:	401a      	ands	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0318 	and.w	r3, r3, #24
 80038e6:	4908      	ldr	r1, [pc, #32]	@ (8003908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038e8:	40d9      	lsrs	r1, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	400b      	ands	r3, r1
 80038ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	0007ffff 	.word	0x0007ffff

0800390c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 031f 	and.w	r3, r3, #31
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003938:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6093      	str	r3, [r2, #8]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800395c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003960:	d101      	bne.n	8003966 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003988:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039b0:	d101      	bne.n	80039b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a00:	f043 0202 	orr.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <LL_ADC_IsEnabled+0x18>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <LL_ADC_IsEnabled+0x1a>
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d101      	bne.n	8003a52 <LL_ADC_IsDisableOngoing+0x18>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <LL_ADC_IsDisableOngoing+0x1a>
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a74:	f043 0204 	orr.w	r2, r3, #4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d101      	bne.n	8003aa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b089      	sub	sp, #36	@ 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1a9      	b.n	8003e42 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd faf3 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff19 	bl	800394c <LL_ADC_IsDeepPowerDownEnabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff feff 	bl	8003928 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff34 	bl	800399c <LL_ADC_IsInternalRegulatorEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d115      	bne.n	8003b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ff18 	bl	8003974 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b44:	4b9c      	ldr	r3, [pc, #624]	@ (8003db8 <HAL_ADC_Init+0x2e4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	4a9c      	ldr	r2, [pc, #624]	@ (8003dbc <HAL_ADC_Init+0x2e8>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b58:	e002      	b.n	8003b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f9      	bne.n	8003b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ff16 	bl	800399c <LL_ADC_IsInternalRegulatorEnabled>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff76 	bl	8003a88 <LL_ADC_REG_IsConversionOngoing>
 8003b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 8142 	bne.w	8003e30 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 813e 	bne.w	8003e30 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bbc:	f043 0202 	orr.w	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff23 	bl	8003a14 <LL_ADC_IsEnabled>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d141      	bne.n	8003c58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_Init+0x114>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a77      	ldr	r2, [pc, #476]	@ (8003dc0 <HAL_ADC_Init+0x2ec>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10f      	bne.n	8003c08 <HAL_ADC_Init+0x134>
 8003be8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bec:	f7ff ff12 	bl	8003a14 <LL_ADC_IsEnabled>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	4873      	ldr	r0, [pc, #460]	@ (8003dc0 <HAL_ADC_Init+0x2ec>)
 8003bf4:	f7ff ff0e 	bl	8003a14 <LL_ADC_IsEnabled>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_ADC_Init+0x15a>
 8003c08:	486e      	ldr	r0, [pc, #440]	@ (8003dc4 <HAL_ADC_Init+0x2f0>)
 8003c0a:	f7ff ff03 	bl	8003a14 <LL_ADC_IsEnabled>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	486d      	ldr	r0, [pc, #436]	@ (8003dc8 <HAL_ADC_Init+0x2f4>)
 8003c12:	f7ff feff 	bl	8003a14 <LL_ADC_IsEnabled>
 8003c16:	4603      	mov	r3, r0
 8003c18:	431c      	orrs	r4, r3
 8003c1a:	486c      	ldr	r0, [pc, #432]	@ (8003dcc <HAL_ADC_Init+0x2f8>)
 8003c1c:	f7ff fefa 	bl	8003a14 <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4323      	orrs	r3, r4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_Init+0x172>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5f      	ldr	r2, [pc, #380]	@ (8003dc0 <HAL_ADC_Init+0x2ec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_Init+0x176>
 8003c46:	4a62      	ldr	r2, [pc, #392]	@ (8003dd0 <HAL_ADC_Init+0x2fc>)
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_Init+0x178>
 8003c4a:	4a62      	ldr	r2, [pc, #392]	@ (8003dd4 <HAL_ADC_Init+0x300>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7ff fcfa 	bl	800364c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	7f5b      	ldrb	r3, [r3, #29]
 8003c5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d106      	bne.n	8003c94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	045b      	lsls	r3, r3, #17
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	4b48      	ldr	r3, [pc, #288]	@ (8003dd8 <HAL_ADC_Init+0x304>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fee5 	bl	8003aae <LL_ADC_INJ_IsConversionOngoing>
 8003ce4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d17f      	bne.n	8003dec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d17c      	bne.n	8003dec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cf6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cfe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d0e:	f023 0302 	bic.w	r3, r3, #2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d017      	beq.n	8003d54 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6911      	ldr	r1, [r2, #16]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003d52:	e013      	b.n	8003d7c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d12a      	bne.n	8003ddc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d9c:	4311      	orrs	r1, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003da8:	430a      	orrs	r2, r1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e019      	b.n	8003dec <HAL_ADC_Init+0x318>
 8003db8:	2000003c 	.word	0x2000003c
 8003dbc:	053e2d63 	.word	0x053e2d63
 8003dc0:	50000100 	.word	0x50000100
 8003dc4:	50000400 	.word	0x50000400
 8003dc8:	50000500 	.word	0x50000500
 8003dcc:	50000600 	.word	0x50000600
 8003dd0:	50000300 	.word	0x50000300
 8003dd4:	50000700 	.word	0x50000700
 8003dd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10c      	bne.n	8003e0e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f023 010f 	bic.w	r1, r3, #15
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e0c:	e007      	b.n	8003e1e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 020f 	bic.w	r2, r2, #15
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e2e:	e007      	b.n	8003e40 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	bf00      	nop

08003e4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e60:	d004      	beq.n	8003e6c <HAL_ADC_Start_DMA+0x20>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd0 <HAL_ADC_Start_DMA+0x184>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_Start_DMA+0x24>
 8003e6c:	4b59      	ldr	r3, [pc, #356]	@ (8003fd4 <HAL_ADC_Start_DMA+0x188>)
 8003e6e:	e000      	b.n	8003e72 <HAL_ADC_Start_DMA+0x26>
 8003e70:	4b59      	ldr	r3, [pc, #356]	@ (8003fd8 <HAL_ADC_Start_DMA+0x18c>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fd4a 	bl	800390c <LL_ADC_GetMultimode>
 8003e78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fe02 	bl	8003a88 <LL_ADC_REG_IsConversionOngoing>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 809b 	bne.w	8003fc2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Start_DMA+0x4e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e096      	b.n	8003fc8 <HAL_ADC_Start_DMA+0x17c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8003fdc <HAL_ADC_Start_DMA+0x190>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d008      	beq.n	8003ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d002      	beq.n	8003ebe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d17a      	bne.n	8003fb4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fcf6 	bl	80048b0 <ADC_Enable>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d16d      	bne.n	8003faa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd0 <HAL_ADC_Start_DMA+0x184>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_ADC_Start_DMA+0xb4>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe0 <HAL_ADC_Start_DMA+0x194>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_Start_DMA+0xb0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e003      	b.n	8003f04 <HAL_ADC_Start_DMA+0xb8>
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_ADC_Start_DMA+0x198>)
 8003efe:	e001      	b.n	8003f04 <HAL_ADC_Start_DMA+0xb8>
 8003f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d002      	beq.n	8003f12 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2e:	f023 0206 	bic.w	r2, r3, #6
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f36:	e002      	b.n	8003f3e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	4a29      	ldr	r2, [pc, #164]	@ (8003fe8 <HAL_ADC_Start_DMA+0x19c>)
 8003f44:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	4a28      	ldr	r2, [pc, #160]	@ (8003fec <HAL_ADC_Start_DMA+0x1a0>)
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <HAL_ADC_Start_DMA+0x1a4>)
 8003f54:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	221c      	movs	r2, #28
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0210 	orr.w	r2, r2, #16
 8003f74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3340      	adds	r3, #64	@ 0x40
 8003f90:	4619      	mov	r1, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f001 f989 	bl	80052ac <HAL_DMA_Start_IT>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fd5c 	bl	8003a60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fa8:	e00d      	b.n	8003fc6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003fb2:	e008      	b.n	8003fc6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003fc0:	e001      	b.n	8003fc6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	50000100 	.word	0x50000100
 8003fd4:	50000300 	.word	0x50000300
 8003fd8:	50000700 	.word	0x50000700
 8003fdc:	50000600 	.word	0x50000600
 8003fe0:	50000500 	.word	0x50000500
 8003fe4:	50000400 	.word	0x50000400
 8003fe8:	08004a9b 	.word	0x08004a9b
 8003fec:	08004b73 	.word	0x08004b73
 8003ff0:	08004b8f 	.word	0x08004b8f

08003ff4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b0b6      	sub	sp, #216	@ 0xd8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x24>
 800404e:	2302      	movs	r3, #2
 8004050:	f000 bc13 	b.w	800487a <HAL_ADC_ConfigChannel+0x84a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fd11 	bl	8003a88 <LL_ADC_REG_IsConversionOngoing>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 83f3 	bne.w	8004854 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f7ff fbcb 	bl	8003816 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fcff 	bl	8003a88 <LL_ADC_REG_IsConversionOngoing>
 800408a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fd0b 	bl	8003aae <LL_ADC_INJ_IsConversionOngoing>
 8004098:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800409c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 81d9 	bne.w	8004458 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 81d4 	bne.w	8004458 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040b8:	d10f      	bne.n	80040da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	4619      	mov	r1, r3
 80040c6:	f7ff fbd2 	bl	800386e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fb79 	bl	80037ca <LL_ADC_SetSamplingTimeCommonConfig>
 80040d8:	e00e      	b.n	80040f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7ff fbc1 	bl	800386e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fb69 	bl	80037ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d022      	beq.n	8004160 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800412a:	f7ff fac3 	bl	80036b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff fb0f 	bl	800375e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x126>
 8004150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004154:	e000      	b.n	8004158 <HAL_ADC_ConfigChannel+0x128>
 8004156:	2300      	movs	r3, #0
 8004158:	461a      	mov	r2, r3
 800415a:	f7ff fb1b 	bl	8003794 <LL_ADC_SetOffsetSaturation>
 800415e:	e17b      	b.n	8004458 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fac8 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800416c:	4603      	mov	r3, r0
 800416e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_ADC_ConfigChannel+0x15c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fabd 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	f003 021f 	and.w	r2, r3, #31
 800418a:	e01e      	b.n	80041ca <HAL_ADC_ConfigChannel+0x19a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fab2 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004198:	4603      	mov	r3, r0
 800419a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80041ba:	2320      	movs	r3, #32
 80041bc:	e004      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80041be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x1b2>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0e9b      	lsrs	r3, r3, #26
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	e018      	b.n	8004214 <HAL_ADC_ConfigChannel+0x1e4>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80041f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80041fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004206:	2320      	movs	r3, #32
 8004208:	e004      	b.n	8004214 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800420a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004214:	429a      	cmp	r2, r3
 8004216:	d106      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fa81 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fa65 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x222>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fa5a 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	0e9b      	lsrs	r3, r3, #26
 800424c:	f003 021f 	and.w	r2, r3, #31
 8004250:	e01e      	b.n	8004290 <HAL_ADC_ConfigChannel+0x260>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fa4f 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800425e:	4603      	mov	r3, r0
 8004260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e004      	b.n	800428e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x278>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	0e9b      	lsrs	r3, r3, #26
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	e018      	b.n	80042da <HAL_ADC_ConfigChannel+0x2aa>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80042bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80042c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042cc:	2320      	movs	r3, #32
 80042ce:	e004      	b.n	80042da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80042d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042da:	429a      	cmp	r2, r3
 80042dc:	d106      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fa1e 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fa02 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x2e8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff f9f7 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800430e:	4603      	mov	r3, r0
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	f003 021f 	and.w	r2, r3, #31
 8004316:	e01e      	b.n	8004356 <HAL_ADC_ConfigChannel+0x326>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f9ec 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800433a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800433e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e004      	b.n	8004354 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800434a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d105      	bne.n	800436e <HAL_ADC_ConfigChannel+0x33e>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	e016      	b.n	800439c <HAL_ADC_ConfigChannel+0x36c>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004386:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e004      	b.n	800439c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800439c:	429a      	cmp	r2, r3
 800439e:	d106      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f9bd 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2103      	movs	r1, #3
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f9a1 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_ADC_ConfigChannel+0x3aa>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2103      	movs	r1, #3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f996 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	e017      	b.n	800440a <HAL_ADC_ConfigChannel+0x3da>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2103      	movs	r1, #3
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f98b 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80043f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80043f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80043fc:	2320      	movs	r3, #32
 80043fe:	e003      	b.n	8004408 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x3f2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	e011      	b.n	8004446 <HAL_ADC_ConfigChannel+0x416>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004432:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e003      	b.n	8004446 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800443e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004446:	429a      	cmp	r2, r3
 8004448:	d106      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	2103      	movs	r1, #3
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff f968 	bl	8003728 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fad9 	bl	8003a14 <LL_ADC_IsEnabled>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 813d 	bne.w	80046e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	461a      	mov	r2, r3
 8004478:	f7ff fa24 	bl	80038c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4aa2      	ldr	r2, [pc, #648]	@ (800470c <HAL_ADC_ConfigChannel+0x6dc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	f040 812e 	bne.w	80046e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x480>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	3301      	adds	r3, #1
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2b09      	cmp	r3, #9
 80044a6:	bf94      	ite	ls
 80044a8:	2301      	movls	r3, #1
 80044aa:	2300      	movhi	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e019      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x4b4>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80044be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80044c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e003      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80044cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b09      	cmp	r3, #9
 80044dc:	bf94      	ite	ls
 80044de:	2301      	movls	r3, #1
 80044e0:	2300      	movhi	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d079      	beq.n	80045dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x4d4>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	069b      	lsls	r3, r3, #26
 80044fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004502:	e015      	b.n	8004530 <HAL_ADC_ConfigChannel+0x500>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004514:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800451c:	2320      	movs	r3, #32
 800451e:	e003      	b.n	8004528 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	069b      	lsls	r3, r3, #26
 800452c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x520>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	3301      	adds	r3, #1
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2101      	movs	r1, #1
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	e017      	b.n	8004580 <HAL_ADC_ConfigChannel+0x550>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800455e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004560:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e003      	b.n	8004574 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800456c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2101      	movs	r1, #1
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	ea42 0103 	orr.w	r1, r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x576>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0e9b      	lsrs	r3, r3, #26
 8004596:	3301      	adds	r3, #1
 8004598:	f003 021f 	and.w	r2, r3, #31
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	051b      	lsls	r3, r3, #20
 80045a4:	e018      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x5a8>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80045be:	2320      	movs	r3, #32
 80045c0:	e003      	b.n	80045ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80045c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f003 021f 	and.w	r2, r3, #31
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045d8:	430b      	orrs	r3, r1
 80045da:	e07e      	b.n	80046da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d107      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x5c8>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	069b      	lsls	r3, r3, #26
 80045f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f6:	e015      	b.n	8004624 <HAL_ADC_ConfigChannel+0x5f4>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	fa93 f3a3 	rbit	r3, r3
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004610:	2320      	movs	r3, #32
 8004612:	e003      	b.n	800461c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	069b      	lsls	r3, r3, #26
 8004620:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x614>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0e9b      	lsrs	r3, r3, #26
 8004636:	3301      	adds	r3, #1
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	e017      	b.n	8004674 <HAL_ADC_ConfigChannel+0x644>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	61fb      	str	r3, [r7, #28]
  return result;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800465c:	2320      	movs	r3, #32
 800465e:	e003      	b.n	8004668 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	3301      	adds	r3, #1
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	ea42 0103 	orr.w	r1, r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10d      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x670>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	0e9b      	lsrs	r3, r3, #26
 800468a:	3301      	adds	r3, #1
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	3b1e      	subs	r3, #30
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800469e:	e01b      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x6a8>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	613b      	str	r3, [r7, #16]
  return result;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	3b1e      	subs	r3, #30
 80046d2:	051b      	lsls	r3, r3, #20
 80046d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046de:	4619      	mov	r1, r3
 80046e0:	f7ff f8c5 	bl	800386e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_ADC_ConfigChannel+0x6e0>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80be 	beq.w	800486e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046fa:	d004      	beq.n	8004706 <HAL_ADC_ConfigChannel+0x6d6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_ADC_ConfigChannel+0x6e4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10a      	bne.n	800471c <HAL_ADC_ConfigChannel+0x6ec>
 8004706:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <HAL_ADC_ConfigChannel+0x6e8>)
 8004708:	e009      	b.n	800471e <HAL_ADC_ConfigChannel+0x6ee>
 800470a:	bf00      	nop
 800470c:	407f0000 	.word	0x407f0000
 8004710:	80080000 	.word	0x80080000
 8004714:	50000100 	.word	0x50000100
 8004718:	50000300 	.word	0x50000300
 800471c:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <HAL_ADC_ConfigChannel+0x854>)
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe ffba 	bl	8003698 <LL_ADC_GetCommonPathInternalCh>
 8004724:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a56      	ldr	r2, [pc, #344]	@ (8004888 <HAL_ADC_ConfigChannel+0x858>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_ADC_ConfigChannel+0x70c>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a55      	ldr	r2, [pc, #340]	@ (800488c <HAL_ADC_ConfigChannel+0x85c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d13a      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800473c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d134      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004750:	d005      	beq.n	800475e <HAL_ADC_ConfigChannel+0x72e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <HAL_ADC_ConfigChannel+0x860>)
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 8085 	bne.w	8004868 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004766:	d004      	beq.n	8004772 <HAL_ADC_ConfigChannel+0x742>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a49      	ldr	r2, [pc, #292]	@ (8004894 <HAL_ADC_ConfigChannel+0x864>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x746>
 8004772:	4a49      	ldr	r2, [pc, #292]	@ (8004898 <HAL_ADC_ConfigChannel+0x868>)
 8004774:	e000      	b.n	8004778 <HAL_ADC_ConfigChannel+0x748>
 8004776:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <HAL_ADC_ConfigChannel+0x854>)
 8004778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800477c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe ff75 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004788:	4b44      	ldr	r3, [pc, #272]	@ (800489c <HAL_ADC_ConfigChannel+0x86c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	4a44      	ldr	r2, [pc, #272]	@ (80048a0 <HAL_ADC_ConfigChannel+0x870>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047a2:	e002      	b.n	80047aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f9      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047b0:	e05a      	b.n	8004868 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3b      	ldr	r2, [pc, #236]	@ (80048a4 <HAL_ADC_ConfigChannel+0x874>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d125      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11f      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a31      	ldr	r2, [pc, #196]	@ (8004894 <HAL_ADC_ConfigChannel+0x864>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d104      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x7ac>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a34      	ldr	r2, [pc, #208]	@ (80048a8 <HAL_ADC_ConfigChannel+0x878>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d047      	beq.n	800486c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047e4:	d004      	beq.n	80047f0 <HAL_ADC_ConfigChannel+0x7c0>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <HAL_ADC_ConfigChannel+0x864>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x7c4>
 80047f0:	4a29      	ldr	r2, [pc, #164]	@ (8004898 <HAL_ADC_ConfigChannel+0x868>)
 80047f2:	e000      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x7c6>
 80047f4:	4a23      	ldr	r2, [pc, #140]	@ (8004884 <HAL_ADC_ConfigChannel+0x854>)
 80047f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe ff36 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004806:	e031      	b.n	800486c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a27      	ldr	r2, [pc, #156]	@ (80048ac <HAL_ADC_ConfigChannel+0x87c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d12d      	bne.n	800486e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d127      	bne.n	800486e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HAL_ADC_ConfigChannel+0x864>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004830:	d004      	beq.n	800483c <HAL_ADC_ConfigChannel+0x80c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_ADC_ConfigChannel+0x864>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x810>
 800483c:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <HAL_ADC_ConfigChannel+0x868>)
 800483e:	e000      	b.n	8004842 <HAL_ADC_ConfigChannel+0x812>
 8004840:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <HAL_ADC_ConfigChannel+0x854>)
 8004842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fe ff10 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
 8004852:	e00c      	b.n	800486e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004866:	e002      	b.n	800486e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004868:	bf00      	nop
 800486a:	e000      	b.n	800486e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800486c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004876:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800487a:	4618      	mov	r0, r3
 800487c:	37d8      	adds	r7, #216	@ 0xd8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	50000700 	.word	0x50000700
 8004888:	c3210000 	.word	0xc3210000
 800488c:	90c00010 	.word	0x90c00010
 8004890:	50000600 	.word	0x50000600
 8004894:	50000100 	.word	0x50000100
 8004898:	50000300 	.word	0x50000300
 800489c:	2000003c 	.word	0x2000003c
 80048a0:	053e2d63 	.word	0x053e2d63
 80048a4:	c7520000 	.word	0xc7520000
 80048a8:	50000500 	.word	0x50000500
 80048ac:	cb840000 	.word	0xcb840000

080048b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff f8a7 	bl	8003a14 <LL_ADC_IsEnabled>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d176      	bne.n	80049ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	4b3c      	ldr	r3, [pc, #240]	@ (80049c4 <ADC_Enable+0x114>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	f043 0210 	orr.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e062      	b.n	80049bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f862 	bl	80039c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004908:	d004      	beq.n	8004914 <ADC_Enable+0x64>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2e      	ldr	r2, [pc, #184]	@ (80049c8 <ADC_Enable+0x118>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <ADC_Enable+0x68>
 8004914:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <ADC_Enable+0x11c>)
 8004916:	e000      	b.n	800491a <ADC_Enable+0x6a>
 8004918:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <ADC_Enable+0x120>)
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe febc 	bl	8003698 <LL_ADC_GetCommonPathInternalCh>
 8004920:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004926:	2b00      	cmp	r3, #0
 8004928:	d013      	beq.n	8004952 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800492a:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <ADC_Enable+0x124>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	4a29      	ldr	r2, [pc, #164]	@ (80049d8 <ADC_Enable+0x128>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	4613      	mov	r3, r2
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004944:	e002      	b.n	800494c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3b01      	subs	r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f9      	bne.n	8004946 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004952:	f7fe fe4d 	bl	80035f0 <HAL_GetTick>
 8004956:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004958:	e028      	b.n	80049ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff f858 	bl	8003a14 <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff f828 	bl	80039c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004974:	f7fe fe3c 	bl	80035f0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d914      	bls.n	80049ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d00d      	beq.n	80049ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	f043 0210 	orr.w	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e007      	b.n	80049bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d1cf      	bne.n	800495a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	8000003f 	.word	0x8000003f
 80049c8:	50000100 	.word	0x50000100
 80049cc:	50000300 	.word	0x50000300
 80049d0:	50000700 	.word	0x50000700
 80049d4:	2000003c 	.word	0x2000003c
 80049d8:	053e2d63 	.word	0x053e2d63

080049dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f826 	bl	8003a3a <LL_ADC_IsDisableOngoing>
 80049ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff f80d 	bl	8003a14 <LL_ADC_IsEnabled>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d047      	beq.n	8004a90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d144      	bne.n	8004a90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030d 	and.w	r3, r3, #13
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d10c      	bne.n	8004a2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe ffe7 	bl	80039ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2203      	movs	r2, #3
 8004a24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a26:	f7fe fde3 	bl	80035f0 <HAL_GetTick>
 8004a2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a2c:	e029      	b.n	8004a82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a32:	f043 0210 	orr.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e023      	b.n	8004a92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a4a:	f7fe fdd1 	bl	80035f0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d914      	bls.n	8004a82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00d      	beq.n	8004a82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	f043 0210 	orr.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e007      	b.n	8004a92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1dc      	bne.n	8004a4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d14b      	bne.n	8004b4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d021      	beq.n	8004b12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe fe8c 	bl	80037f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d032      	beq.n	8004b44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d12b      	bne.n	8004b44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11f      	bne.n	8004b44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b10:	e018      	b.n	8004b44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	f043 0201 	orr.w	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff fa55 	bl	8003ff4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b4a:	e00e      	b.n	8004b6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff fa5f 	bl	800401c <HAL_ADC_ErrorCallback>
}
 8004b5e:	e004      	b.n	8004b6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fa41 	bl	8004008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	f043 0204 	orr.w	r2, r3, #4
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fa31 	bl	800401c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <LL_ADC_IsEnabled>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <LL_ADC_IsEnabled+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_ADC_IsEnabled+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_ADC_StartCalibration>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004bfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <LL_ADC_IsCalibrationOnGoing>:
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c2e:	d101      	bne.n	8004c34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d101      	bne.n	8004c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_ADCEx_Calibration_Start+0x1c>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e04d      	b.n	8004d20 <HAL_ADCEx_Calibration_Start+0xb8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fea5 	bl	80049dc <ADC_Disable>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d136      	bne.n	8004d0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ff96 	bl	8004be8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cbc:	e014      	b.n	8004ce8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d90d      	bls.n	8004ce8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	f023 0312 	bic.w	r3, r3, #18
 8004cd4:	f043 0210 	orr.w	r2, r3, #16
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e01b      	b.n	8004d20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff94 	bl	8004c1a <LL_ADC_IsCalibrationOnGoing>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e2      	bne.n	8004cbe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d08:	e005      	b.n	8004d16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	f043 0210 	orr.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	0004de01 	.word	0x0004de01

08004d2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b0a1      	sub	sp, #132	@ 0x84
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0e7      	b.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d52:	2300      	movs	r3, #0
 8004d54:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d56:	2300      	movs	r3, #0
 8004d58:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d62:	d102      	bne.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d64:	4b6f      	ldr	r3, [pc, #444]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	e009      	b.n	8004d7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d102      	bne.n	8004d7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004d74:	4b6d      	ldr	r3, [pc, #436]	@ (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	e001      	b.n	8004d7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0be      	b.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff ff4f 	bl	8004c42 <LL_ADC_REG_IsConversionOngoing>
 8004da4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff49 	bl	8004c42 <LL_ADC_REG_IsConversionOngoing>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 80a0 	bne.w	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 809c 	bne.w	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc8:	d004      	beq.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a55      	ldr	r2, [pc, #340]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004dd4:	4b56      	ldr	r3, [pc, #344]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004dd6:	e000      	b.n	8004dda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004dd8:	4b56      	ldr	r3, [pc, #344]	@ (8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004dda:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d04b      	beq.n	8004e7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004df6:	035b      	lsls	r3, r3, #13
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e08:	d004      	beq.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a45      	ldr	r2, [pc, #276]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d10f      	bne.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004e14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e18:	f7ff fed3 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	4841      	ldr	r0, [pc, #260]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e20:	f7ff fecf 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4323      	orrs	r3, r4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e012      	b.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004e34:	483c      	ldr	r0, [pc, #240]	@ (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e36:	f7ff fec4 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	483b      	ldr	r0, [pc, #236]	@ (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e3e:	f7ff fec0 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004e42:	4603      	mov	r3, r0
 8004e44:	431c      	orrs	r4, r3
 8004e46:	483c      	ldr	r0, [pc, #240]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e48:	f7ff febb 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4323      	orrs	r3, r4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d056      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e66:	f023 030f 	bic.w	r3, r3, #15
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	6811      	ldr	r1, [r2, #0]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	6892      	ldr	r2, [r2, #8]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	431a      	orrs	r2, r3
 8004e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e7a:	e047      	b.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e90:	d004      	beq.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a23      	ldr	r2, [pc, #140]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d10f      	bne.n	8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004e9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ea0:	f7ff fe8f 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	481f      	ldr	r0, [pc, #124]	@ (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ea8:	f7ff fe8b 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4323      	orrs	r3, r4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e012      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ebc:	481a      	ldr	r0, [pc, #104]	@ (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ebe:	f7ff fe80 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4819      	ldr	r0, [pc, #100]	@ (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ec6:	f7ff fe7c 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	431c      	orrs	r4, r3
 8004ece:	481a      	ldr	r0, [pc, #104]	@ (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ed0:	f7ff fe77 	bl	8004bc2 <LL_ADC_IsEnabled>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4323      	orrs	r3, r4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d012      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004eee:	f023 030f 	bic.w	r3, r3, #15
 8004ef2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ef4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef6:	e009      	b.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f0a:	e000      	b.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3784      	adds	r7, #132	@ 0x84
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	50000100 	.word	0x50000100
 8004f28:	50000400 	.word	0x50000400
 8004f2c:	50000500 	.word	0x50000500
 8004f30:	50000300 	.word	0x50000300
 8004f34:	50000700 	.word	0x50000700
 8004f38:	50000600 	.word	0x50000600

08004f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	@ (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <__NVIC_GetPriorityGrouping+0x18>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	f003 0307 	and.w	r3, r3, #7
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	db0b      	blt.n	8004fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f003 021f 	and.w	r2, r3, #31
 8004fb8:	4907      	ldr	r1, [pc, #28]	@ (8004fd8 <__NVIC_EnableIRQ+0x38>)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e100 	.word	0xe000e100

08004fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	6039      	str	r1, [r7, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db0a      	blt.n	8005006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	490c      	ldr	r1, [pc, #48]	@ (8005028 <__NVIC_SetPriority+0x4c>)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	440b      	add	r3, r1
 8005000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005004:	e00a      	b.n	800501c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4908      	ldr	r1, [pc, #32]	@ (800502c <__NVIC_SetPriority+0x50>)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	3b04      	subs	r3, #4
 8005014:	0112      	lsls	r2, r2, #4
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	440b      	add	r3, r1
 800501a:	761a      	strb	r2, [r3, #24]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	e000e100 	.word	0xe000e100
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	@ 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f1c3 0307 	rsb	r3, r3, #7
 800504a:	2b04      	cmp	r3, #4
 800504c:	bf28      	it	cs
 800504e:	2304      	movcs	r3, #4
 8005050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3304      	adds	r3, #4
 8005056:	2b06      	cmp	r3, #6
 8005058:	d902      	bls.n	8005060 <NVIC_EncodePriority+0x30>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3b03      	subs	r3, #3
 800505e:	e000      	b.n	8005062 <NVIC_EncodePriority+0x32>
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	401a      	ands	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005078:	f04f 31ff 	mov.w	r1, #4294967295
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43d9      	mvns	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	4313      	orrs	r3, r2
         );
}
 800508a:	4618      	mov	r0, r3
 800508c:	3724      	adds	r7, #36	@ 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a8:	d301      	bcc.n	80050ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050aa:	2301      	movs	r3, #1
 80050ac:	e00f      	b.n	80050ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ae:	4a0a      	ldr	r2, [pc, #40]	@ (80050d8 <SysTick_Config+0x40>)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b6:	210f      	movs	r1, #15
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	f7ff ff8e 	bl	8004fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <SysTick_Config+0x40>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c6:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <SysTick_Config+0x40>)
 80050c8:	2207      	movs	r2, #7
 80050ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e000e010 	.word	0xe000e010

080050dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff ff29 	bl	8004f3c <__NVIC_SetPriorityGrouping>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	4603      	mov	r3, r0
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005100:	f7ff ff40 	bl	8004f84 <__NVIC_GetPriorityGrouping>
 8005104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff ff90 	bl	8005030 <NVIC_EncodePriority>
 8005110:	4602      	mov	r2, r0
 8005112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ff5f 	bl	8004fdc <__NVIC_SetPriority>
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff ff33 	bl	8004fa0 <__NVIC_EnableIRQ>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ffa4 	bl	8005098 <SysTick_Config>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e08d      	b.n	800528a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b47      	ldr	r3, [pc, #284]	@ (8005294 <HAL_DMA_Init+0x138>)
 8005176:	429a      	cmp	r2, r3
 8005178:	d80f      	bhi.n	800519a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <HAL_DMA_Init+0x13c>)
 8005182:	4413      	add	r3, r2
 8005184:	4a45      	ldr	r2, [pc, #276]	@ (800529c <HAL_DMA_Init+0x140>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	009a      	lsls	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a42      	ldr	r2, [pc, #264]	@ (80052a0 <HAL_DMA_Init+0x144>)
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40
 8005198:	e00e      	b.n	80051b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	4b40      	ldr	r3, [pc, #256]	@ (80052a4 <HAL_DMA_Init+0x148>)
 80051a2:	4413      	add	r3, r2
 80051a4:	4a3d      	ldr	r2, [pc, #244]	@ (800529c <HAL_DMA_Init+0x140>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	009a      	lsls	r2, r3, #2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <HAL_DMA_Init+0x14c>)
 80051b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa2c 	bl	8005668 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005218:	d102      	bne.n	8005220 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005234:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d010      	beq.n	8005260 <HAL_DMA_Init+0x104>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d80c      	bhi.n	8005260 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa4c 	bl	80056e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e008      	b.n	8005272 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40020407 	.word	0x40020407
 8005298:	bffdfff8 	.word	0xbffdfff8
 800529c:	cccccccd 	.word	0xcccccccd
 80052a0:	40020000 	.word	0x40020000
 80052a4:	bffdfbf8 	.word	0xbffdfbf8
 80052a8:	40020400 	.word	0x40020400

080052ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_DMA_Start_IT+0x20>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e066      	b.n	800539a <HAL_DMA_Start_IT+0xee>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d155      	bne.n	800538c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f970 	bl	80055ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 020e 	orr.w	r2, r2, #14
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e00f      	b.n	8005344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0204 	bic.w	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 020a 	orr.w	r2, r2, #10
 8005342:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005360:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e005      	b.n	8005398 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005394:	2302      	movs	r3, #2
 8005396:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d00d      	beq.n	80053d6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e047      	b.n	8005466 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 020e 	bic.w	r2, r2, #14
 80053e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	f003 021f 	and.w	r2, r3, #31
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f202 	lsl.w	r2, r1, r2
 8005418:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005422:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800543a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005444:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
    }
  }
  return status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2204      	movs	r2, #4
 8005492:	409a      	lsls	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d026      	beq.n	80054ea <HAL_DMA_IRQHandler+0x7a>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d021      	beq.n	80054ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c8:	f003 021f 	and.w	r2, r3, #31
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	2104      	movs	r1, #4
 80054d2:	fa01 f202 	lsl.w	r2, r1, r2
 80054d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d071      	beq.n	80055c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054e8:	e06c      	b.n	80055c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2202      	movs	r2, #2
 80054f4:	409a      	lsls	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02e      	beq.n	800555c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d029      	beq.n	800555c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 020a 	bic.w	r2, r2, #10
 8005524:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	f003 021f 	and.w	r2, r3, #31
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	2102      	movs	r1, #2
 800553c:	fa01 f202 	lsl.w	r2, r1, r2
 8005540:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d038      	beq.n	80055c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800555a:	e033      	b.n	80055c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2208      	movs	r2, #8
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d02a      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d025      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 020e 	bic.w	r2, r2, #14
 8005588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	f003 021f 	and.w	r2, r3, #31
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f202 	lsl.w	r2, r1, r2
 800559c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
}
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055dc:	b2db      	uxtb	r3, r3
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005600:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b10      	cmp	r3, #16
 8005636:	d108      	bne.n	800564a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005648:	e007      	b.n	800565a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d802      	bhi.n	8005682 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800567c:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005682:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005684:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	3b08      	subs	r3, #8
 8005692:	4a12      	ldr	r2, [pc, #72]	@ (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	009a      	lsls	r2, r3, #2
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a0b      	ldr	r2, [pc, #44]	@ (80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	409a      	lsls	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40020407 	.word	0x40020407
 80056d4:	40020800 	.word	0x40020800
 80056d8:	40020820 	.word	0x40020820
 80056dc:	cccccccd 	.word	0xcccccccd
 80056e0:	40020880 	.word	0x40020880

080056e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005706:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	2201      	movs	r2, #1
 8005712:	409a      	lsls	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	1000823f 	.word	0x1000823f
 8005728:	40020940 	.word	0x40020940

0800572c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800573a:	e15a      	b.n	80059f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	2101      	movs	r1, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 814c 	beq.w	80059ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d005      	beq.n	800576c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005768:	2b02      	cmp	r3, #2
 800576a:	d130      	bne.n	80057ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	2203      	movs	r2, #3
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057a2:	2201      	movs	r2, #1
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 0201 	and.w	r2, r3, #1
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d017      	beq.n	800580a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	2203      	movs	r2, #3
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	43db      	mvns	r3, r3
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d123      	bne.n	800585e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	08da      	lsrs	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3208      	adds	r2, #8
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	220f      	movs	r2, #15
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	08da      	lsrs	r2, r3, #3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3208      	adds	r2, #8
 8005858:	6939      	ldr	r1, [r7, #16]
 800585a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	2203      	movs	r2, #3
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0203 	and.w	r2, r3, #3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005a10 <HAL_GPIO_Init+0x2e4>)
 80058a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a4:	4a5a      	ldr	r2, [pc, #360]	@ (8005a10 <HAL_GPIO_Init+0x2e4>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80058ac:	4b58      	ldr	r3, [pc, #352]	@ (8005a10 <HAL_GPIO_Init+0x2e4>)
 80058ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058b8:	4a56      	ldr	r2, [pc, #344]	@ (8005a14 <HAL_GPIO_Init+0x2e8>)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	089b      	lsrs	r3, r3, #2
 80058be:	3302      	adds	r3, #2
 80058c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	220f      	movs	r2, #15
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058e2:	d01f      	beq.n	8005924 <HAL_GPIO_Init+0x1f8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005a18 <HAL_GPIO_Init+0x2ec>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d019      	beq.n	8005920 <HAL_GPIO_Init+0x1f4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a4b      	ldr	r2, [pc, #300]	@ (8005a1c <HAL_GPIO_Init+0x2f0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_GPIO_Init+0x1f0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005a20 <HAL_GPIO_Init+0x2f4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00d      	beq.n	8005918 <HAL_GPIO_Init+0x1ec>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a49      	ldr	r2, [pc, #292]	@ (8005a24 <HAL_GPIO_Init+0x2f8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <HAL_GPIO_Init+0x1e8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a48      	ldr	r2, [pc, #288]	@ (8005a28 <HAL_GPIO_Init+0x2fc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d101      	bne.n	8005910 <HAL_GPIO_Init+0x1e4>
 800590c:	2305      	movs	r3, #5
 800590e:	e00a      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 8005910:	2306      	movs	r3, #6
 8005912:	e008      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 8005914:	2304      	movs	r3, #4
 8005916:	e006      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 8005918:	2303      	movs	r3, #3
 800591a:	e004      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 800591c:	2302      	movs	r3, #2
 800591e:	e002      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <HAL_GPIO_Init+0x1fa>
 8005924:	2300      	movs	r3, #0
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	f002 0203 	and.w	r2, r2, #3
 800592c:	0092      	lsls	r2, r2, #2
 800592e:	4093      	lsls	r3, r2
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005936:	4937      	ldr	r1, [pc, #220]	@ (8005a14 <HAL_GPIO_Init+0x2e8>)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	3302      	adds	r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005944:	4b39      	ldr	r3, [pc, #228]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	43db      	mvns	r3, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005968:	4a30      	ldr	r2, [pc, #192]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800596e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005992:	4a26      	ldr	r2, [pc, #152]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005998:	4b24      	ldr	r3, [pc, #144]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059bc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059c2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059e6:	4a11      	ldr	r2, [pc, #68]	@ (8005a2c <HAL_GPIO_Init+0x300>)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3301      	adds	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f ae9d 	bne.w	800573c <HAL_GPIO_Init+0x10>
  }
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40010000 	.word	0x40010000
 8005a18:	48000400 	.word	0x48000400
 8005a1c:	48000800 	.word	0x48000800
 8005a20:	48000c00 	.word	0x48000c00
 8005a24:	48001000 	.word	0x48001000
 8005a28:	48001400 	.word	0x48001400
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a40:	787b      	ldrb	r3, [r7, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a4c:	e002      	b.n	8005a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a4e:	887a      	ldrh	r2, [r7, #2]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a76:	4a05      	ldr	r2, [pc, #20]	@ (8005a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f806 	bl	8005a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40010400 	.word	0x40010400

08005a90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e08d      	b.n	8005bd4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fb ff67 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2224      	movs	r2, #36	@ 0x24
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005af6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d107      	bne.n	8005b20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b1c:	609a      	str	r2, [r3, #8]
 8005b1e:	e006      	b.n	8005b2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d108      	bne.n	8005b48 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	e007      	b.n	8005b58 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b6a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69d9      	ldr	r1, [r3, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	@ 0x28
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	461a      	mov	r2, r3
 8005be8:	460b      	mov	r3, r1
 8005bea:	817b      	strh	r3, [r7, #10]
 8005bec:	4613      	mov	r3, r2
 8005bee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	f040 80ef 	bne.w	8005de0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c10:	d101      	bne.n	8005c16 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0e5      	b.n	8005de2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0de      	b.n	8005de2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2221      	movs	r2, #33	@ 0x21
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2210      	movs	r2, #16
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	893a      	ldrh	r2, [r7, #8]
 8005c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a66      	ldr	r2, [pc, #408]	@ (8005dec <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005c52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a66      	ldr	r2, [pc, #408]	@ (8005df0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005c58:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2bff      	cmp	r3, #255	@ 0xff
 8005c62:	d906      	bls.n	8005c72 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	22ff      	movs	r2, #255	@ 0xff
 8005c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e007      	b.n	8005c82 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c80:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01a      	beq.n	8005cc0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d074      	beq.n	8005db2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d022      	beq.n	8005d16 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	4a47      	ldr	r2, [pc, #284]	@ (8005df4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	4a46      	ldr	r2, [pc, #280]	@ (8005df8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d00:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d06:	f7ff fad1 	bl	80052ac <HAL_DMA_Start_IT>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d13a      	bne.n	8005d8a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005d14:	e013      	b.n	8005d3e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e051      	b.n	8005de2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	8979      	ldrh	r1, [r7, #10]
 8005d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005dfc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f001 fba3 	bl	800749c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d70:	2110      	movs	r1, #16
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f001 fbc4 	bl	8007500 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e028      	b.n	8005ddc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	f043 0210 	orr.w	r2, r3, #16
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e017      	b.n	8005de2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a12      	ldr	r2, [pc, #72]	@ (8005e00 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005db6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	8979      	ldrh	r1, [r7, #10]
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f001 fb68 	bl	800749c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f001 fb92 	bl	8007500 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	ffff0000 	.word	0xffff0000
 8005df0:	0800641b 	.word	0x0800641b
 8005df4:	0800739b 	.word	0x0800739b
 8005df8:	08007431 	.word	0x08007431
 8005dfc:	80002000 	.word	0x80002000
 8005e00:	08005fdb 	.word	0x08005fdb

08005e04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
  }
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e68:	f043 0201 	orr.w	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e78:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00f      	beq.n	8005ea4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	f043 0208 	orr.w	r2, r3, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ea2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	f043 0202 	orr.w	r2, r3, #2
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ecc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 030b 	and.w	r3, r3, #11
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 f91f 	bl	8007124 <I2C_ITError>
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fcc:	b2db      	uxtb	r3, r3
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b088      	sub	sp, #32
 8005fde:	af02      	add	r7, sp, #8
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <I2C_Master_ISR_IT+0x1e>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e113      	b.n	8006220 <I2C_Master_ISR_IT+0x246>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	d012      	beq.n	8006030 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00d      	beq.n	8006030 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2210      	movs	r2, #16
 800601a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006020:	f043 0204 	orr.w	r2, r3, #4
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f001 f992 	bl	8007352 <I2C_Flush_TXDR>
 800602e:	e0e4      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d022      	beq.n	8006080 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01d      	beq.n	8006080 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0304 	bic.w	r3, r3, #4
 800604a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800607e:	e0bc      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d128      	bne.n	80060dc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006090:	2b00      	cmp	r3, #0
 8006092:	d023      	beq.n	80060dc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01e      	beq.n	80060dc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80a8 	beq.w	80061fa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80060da:	e08e      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d05c      	beq.n	80061a0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d057      	beq.n	80061a0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d040      	beq.n	800617c <I2C_Master_ISR_IT+0x1a2>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d13c      	bne.n	800617c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2bff      	cmp	r3, #255	@ 0xff
 8006118:	d90e      	bls.n	8006138 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	22ff      	movs	r2, #255	@ 0xff
 800611e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006124:	b2da      	uxtb	r2, r3
 8006126:	8a79      	ldrh	r1, [r7, #18]
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f001 f9b3 	bl	800749c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006136:	e032      	b.n	800619e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800614a:	d00b      	beq.n	8006164 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006156:	8a79      	ldrh	r1, [r7, #18]
 8006158:	2000      	movs	r0, #0
 800615a:	9000      	str	r0, [sp, #0]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f001 f99d 	bl	800749c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006162:	e01c      	b.n	800619e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	8a79      	ldrh	r1, [r7, #18]
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f001 f991 	bl	800749c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617a:	e010      	b.n	800619e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800618a:	d003      	beq.n	8006194 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fcb0 	bl	8006af2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006192:	e032      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006194:	2140      	movs	r1, #64	@ 0x40
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 ffc4 	bl	8007124 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800619c:	e02d      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
 800619e:	e02c      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d027      	beq.n	80061fa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d022      	beq.n	80061fa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d119      	bne.n	80061f2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061cc:	d015      	beq.n	80061fa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061d6:	d108      	bne.n	80061ea <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	e007      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fc81 	bl	8006af2 <I2C_ITMasterSeqCplt>
 80061f0:	e003      	b.n	80061fa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061f2:	2140      	movs	r1, #64	@ 0x40
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 ff95 	bl	8007124 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fd07 	bl	8006c24 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <I2C_Slave_ISR_IT+0x24>
 8006248:	2302      	movs	r3, #2
 800624a:	e0e2      	b.n	8006412 <I2C_Slave_ISR_IT+0x1ea>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006268:	6939      	ldr	r1, [r7, #16]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fda2 	bl	8006db4 <I2C_ITSlaveCplt>
 8006270:	e0ca      	b.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d04b      	beq.n	8006314 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006282:	2b00      	cmp	r3, #0
 8006284:	d046      	beq.n	8006314 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d128      	bne.n	80062e2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b28      	cmp	r3, #40	@ 0x28
 800629a:	d108      	bne.n	80062ae <I2C_Slave_ISR_IT+0x86>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062a2:	d104      	bne.n	80062ae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80062a4:	6939      	ldr	r1, [r7, #16]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fee8 	bl	800707c <I2C_ITListenCplt>
 80062ac:	e031      	b.n	8006312 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b29      	cmp	r3, #41	@ 0x29
 80062b8:	d10e      	bne.n	80062d8 <I2C_Slave_ISR_IT+0xb0>
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062c0:	d00a      	beq.n	80062d8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 f841 	bl	8007352 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fc4b 	bl	8006b6c <I2C_ITSlaveSeqCplt>
 80062d6:	e01c      	b.n	8006312 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2210      	movs	r2, #16
 80062de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80062e0:	e08f      	b.n	8006402 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f043 0204 	orr.w	r2, r3, #4
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <I2C_Slave_ISR_IT+0xdc>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006302:	d17e      	bne.n	8006402 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	4619      	mov	r1, r3
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 ff0a 	bl	8007124 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006310:	e077      	b.n	8006402 <I2C_Slave_ISR_IT+0x1da>
 8006312:	e076      	b.n	8006402 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d02f      	beq.n	800637e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02a      	beq.n	800637e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d018      	beq.n	8006364 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d14b      	bne.n	8006406 <I2C_Slave_ISR_IT+0x1de>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006374:	d047      	beq.n	8006406 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fbf8 	bl	8006b6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800637c:	e043      	b.n	8006406 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006392:	6939      	ldr	r1, [r7, #16]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fb28 	bl	80069ea <I2C_ITAddrCplt>
 800639a:	e035      	b.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d030      	beq.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d02b      	beq.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80063ea:	e00d      	b.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063f2:	d002      	beq.n	80063fa <I2C_Slave_ISR_IT+0x1d2>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fbb6 	bl	8006b6c <I2C_ITSlaveSeqCplt>
 8006400:	e002      	b.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006406:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b088      	sub	sp, #32
 800641e:	af02      	add	r7, sp, #8
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <I2C_Master_ISR_DMA+0x1a>
 8006430:	2302      	movs	r3, #2
 8006432:	e0d9      	b.n	80065e8 <I2C_Master_ISR_DMA+0x1ce>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800644c:	2b00      	cmp	r3, #0
 800644e:	d011      	beq.n	8006474 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2210      	movs	r2, #16
 8006456:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645c:	f043 0204 	orr.w	r2, r3, #4
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006464:	2120      	movs	r1, #32
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f001 f84a 	bl	8007500 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 ff70 	bl	8007352 <I2C_Flush_TXDR>
 8006472:	e0b4      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d071      	beq.n	8006562 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d06c      	beq.n	8006562 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006496:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04e      	beq.n	8006540 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2bff      	cmp	r3, #255	@ 0xff
 80064b8:	d906      	bls.n	80064c8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	22ff      	movs	r2, #255	@ 0xff
 80064be:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80064c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e010      	b.n	80064ea <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064da:	d003      	beq.n	80064e4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e002      	b.n	80064ea <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80064e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064e8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	8a79      	ldrh	r1, [r7, #18]
 80064f2:	2300      	movs	r3, #0
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 ffcf 	bl	800749c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b22      	cmp	r3, #34	@ 0x22
 800651a:	d108      	bne.n	800652e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800652a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800652c:	e057      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800653c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800653e:	e04e      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800654e:	d003      	beq.n	8006558 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 face 	bl	8006af2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006556:	e042      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006558:	2140      	movs	r1, #64	@ 0x40
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fde2 	bl	8007124 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006560:	e03d      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d028      	beq.n	80065be <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006572:	2b00      	cmp	r3, #0
 8006574:	d023      	beq.n	80065be <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d119      	bne.n	80065b4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800658e:	d025      	beq.n	80065dc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006598:	d108      	bne.n	80065ac <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065a8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80065aa:	e017      	b.n	80065dc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 faa0 	bl	8006af2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80065b2:	e013      	b.n	80065dc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065b4:	2140      	movs	r1, #64	@ 0x40
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fdb4 	bl	8007124 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80065bc:	e00e      	b.n	80065dc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fb25 	bl	8006c24 <I2C_ITMasterCplt>
 80065da:	e000      	b.n	80065de <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80065dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80065fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006834 <I2C_Mem_ISR_DMA+0x244>)
 80065fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <I2C_Mem_ISR_DMA+0x1e>
 800660a:	2302      	movs	r3, #2
 800660c:	e10e      	b.n	800682c <I2C_Mem_ISR_DMA+0x23c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	d016      	beq.n	800664e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2210      	movs	r2, #16
 8006630:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	f043 0204 	orr.w	r2, r3, #4
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800663e:	2120      	movs	r1, #32
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 ff5d 	bl	8007500 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fe83 	bl	8007352 <I2C_Flush_TXDR>
 800664c:	e0e9      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00e      	beq.n	8006676 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800666a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	651a      	str	r2, [r3, #80]	@ 0x50
 8006674:	e0d5      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05f      	beq.n	8006740 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006686:	2b00      	cmp	r3, #0
 8006688:	d05a      	beq.n	8006740 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800668a:	2101      	movs	r1, #1
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 ffbb 	bl	8007608 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006692:	2110      	movs	r1, #16
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 ff33 	bl	8007500 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d048      	beq.n	8006736 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2bff      	cmp	r3, #255	@ 0xff
 80066ac:	d910      	bls.n	80066d0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	22ff      	movs	r2, #255	@ 0xff
 80066b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b8:	b299      	uxth	r1, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fee7 	bl	800749c <I2C_TransferConfig>
 80066ce:	e011      	b.n	80066f4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	b299      	uxth	r1, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fed4 	bl	800749c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b22      	cmp	r3, #34	@ 0x22
 8006710:	d108      	bne.n	8006724 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006720:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006722:	e07e      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006732:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006734:	e075      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006736:	2140      	movs	r1, #64	@ 0x40
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fcf3 	bl	8007124 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800673e:	e070      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d05d      	beq.n	8006806 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006750:	2b00      	cmp	r3, #0
 8006752:	d058      	beq.n	8006806 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006754:	2101      	movs	r1, #1
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 ff56 	bl	8007608 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800675c:	2110      	movs	r1, #16
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fece 	bl	8007500 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b22      	cmp	r3, #34	@ 0x22
 800676e:	d101      	bne.n	8006774 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006770:	4b31      	ldr	r3, [pc, #196]	@ (8006838 <I2C_Mem_ISR_DMA+0x248>)
 8006772:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	2bff      	cmp	r3, #255	@ 0xff
 800677c:	d910      	bls.n	80067a0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22ff      	movs	r2, #255	@ 0xff
 8006782:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006788:	b299      	uxth	r1, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678e:	b2da      	uxtb	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fe7f 	bl	800749c <I2C_TransferConfig>
 800679e:	e011      	b.n	80067c4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ae:	b299      	uxth	r1, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 fe6c 	bl	800749c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b22      	cmp	r3, #34	@ 0x22
 80067e0:	d108      	bne.n	80067f4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067f2:	e016      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006802:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006804:	e00d      	b.n	8006822 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fa01 	bl	8006c24 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	80002000 	.word	0x80002000
 8006838:	80002400 	.word	0x80002400

0800683c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <I2C_Slave_ISR_DMA+0x24>
 800685c:	2302      	movs	r3, #2
 800685e:	e0c0      	b.n	80069e2 <I2C_Slave_ISR_DMA+0x1a6>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fa98 	bl	8006db4 <I2C_ITSlaveCplt>
 8006884:	e0a8      	b.n	80069d8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8095 	beq.w	80069bc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 808f 	beq.w	80069bc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d07d      	beq.n	80069ae <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80068d0:	2301      	movs	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00c      	beq.n	80068f6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d128      	bne.n	800694e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b28      	cmp	r3, #40	@ 0x28
 8006906:	d108      	bne.n	800691a <I2C_Slave_ISR_DMA+0xde>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800690e:	d104      	bne.n	800691a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fbb2 	bl	800707c <I2C_ITListenCplt>
 8006918:	e048      	b.n	80069ac <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b29      	cmp	r3, #41	@ 0x29
 8006924:	d10e      	bne.n	8006944 <I2C_Slave_ISR_DMA+0x108>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800692c:	d00a      	beq.n	8006944 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2210      	movs	r2, #16
 8006934:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fd0b 	bl	8007352 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f915 	bl	8006b6c <I2C_ITSlaveSeqCplt>
 8006942:	e033      	b.n	80069ac <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2210      	movs	r2, #16
 800694a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800694c:	e034      	b.n	80069b8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2210      	movs	r2, #16
 8006954:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695a:	f043 0204 	orr.w	r2, r3, #4
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006968:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <I2C_Slave_ISR_DMA+0x13c>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006976:	d11f      	bne.n	80069b8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	2b21      	cmp	r3, #33	@ 0x21
 800697c:	d002      	beq.n	8006984 <I2C_Slave_ISR_DMA+0x148>
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b29      	cmp	r3, #41	@ 0x29
 8006982:	d103      	bne.n	800698c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2221      	movs	r2, #33	@ 0x21
 8006988:	631a      	str	r2, [r3, #48]	@ 0x30
 800698a:	e008      	b.n	800699e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b22      	cmp	r3, #34	@ 0x22
 8006990:	d002      	beq.n	8006998 <I2C_Slave_ISR_DMA+0x15c>
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	2b2a      	cmp	r3, #42	@ 0x2a
 8006996:	d102      	bne.n	800699e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2222      	movs	r2, #34	@ 0x22
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	4619      	mov	r1, r3
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fbbd 	bl	8007124 <I2C_ITError>
      if (treatdmanack == 1U)
 80069aa:	e005      	b.n	80069b8 <I2C_Slave_ISR_DMA+0x17c>
 80069ac:	e004      	b.n	80069b8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2210      	movs	r2, #16
 80069b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069b6:	e00f      	b.n	80069d8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80069b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069ba:	e00d      	b.n	80069d8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f809 	bl	80069ea <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a00:	2b28      	cmp	r3, #40	@ 0x28
 8006a02:	d16a      	bne.n	8006ada <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a22:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a30:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a3e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d138      	bne.n	8006aba <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006a48:	897b      	ldrh	r3, [r7, #10]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	89bb      	ldrh	r3, [r7, #12]
 8006a50:	4053      	eors	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f003 0306 	and.w	r3, r3, #6
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11c      	bne.n	8006a96 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006a5c:	897b      	ldrh	r3, [r7, #10]
 8006a5e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d13b      	bne.n	8006aea <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a88:	89ba      	ldrh	r2, [r7, #12]
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fa55 	bl	8005f3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a94:	e029      	b.n	8006aea <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a96:	893b      	ldrh	r3, [r7, #8]
 8006a98:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fdb2 	bl	8007608 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006aac:	89ba      	ldrh	r2, [r7, #12]
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fa43 	bl	8005f3e <HAL_I2C_AddrCallback>
}
 8006ab8:	e017      	b.n	8006aea <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fda2 	bl	8007608 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006acc:	89ba      	ldrh	r2, [r7, #12]
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fa33 	bl	8005f3e <HAL_I2C_AddrCallback>
}
 8006ad8:	e007      	b.n	8006aea <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2208      	movs	r2, #8
 8006ae0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b21      	cmp	r3, #33	@ 0x21
 8006b0c:	d115      	bne.n	8006b3a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2211      	movs	r2, #17
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fd6f 	bl	8007608 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff f9db 	bl	8005eee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b38:	e014      	b.n	8006b64 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2212      	movs	r2, #18
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b4e:	2102      	movs	r1, #2
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fd59 	bl	8007608 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff f9cf 	bl	8005f02 <HAL_I2C_MasterRxCpltCallback>
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e00c      	b.n	8006bba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b29      	cmp	r3, #41	@ 0x29
 8006bc4:	d112      	bne.n	8006bec <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2228      	movs	r2, #40	@ 0x28
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2221      	movs	r2, #33	@ 0x21
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fd16 	bl	8007608 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff f996 	bl	8005f16 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bea:	e017      	b.n	8006c1c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf6:	d111      	bne.n	8006c1c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2228      	movs	r2, #40	@ 0x28
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2222      	movs	r2, #34	@ 0x22
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c06:	2102      	movs	r1, #2
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fcfd 	bl	8007608 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f987 	bl	8005f2a <HAL_I2C_SlaveRxCpltCallback>
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2220      	movs	r2, #32
 8006c38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b21      	cmp	r3, #33	@ 0x21
 8006c44:	d107      	bne.n	8006c56 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c46:	2101      	movs	r1, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fcdd 	bl	8007608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2211      	movs	r2, #17
 8006c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c54:	e00c      	b.n	8006c70 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b22      	cmp	r3, #34	@ 0x22
 8006c60:	d106      	bne.n	8006c70 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c62:	2102      	movs	r1, #2
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fccf 	bl	8007608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2212      	movs	r2, #18
 8006c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006dac <I2C_ITMasterCplt+0x188>)
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a49      	ldr	r2, [pc, #292]	@ (8006db0 <I2C_ITMasterCplt+0x18c>)
 8006c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b60      	cmp	r3, #96	@ 0x60
 8006cb4:	d10a      	bne.n	8006ccc <I2C_ITMasterCplt+0xa8>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006cca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb40 	bl	8007352 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b60      	cmp	r3, #96	@ 0x60
 8006ce2:	d002      	beq.n	8006cea <I2C_ITMasterCplt+0xc6>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa17 	bl	8007124 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cf6:	e054      	b.n	8006da2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b21      	cmp	r3, #33	@ 0x21
 8006d02:	d124      	bne.n	8006d4e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b40      	cmp	r3, #64	@ 0x40
 8006d1c:	d10b      	bne.n	8006d36 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff f91d 	bl	8005f6e <HAL_I2C_MemTxCpltCallback>
}
 8006d34:	e035      	b.n	8006da2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff f8d1 	bl	8005eee <HAL_I2C_MasterTxCpltCallback>
}
 8006d4c:	e029      	b.n	8006da2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b22      	cmp	r3, #34	@ 0x22
 8006d58:	d123      	bne.n	8006da2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b40      	cmp	r3, #64	@ 0x40
 8006d72:	d10b      	bne.n	8006d8c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff f8fc 	bl	8005f82 <HAL_I2C_MemRxCpltCallback>
}
 8006d8a:	e00a      	b.n	8006da2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff f8b0 	bl	8005f02 <HAL_I2C_MasterRxCpltCallback>
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	fe00e800 	.word	0xfe00e800
 8006db0:	ffff0000 	.word	0xffff0000

08006db4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dd6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	2b21      	cmp	r3, #33	@ 0x21
 8006de4:	d002      	beq.n	8006dec <I2C_ITSlaveCplt+0x38>
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b29      	cmp	r3, #41	@ 0x29
 8006dea:	d108      	bne.n	8006dfe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006dec:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fc09 	bl	8007608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2221      	movs	r2, #33	@ 0x21
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dfc:	e019      	b.n	8006e32 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b22      	cmp	r3, #34	@ 0x22
 8006e02:	d002      	beq.n	8006e0a <I2C_ITSlaveCplt+0x56>
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e08:	d108      	bne.n	8006e1c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006e0a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fbfa 	bl	8007608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2222      	movs	r2, #34	@ 0x22
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e1a:	e00a      	b.n	8006e32 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	2b28      	cmp	r3, #40	@ 0x28
 8006e20:	d107      	bne.n	8006e32 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006e22:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fbee 	bl	8007608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e40:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b89      	ldr	r3, [pc, #548]	@ (8007074 <I2C_ITSlaveCplt+0x2c0>)
 8006e4e:	400b      	ands	r3, r1
 8006e50:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa7d 	bl	8007352 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d013      	beq.n	8006e8a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01f      	beq.n	8006eba <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e88:	e017      	b.n	8006eba <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ea2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d020      	beq.n	8006f06 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0304 	bic.w	r3, r3, #4
 8006eca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00c      	beq.n	8006f06 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f14:	f043 0204 	orr.w	r2, r3, #4
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d049      	beq.n	8006fba <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d044      	beq.n	8006fba <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d128      	bne.n	8006f8c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b28      	cmp	r3, #40	@ 0x28
 8006f44:	d108      	bne.n	8006f58 <I2C_ITSlaveCplt+0x1a4>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f4c:	d104      	bne.n	8006f58 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f4e:	6979      	ldr	r1, [r7, #20]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f893 	bl	800707c <I2C_ITListenCplt>
 8006f56:	e030      	b.n	8006fba <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b29      	cmp	r3, #41	@ 0x29
 8006f62:	d10e      	bne.n	8006f82 <I2C_ITSlaveCplt+0x1ce>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f6a:	d00a      	beq.n	8006f82 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2210      	movs	r2, #16
 8006f72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9ec 	bl	8007352 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fdf6 	bl	8006b6c <I2C_ITSlaveSeqCplt>
 8006f80:	e01b      	b.n	8006fba <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2210      	movs	r2, #16
 8006f88:	61da      	str	r2, [r3, #28]
 8006f8a:	e016      	b.n	8006fba <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2210      	movs	r2, #16
 8006f92:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f98:	f043 0204 	orr.w	r2, r3, #4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <I2C_ITSlaveCplt+0x1fa>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fac:	d105      	bne.n	8006fba <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8b5 	bl	8007124 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8a4 	bl	8007124 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b28      	cmp	r3, #40	@ 0x28
 8006fe6:	d141      	bne.n	800706c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006fe8:	6979      	ldr	r1, [r7, #20]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f846 	bl	800707c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ff0:	e03c      	b.n	800706c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ffa:	d014      	beq.n	8007026 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fdb5 	bl	8006b6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1c      	ldr	r2, [pc, #112]	@ (8007078 <I2C_ITSlaveCplt+0x2c4>)
 8007006:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fe ff9b 	bl	8005f5a <HAL_I2C_ListenCpltCallback>
}
 8007024:	e022      	b.n	800706c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b22      	cmp	r3, #34	@ 0x22
 8007030:	d10e      	bne.n	8007050 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fe ff6e 	bl	8005f2a <HAL_I2C_SlaveRxCpltCallback>
}
 800704e:	e00d      	b.n	800706c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fe ff55 	bl	8005f16 <HAL_I2C_SlaveTxCpltCallback>
}
 800706c:	bf00      	nop
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	fe00e800 	.word	0xfe00e800
 8007078:	ffff0000 	.word	0xffff0000

0800707c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a25      	ldr	r2, [pc, #148]	@ (8007120 <I2C_ITListenCplt+0xa4>)
 800708a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d022      	beq.n	80070f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d012      	beq.n	80070f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f0:	f043 0204 	orr.w	r2, r3, #4
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa83 	bl	8007608 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fe ff21 	bl	8005f5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	ffff0000 	.word	0xffff0000

08007124 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007134:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a6d      	ldr	r2, [pc, #436]	@ (80072f8 <I2C_ITError+0x1d4>)
 8007142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b28      	cmp	r3, #40	@ 0x28
 800715a:	d005      	beq.n	8007168 <I2C_ITError+0x44>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b29      	cmp	r3, #41	@ 0x29
 8007160:	d002      	beq.n	8007168 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b2a      	cmp	r3, #42	@ 0x2a
 8007166:	d10b      	bne.n	8007180 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007168:	2103      	movs	r1, #3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa4c 	bl	8007608 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2228      	movs	r2, #40	@ 0x28
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a60      	ldr	r2, [pc, #384]	@ (80072fc <I2C_ITError+0x1d8>)
 800717c:	635a      	str	r2, [r3, #52]	@ 0x34
 800717e:	e030      	b.n	80071e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007180:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fa3f 	bl	8007608 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f8e1 	bl	8007352 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b60      	cmp	r3, #96	@ 0x60
 800719a:	d01f      	beq.n	80071dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d114      	bne.n	80071dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d109      	bne.n	80071d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2210      	movs	r2, #16
 80071c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071cc:	f043 0204 	orr.w	r2, r3, #4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2220      	movs	r2, #32
 80071da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d039      	beq.n	8007264 <I2C_ITError+0x140>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b11      	cmp	r3, #17
 80071f4:	d002      	beq.n	80071fc <I2C_ITError+0xd8>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b21      	cmp	r3, #33	@ 0x21
 80071fa:	d133      	bne.n	8007264 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720a:	d107      	bne.n	800721c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800721a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe f9d4 	bl	80055ce <HAL_DMA_GetState>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d017      	beq.n	800725c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	4a33      	ldr	r2, [pc, #204]	@ (8007300 <I2C_ITError+0x1dc>)
 8007232:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe f8ae 	bl	80053a2 <HAL_DMA_Abort_IT>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d04d      	beq.n	80072e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007256:	4610      	mov	r0, r2
 8007258:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800725a:	e045      	b.n	80072e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f851 	bl	8007304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007262:	e041      	b.n	80072e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d039      	beq.n	80072e0 <I2C_ITError+0x1bc>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b12      	cmp	r3, #18
 8007270:	d002      	beq.n	8007278 <I2C_ITError+0x154>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b22      	cmp	r3, #34	@ 0x22
 8007276:	d133      	bne.n	80072e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007286:	d107      	bne.n	8007298 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007296:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe f996 	bl	80055ce <HAL_DMA_GetState>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d017      	beq.n	80072d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <I2C_ITError+0x1dc>)
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe f870 	bl	80053a2 <HAL_DMA_Abort_IT>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d011      	beq.n	80072ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072d2:	4610      	mov	r0, r2
 80072d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072d6:	e009      	b.n	80072ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f813 	bl	8007304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072de:	e005      	b.n	80072ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f80f 	bl	8007304 <I2C_TreatErrorCallback>
  }
}
 80072e6:	e002      	b.n	80072ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072e8:	bf00      	nop
 80072ea:	e000      	b.n	80072ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072ec:	bf00      	nop
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	ffff0000 	.word	0xffff0000
 80072fc:	08006229 	.word	0x08006229
 8007300:	0800745f 	.word	0x0800745f

08007304 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b60      	cmp	r3, #96	@ 0x60
 8007316:	d10e      	bne.n	8007336 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe fe3b 	bl	8005faa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007334:	e009      	b.n	800734a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fe fe26 	bl	8005f96 <HAL_I2C_ErrorCallback>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d103      	bne.n	8007370 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d007      	beq.n	800738e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0201 	orr.w	r2, r2, #1
 800738c:	619a      	str	r2, [r3, #24]
  }
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073b6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073c2:	2120      	movs	r1, #32
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f89b 	bl	8007500 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073ca:	e02d      	b.n	8007428 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073d4:	441a      	add	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2bff      	cmp	r3, #255	@ 0xff
 80073e2:	d903      	bls.n	80073ec <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	22ff      	movs	r2, #255	@ 0xff
 80073e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073ea:	e004      	b.n	80073f6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	4619      	mov	r1, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3328      	adds	r3, #40	@ 0x28
 8007406:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800740c:	f7fd ff4e 	bl	80052ac <HAL_DMA_Start_IT>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007416:	2110      	movs	r1, #16
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff fe83 	bl	8007124 <I2C_ITError>
}
 800741e:	e003      	b.n	8007428 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007420:	2140      	movs	r1, #64	@ 0x40
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f86c 	bl	8007500 <I2C_Enable_IRQ>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800744c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800744e:	2110      	movs	r1, #16
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fe67 	bl	8007124 <I2C_ITError>
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	2200      	movs	r2, #0
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	2200      	movs	r2, #0
 800748a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff ff39 	bl	8007304 <I2C_TreatErrorCallback>
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	607b      	str	r3, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	817b      	strh	r3, [r7, #10]
 80074aa:	4613      	mov	r3, r2
 80074ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074ae:	897b      	ldrh	r3, [r7, #10]
 80074b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074b4:	7a7b      	ldrb	r3, [r7, #9]
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	0d5b      	lsrs	r3, r3, #21
 80074d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80074da:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <I2C_TransferConfig+0x60>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	43db      	mvns	r3, r3
 80074e0:	ea02 0103 	and.w	r1, r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	03ff63ff 	.word	0x03ff63ff

08007500 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007514:	4a39      	ldr	r2, [pc, #228]	@ (80075fc <I2C_Enable_IRQ+0xfc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d032      	beq.n	8007580 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800751e:	4a38      	ldr	r2, [pc, #224]	@ (8007600 <I2C_Enable_IRQ+0x100>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d02d      	beq.n	8007580 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007528:	4a36      	ldr	r2, [pc, #216]	@ (8007604 <I2C_Enable_IRQ+0x104>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d028      	beq.n	8007580 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800752e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007532:	2b00      	cmp	r3, #0
 8007534:	da03      	bge.n	800753e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800753c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800753e:	887b      	ldrh	r3, [r7, #2]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800754e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007560:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007562:	887b      	ldrh	r3, [r7, #2]
 8007564:	2b10      	cmp	r3, #16
 8007566:	d103      	bne.n	8007570 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800756e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007570:	887b      	ldrh	r3, [r7, #2]
 8007572:	2b20      	cmp	r3, #32
 8007574:	d133      	bne.n	80075de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f043 0320 	orr.w	r3, r3, #32
 800757c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800757e:	e02e      	b.n	80075de <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da03      	bge.n	8007590 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800758e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075a2:	887b      	ldrh	r3, [r7, #2]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075b4:	887b      	ldrh	r3, [r7, #2]
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d103      	bne.n	80075c2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075c2:	887b      	ldrh	r3, [r7, #2]
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d103      	bne.n	80075d0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80075d0:	887b      	ldrh	r3, [r7, #2]
 80075d2:	2b40      	cmp	r3, #64	@ 0x40
 80075d4:	d103      	bne.n	80075de <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6819      	ldr	r1, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	601a      	str	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	0800641b 	.word	0x0800641b
 8007600:	0800683d 	.word	0x0800683d
 8007604:	080065f1 	.word	0x080065f1

08007608 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00f      	beq.n	8007642 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007628:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007636:	2b28      	cmp	r3, #40	@ 0x28
 8007638:	d003      	beq.n	8007642 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007640:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00f      	beq.n	800766c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007652:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007660:	2b28      	cmp	r3, #40	@ 0x28
 8007662:	d003      	beq.n	800766c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800766a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800766c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	da03      	bge.n	800767c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800767a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800767c:	887b      	ldrh	r3, [r7, #2]
 800767e:	2b10      	cmp	r3, #16
 8007680:	d103      	bne.n	800768a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007688:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800768a:	887b      	ldrh	r3, [r7, #2]
 800768c:	2b20      	cmp	r3, #32
 800768e:	d103      	bne.n	8007698 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f043 0320 	orr.w	r3, r3, #32
 8007696:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	2b40      	cmp	r3, #64	@ 0x40
 800769c:	d103      	bne.n	80076a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	43da      	mvns	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	400a      	ands	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]
}
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d138      	bne.n	800774c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e032      	b.n	800774e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2224      	movs	r2, #36	@ 0x24
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007716:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6819      	ldr	r1, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	e000      	b.n	800774e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800774c:	2302      	movs	r3, #2
  }
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b20      	cmp	r3, #32
 800776e:	d139      	bne.n	80077e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800777a:	2302      	movs	r3, #2
 800777c:	e033      	b.n	80077e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2224      	movs	r2, #36	@ 0x24
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0201 	bic.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e000      	b.n	80077e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d141      	bne.n	8007886 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007802:	4b4b      	ldr	r3, [pc, #300]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780e:	d131      	bne.n	8007874 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007810:	4b47      	ldr	r3, [pc, #284]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007816:	4a46      	ldr	r2, [pc, #280]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800781c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007820:	4b43      	ldr	r3, [pc, #268]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007828:	4a41      	ldr	r2, [pc, #260]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800782a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800782e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007830:	4b40      	ldr	r3, [pc, #256]	@ (8007934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2232      	movs	r2, #50	@ 0x32
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	4a3f      	ldr	r2, [pc, #252]	@ (8007938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	0c9b      	lsrs	r3, r3, #18
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007846:	e002      	b.n	800784e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3b01      	subs	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784e:	4b38      	ldr	r3, [pc, #224]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800785a:	d102      	bne.n	8007862 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f2      	bne.n	8007848 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007862:	4b33      	ldr	r3, [pc, #204]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800786a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786e:	d158      	bne.n	8007922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e057      	b.n	8007924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007874:	4b2e      	ldr	r3, [pc, #184]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787a:	4a2d      	ldr	r2, [pc, #180]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800787c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007884:	e04d      	b.n	8007922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800788c:	d141      	bne.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800788e:	4b28      	ldr	r3, [pc, #160]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789a:	d131      	bne.n	8007900 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800789c:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a2:	4a23      	ldr	r2, [pc, #140]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078ac:	4b20      	ldr	r3, [pc, #128]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2232      	movs	r2, #50	@ 0x32
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	0c9b      	lsrs	r3, r3, #18
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078d2:	e002      	b.n	80078da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078da:	4b15      	ldr	r3, [pc, #84]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e6:	d102      	bne.n	80078ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f2      	bne.n	80078d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078ee:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fa:	d112      	bne.n	8007922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e011      	b.n	8007924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007906:	4a0a      	ldr	r2, [pc, #40]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007910:	e007      	b.n	8007922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800791a:	4a05      	ldr	r2, [pc, #20]	@ (8007930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007920:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40007000 	.word	0x40007000
 8007934:	2000003c 	.word	0x2000003c
 8007938:	431bde83 	.word	0x431bde83

0800793c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	4a04      	ldr	r2, [pc, #16]	@ (8007958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800794a:	6093      	str	r3, [r2, #8]
}
 800794c:	bf00      	nop
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40007000 	.word	0x40007000

0800795c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e2fe      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d075      	beq.n	8007a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800797a:	4b97      	ldr	r3, [pc, #604]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f003 030c 	and.w	r3, r3, #12
 8007982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007984:	4b94      	ldr	r3, [pc, #592]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0303 	and.w	r3, r3, #3
 800798c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b0c      	cmp	r3, #12
 8007992:	d102      	bne.n	800799a <HAL_RCC_OscConfig+0x3e>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d002      	beq.n	80079a0 <HAL_RCC_OscConfig+0x44>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d10b      	bne.n	80079b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079a0:	4b8d      	ldr	r3, [pc, #564]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d05b      	beq.n	8007a64 <HAL_RCC_OscConfig+0x108>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d157      	bne.n	8007a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e2d9      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c0:	d106      	bne.n	80079d0 <HAL_RCC_OscConfig+0x74>
 80079c2:	4b85      	ldr	r3, [pc, #532]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a84      	ldr	r2, [pc, #528]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e01d      	b.n	8007a0c <HAL_RCC_OscConfig+0xb0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCC_OscConfig+0x98>
 80079da:	4b7f      	ldr	r3, [pc, #508]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a7e      	ldr	r2, [pc, #504]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	4b7c      	ldr	r3, [pc, #496]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a7b      	ldr	r2, [pc, #492]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e00b      	b.n	8007a0c <HAL_RCC_OscConfig+0xb0>
 80079f4:	4b78      	ldr	r3, [pc, #480]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a77      	ldr	r2, [pc, #476]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 80079fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4b75      	ldr	r3, [pc, #468]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a74      	ldr	r2, [pc, #464]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d013      	beq.n	8007a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a14:	f7fb fdec 	bl	80035f0 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a1c:	f7fb fde8 	bl	80035f0 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b64      	cmp	r3, #100	@ 0x64
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e29e      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0f0      	beq.n	8007a1c <HAL_RCC_OscConfig+0xc0>
 8007a3a:	e014      	b.n	8007a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3c:	f7fb fdd8 	bl	80035f0 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a44:	f7fb fdd4 	bl	80035f0 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b64      	cmp	r3, #100	@ 0x64
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e28a      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a56:	4b60      	ldr	r3, [pc, #384]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f0      	bne.n	8007a44 <HAL_RCC_OscConfig+0xe8>
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d075      	beq.n	8007b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a72:	4b59      	ldr	r3, [pc, #356]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 030c 	and.w	r3, r3, #12
 8007a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a7c:	4b56      	ldr	r3, [pc, #344]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b0c      	cmp	r3, #12
 8007a8a:	d102      	bne.n	8007a92 <HAL_RCC_OscConfig+0x136>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d002      	beq.n	8007a98 <HAL_RCC_OscConfig+0x13c>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d11f      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a98:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x154>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e25d      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab0:	4b49      	ldr	r3, [pc, #292]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	4946      	ldr	r1, [pc, #280]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ac4:	4b45      	ldr	r3, [pc, #276]	@ (8007bdc <HAL_RCC_OscConfig+0x280>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fb fd45 	bl	8003558 <HAL_InitTick>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d043      	beq.n	8007b5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e249      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d023      	beq.n	8007b28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aec:	f7fb fd80 	bl	80035f0 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af4:	f7fb fd7c 	bl	80035f0 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e232      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b06:	4b34      	ldr	r3, [pc, #208]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b12:	4b31      	ldr	r3, [pc, #196]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	492d      	ldr	r1, [pc, #180]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	604b      	str	r3, [r1, #4]
 8007b26:	e01a      	b.n	8007b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b28:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fb fd5c 	bl	80035f0 <HAL_GetTick>
 8007b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fb fd58 	bl	80035f0 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e20e      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b4e:	4b22      	ldr	r3, [pc, #136]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f0      	bne.n	8007b3c <HAL_RCC_OscConfig+0x1e0>
 8007b5a:	e000      	b.n	8007b5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d041      	beq.n	8007bee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01c      	beq.n	8007bac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b72:	4b19      	ldr	r3, [pc, #100]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b78:	4a17      	ldr	r2, [pc, #92]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b82:	f7fb fd35 	bl	80035f0 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b88:	e008      	b.n	8007b9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b8a:	f7fb fd31 	bl	80035f0 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e1e7      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0ef      	beq.n	8007b8a <HAL_RCC_OscConfig+0x22e>
 8007baa:	e020      	b.n	8007bee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bac:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb2:	4a09      	ldr	r2, [pc, #36]	@ (8007bd8 <HAL_RCC_OscConfig+0x27c>)
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbc:	f7fb fd18 	bl	80035f0 <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bc2:	e00d      	b.n	8007be0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc4:	f7fb fd14 	bl	80035f0 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d906      	bls.n	8007be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e1ca      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
 8007bd6:	bf00      	nop
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007be0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1ea      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80a6 	beq.w	8007d48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c00:	4b84      	ldr	r3, [pc, #528]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCC_OscConfig+0x2b4>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_RCC_OscConfig+0x2b6>
 8007c10:	2300      	movs	r3, #0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00d      	beq.n	8007c32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c16:	4b7f      	ldr	r3, [pc, #508]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c22:	4b7c      	ldr	r3, [pc, #496]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c32:	4b79      	ldr	r3, [pc, #484]	@ (8007e18 <HAL_RCC_OscConfig+0x4bc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d118      	bne.n	8007c70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3e:	4b76      	ldr	r3, [pc, #472]	@ (8007e18 <HAL_RCC_OscConfig+0x4bc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a75      	ldr	r2, [pc, #468]	@ (8007e18 <HAL_RCC_OscConfig+0x4bc>)
 8007c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c4a:	f7fb fcd1 	bl	80035f0 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c52:	f7fb fccd 	bl	80035f0 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e183      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c64:	4b6c      	ldr	r3, [pc, #432]	@ (8007e18 <HAL_RCC_OscConfig+0x4bc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0f0      	beq.n	8007c52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d108      	bne.n	8007c8a <HAL_RCC_OscConfig+0x32e>
 8007c78:	4b66      	ldr	r3, [pc, #408]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c7e:	4a65      	ldr	r2, [pc, #404]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c88:	e024      	b.n	8007cd4 <HAL_RCC_OscConfig+0x378>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d110      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x358>
 8007c92:	4b60      	ldr	r3, [pc, #384]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	4a5e      	ldr	r2, [pc, #376]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007c9a:	f043 0304 	orr.w	r3, r3, #4
 8007c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cb2:	e00f      	b.n	8007cd4 <HAL_RCC_OscConfig+0x378>
 8007cb4:	4b57      	ldr	r3, [pc, #348]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	4a56      	ldr	r2, [pc, #344]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cc4:	4b53      	ldr	r3, [pc, #332]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cca:	4a52      	ldr	r2, [pc, #328]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007ccc:	f023 0304 	bic.w	r3, r3, #4
 8007cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d016      	beq.n	8007d0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cdc:	f7fb fc88 	bl	80035f0 <HAL_GetTick>
 8007ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ce2:	e00a      	b.n	8007cfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce4:	f7fb fc84 	bl	80035f0 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e138      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cfa:	4b46      	ldr	r3, [pc, #280]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0ed      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x388>
 8007d08:	e015      	b.n	8007d36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0a:	f7fb fc71 	bl	80035f0 <HAL_GetTick>
 8007d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d10:	e00a      	b.n	8007d28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d12:	f7fb fc6d 	bl	80035f0 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e121      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d28:	4b3a      	ldr	r3, [pc, #232]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1ed      	bne.n	8007d12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d36:	7ffb      	ldrb	r3, [r7, #31]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d3c:	4b35      	ldr	r3, [pc, #212]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d40:	4a34      	ldr	r2, [pc, #208]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d03c      	beq.n	8007dce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01c      	beq.n	8007d96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d62:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6c:	f7fb fc40 	bl	80035f0 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d74:	f7fb fc3c 	bl	80035f0 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e0f2      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d86:	4b23      	ldr	r3, [pc, #140]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0ef      	beq.n	8007d74 <HAL_RCC_OscConfig+0x418>
 8007d94:	e01b      	b.n	8007dce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d96:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da6:	f7fb fc23 	bl	80035f0 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dae:	f7fb fc1f 	bl	80035f0 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e0d5      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dc0:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1ef      	bne.n	8007dae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80c9 	beq.w	8007f6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 030c 	and.w	r3, r3, #12
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	f000 8083 	beq.w	8007eec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d15e      	bne.n	8007eac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dee:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a08      	ldr	r2, [pc, #32]	@ (8007e14 <HAL_RCC_OscConfig+0x4b8>)
 8007df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfa:	f7fb fbf9 	bl	80035f0 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e00:	e00c      	b.n	8007e1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e02:	f7fb fbf5 	bl	80035f0 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d905      	bls.n	8007e1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e0ab      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e1c:	4b55      	ldr	r3, [pc, #340]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1ec      	bne.n	8007e02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e28:	4b52      	ldr	r3, [pc, #328]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	4b52      	ldr	r3, [pc, #328]	@ (8007f78 <HAL_RCC_OscConfig+0x61c>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6a11      	ldr	r1, [r2, #32]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e38:	3a01      	subs	r2, #1
 8007e3a:	0112      	lsls	r2, r2, #4
 8007e3c:	4311      	orrs	r1, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007e42:	0212      	lsls	r2, r2, #8
 8007e44:	4311      	orrs	r1, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e4a:	0852      	lsrs	r2, r2, #1
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	0552      	lsls	r2, r2, #21
 8007e50:	4311      	orrs	r1, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e56:	0852      	lsrs	r2, r2, #1
 8007e58:	3a01      	subs	r2, #1
 8007e5a:	0652      	lsls	r2, r2, #25
 8007e5c:	4311      	orrs	r1, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e62:	06d2      	lsls	r2, r2, #27
 8007e64:	430a      	orrs	r2, r1
 8007e66:	4943      	ldr	r1, [pc, #268]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e6c:	4b41      	ldr	r3, [pc, #260]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a40      	ldr	r2, [pc, #256]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e78:	4b3e      	ldr	r3, [pc, #248]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fb fbb4 	bl	80035f0 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8c:	f7fb fbb0 	bl	80035f0 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e066      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9e:	4b35      	ldr	r3, [pc, #212]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0x530>
 8007eaa:	e05e      	b.n	8007f6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eac:	4b31      	ldr	r3, [pc, #196]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a30      	ldr	r2, [pc, #192]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fb fb9a 	bl	80035f0 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec0:	f7fb fb96 	bl	80035f0 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e04c      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ed2:	4b28      	ldr	r3, [pc, #160]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ede:	4b25      	ldr	r3, [pc, #148]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	4924      	ldr	r1, [pc, #144]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007ee4:	4b25      	ldr	r3, [pc, #148]	@ (8007f7c <HAL_RCC_OscConfig+0x620>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60cb      	str	r3, [r1, #12]
 8007eea:	e03e      	b.n	8007f6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e039      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8007f74 <HAL_RCC_OscConfig+0x618>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f003 0203 	and.w	r2, r3, #3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d12c      	bne.n	8007f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	3b01      	subs	r3, #1
 8007f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d123      	bne.n	8007f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d11b      	bne.n	8007f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d113      	bne.n	8007f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d109      	bne.n	8007f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5c:	085b      	lsrs	r3, r3, #1
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d001      	beq.n	8007f6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40021000 	.word	0x40021000
 8007f78:	019f800c 	.word	0x019f800c
 8007f7c:	feeefffc 	.word	0xfeeefffc

08007f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e11e      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f98:	4b91      	ldr	r3, [pc, #580]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d910      	bls.n	8007fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 020f 	bic.w	r2, r3, #15
 8007fae:	498c      	ldr	r1, [pc, #560]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b8a      	ldr	r3, [pc, #552]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e106      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d073      	beq.n	80080bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d129      	bne.n	8008030 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fdc:	4b81      	ldr	r3, [pc, #516]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0f4      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007fec:	f000 f99e 	bl	800832c <RCC_GetSysClockFreqFromPLLSource>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4a7c      	ldr	r2, [pc, #496]	@ (80081e8 <HAL_RCC_ClockConfig+0x268>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d93f      	bls.n	800807a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800800e:	2b00      	cmp	r3, #0
 8008010:	d033      	beq.n	800807a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	d12f      	bne.n	800807a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800801a:	4b72      	ldr	r3, [pc, #456]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008022:	4a70      	ldr	r2, [pc, #448]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800802a:	2380      	movs	r3, #128	@ 0x80
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e024      	b.n	800807a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b02      	cmp	r3, #2
 8008036:	d107      	bne.n	8008048 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008038:	4b6a      	ldr	r3, [pc, #424]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0c6      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008048:	4b66      	ldr	r3, [pc, #408]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0be      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008058:	f000 f8ce 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 800805c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4a61      	ldr	r2, [pc, #388]	@ (80081e8 <HAL_RCC_ClockConfig+0x268>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d909      	bls.n	800807a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008066:	4b5f      	ldr	r3, [pc, #380]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800806e:	4a5d      	ldr	r2, [pc, #372]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008074:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008076:	2380      	movs	r3, #128	@ 0x80
 8008078:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800807a:	4b5a      	ldr	r3, [pc, #360]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f023 0203 	bic.w	r2, r3, #3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4957      	ldr	r1, [pc, #348]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008088:	4313      	orrs	r3, r2
 800808a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808c:	f7fb fab0 	bl	80035f0 <HAL_GetTick>
 8008090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008092:	e00a      	b.n	80080aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008094:	f7fb faac 	bl	80035f0 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e095      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080aa:	4b4e      	ldr	r3, [pc, #312]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 020c 	and.w	r2, r3, #12
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d1eb      	bne.n	8008094 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d023      	beq.n	8008110 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080d4:	4b43      	ldr	r3, [pc, #268]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4a42      	ldr	r2, [pc, #264]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080ec:	4b3d      	ldr	r3, [pc, #244]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080f4:	4a3b      	ldr	r2, [pc, #236]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080fc:	4b39      	ldr	r3, [pc, #228]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4936      	ldr	r1, [pc, #216]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800810a:	4313      	orrs	r3, r2
 800810c:	608b      	str	r3, [r1, #8]
 800810e:	e008      	b.n	8008122 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b80      	cmp	r3, #128	@ 0x80
 8008114:	d105      	bne.n	8008122 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008116:	4b33      	ldr	r3, [pc, #204]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	4a32      	ldr	r2, [pc, #200]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800811c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008120:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008122:	4b2f      	ldr	r3, [pc, #188]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d21d      	bcs.n	800816c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008130:	4b2b      	ldr	r3, [pc, #172]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f023 020f 	bic.w	r2, r3, #15
 8008138:	4929      	ldr	r1, [pc, #164]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	4313      	orrs	r3, r2
 800813e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008140:	f7fb fa56 	bl	80035f0 <HAL_GetTick>
 8008144:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008146:	e00a      	b.n	800815e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008148:	f7fb fa52 	bl	80035f0 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008156:	4293      	cmp	r3, r2
 8008158:	d901      	bls.n	800815e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e03b      	b.n	80081d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800815e:	4b20      	ldr	r3, [pc, #128]	@ (80081e0 <HAL_RCC_ClockConfig+0x260>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d1ed      	bne.n	8008148 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008178:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4917      	ldr	r1, [pc, #92]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008186:	4313      	orrs	r3, r2
 8008188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008196:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	490f      	ldr	r1, [pc, #60]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081aa:	f000 f825 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <HAL_RCC_ClockConfig+0x264>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	490c      	ldr	r1, [pc, #48]	@ (80081ec <HAL_RCC_ClockConfig+0x26c>)
 80081bc:	5ccb      	ldrb	r3, [r1, r3]
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	fa22 f303 	lsr.w	r3, r2, r3
 80081c6:	4a0a      	ldr	r2, [pc, #40]	@ (80081f0 <HAL_RCC_ClockConfig+0x270>)
 80081c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081ca:	4b0a      	ldr	r3, [pc, #40]	@ (80081f4 <HAL_RCC_ClockConfig+0x274>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fb f9c2 	bl	8003558 <HAL_InitTick>
 80081d4:	4603      	mov	r3, r0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40022000 	.word	0x40022000
 80081e4:	40021000 	.word	0x40021000
 80081e8:	04c4b400 	.word	0x04c4b400
 80081ec:	0800bd90 	.word	0x0800bd90
 80081f0:	2000003c 	.word	0x2000003c
 80081f4:	20000040 	.word	0x20000040

080081f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081fe:	4b2c      	ldr	r3, [pc, #176]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 030c 	and.w	r3, r3, #12
 8008206:	2b04      	cmp	r3, #4
 8008208:	d102      	bne.n	8008210 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800820a:	4b2a      	ldr	r3, [pc, #168]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	e047      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008210:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 030c 	and.w	r3, r3, #12
 8008218:	2b08      	cmp	r3, #8
 800821a:	d102      	bne.n	8008222 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800821c:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	e03e      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008222:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 030c 	and.w	r3, r3, #12
 800822a:	2b0c      	cmp	r3, #12
 800822c:	d136      	bne.n	800829c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800822e:	4b20      	ldr	r3, [pc, #128]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008238:	4b1d      	ldr	r3, [pc, #116]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	3301      	adds	r3, #1
 8008244:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d10c      	bne.n	8008266 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800824c:	4a1a      	ldr	r2, [pc, #104]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	fbb2 f3f3 	udiv	r3, r2, r3
 8008254:	4a16      	ldr	r2, [pc, #88]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008256:	68d2      	ldr	r2, [r2, #12]
 8008258:	0a12      	lsrs	r2, r2, #8
 800825a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	617b      	str	r3, [r7, #20]
      break;
 8008264:	e00c      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008266:	4a13      	ldr	r2, [pc, #76]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	4a10      	ldr	r2, [pc, #64]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008270:	68d2      	ldr	r2, [r2, #12]
 8008272:	0a12      	lsrs	r2, r2, #8
 8008274:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008278:	fb02 f303 	mul.w	r3, r2, r3
 800827c:	617b      	str	r3, [r7, #20]
      break;
 800827e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008280:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	0e5b      	lsrs	r3, r3, #25
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	3301      	adds	r3, #1
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e001      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80082a0:	693b      	ldr	r3, [r7, #16]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40021000 	.word	0x40021000
 80082b4:	00f42400 	.word	0x00f42400
 80082b8:	016e3600 	.word	0x016e3600

080082bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c0:	4b03      	ldr	r3, [pc, #12]	@ (80082d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082c2:	681b      	ldr	r3, [r3, #0]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	2000003c 	.word	0x2000003c

080082d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082d8:	f7ff fff0 	bl	80082bc <HAL_RCC_GetHCLKFreq>
 80082dc:	4602      	mov	r2, r0
 80082de:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	4904      	ldr	r1, [pc, #16]	@ (80082fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80082ea:	5ccb      	ldrb	r3, [r1, r3]
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40021000 	.word	0x40021000
 80082fc:	0800bda0 	.word	0x0800bda0

08008300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008304:	f7ff ffda 	bl	80082bc <HAL_RCC_GetHCLKFreq>
 8008308:	4602      	mov	r2, r0
 800830a:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	0adb      	lsrs	r3, r3, #11
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	4904      	ldr	r1, [pc, #16]	@ (8008328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008316:	5ccb      	ldrb	r3, [r1, r3]
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008320:	4618      	mov	r0, r3
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40021000 	.word	0x40021000
 8008328:	0800bda0 	.word	0x0800bda0

0800832c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008332:	4b1e      	ldr	r3, [pc, #120]	@ (80083ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800833c:	4b1b      	ldr	r3, [pc, #108]	@ (80083ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b03      	cmp	r3, #3
 800834e:	d10c      	bne.n	800836a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008350:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	4a14      	ldr	r2, [pc, #80]	@ (80083ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800835a:	68d2      	ldr	r2, [r2, #12]
 800835c:	0a12      	lsrs	r2, r2, #8
 800835e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008362:	fb02 f303 	mul.w	r3, r2, r3
 8008366:	617b      	str	r3, [r7, #20]
    break;
 8008368:	e00c      	b.n	8008384 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800836a:	4a12      	ldr	r2, [pc, #72]	@ (80083b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008372:	4a0e      	ldr	r2, [pc, #56]	@ (80083ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008374:	68d2      	ldr	r2, [r2, #12]
 8008376:	0a12      	lsrs	r2, r2, #8
 8008378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800837c:	fb02 f303 	mul.w	r3, r2, r3
 8008380:	617b      	str	r3, [r7, #20]
    break;
 8008382:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008384:	4b09      	ldr	r3, [pc, #36]	@ (80083ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	0e5b      	lsrs	r3, r3, #25
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	3301      	adds	r3, #1
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800839e:	687b      	ldr	r3, [r7, #4]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40021000 	.word	0x40021000
 80083b0:	016e3600 	.word	0x016e3600
 80083b4:	00f42400 	.word	0x00f42400

080083b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083c0:	2300      	movs	r3, #0
 80083c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083c4:	2300      	movs	r3, #0
 80083c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8098 	beq.w	8008506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083d6:	2300      	movs	r3, #0
 80083d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083da:	4b43      	ldr	r3, [pc, #268]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083e6:	4b40      	ldr	r3, [pc, #256]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ea:	4a3f      	ldr	r2, [pc, #252]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80083f2:	4b3d      	ldr	r3, [pc, #244]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083fa:	60bb      	str	r3, [r7, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083fe:	2301      	movs	r3, #1
 8008400:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008402:	4b3a      	ldr	r3, [pc, #232]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a39      	ldr	r2, [pc, #228]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800840e:	f7fb f8ef 	bl	80035f0 <HAL_GetTick>
 8008412:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008414:	e009      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008416:	f7fb f8eb 	bl	80035f0 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d902      	bls.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	74fb      	strb	r3, [r7, #19]
        break;
 8008428:	e005      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800842a:	4b30      	ldr	r3, [pc, #192]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0ef      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008436:	7cfb      	ldrb	r3, [r7, #19]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d159      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800843c:	4b2a      	ldr	r3, [pc, #168]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008446:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01e      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	429a      	cmp	r2, r3
 8008456:	d019      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008458:	4b23      	ldr	r3, [pc, #140]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008464:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800846a:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008474:	4b1c      	ldr	r3, [pc, #112]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800847a:	4a1b      	ldr	r2, [pc, #108]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800847c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008484:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d016      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008496:	f7fb f8ab 	bl	80035f0 <HAL_GetTick>
 800849a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800849c:	e00b      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849e:	f7fb f8a7 	bl	80035f0 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d902      	bls.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	74fb      	strb	r3, [r7, #19]
            break;
 80084b4:	e006      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084b6:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0ec      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084c4:	7cfb      	ldrb	r3, [r7, #19]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ca:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d8:	4903      	ldr	r1, [pc, #12]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80084e0:	e008      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084e2:	7cfb      	ldrb	r3, [r7, #19]
 80084e4:	74bb      	strb	r3, [r7, #18]
 80084e6:	e005      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80084e8:	40021000 	.word	0x40021000
 80084ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f0:	7cfb      	ldrb	r3, [r7, #19]
 80084f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084f4:	7c7b      	ldrb	r3, [r7, #17]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d105      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084fe:	4aa6      	ldr	r2, [pc, #664]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008504:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008512:	4ba1      	ldr	r3, [pc, #644]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008518:	f023 0203 	bic.w	r2, r3, #3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	499d      	ldr	r1, [pc, #628]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008534:	4b98      	ldr	r3, [pc, #608]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853a:	f023 020c 	bic.w	r2, r3, #12
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	4995      	ldr	r1, [pc, #596]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008556:	4b90      	ldr	r3, [pc, #576]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800855c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	498c      	ldr	r1, [pc, #560]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008578:	4b87      	ldr	r3, [pc, #540]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	4984      	ldr	r1, [pc, #528]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800859a:	4b7f      	ldr	r3, [pc, #508]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	497b      	ldr	r1, [pc, #492]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085bc:	4b76      	ldr	r3, [pc, #472]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	4973      	ldr	r1, [pc, #460]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085de:	4b6e      	ldr	r3, [pc, #440]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	496a      	ldr	r1, [pc, #424]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008600:	4b65      	ldr	r3, [pc, #404]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	4962      	ldr	r1, [pc, #392]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008622:	4b5d      	ldr	r3, [pc, #372]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008628:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	4959      	ldr	r1, [pc, #356]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008644:	4b54      	ldr	r3, [pc, #336]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800864a:	f023 0203 	bic.w	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	4951      	ldr	r1, [pc, #324]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008666:	4b4c      	ldr	r3, [pc, #304]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	4948      	ldr	r1, [pc, #288]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d015      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008688:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800868a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800868e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008696:	4940      	ldr	r1, [pc, #256]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008698:	4313      	orrs	r3, r2
 800869a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a6:	d105      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	4a3a      	ldr	r2, [pc, #232]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d015      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086c0:	4b35      	ldr	r3, [pc, #212]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ce:	4932      	ldr	r1, [pc, #200]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086de:	d105      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d015      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086f8:	4b27      	ldr	r3, [pc, #156]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	4924      	ldr	r1, [pc, #144]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008708:	4313      	orrs	r3, r2
 800870a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008716:	d105      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008718:	4b1f      	ldr	r3, [pc, #124]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4a1e      	ldr	r2, [pc, #120]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008722:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d015      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008730:	4b19      	ldr	r3, [pc, #100]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873e:	4916      	ldr	r1, [pc, #88]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800874e:	d105      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008750:	4b11      	ldr	r3, [pc, #68]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a10      	ldr	r2, [pc, #64]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800875a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d019      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008768:	4b0b      	ldr	r3, [pc, #44]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	4908      	ldr	r1, [pc, #32]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008786:	d109      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008788:	4b03      	ldr	r3, [pc, #12]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a02      	ldr	r2, [pc, #8]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008792:	60d3      	str	r3, [r2, #12]
 8008794:	e002      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008796:	bf00      	nop
 8008798:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d015      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80087a8:	4b29      	ldr	r3, [pc, #164]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	4926      	ldr	r1, [pc, #152]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087c6:	d105      	bne.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087c8:	4b21      	ldr	r3, [pc, #132]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	4a20      	ldr	r2, [pc, #128]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d015      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80087e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ee:	4918      	ldr	r1, [pc, #96]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fe:	d105      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008800:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	4a12      	ldr	r2, [pc, #72]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800880a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d015      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008818:	4b0d      	ldr	r3, [pc, #52]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800881a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800881e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008826:	490a      	ldr	r1, [pc, #40]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008828:	4313      	orrs	r3, r2
 800882a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008836:	d105      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008838:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4a04      	ldr	r2, [pc, #16]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800883e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008842:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008844:	7cbb      	ldrb	r3, [r7, #18]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40021000 	.word	0x40021000

08008854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e049      	b.n	80088fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fa fc56 	bl	800312c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3304      	adds	r3, #4
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f001 f808 	bl	80098a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	d001      	beq.n	800891c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e054      	b.n	80089c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d022      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008946:	d01d      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a22      	ldr	r2, [pc, #136]	@ (80089d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a21      	ldr	r2, [pc, #132]	@ (80089dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d013      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1f      	ldr	r2, [pc, #124]	@ (80089e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1e      	ldr	r2, [pc, #120]	@ (80089e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1c      	ldr	r2, [pc, #112]	@ (80089e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIM_Base_Start_IT+0x80>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1b      	ldr	r2, [pc, #108]	@ (80089ec <HAL_TIM_Base_Start_IT+0xe8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d115      	bne.n	80089b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	4b19      	ldr	r3, [pc, #100]	@ (80089f0 <HAL_TIM_Base_Start_IT+0xec>)
 800898c:	4013      	ands	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b06      	cmp	r3, #6
 8008994:	d015      	beq.n	80089c2 <HAL_TIM_Base_Start_IT+0xbe>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899c:	d011      	beq.n	80089c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0201 	orr.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	e008      	b.n	80089c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e000      	b.n	80089c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40000c00 	.word	0x40000c00
 80089e4:	40013400 	.word	0x40013400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40015000 	.word	0x40015000
 80089f0:	00010007 	.word	0x00010007

080089f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e049      	b.n	8008a9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f841 	bl	8008aa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f000 ff38 	bl	80098a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <HAL_TIM_PWM_Start+0x24>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e03c      	b.n	8008b56 <HAL_TIM_PWM_Start+0x9e>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d109      	bne.n	8008af6 <HAL_TIM_PWM_Start+0x3e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	bf14      	ite	ne
 8008aee:	2301      	movne	r3, #1
 8008af0:	2300      	moveq	r3, #0
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	e02f      	b.n	8008b56 <HAL_TIM_PWM_Start+0x9e>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d109      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x58>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e022      	b.n	8008b56 <HAL_TIM_PWM_Start+0x9e>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b0c      	cmp	r3, #12
 8008b14:	d109      	bne.n	8008b2a <HAL_TIM_PWM_Start+0x72>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	e015      	b.n	8008b56 <HAL_TIM_PWM_Start+0x9e>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d109      	bne.n	8008b44 <HAL_TIM_PWM_Start+0x8c>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e008      	b.n	8008b56 <HAL_TIM_PWM_Start+0x9e>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	bf14      	ite	ne
 8008b50:	2301      	movne	r3, #1
 8008b52:	2300      	moveq	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e0a6      	b.n	8008cac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <HAL_TIM_PWM_Start+0xb6>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b6c:	e023      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xfe>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d104      	bne.n	8008b7e <HAL_TIM_PWM_Start+0xc6>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b7c:	e01b      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xfe>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_PWM_Start+0xd6>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b8c:	e013      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xfe>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b0c      	cmp	r3, #12
 8008b92:	d104      	bne.n	8008b9e <HAL_TIM_PWM_Start+0xe6>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b9c:	e00b      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xfe>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	d104      	bne.n	8008bae <HAL_TIM_PWM_Start+0xf6>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bac:	e003      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xfe>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fc16 	bl	800a3f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8008cb4 <HAL_TIM_PWM_Start+0x1fc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_TIM_PWM_Start+0x148>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a39      	ldr	r2, [pc, #228]	@ (8008cb8 <HAL_TIM_PWM_Start+0x200>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_TIM_PWM_Start+0x148>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a37      	ldr	r2, [pc, #220]	@ (8008cbc <HAL_TIM_PWM_Start+0x204>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_TIM_PWM_Start+0x148>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a36      	ldr	r2, [pc, #216]	@ (8008cc0 <HAL_TIM_PWM_Start+0x208>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_TIM_PWM_Start+0x148>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a34      	ldr	r2, [pc, #208]	@ (8008cc4 <HAL_TIM_PWM_Start+0x20c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_TIM_PWM_Start+0x148>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a33      	ldr	r2, [pc, #204]	@ (8008cc8 <HAL_TIM_PWM_Start+0x210>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIM_PWM_Start+0x14c>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e000      	b.n	8008c06 <HAL_TIM_PWM_Start+0x14e>
 8008c04:	2300      	movs	r3, #0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a25      	ldr	r2, [pc, #148]	@ (8008cb4 <HAL_TIM_PWM_Start+0x1fc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d022      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2c:	d01d      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a26      	ldr	r2, [pc, #152]	@ (8008ccc <HAL_TIM_PWM_Start+0x214>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d018      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a24      	ldr	r2, [pc, #144]	@ (8008cd0 <HAL_TIM_PWM_Start+0x218>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a23      	ldr	r2, [pc, #140]	@ (8008cd4 <HAL_TIM_PWM_Start+0x21c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00e      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a19      	ldr	r2, [pc, #100]	@ (8008cb8 <HAL_TIM_PWM_Start+0x200>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d009      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a18      	ldr	r2, [pc, #96]	@ (8008cbc <HAL_TIM_PWM_Start+0x204>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d004      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x1b2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a18      	ldr	r2, [pc, #96]	@ (8008cc8 <HAL_TIM_PWM_Start+0x210>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d115      	bne.n	8008c96 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	4b19      	ldr	r3, [pc, #100]	@ (8008cd8 <HAL_TIM_PWM_Start+0x220>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d015      	beq.n	8008ca8 <HAL_TIM_PWM_Start+0x1f0>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c82:	d011      	beq.n	8008ca8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0201 	orr.w	r2, r2, #1
 8008c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	e008      	b.n	8008ca8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	e000      	b.n	8008caa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800
 8008cc8:	40015000 	.word	0x40015000
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	00010007 	.word	0x00010007

08008cdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e049      	b.n	8008d82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f841 	bl	8008d8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 fdc4 	bl	80098a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_IC_Start_IT+0x1e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	e023      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_IC_Start_IT+0x2e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e01b      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d104      	bne.n	8008dde <HAL_TIM_IC_Start_IT+0x3e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	e013      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d104      	bne.n	8008dee <HAL_TIM_IC_Start_IT+0x4e>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	e00b      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_IC_Start_IT+0x5e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	e003      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <HAL_TIM_IC_Start_IT+0x78>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	e013      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d104      	bne.n	8008e28 <HAL_TIM_IC_Start_IT+0x88>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e00b      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d104      	bne.n	8008e38 <HAL_TIM_IC_Start_IT+0x98>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	e003      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e48:	7b7b      	ldrb	r3, [r7, #13]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d001      	beq.n	8008e52 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0e2      	b.n	8009018 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <HAL_TIM_IC_Start_IT+0xc2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e60:	e023      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d104      	bne.n	8008e72 <HAL_TIM_IC_Start_IT+0xd2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e70:	e01b      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_IC_Start_IT+0xe2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e80:	e013      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_IC_Start_IT+0xf2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_IC_Start_IT+0x102>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea0:	e003      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <HAL_TIM_IC_Start_IT+0x11a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb8:	e013      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d104      	bne.n	8008eca <HAL_TIM_IC_Start_IT+0x12a>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec8:	e00b      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_IC_Start_IT+0x13a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ed8:	e003      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d841      	bhi.n	8008f6c <HAL_TIM_IC_Start_IT+0x1cc>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <HAL_TIM_IC_Start_IT+0x150>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f37 	.word	0x08008f37
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f5b 	.word	0x08008f5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0202 	orr.w	r2, r2, #2
 8008f32:	60da      	str	r2, [r3, #12]
      break;
 8008f34:	e01d      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0204 	orr.w	r2, r2, #4
 8008f44:	60da      	str	r2, [r3, #12]
      break;
 8008f46:	e014      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	60da      	str	r2, [r3, #12]
      break;
 8008f58:	e00b      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0210 	orr.w	r2, r2, #16
 8008f68:	60da      	str	r2, [r3, #12]
      break;
 8008f6a:	e002      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d14e      	bne.n	8009016 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 fa35 	bl	800a3f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a25      	ldr	r2, [pc, #148]	@ (8009020 <HAL_TIM_IC_Start_IT+0x280>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f98:	d01d      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a21      	ldr	r2, [pc, #132]	@ (8009024 <HAL_TIM_IC_Start_IT+0x284>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d018      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <HAL_TIM_IC_Start_IT+0x288>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800902c <HAL_TIM_IC_Start_IT+0x28c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8009030 <HAL_TIM_IC_Start_IT+0x290>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009034 <HAL_TIM_IC_Start_IT+0x294>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a19      	ldr	r2, [pc, #100]	@ (8009038 <HAL_TIM_IC_Start_IT+0x298>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d115      	bne.n	8009002 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	@ (800903c <HAL_TIM_IC_Start_IT+0x29c>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	d015      	beq.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fee:	d011      	beq.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009000:	e008      	b.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0201 	orr.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e000      	b.n	8009016 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009014:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40012c00 	.word	0x40012c00
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40015000 	.word	0x40015000
 800903c:	00010007 	.word	0x00010007

08009040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d020      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0202 	mvn.w	r2, #2
 8009074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7f8 fb98 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8009090:	e005      	b.n	800909e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fbea 	bl	800986c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fbf1 	bl	8009880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d020      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0204 	mvn.w	r2, #4
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7f8 fb72 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fbc4 	bl	800986c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fbcb 	bl	8009880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0308 	and.w	r3, r3, #8
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0208 	mvn.w	r2, #8
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f8 fb4c 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb9e 	bl	800986c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fba5 	bl	8009880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0210 	mvn.w	r2, #16
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2208      	movs	r2, #8
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7f8 fb26 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fb78 	bl	800986c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb7f 	bl	8009880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00c      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0201 	mvn.w	r2, #1
 80091a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f9 f874 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fa65 	bl	800a6a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fa5d 	bl	800a6b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb39 	bl	8009894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f06f 0220 	mvn.w	r2, #32
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fa25 	bl	800a690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00c      	beq.n	800926a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa31 	bl	800a6cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00c      	beq.n	800928e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fa29 	bl	800a6e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00c      	beq.n	80092b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d007      	beq.n	80092b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80092aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 fa21 	bl	800a6f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80092ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 fa19 	bl	800a708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e088      	b.n	800940e <HAL_TIM_IC_ConfigChannel+0x130>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d11b      	bne.n	8009342 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800931a:	f000 fea3 	bl	800a064 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699a      	ldr	r2, [r3, #24]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 020c 	bic.w	r2, r2, #12
 800932c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6999      	ldr	r1, [r3, #24]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	619a      	str	r2, [r3, #24]
 8009340:	e060      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d11c      	bne.n	8009382 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009358:	f000 ff27 	bl	800a1aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800936a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6999      	ldr	r1, [r3, #24]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	619a      	str	r2, [r3, #24]
 8009380:	e040      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d11b      	bne.n	80093c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009398:	f000 ff74 	bl	800a284 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69da      	ldr	r2, [r3, #28]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 020c 	bic.w	r2, r2, #12
 80093aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69d9      	ldr	r1, [r3, #28]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	61da      	str	r2, [r3, #28]
 80093be:	e021      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b0c      	cmp	r3, #12
 80093c4:	d11c      	bne.n	8009400 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80093d6:	f000 ff91 	bl	800a2fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80093e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	61da      	str	r2, [r3, #28]
 80093fe:	e001      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009432:	2302      	movs	r3, #2
 8009434:	e0ff      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b14      	cmp	r3, #20
 8009442:	f200 80f0 	bhi.w	8009626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	080094a1 	.word	0x080094a1
 8009450:	08009627 	.word	0x08009627
 8009454:	08009627 	.word	0x08009627
 8009458:	08009627 	.word	0x08009627
 800945c:	080094e1 	.word	0x080094e1
 8009460:	08009627 	.word	0x08009627
 8009464:	08009627 	.word	0x08009627
 8009468:	08009627 	.word	0x08009627
 800946c:	08009523 	.word	0x08009523
 8009470:	08009627 	.word	0x08009627
 8009474:	08009627 	.word	0x08009627
 8009478:	08009627 	.word	0x08009627
 800947c:	08009563 	.word	0x08009563
 8009480:	08009627 	.word	0x08009627
 8009484:	08009627 	.word	0x08009627
 8009488:	08009627 	.word	0x08009627
 800948c:	080095a5 	.word	0x080095a5
 8009490:	08009627 	.word	0x08009627
 8009494:	08009627 	.word	0x08009627
 8009498:	08009627 	.word	0x08009627
 800949c:	080095e5 	.word	0x080095e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fab2 	bl	8009a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0208 	orr.w	r2, r2, #8
 80094ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0204 	bic.w	r2, r2, #4
 80094ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6999      	ldr	r1, [r3, #24]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	619a      	str	r2, [r3, #24]
      break;
 80094de:	e0a5      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fb2c 	bl	8009b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800950a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6999      	ldr	r1, [r3, #24]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	021a      	lsls	r2, r3, #8
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	619a      	str	r2, [r3, #24]
      break;
 8009520:	e084      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fb9f 	bl	8009c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0208 	orr.w	r2, r2, #8
 800953c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0204 	bic.w	r2, r2, #4
 800954c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69d9      	ldr	r1, [r3, #28]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	61da      	str	r2, [r3, #28]
      break;
 8009560:	e064      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fc11 	bl	8009d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800957c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800958c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69d9      	ldr	r1, [r3, #28]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	021a      	lsls	r2, r3, #8
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	61da      	str	r2, [r3, #28]
      break;
 80095a2:	e043      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fc84 	bl	8009eb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0208 	orr.w	r2, r2, #8
 80095be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0204 	bic.w	r2, r2, #4
 80095ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80095e2:	e023      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fcce 	bl	8009f8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	021a      	lsls	r2, r3, #8
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009624:	e002      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]
      break;
 800962a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop

08009640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_TIM_ConfigClockSource+0x1c>
 8009658:	2302      	movs	r3, #2
 800965a:	e0f6      	b.n	800984a <HAL_TIM_ConfigClockSource+0x20a>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800967a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800967e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a6f      	ldr	r2, [pc, #444]	@ (8009854 <HAL_TIM_ConfigClockSource+0x214>)
 8009696:	4293      	cmp	r3, r2
 8009698:	f000 80c1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800969c:	4a6d      	ldr	r2, [pc, #436]	@ (8009854 <HAL_TIM_ConfigClockSource+0x214>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	f200 80c6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096a4:	4a6c      	ldr	r2, [pc, #432]	@ (8009858 <HAL_TIM_ConfigClockSource+0x218>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f000 80b9 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096ac:	4a6a      	ldr	r2, [pc, #424]	@ (8009858 <HAL_TIM_ConfigClockSource+0x218>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	f200 80be 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096b4:	4a69      	ldr	r2, [pc, #420]	@ (800985c <HAL_TIM_ConfigClockSource+0x21c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	f000 80b1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096bc:	4a67      	ldr	r2, [pc, #412]	@ (800985c <HAL_TIM_ConfigClockSource+0x21c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	f200 80b6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096c4:	4a66      	ldr	r2, [pc, #408]	@ (8009860 <HAL_TIM_ConfigClockSource+0x220>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	f000 80a9 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096cc:	4a64      	ldr	r2, [pc, #400]	@ (8009860 <HAL_TIM_ConfigClockSource+0x220>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	f200 80ae 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096d4:	4a63      	ldr	r2, [pc, #396]	@ (8009864 <HAL_TIM_ConfigClockSource+0x224>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	f000 80a1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096dc:	4a61      	ldr	r2, [pc, #388]	@ (8009864 <HAL_TIM_ConfigClockSource+0x224>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	f200 80a6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096e4:	4a60      	ldr	r2, [pc, #384]	@ (8009868 <HAL_TIM_ConfigClockSource+0x228>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	f000 8099 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096ec:	4a5e      	ldr	r2, [pc, #376]	@ (8009868 <HAL_TIM_ConfigClockSource+0x228>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	f200 809e 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80096f8:	f000 8091 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009700:	f200 8096 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009708:	f000 8089 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800970c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009710:	f200 808e 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009718:	d03e      	beq.n	8009798 <HAL_TIM_ConfigClockSource+0x158>
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800971e:	f200 8087 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009726:	f000 8086 	beq.w	8009836 <HAL_TIM_ConfigClockSource+0x1f6>
 800972a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800972e:	d87f      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009730:	2b70      	cmp	r3, #112	@ 0x70
 8009732:	d01a      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x12a>
 8009734:	2b70      	cmp	r3, #112	@ 0x70
 8009736:	d87b      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009738:	2b60      	cmp	r3, #96	@ 0x60
 800973a:	d050      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x19e>
 800973c:	2b60      	cmp	r3, #96	@ 0x60
 800973e:	d877      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009740:	2b50      	cmp	r3, #80	@ 0x50
 8009742:	d03c      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x17e>
 8009744:	2b50      	cmp	r3, #80	@ 0x50
 8009746:	d873      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009748:	2b40      	cmp	r3, #64	@ 0x40
 800974a:	d058      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x1be>
 800974c:	2b40      	cmp	r3, #64	@ 0x40
 800974e:	d86f      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009750:	2b30      	cmp	r3, #48	@ 0x30
 8009752:	d064      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009754:	2b30      	cmp	r3, #48	@ 0x30
 8009756:	d86b      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009758:	2b20      	cmp	r3, #32
 800975a:	d060      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800975c:	2b20      	cmp	r3, #32
 800975e:	d867      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009760:	2b00      	cmp	r3, #0
 8009762:	d05c      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009764:	2b10      	cmp	r3, #16
 8009766:	d05a      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009768:	e062      	b.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800977a:	f000 fe19 	bl	800a3b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800978c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	609a      	str	r2, [r3, #8]
      break;
 8009796:	e04f      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097a8:	f000 fe02 	bl	800a3b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097ba:	609a      	str	r2, [r3, #8]
      break;
 80097bc:	e03c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ca:	461a      	mov	r2, r3
 80097cc:	f000 fcbe 	bl	800a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2150      	movs	r1, #80	@ 0x50
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fdcd 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 80097dc:	e02c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ea:	461a      	mov	r2, r3
 80097ec:	f000 fd1a 	bl	800a224 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2160      	movs	r1, #96	@ 0x60
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fdbd 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 80097fc:	e01c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800980a:	461a      	mov	r2, r3
 800980c:	f000 fc9e 	bl	800a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2140      	movs	r1, #64	@ 0x40
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fdad 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800981c:	e00c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f000 fda4 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800982e:	e003      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	e000      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	00100070 	.word	0x00100070
 8009858:	00100060 	.word	0x00100060
 800985c:	00100050 	.word	0x00100050
 8009860:	00100040 	.word	0x00100040
 8009864:	00100030 	.word	0x00100030
 8009868:	00100020 	.word	0x00100020

0800986c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a4c      	ldr	r2, [pc, #304]	@ (80099ec <TIM_Base_SetConfig+0x144>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d017      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c6:	d013      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a49      	ldr	r2, [pc, #292]	@ (80099f0 <TIM_Base_SetConfig+0x148>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00f      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a48      	ldr	r2, [pc, #288]	@ (80099f4 <TIM_Base_SetConfig+0x14c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00b      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a47      	ldr	r2, [pc, #284]	@ (80099f8 <TIM_Base_SetConfig+0x150>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d007      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a46      	ldr	r2, [pc, #280]	@ (80099fc <TIM_Base_SetConfig+0x154>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_Base_SetConfig+0x48>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a45      	ldr	r2, [pc, #276]	@ (8009a00 <TIM_Base_SetConfig+0x158>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d108      	bne.n	8009902 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a39      	ldr	r2, [pc, #228]	@ (80099ec <TIM_Base_SetConfig+0x144>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d023      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009910:	d01f      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a36      	ldr	r2, [pc, #216]	@ (80099f0 <TIM_Base_SetConfig+0x148>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01b      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a35      	ldr	r2, [pc, #212]	@ (80099f4 <TIM_Base_SetConfig+0x14c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d017      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a34      	ldr	r2, [pc, #208]	@ (80099f8 <TIM_Base_SetConfig+0x150>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a33      	ldr	r2, [pc, #204]	@ (80099fc <TIM_Base_SetConfig+0x154>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00f      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a33      	ldr	r2, [pc, #204]	@ (8009a04 <TIM_Base_SetConfig+0x15c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a32      	ldr	r2, [pc, #200]	@ (8009a08 <TIM_Base_SetConfig+0x160>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a31      	ldr	r2, [pc, #196]	@ (8009a0c <TIM_Base_SetConfig+0x164>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_Base_SetConfig+0xaa>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a2c      	ldr	r2, [pc, #176]	@ (8009a00 <TIM_Base_SetConfig+0x158>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d108      	bne.n	8009964 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a18      	ldr	r2, [pc, #96]	@ (80099ec <TIM_Base_SetConfig+0x144>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <TIM_Base_SetConfig+0x110>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a1a      	ldr	r2, [pc, #104]	@ (80099fc <TIM_Base_SetConfig+0x154>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00f      	beq.n	80099b8 <TIM_Base_SetConfig+0x110>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a04 <TIM_Base_SetConfig+0x15c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00b      	beq.n	80099b8 <TIM_Base_SetConfig+0x110>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a19      	ldr	r2, [pc, #100]	@ (8009a08 <TIM_Base_SetConfig+0x160>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d007      	beq.n	80099b8 <TIM_Base_SetConfig+0x110>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a18      	ldr	r2, [pc, #96]	@ (8009a0c <TIM_Base_SetConfig+0x164>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d003      	beq.n	80099b8 <TIM_Base_SetConfig+0x110>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a13      	ldr	r2, [pc, #76]	@ (8009a00 <TIM_Base_SetConfig+0x158>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d103      	bne.n	80099c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	691a      	ldr	r2, [r3, #16]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d105      	bne.n	80099de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f023 0201 	bic.w	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	611a      	str	r2, [r3, #16]
  }
}
 80099de:	bf00      	nop
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40012c00 	.word	0x40012c00
 80099f0:	40000400 	.word	0x40000400
 80099f4:	40000800 	.word	0x40000800
 80099f8:	40000c00 	.word	0x40000c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40015000 	.word	0x40015000
 8009a04:	40014000 	.word	0x40014000
 8009a08:	40014400 	.word	0x40014400
 8009a0c:	40014800 	.word	0x40014800

08009a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	f023 0201 	bic.w	r2, r3, #1
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f023 0302 	bic.w	r3, r3, #2
 8009a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a30      	ldr	r2, [pc, #192]	@ (8009b2c <TIM_OC1_SetConfig+0x11c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d013      	beq.n	8009a98 <TIM_OC1_SetConfig+0x88>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a2f      	ldr	r2, [pc, #188]	@ (8009b30 <TIM_OC1_SetConfig+0x120>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00f      	beq.n	8009a98 <TIM_OC1_SetConfig+0x88>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8009b34 <TIM_OC1_SetConfig+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00b      	beq.n	8009a98 <TIM_OC1_SetConfig+0x88>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a2d      	ldr	r2, [pc, #180]	@ (8009b38 <TIM_OC1_SetConfig+0x128>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d007      	beq.n	8009a98 <TIM_OC1_SetConfig+0x88>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b3c <TIM_OC1_SetConfig+0x12c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d003      	beq.n	8009a98 <TIM_OC1_SetConfig+0x88>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a2b      	ldr	r2, [pc, #172]	@ (8009b40 <TIM_OC1_SetConfig+0x130>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d10c      	bne.n	8009ab2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f023 0308 	bic.w	r3, r3, #8
 8009a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f023 0304 	bic.w	r3, r3, #4
 8009ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8009b2c <TIM_OC1_SetConfig+0x11c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <TIM_OC1_SetConfig+0xd2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1c      	ldr	r2, [pc, #112]	@ (8009b30 <TIM_OC1_SetConfig+0x120>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d00f      	beq.n	8009ae2 <TIM_OC1_SetConfig+0xd2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b34 <TIM_OC1_SetConfig+0x124>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_OC1_SetConfig+0xd2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1a      	ldr	r2, [pc, #104]	@ (8009b38 <TIM_OC1_SetConfig+0x128>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <TIM_OC1_SetConfig+0xd2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a19      	ldr	r2, [pc, #100]	@ (8009b3c <TIM_OC1_SetConfig+0x12c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_OC1_SetConfig+0xd2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <TIM_OC1_SetConfig+0x130>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d111      	bne.n	8009b06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	621a      	str	r2, [r3, #32]
}
 8009b20:	bf00      	nop
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	40012c00 	.word	0x40012c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40014400 	.word	0x40014400
 8009b3c:	40014800 	.word	0x40014800
 8009b40:	40015000 	.word	0x40015000

08009b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	f023 0210 	bic.w	r2, r3, #16
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f023 0320 	bic.w	r3, r3, #32
 8009b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c54 <TIM_OC2_SetConfig+0x110>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d007      	beq.n	8009bb8 <TIM_OC2_SetConfig+0x74>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a2b      	ldr	r2, [pc, #172]	@ (8009c58 <TIM_OC2_SetConfig+0x114>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC2_SetConfig+0x74>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c5c <TIM_OC2_SetConfig+0x118>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d10d      	bne.n	8009bd4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8009c54 <TIM_OC2_SetConfig+0x110>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d013      	beq.n	8009c04 <TIM_OC2_SetConfig+0xc0>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1e      	ldr	r2, [pc, #120]	@ (8009c58 <TIM_OC2_SetConfig+0x114>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00f      	beq.n	8009c04 <TIM_OC2_SetConfig+0xc0>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c60 <TIM_OC2_SetConfig+0x11c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00b      	beq.n	8009c04 <TIM_OC2_SetConfig+0xc0>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a1d      	ldr	r2, [pc, #116]	@ (8009c64 <TIM_OC2_SetConfig+0x120>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d007      	beq.n	8009c04 <TIM_OC2_SetConfig+0xc0>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c68 <TIM_OC2_SetConfig+0x124>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d003      	beq.n	8009c04 <TIM_OC2_SetConfig+0xc0>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a17      	ldr	r2, [pc, #92]	@ (8009c5c <TIM_OC2_SetConfig+0x118>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d113      	bne.n	8009c2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	621a      	str	r2, [r3, #32]
}
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	40012c00 	.word	0x40012c00
 8009c58:	40013400 	.word	0x40013400
 8009c5c:	40015000 	.word	0x40015000
 8009c60:	40014000 	.word	0x40014000
 8009c64:	40014400 	.word	0x40014400
 8009c68:	40014800 	.word	0x40014800

08009c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8009d78 <TIM_OC3_SetConfig+0x10c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_OC3_SetConfig+0x72>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d7c <TIM_OC3_SetConfig+0x110>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_OC3_SetConfig+0x72>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a29      	ldr	r2, [pc, #164]	@ (8009d80 <TIM_OC3_SetConfig+0x114>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d10d      	bne.n	8009cfa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8009d78 <TIM_OC3_SetConfig+0x10c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d013      	beq.n	8009d2a <TIM_OC3_SetConfig+0xbe>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	@ (8009d7c <TIM_OC3_SetConfig+0x110>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00f      	beq.n	8009d2a <TIM_OC3_SetConfig+0xbe>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009d84 <TIM_OC3_SetConfig+0x118>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d00b      	beq.n	8009d2a <TIM_OC3_SetConfig+0xbe>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a1c      	ldr	r2, [pc, #112]	@ (8009d88 <TIM_OC3_SetConfig+0x11c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d007      	beq.n	8009d2a <TIM_OC3_SetConfig+0xbe>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d8c <TIM_OC3_SetConfig+0x120>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d003      	beq.n	8009d2a <TIM_OC3_SetConfig+0xbe>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a16      	ldr	r2, [pc, #88]	@ (8009d80 <TIM_OC3_SetConfig+0x114>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d113      	bne.n	8009d52 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	621a      	str	r2, [r3, #32]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	40012c00 	.word	0x40012c00
 8009d7c:	40013400 	.word	0x40013400
 8009d80:	40015000 	.word	0x40015000
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40014400 	.word	0x40014400
 8009d8c:	40014800 	.word	0x40014800

08009d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	021b      	lsls	r3, r3, #8
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	031b      	lsls	r3, r3, #12
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a2c      	ldr	r2, [pc, #176]	@ (8009ea0 <TIM_OC4_SetConfig+0x110>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d007      	beq.n	8009e04 <TIM_OC4_SetConfig+0x74>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a2b      	ldr	r2, [pc, #172]	@ (8009ea4 <TIM_OC4_SetConfig+0x114>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_OC4_SetConfig+0x74>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ea8 <TIM_OC4_SetConfig+0x118>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10d      	bne.n	8009e20 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ea0 <TIM_OC4_SetConfig+0x110>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d013      	beq.n	8009e50 <TIM_OC4_SetConfig+0xc0>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ea4 <TIM_OC4_SetConfig+0x114>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00f      	beq.n	8009e50 <TIM_OC4_SetConfig+0xc0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1e      	ldr	r2, [pc, #120]	@ (8009eac <TIM_OC4_SetConfig+0x11c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00b      	beq.n	8009e50 <TIM_OC4_SetConfig+0xc0>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb0 <TIM_OC4_SetConfig+0x120>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d007      	beq.n	8009e50 <TIM_OC4_SetConfig+0xc0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb4 <TIM_OC4_SetConfig+0x124>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <TIM_OC4_SetConfig+0xc0>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ea8 <TIM_OC4_SetConfig+0x118>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d113      	bne.n	8009e78 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	019b      	lsls	r3, r3, #6
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	019b      	lsls	r3, r3, #6
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40012c00 	.word	0x40012c00
 8009ea4:	40013400 	.word	0x40013400
 8009ea8:	40015000 	.word	0x40015000
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	40014400 	.word	0x40014400
 8009eb4:	40014800 	.word	0x40014800

08009eb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a19      	ldr	r2, [pc, #100]	@ (8009f74 <TIM_OC5_SetConfig+0xbc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d013      	beq.n	8009f3a <TIM_OC5_SetConfig+0x82>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a18      	ldr	r2, [pc, #96]	@ (8009f78 <TIM_OC5_SetConfig+0xc0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00f      	beq.n	8009f3a <TIM_OC5_SetConfig+0x82>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a17      	ldr	r2, [pc, #92]	@ (8009f7c <TIM_OC5_SetConfig+0xc4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00b      	beq.n	8009f3a <TIM_OC5_SetConfig+0x82>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a16      	ldr	r2, [pc, #88]	@ (8009f80 <TIM_OC5_SetConfig+0xc8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d007      	beq.n	8009f3a <TIM_OC5_SetConfig+0x82>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a15      	ldr	r2, [pc, #84]	@ (8009f84 <TIM_OC5_SetConfig+0xcc>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_OC5_SetConfig+0x82>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a14      	ldr	r2, [pc, #80]	@ (8009f88 <TIM_OC5_SetConfig+0xd0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d109      	bne.n	8009f4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	621a      	str	r2, [r3, #32]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	40012c00 	.word	0x40012c00
 8009f78:	40013400 	.word	0x40013400
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	40014400 	.word	0x40014400
 8009f84:	40014800 	.word	0x40014800
 8009f88:	40015000 	.word	0x40015000

08009f8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	051b      	lsls	r3, r3, #20
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800a04c <TIM_OC6_SetConfig+0xc0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d013      	beq.n	800a010 <TIM_OC6_SetConfig+0x84>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a19      	ldr	r2, [pc, #100]	@ (800a050 <TIM_OC6_SetConfig+0xc4>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00f      	beq.n	800a010 <TIM_OC6_SetConfig+0x84>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a18      	ldr	r2, [pc, #96]	@ (800a054 <TIM_OC6_SetConfig+0xc8>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d00b      	beq.n	800a010 <TIM_OC6_SetConfig+0x84>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a17      	ldr	r2, [pc, #92]	@ (800a058 <TIM_OC6_SetConfig+0xcc>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d007      	beq.n	800a010 <TIM_OC6_SetConfig+0x84>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a16      	ldr	r2, [pc, #88]	@ (800a05c <TIM_OC6_SetConfig+0xd0>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d003      	beq.n	800a010 <TIM_OC6_SetConfig+0x84>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a15      	ldr	r2, [pc, #84]	@ (800a060 <TIM_OC6_SetConfig+0xd4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d109      	bne.n	800a024 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	4313      	orrs	r3, r2
 800a022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	621a      	str	r2, [r3, #32]
}
 800a03e:	bf00      	nop
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	40013400 	.word	0x40013400
 800a054:	40014000 	.word	0x40014000
 800a058:	40014400 	.word	0x40014400
 800a05c:	40014800 	.word	0x40014800
 800a060:	40015000 	.word	0x40015000

0800a064 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f023 0201 	bic.w	r2, r3, #1
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a28      	ldr	r2, [pc, #160]	@ (800a130 <TIM_TI1_SetConfig+0xcc>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d01b      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a098:	d017      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4a25      	ldr	r2, [pc, #148]	@ (800a134 <TIM_TI1_SetConfig+0xd0>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a24      	ldr	r2, [pc, #144]	@ (800a138 <TIM_TI1_SetConfig+0xd4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00f      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4a23      	ldr	r2, [pc, #140]	@ (800a13c <TIM_TI1_SetConfig+0xd8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4a22      	ldr	r2, [pc, #136]	@ (800a140 <TIM_TI1_SetConfig+0xdc>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d007      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4a21      	ldr	r2, [pc, #132]	@ (800a144 <TIM_TI1_SetConfig+0xe0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_TI1_SetConfig+0x66>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a20      	ldr	r2, [pc, #128]	@ (800a148 <TIM_TI1_SetConfig+0xe4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d101      	bne.n	800a0ce <TIM_TI1_SetConfig+0x6a>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <TIM_TI1_SetConfig+0x6c>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	e003      	b.n	800a0ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f043 0301 	orr.w	r3, r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f023 030a 	bic.w	r3, r3, #10
 800a108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f003 030a 	and.w	r3, r3, #10
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	621a      	str	r2, [r3, #32]
}
 800a122:	bf00      	nop
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40000400 	.word	0x40000400
 800a138:	40000800 	.word	0x40000800
 800a13c:	40000c00 	.word	0x40000c00
 800a140:	40013400 	.word	0x40013400
 800a144:	40014000 	.word	0x40014000
 800a148:	40015000 	.word	0x40015000

0800a14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	f023 0201 	bic.w	r2, r3, #1
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 030a 	bic.w	r3, r3, #10
 800a188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b087      	sub	sp, #28
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	f023 0210 	bic.w	r2, r3, #16
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	031b      	lsls	r3, r3, #12
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	621a      	str	r2, [r3, #32]
}
 800a218:	bf00      	nop
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0210 	bic.w	r2, r3, #16
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a24e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	031b      	lsls	r3, r3, #12
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a260:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f023 0303 	bic.w	r3, r3, #3
 800a2b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a2d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	621a      	str	r2, [r3, #32]
}
 800a2f0:	bf00      	nop
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a328:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4313      	orrs	r3, r2
 800a332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a33a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	031b      	lsls	r3, r3, #12
 800a340:	b29b      	uxth	r3, r3
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a34e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	031b      	lsls	r3, r3, #12
 800a354:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	621a      	str	r2, [r3, #32]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a38c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	f043 0307 	orr.w	r3, r3, #7
 800a39c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	609a      	str	r2, [r3, #8]
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	021a      	lsls	r2, r3, #8
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	609a      	str	r2, [r3, #8]
}
 800a3e4:	bf00      	nop
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f003 031f 	and.w	r3, r3, #31
 800a402:	2201      	movs	r2, #1
 800a404:	fa02 f303 	lsl.w	r3, r2, r3
 800a408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a1a      	ldr	r2, [r3, #32]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	fa01 f303 	lsl.w	r3, r1, r3
 800a428:	431a      	orrs	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	621a      	str	r2, [r3, #32]
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
	...

0800a43c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a450:	2302      	movs	r3, #2
 800a452:	e074      	b.n	800a53e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a34      	ldr	r2, [pc, #208]	@ (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d009      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a33      	ldr	r2, [pc, #204]	@ (800a550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d004      	beq.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a31      	ldr	r2, [pc, #196]	@ (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d108      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a4aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a21      	ldr	r2, [pc, #132]	@ (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d022      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d4:	d01d      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a1f      	ldr	r2, [pc, #124]	@ (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d018      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d013      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a1c      	ldr	r2, [pc, #112]	@ (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00e      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a15      	ldr	r2, [pc, #84]	@ (800a550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d009      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a18      	ldr	r2, [pc, #96]	@ (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d004      	beq.n	800a512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a11      	ldr	r2, [pc, #68]	@ (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d10c      	bne.n	800a52c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4313      	orrs	r3, r2
 800a522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	40012c00 	.word	0x40012c00
 800a550:	40013400 	.word	0x40013400
 800a554:	40015000 	.word	0x40015000
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000800 	.word	0x40000800
 800a560:	40000c00 	.word	0x40000c00
 800a564:	40014000 	.word	0x40014000

0800a568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a580:	2302      	movs	r3, #2
 800a582:	e078      	b.n	800a676 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	041b      	lsls	r3, r3, #16
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a1c      	ldr	r2, [pc, #112]	@ (800a684 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d009      	beq.n	800a62a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1b      	ldr	r2, [pc, #108]	@ (800a688 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d004      	beq.n	800a62a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a19      	ldr	r2, [pc, #100]	@ (800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d11c      	bne.n	800a664 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a634:	051b      	lsls	r3, r3, #20
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	4313      	orrs	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a660:	4313      	orrs	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	40012c00 	.word	0x40012c00
 800a688:	40013400 	.word	0x40013400
 800a68c:	40015000 	.word	0x40015000

0800a690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e042      	b.n	800a7b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7f8 fe6f 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2224      	movs	r2, #36	@ 0x24
 800a74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0201 	bic.w	r2, r2, #1
 800a75c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fb24 	bl	800adb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f825 	bl	800a7bc <UART_SetConfig>
 800a772:	4603      	mov	r3, r0
 800a774:	2b01      	cmp	r3, #1
 800a776:	d101      	bne.n	800a77c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e01b      	b.n	800a7b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a78a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a79a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f042 0201 	orr.w	r2, r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fba3 	bl	800aef8 <UART_CheckIdleState>
 800a7b2:	4603      	mov	r3, r0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7c0:	b08c      	sub	sp, #48	@ 0x30
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4baa      	ldr	r3, [pc, #680]	@ (800aa94 <UART_SetConfig+0x2d8>)
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a9f      	ldr	r2, [pc, #636]	@ (800aa98 <UART_SetConfig+0x2dc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d004      	beq.n	800a828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a824:	4313      	orrs	r3, r2
 800a826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a832:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a83c:	430b      	orrs	r3, r1
 800a83e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a846:	f023 010f 	bic.w	r1, r3, #15
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a90      	ldr	r2, [pc, #576]	@ (800aa9c <UART_SetConfig+0x2e0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d125      	bne.n	800a8ac <UART_SetConfig+0xf0>
 800a860:	4b8f      	ldr	r3, [pc, #572]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800a862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a866:	f003 0303 	and.w	r3, r3, #3
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d81a      	bhi.n	800a8a4 <UART_SetConfig+0xe8>
 800a86e:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <UART_SetConfig+0xb8>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a895 	.word	0x0800a895
 800a87c:	0800a88d 	.word	0x0800a88d
 800a880:	0800a89d 	.word	0x0800a89d
 800a884:	2301      	movs	r3, #1
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e116      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a88c:	2302      	movs	r3, #2
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a892:	e112      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a894:	2304      	movs	r3, #4
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89a:	e10e      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a89c:	2308      	movs	r3, #8
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8a2:	e10a      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8aa:	e106      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a7c      	ldr	r2, [pc, #496]	@ (800aaa4 <UART_SetConfig+0x2e8>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d138      	bne.n	800a928 <UART_SetConfig+0x16c>
 800a8b6:	4b7a      	ldr	r3, [pc, #488]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800a8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8bc:	f003 030c 	and.w	r3, r3, #12
 800a8c0:	2b0c      	cmp	r3, #12
 800a8c2:	d82d      	bhi.n	800a920 <UART_SetConfig+0x164>
 800a8c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8cc <UART_SetConfig+0x110>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a901 	.word	0x0800a901
 800a8d0:	0800a921 	.word	0x0800a921
 800a8d4:	0800a921 	.word	0x0800a921
 800a8d8:	0800a921 	.word	0x0800a921
 800a8dc:	0800a911 	.word	0x0800a911
 800a8e0:	0800a921 	.word	0x0800a921
 800a8e4:	0800a921 	.word	0x0800a921
 800a8e8:	0800a921 	.word	0x0800a921
 800a8ec:	0800a909 	.word	0x0800a909
 800a8f0:	0800a921 	.word	0x0800a921
 800a8f4:	0800a921 	.word	0x0800a921
 800a8f8:	0800a921 	.word	0x0800a921
 800a8fc:	0800a919 	.word	0x0800a919
 800a900:	2300      	movs	r3, #0
 800a902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a906:	e0d8      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a908:	2302      	movs	r3, #2
 800a90a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a90e:	e0d4      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a910:	2304      	movs	r3, #4
 800a912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a916:	e0d0      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a918:	2308      	movs	r3, #8
 800a91a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a91e:	e0cc      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a920:	2310      	movs	r3, #16
 800a922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a926:	e0c8      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a5e      	ldr	r2, [pc, #376]	@ (800aaa8 <UART_SetConfig+0x2ec>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d125      	bne.n	800a97e <UART_SetConfig+0x1c2>
 800a932:	4b5b      	ldr	r3, [pc, #364]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800a934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a938:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a93c:	2b30      	cmp	r3, #48	@ 0x30
 800a93e:	d016      	beq.n	800a96e <UART_SetConfig+0x1b2>
 800a940:	2b30      	cmp	r3, #48	@ 0x30
 800a942:	d818      	bhi.n	800a976 <UART_SetConfig+0x1ba>
 800a944:	2b20      	cmp	r3, #32
 800a946:	d00a      	beq.n	800a95e <UART_SetConfig+0x1a2>
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d814      	bhi.n	800a976 <UART_SetConfig+0x1ba>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <UART_SetConfig+0x19a>
 800a950:	2b10      	cmp	r3, #16
 800a952:	d008      	beq.n	800a966 <UART_SetConfig+0x1aa>
 800a954:	e00f      	b.n	800a976 <UART_SetConfig+0x1ba>
 800a956:	2300      	movs	r3, #0
 800a958:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a95c:	e0ad      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a95e:	2302      	movs	r3, #2
 800a960:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a964:	e0a9      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a966:	2304      	movs	r3, #4
 800a968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a96c:	e0a5      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a96e:	2308      	movs	r3, #8
 800a970:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a974:	e0a1      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a976:	2310      	movs	r3, #16
 800a978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a97c:	e09d      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a4a      	ldr	r2, [pc, #296]	@ (800aaac <UART_SetConfig+0x2f0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d125      	bne.n	800a9d4 <UART_SetConfig+0x218>
 800a988:	4b45      	ldr	r3, [pc, #276]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a98e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a992:	2bc0      	cmp	r3, #192	@ 0xc0
 800a994:	d016      	beq.n	800a9c4 <UART_SetConfig+0x208>
 800a996:	2bc0      	cmp	r3, #192	@ 0xc0
 800a998:	d818      	bhi.n	800a9cc <UART_SetConfig+0x210>
 800a99a:	2b80      	cmp	r3, #128	@ 0x80
 800a99c:	d00a      	beq.n	800a9b4 <UART_SetConfig+0x1f8>
 800a99e:	2b80      	cmp	r3, #128	@ 0x80
 800a9a0:	d814      	bhi.n	800a9cc <UART_SetConfig+0x210>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <UART_SetConfig+0x1f0>
 800a9a6:	2b40      	cmp	r3, #64	@ 0x40
 800a9a8:	d008      	beq.n	800a9bc <UART_SetConfig+0x200>
 800a9aa:	e00f      	b.n	800a9cc <UART_SetConfig+0x210>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9b2:	e082      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ba:	e07e      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a9bc:	2304      	movs	r3, #4
 800a9be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9c2:	e07a      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ca:	e076      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a9cc:	2310      	movs	r3, #16
 800a9ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9d2:	e072      	b.n	800aaba <UART_SetConfig+0x2fe>
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a35      	ldr	r2, [pc, #212]	@ (800aab0 <UART_SetConfig+0x2f4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d12a      	bne.n	800aa34 <UART_SetConfig+0x278>
 800a9de:	4b30      	ldr	r3, [pc, #192]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800a9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9ec:	d01a      	beq.n	800aa24 <UART_SetConfig+0x268>
 800a9ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9f2:	d81b      	bhi.n	800aa2c <UART_SetConfig+0x270>
 800a9f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f8:	d00c      	beq.n	800aa14 <UART_SetConfig+0x258>
 800a9fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9fe:	d815      	bhi.n	800aa2c <UART_SetConfig+0x270>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <UART_SetConfig+0x250>
 800aa04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa08:	d008      	beq.n	800aa1c <UART_SetConfig+0x260>
 800aa0a:	e00f      	b.n	800aa2c <UART_SetConfig+0x270>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa12:	e052      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa14:	2302      	movs	r3, #2
 800aa16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa1a:	e04e      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa22:	e04a      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa2a:	e046      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa32:	e042      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a17      	ldr	r2, [pc, #92]	@ (800aa98 <UART_SetConfig+0x2dc>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d13a      	bne.n	800aab4 <UART_SetConfig+0x2f8>
 800aa3e:	4b18      	ldr	r3, [pc, #96]	@ (800aaa0 <UART_SetConfig+0x2e4>)
 800aa40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aa48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa4c:	d01a      	beq.n	800aa84 <UART_SetConfig+0x2c8>
 800aa4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa52:	d81b      	bhi.n	800aa8c <UART_SetConfig+0x2d0>
 800aa54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa58:	d00c      	beq.n	800aa74 <UART_SetConfig+0x2b8>
 800aa5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa5e:	d815      	bhi.n	800aa8c <UART_SetConfig+0x2d0>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <UART_SetConfig+0x2b0>
 800aa64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa68:	d008      	beq.n	800aa7c <UART_SetConfig+0x2c0>
 800aa6a:	e00f      	b.n	800aa8c <UART_SetConfig+0x2d0>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e022      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa74:	2302      	movs	r3, #2
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa7a:	e01e      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa82:	e01a      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa84:	2308      	movs	r3, #8
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa8a:	e016      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa92:	e012      	b.n	800aaba <UART_SetConfig+0x2fe>
 800aa94:	cfff69f3 	.word	0xcfff69f3
 800aa98:	40008000 	.word	0x40008000
 800aa9c:	40013800 	.word	0x40013800
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	40004400 	.word	0x40004400
 800aaa8:	40004800 	.word	0x40004800
 800aaac:	40004c00 	.word	0x40004c00
 800aab0:	40005000 	.word	0x40005000
 800aab4:	2310      	movs	r3, #16
 800aab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4aae      	ldr	r2, [pc, #696]	@ (800ad78 <UART_SetConfig+0x5bc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	f040 8097 	bne.w	800abf4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aac6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	d823      	bhi.n	800ab16 <UART_SetConfig+0x35a>
 800aace:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <UART_SetConfig+0x318>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaf9 	.word	0x0800aaf9
 800aad8:	0800ab17 	.word	0x0800ab17
 800aadc:	0800ab01 	.word	0x0800ab01
 800aae0:	0800ab17 	.word	0x0800ab17
 800aae4:	0800ab07 	.word	0x0800ab07
 800aae8:	0800ab17 	.word	0x0800ab17
 800aaec:	0800ab17 	.word	0x0800ab17
 800aaf0:	0800ab17 	.word	0x0800ab17
 800aaf4:	0800ab0f 	.word	0x0800ab0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf8:	f7fd fbec 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aafe:	e010      	b.n	800ab22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab00:	4b9e      	ldr	r3, [pc, #632]	@ (800ad7c <UART_SetConfig+0x5c0>)
 800ab02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab04:	e00d      	b.n	800ab22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab06:	f7fd fb77 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 800ab0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab0c:	e009      	b.n	800ab22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab14:	e005      	b.n	800ab22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8130 	beq.w	800ad8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	4a94      	ldr	r2, [pc, #592]	@ (800ad80 <UART_SetConfig+0x5c4>)
 800ab30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	4613      	mov	r3, r2
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	4413      	add	r3, r2
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d305      	bcc.n	800ab5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d903      	bls.n	800ab62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab60:	e113      	b.n	800ad8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab64:	2200      	movs	r2, #0
 800ab66:	60bb      	str	r3, [r7, #8]
 800ab68:	60fa      	str	r2, [r7, #12]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6e:	4a84      	ldr	r2, [pc, #528]	@ (800ad80 <UART_SetConfig+0x5c4>)
 800ab70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	2200      	movs	r2, #0
 800ab78:	603b      	str	r3, [r7, #0]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab84:	f7f5 feda 	bl	800093c <__aeabi_uldivmod>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	020b      	lsls	r3, r1, #8
 800ab9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab9e:	0202      	lsls	r2, r0, #8
 800aba0:	6979      	ldr	r1, [r7, #20]
 800aba2:	6849      	ldr	r1, [r1, #4]
 800aba4:	0849      	lsrs	r1, r1, #1
 800aba6:	2000      	movs	r0, #0
 800aba8:	460c      	mov	r4, r1
 800abaa:	4605      	mov	r5, r0
 800abac:	eb12 0804 	adds.w	r8, r2, r4
 800abb0:	eb43 0905 	adc.w	r9, r3, r5
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	469a      	mov	sl, r3
 800abbc:	4693      	mov	fp, r2
 800abbe:	4652      	mov	r2, sl
 800abc0:	465b      	mov	r3, fp
 800abc2:	4640      	mov	r0, r8
 800abc4:	4649      	mov	r1, r9
 800abc6:	f7f5 feb9 	bl	800093c <__aeabi_uldivmod>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4613      	mov	r3, r2
 800abd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abd8:	d308      	bcc.n	800abec <UART_SetConfig+0x430>
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abe0:	d204      	bcs.n	800abec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6a3a      	ldr	r2, [r7, #32]
 800abe8:	60da      	str	r2, [r3, #12]
 800abea:	e0ce      	b.n	800ad8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800abf2:	e0ca      	b.n	800ad8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abfc:	d166      	bne.n	800accc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800abfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac02:	2b08      	cmp	r3, #8
 800ac04:	d827      	bhi.n	800ac56 <UART_SetConfig+0x49a>
 800ac06:	a201      	add	r2, pc, #4	@ (adr r2, 800ac0c <UART_SetConfig+0x450>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	0800ac57 	.word	0x0800ac57
 800ac1c:	0800ac47 	.word	0x0800ac47
 800ac20:	0800ac57 	.word	0x0800ac57
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac57 	.word	0x0800ac57
 800ac2c:	0800ac4f 	.word	0x0800ac4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac30:	f7fd fb50 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 800ac34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac36:	e014      	b.n	800ac62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac38:	f7fd fb62 	bl	8008300 <HAL_RCC_GetPCLK2Freq>
 800ac3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac3e:	e010      	b.n	800ac62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac40:	4b4e      	ldr	r3, [pc, #312]	@ (800ad7c <UART_SetConfig+0x5c0>)
 800ac42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac44:	e00d      	b.n	800ac62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac46:	f7fd fad7 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 800ac4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac4c:	e009      	b.n	800ac62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac54:	e005      	b.n	800ac62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8090 	beq.w	800ad8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6e:	4a44      	ldr	r2, [pc, #272]	@ (800ad80 <UART_SetConfig+0x5c4>)
 800ac70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac7c:	005a      	lsls	r2, r3, #1
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	441a      	add	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	d916      	bls.n	800acc4 <UART_SetConfig+0x508>
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac9c:	d212      	bcs.n	800acc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f023 030f 	bic.w	r3, r3, #15
 800aca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	b29b      	uxth	r3, r3
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	8bfb      	ldrh	r3, [r7, #30]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	8bfa      	ldrh	r2, [r7, #30]
 800acc0:	60da      	str	r2, [r3, #12]
 800acc2:	e062      	b.n	800ad8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acca:	e05e      	b.n	800ad8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800accc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d828      	bhi.n	800ad26 <UART_SetConfig+0x56a>
 800acd4:	a201      	add	r2, pc, #4	@ (adr r2, 800acdc <UART_SetConfig+0x520>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	0800ad27 	.word	0x0800ad27
 800acec:	0800ad17 	.word	0x0800ad17
 800acf0:	0800ad27 	.word	0x0800ad27
 800acf4:	0800ad27 	.word	0x0800ad27
 800acf8:	0800ad27 	.word	0x0800ad27
 800acfc:	0800ad1f 	.word	0x0800ad1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad00:	f7fd fae8 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 800ad04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad06:	e014      	b.n	800ad32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad08:	f7fd fafa 	bl	8008300 <HAL_RCC_GetPCLK2Freq>
 800ad0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad0e:	e010      	b.n	800ad32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad10:	4b1a      	ldr	r3, [pc, #104]	@ (800ad7c <UART_SetConfig+0x5c0>)
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad14:	e00d      	b.n	800ad32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad16:	f7fd fa6f 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 800ad1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad1c:	e009      	b.n	800ad32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad24:	e005      	b.n	800ad32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad30:	bf00      	nop
    }

    if (pclk != 0U)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d028      	beq.n	800ad8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3c:	4a10      	ldr	r2, [pc, #64]	@ (800ad80 <UART_SetConfig+0x5c4>)
 800ad3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad42:	461a      	mov	r2, r3
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	085b      	lsrs	r3, r3, #1
 800ad50:	441a      	add	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b0f      	cmp	r3, #15
 800ad60:	d910      	bls.n	800ad84 <UART_SetConfig+0x5c8>
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad68:	d20c      	bcs.n	800ad84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60da      	str	r2, [r3, #12]
 800ad74:	e009      	b.n	800ad8a <UART_SetConfig+0x5ce>
 800ad76:	bf00      	nop
 800ad78:	40008000 	.word	0x40008000
 800ad7c:	00f42400 	.word	0x00f42400
 800ad80:	0800bda8 	.word	0x0800bda8
      }
      else
      {
        ret = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2200      	movs	r2, #0
 800ada4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ada6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3730      	adds	r7, #48	@ 0x30
 800adae:	46bd      	mov	sp, r7
 800adb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800adb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc0:	f003 0308 	and.w	r3, r3, #8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00a      	beq.n	800ae22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae26:	f003 0304 	and.w	r3, r3, #4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae48:	f003 0310 	and.w	r3, r3, #16
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00a      	beq.n	800ae66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00a      	beq.n	800ae88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01a      	beq.n	800aeca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeb2:	d10a      	bne.n	800aeca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	605a      	str	r2, [r3, #4]
  }
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b098      	sub	sp, #96	@ 0x60
 800aefc:	af02      	add	r7, sp, #8
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af08:	f7f8 fb72 	bl	80035f0 <HAL_GetTick>
 800af0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d12f      	bne.n	800af7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af24:	2200      	movs	r2, #0
 800af26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f88e 	bl	800b04c <UART_WaitOnFlagUntilTimeout>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d022      	beq.n	800af7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	461a      	mov	r2, r3
 800af52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af54:	647b      	str	r3, [r7, #68]	@ 0x44
 800af56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af5c:	e841 2300 	strex	r3, r2, [r1]
 800af60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1e6      	bne.n	800af36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2220      	movs	r2, #32
 800af6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e063      	b.n	800b044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0304 	and.w	r3, r3, #4
 800af86:	2b04      	cmp	r3, #4
 800af88:	d149      	bne.n	800b01e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af92:	2200      	movs	r2, #0
 800af94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f857 	bl	800b04c <UART_WaitOnFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d03c      	beq.n	800b01e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	623b      	str	r3, [r7, #32]
   return(result);
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f023 0301 	bic.w	r3, r3, #1
 800afec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aff6:	61fa      	str	r2, [r7, #28]
 800aff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	69b9      	ldr	r1, [r7, #24]
 800affc:	69fa      	ldr	r2, [r7, #28]
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	617b      	str	r3, [r7, #20]
   return(result);
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e5      	bne.n	800afd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e012      	b.n	800b044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2220      	movs	r2, #32
 800b022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3758      	adds	r7, #88	@ 0x58
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	603b      	str	r3, [r7, #0]
 800b058:	4613      	mov	r3, r2
 800b05a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b05c:	e04f      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b064:	d04b      	beq.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b066:	f7f8 fac3 	bl	80035f0 <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	429a      	cmp	r2, r3
 800b074:	d302      	bcc.n	800b07c <UART_WaitOnFlagUntilTimeout+0x30>
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e04e      	b.n	800b11e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d037      	beq.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b80      	cmp	r3, #128	@ 0x80
 800b092:	d034      	beq.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2b40      	cmp	r3, #64	@ 0x40
 800b098:	d031      	beq.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69db      	ldr	r3, [r3, #28]
 800b0a0:	f003 0308 	and.w	r3, r3, #8
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	d110      	bne.n	800b0ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2208      	movs	r2, #8
 800b0ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f838 	bl	800b126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2208      	movs	r2, #8
 800b0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e029      	b.n	800b11e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0d8:	d111      	bne.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 f81e 	bl	800b126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e00f      	b.n	800b11e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69da      	ldr	r2, [r3, #28]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	4013      	ands	r3, r2
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	bf0c      	ite	eq
 800b10e:	2301      	moveq	r3, #1
 800b110:	2300      	movne	r3, #0
 800b112:	b2db      	uxtb	r3, r3
 800b114:	461a      	mov	r2, r3
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d0a0      	beq.n	800b05e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b126:	b480      	push	{r7}
 800b128:	b095      	sub	sp, #84	@ 0x54
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b136:	e853 3f00 	ldrex	r3, [r3]
 800b13a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b14c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b14e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b154:	e841 2300 	strex	r3, r2, [r1]
 800b158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e6      	bne.n	800b12e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3308      	adds	r3, #8
 800b166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b176:	f023 0301 	bic.w	r3, r3, #1
 800b17a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3308      	adds	r3, #8
 800b182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e3      	bne.n	800b160 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d118      	bne.n	800b1d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f023 0310 	bic.w	r3, r3, #16
 800b1b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6979      	ldr	r1, [r7, #20]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1e6:	bf00      	nop
 800b1e8:	3754      	adds	r7, #84	@ 0x54
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <HAL_UARTEx_DisableFifoMode+0x16>
 800b204:	2302      	movs	r3, #2
 800b206:	e027      	b.n	800b258 <HAL_UARTEx_DisableFifoMode+0x66>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2224      	movs	r2, #36	@ 0x24
 800b214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0201 	bic.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b236:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b274:	2b01      	cmp	r3, #1
 800b276:	d101      	bne.n	800b27c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b278:	2302      	movs	r3, #2
 800b27a:	e02d      	b.n	800b2d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2224      	movs	r2, #36	@ 0x24
 800b288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0201 	bic.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f84f 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d101      	bne.n	800b2f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	e02d      	b.n	800b354 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2224      	movs	r2, #36	@ 0x24
 800b304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f022 0201 	bic.w	r2, r2, #1
 800b31e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f811 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2220      	movs	r2, #32
 800b346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d108      	bne.n	800b37e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b37c:	e031      	b.n	800b3e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b37e:	2308      	movs	r3, #8
 800b380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b382:	2308      	movs	r3, #8
 800b384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	0e5b      	lsrs	r3, r3, #25
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	0f5b      	lsrs	r3, r3, #29
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	7b3a      	ldrb	r2, [r7, #12]
 800b3aa:	4911      	ldr	r1, [pc, #68]	@ (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ac:	5c8a      	ldrb	r2, [r1, r2]
 800b3ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3b2:	7b3a      	ldrb	r2, [r7, #12]
 800b3b4:	490f      	ldr	r1, [pc, #60]	@ (800b3f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	7b7a      	ldrb	r2, [r7, #13]
 800b3c8:	4909      	ldr	r1, [pc, #36]	@ (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ca:	5c8a      	ldrb	r2, [r1, r2]
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3d0:	7b7a      	ldrb	r2, [r7, #13]
 800b3d2:	4908      	ldr	r1, [pc, #32]	@ (800b3f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	0800bdc0 	.word	0x0800bdc0
 800b3f4:	0800bdc8 	.word	0x0800bdc8

0800b3f8 <siprintf>:
 800b3f8:	b40e      	push	{r1, r2, r3}
 800b3fa:	b500      	push	{lr}
 800b3fc:	b09c      	sub	sp, #112	@ 0x70
 800b3fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800b400:	9002      	str	r0, [sp, #8]
 800b402:	9006      	str	r0, [sp, #24]
 800b404:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b408:	4809      	ldr	r0, [pc, #36]	@ (800b430 <siprintf+0x38>)
 800b40a:	9107      	str	r1, [sp, #28]
 800b40c:	9104      	str	r1, [sp, #16]
 800b40e:	4909      	ldr	r1, [pc, #36]	@ (800b434 <siprintf+0x3c>)
 800b410:	f853 2b04 	ldr.w	r2, [r3], #4
 800b414:	9105      	str	r1, [sp, #20]
 800b416:	6800      	ldr	r0, [r0, #0]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	a902      	add	r1, sp, #8
 800b41c:	f000 f994 	bl	800b748 <_svfiprintf_r>
 800b420:	9b02      	ldr	r3, [sp, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	b01c      	add	sp, #112	@ 0x70
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	20000048 	.word	0x20000048
 800b434:	ffff0208 	.word	0xffff0208

0800b438 <memset>:
 800b438:	4402      	add	r2, r0
 800b43a:	4603      	mov	r3, r0
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d100      	bne.n	800b442 <memset+0xa>
 800b440:	4770      	bx	lr
 800b442:	f803 1b01 	strb.w	r1, [r3], #1
 800b446:	e7f9      	b.n	800b43c <memset+0x4>

0800b448 <__errno>:
 800b448:	4b01      	ldr	r3, [pc, #4]	@ (800b450 <__errno+0x8>)
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20000048 	.word	0x20000048

0800b454 <__libc_init_array>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4d0d      	ldr	r5, [pc, #52]	@ (800b48c <__libc_init_array+0x38>)
 800b458:	4c0d      	ldr	r4, [pc, #52]	@ (800b490 <__libc_init_array+0x3c>)
 800b45a:	1b64      	subs	r4, r4, r5
 800b45c:	10a4      	asrs	r4, r4, #2
 800b45e:	2600      	movs	r6, #0
 800b460:	42a6      	cmp	r6, r4
 800b462:	d109      	bne.n	800b478 <__libc_init_array+0x24>
 800b464:	4d0b      	ldr	r5, [pc, #44]	@ (800b494 <__libc_init_array+0x40>)
 800b466:	4c0c      	ldr	r4, [pc, #48]	@ (800b498 <__libc_init_array+0x44>)
 800b468:	f000 fc66 	bl	800bd38 <_init>
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	2600      	movs	r6, #0
 800b472:	42a6      	cmp	r6, r4
 800b474:	d105      	bne.n	800b482 <__libc_init_array+0x2e>
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47c:	4798      	blx	r3
 800b47e:	3601      	adds	r6, #1
 800b480:	e7ee      	b.n	800b460 <__libc_init_array+0xc>
 800b482:	f855 3b04 	ldr.w	r3, [r5], #4
 800b486:	4798      	blx	r3
 800b488:	3601      	adds	r6, #1
 800b48a:	e7f2      	b.n	800b472 <__libc_init_array+0x1e>
 800b48c:	0800be0c 	.word	0x0800be0c
 800b490:	0800be0c 	.word	0x0800be0c
 800b494:	0800be0c 	.word	0x0800be0c
 800b498:	0800be10 	.word	0x0800be10

0800b49c <__retarget_lock_acquire_recursive>:
 800b49c:	4770      	bx	lr

0800b49e <__retarget_lock_release_recursive>:
 800b49e:	4770      	bx	lr

0800b4a0 <_free_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d041      	beq.n	800b52c <_free_r+0x8c>
 800b4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ac:	1f0c      	subs	r4, r1, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bfb8      	it	lt
 800b4b2:	18e4      	addlt	r4, r4, r3
 800b4b4:	f000 f8e0 	bl	800b678 <__malloc_lock>
 800b4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b530 <_free_r+0x90>)
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x2c>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c8:	f000 b8dc 	b.w	800b684 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x42>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	1821      	adds	r1, r4, r0
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1809      	addeq	r1, r1, r0
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x1e>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x4c>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x42>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1850      	adds	r0, r2, r1
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x6c>
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	4401      	add	r1, r0
 800b4f8:	1850      	adds	r0, r2, r1
 800b4fa:	4283      	cmp	r3, r0
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x22>
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	6053      	str	r3, [r2, #4]
 800b506:	4408      	add	r0, r1
 800b508:	6010      	str	r0, [r2, #0]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x22>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x74>
 800b50e:	230c      	movs	r3, #12
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x22>
 800b514:	6820      	ldr	r0, [r4, #0]
 800b516:	1821      	adds	r1, r4, r0
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf04      	itt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	bf04      	itt	eq
 800b524:	1809      	addeq	r1, r1, r0
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6054      	str	r4, [r2, #4]
 800b52a:	e7ca      	b.n	800b4c2 <_free_r+0x22>
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	bf00      	nop
 800b530:	20000a10 	.word	0x20000a10

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0f      	ldr	r6, [pc, #60]	@ (800b574 <sbrk_aligned+0x40>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f000 fba6 	bl	800bc90 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 fba1 	bl	800bc90 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d103      	bne.n	800b55a <sbrk_aligned+0x26>
 800b552:	f04f 34ff 	mov.w	r4, #4294967295
 800b556:	4620      	mov	r0, r4
 800b558:	bd70      	pop	{r4, r5, r6, pc}
 800b55a:	1cc4      	adds	r4, r0, #3
 800b55c:	f024 0403 	bic.w	r4, r4, #3
 800b560:	42a0      	cmp	r0, r4
 800b562:	d0f8      	beq.n	800b556 <sbrk_aligned+0x22>
 800b564:	1a21      	subs	r1, r4, r0
 800b566:	4628      	mov	r0, r5
 800b568:	f000 fb92 	bl	800bc90 <_sbrk_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d1f2      	bne.n	800b556 <sbrk_aligned+0x22>
 800b570:	e7ef      	b.n	800b552 <sbrk_aligned+0x1e>
 800b572:	bf00      	nop
 800b574:	20000a0c 	.word	0x20000a0c

0800b578 <_malloc_r>:
 800b578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b57c:	1ccd      	adds	r5, r1, #3
 800b57e:	f025 0503 	bic.w	r5, r5, #3
 800b582:	3508      	adds	r5, #8
 800b584:	2d0c      	cmp	r5, #12
 800b586:	bf38      	it	cc
 800b588:	250c      	movcc	r5, #12
 800b58a:	2d00      	cmp	r5, #0
 800b58c:	4606      	mov	r6, r0
 800b58e:	db01      	blt.n	800b594 <_malloc_r+0x1c>
 800b590:	42a9      	cmp	r1, r5
 800b592:	d904      	bls.n	800b59e <_malloc_r+0x26>
 800b594:	230c      	movs	r3, #12
 800b596:	6033      	str	r3, [r6, #0]
 800b598:	2000      	movs	r0, #0
 800b59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b674 <_malloc_r+0xfc>
 800b5a2:	f000 f869 	bl	800b678 <__malloc_lock>
 800b5a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5aa:	461c      	mov	r4, r3
 800b5ac:	bb44      	cbnz	r4, 800b600 <_malloc_r+0x88>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff ffbf 	bl	800b534 <sbrk_aligned>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	d158      	bne.n	800b66e <_malloc_r+0xf6>
 800b5bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b5c0:	4627      	mov	r7, r4
 800b5c2:	2f00      	cmp	r7, #0
 800b5c4:	d143      	bne.n	800b64e <_malloc_r+0xd6>
 800b5c6:	2c00      	cmp	r4, #0
 800b5c8:	d04b      	beq.n	800b662 <_malloc_r+0xea>
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	eb04 0903 	add.w	r9, r4, r3
 800b5d4:	f000 fb5c 	bl	800bc90 <_sbrk_r>
 800b5d8:	4581      	cmp	r9, r0
 800b5da:	d142      	bne.n	800b662 <_malloc_r+0xea>
 800b5dc:	6821      	ldr	r1, [r4, #0]
 800b5de:	1a6d      	subs	r5, r5, r1
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7ff ffa6 	bl	800b534 <sbrk_aligned>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d03a      	beq.n	800b662 <_malloc_r+0xea>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	442b      	add	r3, r5
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	bb62      	cbnz	r2, 800b654 <_malloc_r+0xdc>
 800b5fa:	f8c8 7000 	str.w	r7, [r8]
 800b5fe:	e00f      	b.n	800b620 <_malloc_r+0xa8>
 800b600:	6822      	ldr	r2, [r4, #0]
 800b602:	1b52      	subs	r2, r2, r5
 800b604:	d420      	bmi.n	800b648 <_malloc_r+0xd0>
 800b606:	2a0b      	cmp	r2, #11
 800b608:	d917      	bls.n	800b63a <_malloc_r+0xc2>
 800b60a:	1961      	adds	r1, r4, r5
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	6025      	str	r5, [r4, #0]
 800b610:	bf18      	it	ne
 800b612:	6059      	strne	r1, [r3, #4]
 800b614:	6863      	ldr	r3, [r4, #4]
 800b616:	bf08      	it	eq
 800b618:	f8c8 1000 	streq.w	r1, [r8]
 800b61c:	5162      	str	r2, [r4, r5]
 800b61e:	604b      	str	r3, [r1, #4]
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f82f 	bl	800b684 <__malloc_unlock>
 800b626:	f104 000b 	add.w	r0, r4, #11
 800b62a:	1d23      	adds	r3, r4, #4
 800b62c:	f020 0007 	bic.w	r0, r0, #7
 800b630:	1ac2      	subs	r2, r0, r3
 800b632:	bf1c      	itt	ne
 800b634:	1a1b      	subne	r3, r3, r0
 800b636:	50a3      	strne	r3, [r4, r2]
 800b638:	e7af      	b.n	800b59a <_malloc_r+0x22>
 800b63a:	6862      	ldr	r2, [r4, #4]
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	bf0c      	ite	eq
 800b640:	f8c8 2000 	streq.w	r2, [r8]
 800b644:	605a      	strne	r2, [r3, #4]
 800b646:	e7eb      	b.n	800b620 <_malloc_r+0xa8>
 800b648:	4623      	mov	r3, r4
 800b64a:	6864      	ldr	r4, [r4, #4]
 800b64c:	e7ae      	b.n	800b5ac <_malloc_r+0x34>
 800b64e:	463c      	mov	r4, r7
 800b650:	687f      	ldr	r7, [r7, #4]
 800b652:	e7b6      	b.n	800b5c2 <_malloc_r+0x4a>
 800b654:	461a      	mov	r2, r3
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	42a3      	cmp	r3, r4
 800b65a:	d1fb      	bne.n	800b654 <_malloc_r+0xdc>
 800b65c:	2300      	movs	r3, #0
 800b65e:	6053      	str	r3, [r2, #4]
 800b660:	e7de      	b.n	800b620 <_malloc_r+0xa8>
 800b662:	230c      	movs	r3, #12
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	4630      	mov	r0, r6
 800b668:	f000 f80c 	bl	800b684 <__malloc_unlock>
 800b66c:	e794      	b.n	800b598 <_malloc_r+0x20>
 800b66e:	6005      	str	r5, [r0, #0]
 800b670:	e7d6      	b.n	800b620 <_malloc_r+0xa8>
 800b672:	bf00      	nop
 800b674:	20000a10 	.word	0x20000a10

0800b678 <__malloc_lock>:
 800b678:	4801      	ldr	r0, [pc, #4]	@ (800b680 <__malloc_lock+0x8>)
 800b67a:	f7ff bf0f 	b.w	800b49c <__retarget_lock_acquire_recursive>
 800b67e:	bf00      	nop
 800b680:	20000a08 	.word	0x20000a08

0800b684 <__malloc_unlock>:
 800b684:	4801      	ldr	r0, [pc, #4]	@ (800b68c <__malloc_unlock+0x8>)
 800b686:	f7ff bf0a 	b.w	800b49e <__retarget_lock_release_recursive>
 800b68a:	bf00      	nop
 800b68c:	20000a08 	.word	0x20000a08

0800b690 <__ssputs_r>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	688e      	ldr	r6, [r1, #8]
 800b696:	461f      	mov	r7, r3
 800b698:	42be      	cmp	r6, r7
 800b69a:	680b      	ldr	r3, [r1, #0]
 800b69c:	4682      	mov	sl, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	4690      	mov	r8, r2
 800b6a2:	d82d      	bhi.n	800b700 <__ssputs_r+0x70>
 800b6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6ac:	d026      	beq.n	800b6fc <__ssputs_r+0x6c>
 800b6ae:	6965      	ldr	r5, [r4, #20]
 800b6b0:	6909      	ldr	r1, [r1, #16]
 800b6b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6b6:	eba3 0901 	sub.w	r9, r3, r1
 800b6ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6be:	1c7b      	adds	r3, r7, #1
 800b6c0:	444b      	add	r3, r9
 800b6c2:	106d      	asrs	r5, r5, #1
 800b6c4:	429d      	cmp	r5, r3
 800b6c6:	bf38      	it	cc
 800b6c8:	461d      	movcc	r5, r3
 800b6ca:	0553      	lsls	r3, r2, #21
 800b6cc:	d527      	bpl.n	800b71e <__ssputs_r+0x8e>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f7ff ff52 	bl	800b578 <_malloc_r>
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	b360      	cbz	r0, 800b732 <__ssputs_r+0xa2>
 800b6d8:	6921      	ldr	r1, [r4, #16]
 800b6da:	464a      	mov	r2, r9
 800b6dc:	f000 fae8 	bl	800bcb0 <memcpy>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	6126      	str	r6, [r4, #16]
 800b6ee:	6165      	str	r5, [r4, #20]
 800b6f0:	444e      	add	r6, r9
 800b6f2:	eba5 0509 	sub.w	r5, r5, r9
 800b6f6:	6026      	str	r6, [r4, #0]
 800b6f8:	60a5      	str	r5, [r4, #8]
 800b6fa:	463e      	mov	r6, r7
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	d900      	bls.n	800b702 <__ssputs_r+0x72>
 800b700:	463e      	mov	r6, r7
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	4632      	mov	r2, r6
 800b706:	4641      	mov	r1, r8
 800b708:	f000 faa8 	bl	800bc5c <memmove>
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	1b9b      	subs	r3, r3, r6
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	4433      	add	r3, r6
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	2000      	movs	r0, #0
 800b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71e:	462a      	mov	r2, r5
 800b720:	f000 fad4 	bl	800bccc <_realloc_r>
 800b724:	4606      	mov	r6, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d1e0      	bne.n	800b6ec <__ssputs_r+0x5c>
 800b72a:	6921      	ldr	r1, [r4, #16]
 800b72c:	4650      	mov	r0, sl
 800b72e:	f7ff feb7 	bl	800b4a0 <_free_r>
 800b732:	230c      	movs	r3, #12
 800b734:	f8ca 3000 	str.w	r3, [sl]
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	e7e9      	b.n	800b71a <__ssputs_r+0x8a>
	...

0800b748 <_svfiprintf_r>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	4698      	mov	r8, r3
 800b74e:	898b      	ldrh	r3, [r1, #12]
 800b750:	061b      	lsls	r3, r3, #24
 800b752:	b09d      	sub	sp, #116	@ 0x74
 800b754:	4607      	mov	r7, r0
 800b756:	460d      	mov	r5, r1
 800b758:	4614      	mov	r4, r2
 800b75a:	d510      	bpl.n	800b77e <_svfiprintf_r+0x36>
 800b75c:	690b      	ldr	r3, [r1, #16]
 800b75e:	b973      	cbnz	r3, 800b77e <_svfiprintf_r+0x36>
 800b760:	2140      	movs	r1, #64	@ 0x40
 800b762:	f7ff ff09 	bl	800b578 <_malloc_r>
 800b766:	6028      	str	r0, [r5, #0]
 800b768:	6128      	str	r0, [r5, #16]
 800b76a:	b930      	cbnz	r0, 800b77a <_svfiprintf_r+0x32>
 800b76c:	230c      	movs	r3, #12
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	b01d      	add	sp, #116	@ 0x74
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	2340      	movs	r3, #64	@ 0x40
 800b77c:	616b      	str	r3, [r5, #20]
 800b77e:	2300      	movs	r3, #0
 800b780:	9309      	str	r3, [sp, #36]	@ 0x24
 800b782:	2320      	movs	r3, #32
 800b784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b788:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78c:	2330      	movs	r3, #48	@ 0x30
 800b78e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b92c <_svfiprintf_r+0x1e4>
 800b792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b796:	f04f 0901 	mov.w	r9, #1
 800b79a:	4623      	mov	r3, r4
 800b79c:	469a      	mov	sl, r3
 800b79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a2:	b10a      	cbz	r2, 800b7a8 <_svfiprintf_r+0x60>
 800b7a4:	2a25      	cmp	r2, #37	@ 0x25
 800b7a6:	d1f9      	bne.n	800b79c <_svfiprintf_r+0x54>
 800b7a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ac:	d00b      	beq.n	800b7c6 <_svfiprintf_r+0x7e>
 800b7ae:	465b      	mov	r3, fp
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ff6b 	bl	800b690 <__ssputs_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f000 80a7 	beq.w	800b90e <_svfiprintf_r+0x1c6>
 800b7c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c2:	445a      	add	r2, fp
 800b7c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 809f 	beq.w	800b90e <_svfiprintf_r+0x1c6>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7da:	f10a 0a01 	add.w	sl, sl, #1
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	9307      	str	r3, [sp, #28]
 800b7e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e8:	4654      	mov	r4, sl
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f0:	484e      	ldr	r0, [pc, #312]	@ (800b92c <_svfiprintf_r+0x1e4>)
 800b7f2:	f7f4 fd1d 	bl	8000230 <memchr>
 800b7f6:	9a04      	ldr	r2, [sp, #16]
 800b7f8:	b9d8      	cbnz	r0, 800b832 <_svfiprintf_r+0xea>
 800b7fa:	06d0      	lsls	r0, r2, #27
 800b7fc:	bf44      	itt	mi
 800b7fe:	2320      	movmi	r3, #32
 800b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b804:	0711      	lsls	r1, r2, #28
 800b806:	bf44      	itt	mi
 800b808:	232b      	movmi	r3, #43	@ 0x2b
 800b80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80e:	f89a 3000 	ldrb.w	r3, [sl]
 800b812:	2b2a      	cmp	r3, #42	@ 0x2a
 800b814:	d015      	beq.n	800b842 <_svfiprintf_r+0xfa>
 800b816:	9a07      	ldr	r2, [sp, #28]
 800b818:	4654      	mov	r4, sl
 800b81a:	2000      	movs	r0, #0
 800b81c:	f04f 0c0a 	mov.w	ip, #10
 800b820:	4621      	mov	r1, r4
 800b822:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b826:	3b30      	subs	r3, #48	@ 0x30
 800b828:	2b09      	cmp	r3, #9
 800b82a:	d94b      	bls.n	800b8c4 <_svfiprintf_r+0x17c>
 800b82c:	b1b0      	cbz	r0, 800b85c <_svfiprintf_r+0x114>
 800b82e:	9207      	str	r2, [sp, #28]
 800b830:	e014      	b.n	800b85c <_svfiprintf_r+0x114>
 800b832:	eba0 0308 	sub.w	r3, r0, r8
 800b836:	fa09 f303 	lsl.w	r3, r9, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	46a2      	mov	sl, r4
 800b840:	e7d2      	b.n	800b7e8 <_svfiprintf_r+0xa0>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	1d19      	adds	r1, r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	9103      	str	r1, [sp, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfbb      	ittet	lt
 800b84e:	425b      	neglt	r3, r3
 800b850:	f042 0202 	orrlt.w	r2, r2, #2
 800b854:	9307      	strge	r3, [sp, #28]
 800b856:	9307      	strlt	r3, [sp, #28]
 800b858:	bfb8      	it	lt
 800b85a:	9204      	strlt	r2, [sp, #16]
 800b85c:	7823      	ldrb	r3, [r4, #0]
 800b85e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b860:	d10a      	bne.n	800b878 <_svfiprintf_r+0x130>
 800b862:	7863      	ldrb	r3, [r4, #1]
 800b864:	2b2a      	cmp	r3, #42	@ 0x2a
 800b866:	d132      	bne.n	800b8ce <_svfiprintf_r+0x186>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	1d1a      	adds	r2, r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	9203      	str	r2, [sp, #12]
 800b870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b874:	3402      	adds	r4, #2
 800b876:	9305      	str	r3, [sp, #20]
 800b878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b93c <_svfiprintf_r+0x1f4>
 800b87c:	7821      	ldrb	r1, [r4, #0]
 800b87e:	2203      	movs	r2, #3
 800b880:	4650      	mov	r0, sl
 800b882:	f7f4 fcd5 	bl	8000230 <memchr>
 800b886:	b138      	cbz	r0, 800b898 <_svfiprintf_r+0x150>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	eba0 000a 	sub.w	r0, r0, sl
 800b88e:	2240      	movs	r2, #64	@ 0x40
 800b890:	4082      	lsls	r2, r0
 800b892:	4313      	orrs	r3, r2
 800b894:	3401      	adds	r4, #1
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89c:	4824      	ldr	r0, [pc, #144]	@ (800b930 <_svfiprintf_r+0x1e8>)
 800b89e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a2:	2206      	movs	r2, #6
 800b8a4:	f7f4 fcc4 	bl	8000230 <memchr>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d036      	beq.n	800b91a <_svfiprintf_r+0x1d2>
 800b8ac:	4b21      	ldr	r3, [pc, #132]	@ (800b934 <_svfiprintf_r+0x1ec>)
 800b8ae:	bb1b      	cbnz	r3, 800b8f8 <_svfiprintf_r+0x1b0>
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	3307      	adds	r3, #7
 800b8b4:	f023 0307 	bic.w	r3, r3, #7
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	9303      	str	r3, [sp, #12]
 800b8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8be:	4433      	add	r3, r6
 800b8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c2:	e76a      	b.n	800b79a <_svfiprintf_r+0x52>
 800b8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	e7a8      	b.n	800b820 <_svfiprintf_r+0xd8>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	3401      	adds	r4, #1
 800b8d2:	9305      	str	r3, [sp, #20]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f04f 0c0a 	mov.w	ip, #10
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8e0:	3a30      	subs	r2, #48	@ 0x30
 800b8e2:	2a09      	cmp	r2, #9
 800b8e4:	d903      	bls.n	800b8ee <_svfiprintf_r+0x1a6>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0c6      	beq.n	800b878 <_svfiprintf_r+0x130>
 800b8ea:	9105      	str	r1, [sp, #20]
 800b8ec:	e7c4      	b.n	800b878 <_svfiprintf_r+0x130>
 800b8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e7f0      	b.n	800b8da <_svfiprintf_r+0x192>
 800b8f8:	ab03      	add	r3, sp, #12
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b938 <_svfiprintf_r+0x1f0>)
 800b900:	a904      	add	r1, sp, #16
 800b902:	4638      	mov	r0, r7
 800b904:	f3af 8000 	nop.w
 800b908:	1c42      	adds	r2, r0, #1
 800b90a:	4606      	mov	r6, r0
 800b90c:	d1d6      	bne.n	800b8bc <_svfiprintf_r+0x174>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	065b      	lsls	r3, r3, #25
 800b912:	f53f af2d 	bmi.w	800b770 <_svfiprintf_r+0x28>
 800b916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b918:	e72c      	b.n	800b774 <_svfiprintf_r+0x2c>
 800b91a:	ab03      	add	r3, sp, #12
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	462a      	mov	r2, r5
 800b920:	4b05      	ldr	r3, [pc, #20]	@ (800b938 <_svfiprintf_r+0x1f0>)
 800b922:	a904      	add	r1, sp, #16
 800b924:	4638      	mov	r0, r7
 800b926:	f000 f879 	bl	800ba1c <_printf_i>
 800b92a:	e7ed      	b.n	800b908 <_svfiprintf_r+0x1c0>
 800b92c:	0800bdd0 	.word	0x0800bdd0
 800b930:	0800bdda 	.word	0x0800bdda
 800b934:	00000000 	.word	0x00000000
 800b938:	0800b691 	.word	0x0800b691
 800b93c:	0800bdd6 	.word	0x0800bdd6

0800b940 <_printf_common>:
 800b940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b944:	4616      	mov	r6, r2
 800b946:	4698      	mov	r8, r3
 800b948:	688a      	ldr	r2, [r1, #8]
 800b94a:	690b      	ldr	r3, [r1, #16]
 800b94c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b950:	4293      	cmp	r3, r2
 800b952:	bfb8      	it	lt
 800b954:	4613      	movlt	r3, r2
 800b956:	6033      	str	r3, [r6, #0]
 800b958:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b95c:	4607      	mov	r7, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	b10a      	cbz	r2, 800b966 <_printf_common+0x26>
 800b962:	3301      	adds	r3, #1
 800b964:	6033      	str	r3, [r6, #0]
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	0699      	lsls	r1, r3, #26
 800b96a:	bf42      	ittt	mi
 800b96c:	6833      	ldrmi	r3, [r6, #0]
 800b96e:	3302      	addmi	r3, #2
 800b970:	6033      	strmi	r3, [r6, #0]
 800b972:	6825      	ldr	r5, [r4, #0]
 800b974:	f015 0506 	ands.w	r5, r5, #6
 800b978:	d106      	bne.n	800b988 <_printf_common+0x48>
 800b97a:	f104 0a19 	add.w	sl, r4, #25
 800b97e:	68e3      	ldr	r3, [r4, #12]
 800b980:	6832      	ldr	r2, [r6, #0]
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	42ab      	cmp	r3, r5
 800b986:	dc26      	bgt.n	800b9d6 <_printf_common+0x96>
 800b988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	3b00      	subs	r3, #0
 800b990:	bf18      	it	ne
 800b992:	2301      	movne	r3, #1
 800b994:	0692      	lsls	r2, r2, #26
 800b996:	d42b      	bmi.n	800b9f0 <_printf_common+0xb0>
 800b998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b99c:	4641      	mov	r1, r8
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c8      	blx	r9
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	d01e      	beq.n	800b9e4 <_printf_common+0xa4>
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	6922      	ldr	r2, [r4, #16]
 800b9aa:	f003 0306 	and.w	r3, r3, #6
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	bf02      	ittt	eq
 800b9b2:	68e5      	ldreq	r5, [r4, #12]
 800b9b4:	6833      	ldreq	r3, [r6, #0]
 800b9b6:	1aed      	subeq	r5, r5, r3
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	bf0c      	ite	eq
 800b9bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9c0:	2500      	movne	r5, #0
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	bfc4      	itt	gt
 800b9c6:	1a9b      	subgt	r3, r3, r2
 800b9c8:	18ed      	addgt	r5, r5, r3
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	341a      	adds	r4, #26
 800b9ce:	42b5      	cmp	r5, r6
 800b9d0:	d11a      	bne.n	800ba08 <_printf_common+0xc8>
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	e008      	b.n	800b9e8 <_printf_common+0xa8>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4641      	mov	r1, r8
 800b9dc:	4638      	mov	r0, r7
 800b9de:	47c8      	blx	r9
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d103      	bne.n	800b9ec <_printf_common+0xac>
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	e7c6      	b.n	800b97e <_printf_common+0x3e>
 800b9f0:	18e1      	adds	r1, r4, r3
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	2030      	movs	r0, #48	@ 0x30
 800b9f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9fa:	4422      	add	r2, r4
 800b9fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba04:	3302      	adds	r3, #2
 800ba06:	e7c7      	b.n	800b998 <_printf_common+0x58>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	4638      	mov	r0, r7
 800ba10:	47c8      	blx	r9
 800ba12:	3001      	adds	r0, #1
 800ba14:	d0e6      	beq.n	800b9e4 <_printf_common+0xa4>
 800ba16:	3601      	adds	r6, #1
 800ba18:	e7d9      	b.n	800b9ce <_printf_common+0x8e>
	...

0800ba1c <_printf_i>:
 800ba1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	7e0f      	ldrb	r7, [r1, #24]
 800ba22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba24:	2f78      	cmp	r7, #120	@ 0x78
 800ba26:	4691      	mov	r9, r2
 800ba28:	4680      	mov	r8, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	469a      	mov	sl, r3
 800ba2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba32:	d807      	bhi.n	800ba44 <_printf_i+0x28>
 800ba34:	2f62      	cmp	r7, #98	@ 0x62
 800ba36:	d80a      	bhi.n	800ba4e <_printf_i+0x32>
 800ba38:	2f00      	cmp	r7, #0
 800ba3a:	f000 80d2 	beq.w	800bbe2 <_printf_i+0x1c6>
 800ba3e:	2f58      	cmp	r7, #88	@ 0x58
 800ba40:	f000 80b9 	beq.w	800bbb6 <_printf_i+0x19a>
 800ba44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba4c:	e03a      	b.n	800bac4 <_printf_i+0xa8>
 800ba4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba52:	2b15      	cmp	r3, #21
 800ba54:	d8f6      	bhi.n	800ba44 <_printf_i+0x28>
 800ba56:	a101      	add	r1, pc, #4	@ (adr r1, 800ba5c <_printf_i+0x40>)
 800ba58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba5c:	0800bab5 	.word	0x0800bab5
 800ba60:	0800bac9 	.word	0x0800bac9
 800ba64:	0800ba45 	.word	0x0800ba45
 800ba68:	0800ba45 	.word	0x0800ba45
 800ba6c:	0800ba45 	.word	0x0800ba45
 800ba70:	0800ba45 	.word	0x0800ba45
 800ba74:	0800bac9 	.word	0x0800bac9
 800ba78:	0800ba45 	.word	0x0800ba45
 800ba7c:	0800ba45 	.word	0x0800ba45
 800ba80:	0800ba45 	.word	0x0800ba45
 800ba84:	0800ba45 	.word	0x0800ba45
 800ba88:	0800bbc9 	.word	0x0800bbc9
 800ba8c:	0800baf3 	.word	0x0800baf3
 800ba90:	0800bb83 	.word	0x0800bb83
 800ba94:	0800ba45 	.word	0x0800ba45
 800ba98:	0800ba45 	.word	0x0800ba45
 800ba9c:	0800bbeb 	.word	0x0800bbeb
 800baa0:	0800ba45 	.word	0x0800ba45
 800baa4:	0800baf3 	.word	0x0800baf3
 800baa8:	0800ba45 	.word	0x0800ba45
 800baac:	0800ba45 	.word	0x0800ba45
 800bab0:	0800bb8b 	.word	0x0800bb8b
 800bab4:	6833      	ldr	r3, [r6, #0]
 800bab6:	1d1a      	adds	r2, r3, #4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6032      	str	r2, [r6, #0]
 800babc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bac0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bac4:	2301      	movs	r3, #1
 800bac6:	e09d      	b.n	800bc04 <_printf_i+0x1e8>
 800bac8:	6833      	ldr	r3, [r6, #0]
 800baca:	6820      	ldr	r0, [r4, #0]
 800bacc:	1d19      	adds	r1, r3, #4
 800bace:	6031      	str	r1, [r6, #0]
 800bad0:	0606      	lsls	r6, r0, #24
 800bad2:	d501      	bpl.n	800bad8 <_printf_i+0xbc>
 800bad4:	681d      	ldr	r5, [r3, #0]
 800bad6:	e003      	b.n	800bae0 <_printf_i+0xc4>
 800bad8:	0645      	lsls	r5, r0, #25
 800bada:	d5fb      	bpl.n	800bad4 <_printf_i+0xb8>
 800badc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	da03      	bge.n	800baec <_printf_i+0xd0>
 800bae4:	232d      	movs	r3, #45	@ 0x2d
 800bae6:	426d      	negs	r5, r5
 800bae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baec:	4859      	ldr	r0, [pc, #356]	@ (800bc54 <_printf_i+0x238>)
 800baee:	230a      	movs	r3, #10
 800baf0:	e011      	b.n	800bb16 <_printf_i+0xfa>
 800baf2:	6821      	ldr	r1, [r4, #0]
 800baf4:	6833      	ldr	r3, [r6, #0]
 800baf6:	0608      	lsls	r0, r1, #24
 800baf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bafc:	d402      	bmi.n	800bb04 <_printf_i+0xe8>
 800bafe:	0649      	lsls	r1, r1, #25
 800bb00:	bf48      	it	mi
 800bb02:	b2ad      	uxthmi	r5, r5
 800bb04:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb06:	4853      	ldr	r0, [pc, #332]	@ (800bc54 <_printf_i+0x238>)
 800bb08:	6033      	str	r3, [r6, #0]
 800bb0a:	bf14      	ite	ne
 800bb0c:	230a      	movne	r3, #10
 800bb0e:	2308      	moveq	r3, #8
 800bb10:	2100      	movs	r1, #0
 800bb12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb16:	6866      	ldr	r6, [r4, #4]
 800bb18:	60a6      	str	r6, [r4, #8]
 800bb1a:	2e00      	cmp	r6, #0
 800bb1c:	bfa2      	ittt	ge
 800bb1e:	6821      	ldrge	r1, [r4, #0]
 800bb20:	f021 0104 	bicge.w	r1, r1, #4
 800bb24:	6021      	strge	r1, [r4, #0]
 800bb26:	b90d      	cbnz	r5, 800bb2c <_printf_i+0x110>
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	d04b      	beq.n	800bbc4 <_printf_i+0x1a8>
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb32:	fb03 5711 	mls	r7, r3, r1, r5
 800bb36:	5dc7      	ldrb	r7, [r0, r7]
 800bb38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb3c:	462f      	mov	r7, r5
 800bb3e:	42bb      	cmp	r3, r7
 800bb40:	460d      	mov	r5, r1
 800bb42:	d9f4      	bls.n	800bb2e <_printf_i+0x112>
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d10b      	bne.n	800bb60 <_printf_i+0x144>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	07df      	lsls	r7, r3, #31
 800bb4c:	d508      	bpl.n	800bb60 <_printf_i+0x144>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	6861      	ldr	r1, [r4, #4]
 800bb52:	4299      	cmp	r1, r3
 800bb54:	bfde      	ittt	le
 800bb56:	2330      	movle	r3, #48	@ 0x30
 800bb58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb60:	1b92      	subs	r2, r2, r6
 800bb62:	6122      	str	r2, [r4, #16]
 800bb64:	f8cd a000 	str.w	sl, [sp]
 800bb68:	464b      	mov	r3, r9
 800bb6a:	aa03      	add	r2, sp, #12
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4640      	mov	r0, r8
 800bb70:	f7ff fee6 	bl	800b940 <_printf_common>
 800bb74:	3001      	adds	r0, #1
 800bb76:	d14a      	bne.n	800bc0e <_printf_i+0x1f2>
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	b004      	add	sp, #16
 800bb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	f043 0320 	orr.w	r3, r3, #32
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	4833      	ldr	r0, [pc, #204]	@ (800bc58 <_printf_i+0x23c>)
 800bb8c:	2778      	movs	r7, #120	@ 0x78
 800bb8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	6831      	ldr	r1, [r6, #0]
 800bb96:	061f      	lsls	r7, r3, #24
 800bb98:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb9c:	d402      	bmi.n	800bba4 <_printf_i+0x188>
 800bb9e:	065f      	lsls	r7, r3, #25
 800bba0:	bf48      	it	mi
 800bba2:	b2ad      	uxthmi	r5, r5
 800bba4:	6031      	str	r1, [r6, #0]
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	bf44      	itt	mi
 800bbaa:	f043 0320 	orrmi.w	r3, r3, #32
 800bbae:	6023      	strmi	r3, [r4, #0]
 800bbb0:	b11d      	cbz	r5, 800bbba <_printf_i+0x19e>
 800bbb2:	2310      	movs	r3, #16
 800bbb4:	e7ac      	b.n	800bb10 <_printf_i+0xf4>
 800bbb6:	4827      	ldr	r0, [pc, #156]	@ (800bc54 <_printf_i+0x238>)
 800bbb8:	e7e9      	b.n	800bb8e <_printf_i+0x172>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	f023 0320 	bic.w	r3, r3, #32
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	e7f6      	b.n	800bbb2 <_printf_i+0x196>
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	e7bd      	b.n	800bb44 <_printf_i+0x128>
 800bbc8:	6833      	ldr	r3, [r6, #0]
 800bbca:	6825      	ldr	r5, [r4, #0]
 800bbcc:	6961      	ldr	r1, [r4, #20]
 800bbce:	1d18      	adds	r0, r3, #4
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	062e      	lsls	r6, r5, #24
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	d501      	bpl.n	800bbdc <_printf_i+0x1c0>
 800bbd8:	6019      	str	r1, [r3, #0]
 800bbda:	e002      	b.n	800bbe2 <_printf_i+0x1c6>
 800bbdc:	0668      	lsls	r0, r5, #25
 800bbde:	d5fb      	bpl.n	800bbd8 <_printf_i+0x1bc>
 800bbe0:	8019      	strh	r1, [r3, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	4616      	mov	r6, r2
 800bbe8:	e7bc      	b.n	800bb64 <_printf_i+0x148>
 800bbea:	6833      	ldr	r3, [r6, #0]
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	6032      	str	r2, [r6, #0]
 800bbf0:	681e      	ldr	r6, [r3, #0]
 800bbf2:	6862      	ldr	r2, [r4, #4]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f7f4 fb1a 	bl	8000230 <memchr>
 800bbfc:	b108      	cbz	r0, 800bc02 <_printf_i+0x1e6>
 800bbfe:	1b80      	subs	r0, r0, r6
 800bc00:	6060      	str	r0, [r4, #4]
 800bc02:	6863      	ldr	r3, [r4, #4]
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	2300      	movs	r3, #0
 800bc08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc0c:	e7aa      	b.n	800bb64 <_printf_i+0x148>
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	4632      	mov	r2, r6
 800bc12:	4649      	mov	r1, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	47d0      	blx	sl
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d0ad      	beq.n	800bb78 <_printf_i+0x15c>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	079b      	lsls	r3, r3, #30
 800bc20:	d413      	bmi.n	800bc4a <_printf_i+0x22e>
 800bc22:	68e0      	ldr	r0, [r4, #12]
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	4298      	cmp	r0, r3
 800bc28:	bfb8      	it	lt
 800bc2a:	4618      	movlt	r0, r3
 800bc2c:	e7a6      	b.n	800bb7c <_printf_i+0x160>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	4632      	mov	r2, r6
 800bc32:	4649      	mov	r1, r9
 800bc34:	4640      	mov	r0, r8
 800bc36:	47d0      	blx	sl
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d09d      	beq.n	800bb78 <_printf_i+0x15c>
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	68e3      	ldr	r3, [r4, #12]
 800bc40:	9903      	ldr	r1, [sp, #12]
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	dcf2      	bgt.n	800bc2e <_printf_i+0x212>
 800bc48:	e7eb      	b.n	800bc22 <_printf_i+0x206>
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	f104 0619 	add.w	r6, r4, #25
 800bc50:	e7f5      	b.n	800bc3e <_printf_i+0x222>
 800bc52:	bf00      	nop
 800bc54:	0800bde1 	.word	0x0800bde1
 800bc58:	0800bdf2 	.word	0x0800bdf2

0800bc5c <memmove>:
 800bc5c:	4288      	cmp	r0, r1
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	eb01 0402 	add.w	r4, r1, r2
 800bc64:	d902      	bls.n	800bc6c <memmove+0x10>
 800bc66:	4284      	cmp	r4, r0
 800bc68:	4623      	mov	r3, r4
 800bc6a:	d807      	bhi.n	800bc7c <memmove+0x20>
 800bc6c:	1e43      	subs	r3, r0, #1
 800bc6e:	42a1      	cmp	r1, r4
 800bc70:	d008      	beq.n	800bc84 <memmove+0x28>
 800bc72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc7a:	e7f8      	b.n	800bc6e <memmove+0x12>
 800bc7c:	4402      	add	r2, r0
 800bc7e:	4601      	mov	r1, r0
 800bc80:	428a      	cmp	r2, r1
 800bc82:	d100      	bne.n	800bc86 <memmove+0x2a>
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc8e:	e7f7      	b.n	800bc80 <memmove+0x24>

0800bc90 <_sbrk_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d06      	ldr	r5, [pc, #24]	@ (800bcac <_sbrk_r+0x1c>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	602b      	str	r3, [r5, #0]
 800bc9c:	f7f6 ffd8 	bl	8002c50 <_sbrk>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_sbrk_r+0x1a>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_sbrk_r+0x1a>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	20000a04 	.word	0x20000a04

0800bcb0 <memcpy>:
 800bcb0:	440a      	add	r2, r1
 800bcb2:	4291      	cmp	r1, r2
 800bcb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcb8:	d100      	bne.n	800bcbc <memcpy+0xc>
 800bcba:	4770      	bx	lr
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc6:	4291      	cmp	r1, r2
 800bcc8:	d1f9      	bne.n	800bcbe <memcpy+0xe>
 800bcca:	bd10      	pop	{r4, pc}

0800bccc <_realloc_r>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	4680      	mov	r8, r0
 800bcd2:	4615      	mov	r5, r2
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	b921      	cbnz	r1, 800bce2 <_realloc_r+0x16>
 800bcd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	4611      	mov	r1, r2
 800bcde:	f7ff bc4b 	b.w	800b578 <_malloc_r>
 800bce2:	b92a      	cbnz	r2, 800bcf0 <_realloc_r+0x24>
 800bce4:	f7ff fbdc 	bl	800b4a0 <_free_r>
 800bce8:	2400      	movs	r4, #0
 800bcea:	4620      	mov	r0, r4
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf0:	f000 f81a 	bl	800bd28 <_malloc_usable_size_r>
 800bcf4:	4285      	cmp	r5, r0
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	d802      	bhi.n	800bd00 <_realloc_r+0x34>
 800bcfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bcfe:	d8f4      	bhi.n	800bcea <_realloc_r+0x1e>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fc38 	bl	800b578 <_malloc_r>
 800bd08:	4607      	mov	r7, r0
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0ec      	beq.n	800bce8 <_realloc_r+0x1c>
 800bd0e:	42b5      	cmp	r5, r6
 800bd10:	462a      	mov	r2, r5
 800bd12:	4621      	mov	r1, r4
 800bd14:	bf28      	it	cs
 800bd16:	4632      	movcs	r2, r6
 800bd18:	f7ff ffca 	bl	800bcb0 <memcpy>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4640      	mov	r0, r8
 800bd20:	f7ff fbbe 	bl	800b4a0 <_free_r>
 800bd24:	463c      	mov	r4, r7
 800bd26:	e7e0      	b.n	800bcea <_realloc_r+0x1e>

0800bd28 <_malloc_usable_size_r>:
 800bd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd2c:	1f18      	subs	r0, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	bfbc      	itt	lt
 800bd32:	580b      	ldrlt	r3, [r1, r0]
 800bd34:	18c0      	addlt	r0, r0, r3
 800bd36:	4770      	bx	lr

0800bd38 <_init>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr

0800bd44 <_fini>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr
