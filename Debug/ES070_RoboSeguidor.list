
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c340  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800c520  0800c520  0000d520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d4  0800c5d4  0000e098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d4  0800c5d4  0000d5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5dc  0800c5dc  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5e0  0800c5e0  0000d5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c5e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  20000098  0800c67c  0000e098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  0800c67c  0000ead4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b76  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419e  00000000  00000000  0002ec3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00032de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143f  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b1d6  00000000  00000000  00035c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022536  00000000  00000000  00060e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116f85  00000000  00000000  0008333b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a2c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0019a304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001a1714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c508 	.word	0x0800c508

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800c508 	.word	0x0800c508

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_d2f>:
 8000648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800064c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000650:	bf24      	itt	cs
 8000652:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000656:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800065a:	d90d      	bls.n	8000678 <__aeabi_d2f+0x30>
 800065c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000660:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000664:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000668:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800066c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000670:	bf08      	it	eq
 8000672:	f020 0001 	biceq.w	r0, r0, #1
 8000676:	4770      	bx	lr
 8000678:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800067c:	d121      	bne.n	80006c2 <__aeabi_d2f+0x7a>
 800067e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000682:	bfbc      	itt	lt
 8000684:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000688:	4770      	bxlt	lr
 800068a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800068e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000692:	f1c2 0218 	rsb	r2, r2, #24
 8000696:	f1c2 0c20 	rsb	ip, r2, #32
 800069a:	fa10 f30c 	lsls.w	r3, r0, ip
 800069e:	fa20 f002 	lsr.w	r0, r0, r2
 80006a2:	bf18      	it	ne
 80006a4:	f040 0001 	orrne.w	r0, r0, #1
 80006a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006b4:	ea40 000c 	orr.w	r0, r0, ip
 80006b8:	fa23 f302 	lsr.w	r3, r3, r2
 80006bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006c0:	e7cc      	b.n	800065c <__aeabi_d2f+0x14>
 80006c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006c6:	d107      	bne.n	80006d8 <__aeabi_d2f+0x90>
 80006c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006cc:	bf1e      	ittt	ne
 80006ce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006d2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006d6:	4770      	bxne	lr
 80006d8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006dc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <__aeabi_uldivmod>:
 80006e8:	b953      	cbnz	r3, 8000700 <__aeabi_uldivmod+0x18>
 80006ea:	b94a      	cbnz	r2, 8000700 <__aeabi_uldivmod+0x18>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	bf08      	it	eq
 80006f0:	2800      	cmpeq	r0, #0
 80006f2:	bf1c      	itt	ne
 80006f4:	f04f 31ff 	movne.w	r1, #4294967295
 80006f8:	f04f 30ff 	movne.w	r0, #4294967295
 80006fc:	f000 b96a 	b.w	80009d4 <__aeabi_idiv0>
 8000700:	f1ad 0c08 	sub.w	ip, sp, #8
 8000704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000708:	f000 f806 	bl	8000718 <__udivmoddi4>
 800070c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <__udivmoddi4>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	9d08      	ldr	r5, [sp, #32]
 800071e:	460c      	mov	r4, r1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14e      	bne.n	80007c2 <__udivmoddi4+0xaa>
 8000724:	4694      	mov	ip, r2
 8000726:	458c      	cmp	ip, r1
 8000728:	4686      	mov	lr, r0
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	d962      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000730:	b14a      	cbz	r2, 8000746 <__udivmoddi4+0x2e>
 8000732:	f1c2 0320 	rsb	r3, r2, #32
 8000736:	4091      	lsls	r1, r2
 8000738:	fa20 f303 	lsr.w	r3, r0, r3
 800073c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000740:	4319      	orrs	r1, r3
 8000742:	fa00 fe02 	lsl.w	lr, r0, r2
 8000746:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074a:	fa1f f68c 	uxth.w	r6, ip
 800074e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000752:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000756:	fb07 1114 	mls	r1, r7, r4, r1
 800075a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075e:	fb04 f106 	mul.w	r1, r4, r6
 8000762:	4299      	cmp	r1, r3
 8000764:	d90a      	bls.n	800077c <__udivmoddi4+0x64>
 8000766:	eb1c 0303 	adds.w	r3, ip, r3
 800076a:	f104 30ff 	add.w	r0, r4, #4294967295
 800076e:	f080 8112 	bcs.w	8000996 <__udivmoddi4+0x27e>
 8000772:	4299      	cmp	r1, r3
 8000774:	f240 810f 	bls.w	8000996 <__udivmoddi4+0x27e>
 8000778:	3c02      	subs	r4, #2
 800077a:	4463      	add	r3, ip
 800077c:	1a59      	subs	r1, r3, r1
 800077e:	fa1f f38e 	uxth.w	r3, lr
 8000782:	fbb1 f0f7 	udiv	r0, r1, r7
 8000786:	fb07 1110 	mls	r1, r7, r0, r1
 800078a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078e:	fb00 f606 	mul.w	r6, r0, r6
 8000792:	429e      	cmp	r6, r3
 8000794:	d90a      	bls.n	80007ac <__udivmoddi4+0x94>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 31ff 	add.w	r1, r0, #4294967295
 800079e:	f080 80fc 	bcs.w	800099a <__udivmoddi4+0x282>
 80007a2:	429e      	cmp	r6, r3
 80007a4:	f240 80f9 	bls.w	800099a <__udivmoddi4+0x282>
 80007a8:	4463      	add	r3, ip
 80007aa:	3802      	subs	r0, #2
 80007ac:	1b9b      	subs	r3, r3, r6
 80007ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007b2:	2100      	movs	r1, #0
 80007b4:	b11d      	cbz	r5, 80007be <__udivmoddi4+0xa6>
 80007b6:	40d3      	lsrs	r3, r2
 80007b8:	2200      	movs	r2, #0
 80007ba:	e9c5 3200 	strd	r3, r2, [r5]
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d905      	bls.n	80007d2 <__udivmoddi4+0xba>
 80007c6:	b10d      	cbz	r5, 80007cc <__udivmoddi4+0xb4>
 80007c8:	e9c5 0100 	strd	r0, r1, [r5]
 80007cc:	2100      	movs	r1, #0
 80007ce:	4608      	mov	r0, r1
 80007d0:	e7f5      	b.n	80007be <__udivmoddi4+0xa6>
 80007d2:	fab3 f183 	clz	r1, r3
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d146      	bne.n	8000868 <__udivmoddi4+0x150>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d302      	bcc.n	80007e4 <__udivmoddi4+0xcc>
 80007de:	4290      	cmp	r0, r2
 80007e0:	f0c0 80f0 	bcc.w	80009c4 <__udivmoddi4+0x2ac>
 80007e4:	1a86      	subs	r6, r0, r2
 80007e6:	eb64 0303 	sbc.w	r3, r4, r3
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d0e6      	beq.n	80007be <__udivmoddi4+0xa6>
 80007f0:	e9c5 6300 	strd	r6, r3, [r5]
 80007f4:	e7e3      	b.n	80007be <__udivmoddi4+0xa6>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	f040 8090 	bne.w	800091c <__udivmoddi4+0x204>
 80007fc:	eba1 040c 	sub.w	r4, r1, ip
 8000800:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000804:	fa1f f78c 	uxth.w	r7, ip
 8000808:	2101      	movs	r1, #1
 800080a:	fbb4 f6f8 	udiv	r6, r4, r8
 800080e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000812:	fb08 4416 	mls	r4, r8, r6, r4
 8000816:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800081a:	fb07 f006 	mul.w	r0, r7, r6
 800081e:	4298      	cmp	r0, r3
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x11c>
 8000822:	eb1c 0303 	adds.w	r3, ip, r3
 8000826:	f106 34ff 	add.w	r4, r6, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x11a>
 800082c:	4298      	cmp	r0, r3
 800082e:	f200 80cd 	bhi.w	80009cc <__udivmoddi4+0x2b4>
 8000832:	4626      	mov	r6, r4
 8000834:	1a1c      	subs	r4, r3, r0
 8000836:	fa1f f38e 	uxth.w	r3, lr
 800083a:	fbb4 f0f8 	udiv	r0, r4, r8
 800083e:	fb08 4410 	mls	r4, r8, r0, r4
 8000842:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000846:	fb00 f707 	mul.w	r7, r0, r7
 800084a:	429f      	cmp	r7, r3
 800084c:	d908      	bls.n	8000860 <__udivmoddi4+0x148>
 800084e:	eb1c 0303 	adds.w	r3, ip, r3
 8000852:	f100 34ff 	add.w	r4, r0, #4294967295
 8000856:	d202      	bcs.n	800085e <__udivmoddi4+0x146>
 8000858:	429f      	cmp	r7, r3
 800085a:	f200 80b0 	bhi.w	80009be <__udivmoddi4+0x2a6>
 800085e:	4620      	mov	r0, r4
 8000860:	1bdb      	subs	r3, r3, r7
 8000862:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000866:	e7a5      	b.n	80007b4 <__udivmoddi4+0x9c>
 8000868:	f1c1 0620 	rsb	r6, r1, #32
 800086c:	408b      	lsls	r3, r1
 800086e:	fa22 f706 	lsr.w	r7, r2, r6
 8000872:	431f      	orrs	r7, r3
 8000874:	fa20 fc06 	lsr.w	ip, r0, r6
 8000878:	fa04 f301 	lsl.w	r3, r4, r1
 800087c:	ea43 030c 	orr.w	r3, r3, ip
 8000880:	40f4      	lsrs	r4, r6
 8000882:	fa00 f801 	lsl.w	r8, r0, r1
 8000886:	0c38      	lsrs	r0, r7, #16
 8000888:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800088c:	fbb4 fef0 	udiv	lr, r4, r0
 8000890:	fa1f fc87 	uxth.w	ip, r7
 8000894:	fb00 441e 	mls	r4, r0, lr, r4
 8000898:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800089c:	fb0e f90c 	mul.w	r9, lr, ip
 80008a0:	45a1      	cmp	r9, r4
 80008a2:	fa02 f201 	lsl.w	r2, r2, r1
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x1a6>
 80008a8:	193c      	adds	r4, r7, r4
 80008aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ae:	f080 8084 	bcs.w	80009ba <__udivmoddi4+0x2a2>
 80008b2:	45a1      	cmp	r9, r4
 80008b4:	f240 8081 	bls.w	80009ba <__udivmoddi4+0x2a2>
 80008b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008bc:	443c      	add	r4, r7
 80008be:	eba4 0409 	sub.w	r4, r4, r9
 80008c2:	fa1f f983 	uxth.w	r9, r3
 80008c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ca:	fb00 4413 	mls	r4, r0, r3, r4
 80008ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008d6:	45a4      	cmp	ip, r4
 80008d8:	d907      	bls.n	80008ea <__udivmoddi4+0x1d2>
 80008da:	193c      	adds	r4, r7, r4
 80008dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008e0:	d267      	bcs.n	80009b2 <__udivmoddi4+0x29a>
 80008e2:	45a4      	cmp	ip, r4
 80008e4:	d965      	bls.n	80009b2 <__udivmoddi4+0x29a>
 80008e6:	3b02      	subs	r3, #2
 80008e8:	443c      	add	r4, r7
 80008ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ee:	fba0 9302 	umull	r9, r3, r0, r2
 80008f2:	eba4 040c 	sub.w	r4, r4, ip
 80008f6:	429c      	cmp	r4, r3
 80008f8:	46ce      	mov	lr, r9
 80008fa:	469c      	mov	ip, r3
 80008fc:	d351      	bcc.n	80009a2 <__udivmoddi4+0x28a>
 80008fe:	d04e      	beq.n	800099e <__udivmoddi4+0x286>
 8000900:	b155      	cbz	r5, 8000918 <__udivmoddi4+0x200>
 8000902:	ebb8 030e 	subs.w	r3, r8, lr
 8000906:	eb64 040c 	sbc.w	r4, r4, ip
 800090a:	fa04 f606 	lsl.w	r6, r4, r6
 800090e:	40cb      	lsrs	r3, r1
 8000910:	431e      	orrs	r6, r3
 8000912:	40cc      	lsrs	r4, r1
 8000914:	e9c5 6400 	strd	r6, r4, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	e750      	b.n	80007be <__udivmoddi4+0xa6>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f103 	lsr.w	r1, r0, r3
 8000924:	fa0c fc02 	lsl.w	ip, ip, r2
 8000928:	fa24 f303 	lsr.w	r3, r4, r3
 800092c:	4094      	lsls	r4, r2
 800092e:	430c      	orrs	r4, r1
 8000930:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000934:	fa00 fe02 	lsl.w	lr, r0, r2
 8000938:	fa1f f78c 	uxth.w	r7, ip
 800093c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000940:	fb08 3110 	mls	r1, r8, r0, r3
 8000944:	0c23      	lsrs	r3, r4, #16
 8000946:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800094a:	fb00 f107 	mul.w	r1, r0, r7
 800094e:	4299      	cmp	r1, r3
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x24c>
 8000952:	eb1c 0303 	adds.w	r3, ip, r3
 8000956:	f100 36ff 	add.w	r6, r0, #4294967295
 800095a:	d22c      	bcs.n	80009b6 <__udivmoddi4+0x29e>
 800095c:	4299      	cmp	r1, r3
 800095e:	d92a      	bls.n	80009b6 <__udivmoddi4+0x29e>
 8000960:	3802      	subs	r0, #2
 8000962:	4463      	add	r3, ip
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b2a4      	uxth	r4, r4
 8000968:	fbb3 f1f8 	udiv	r1, r3, r8
 800096c:	fb08 3311 	mls	r3, r8, r1, r3
 8000970:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000974:	fb01 f307 	mul.w	r3, r1, r7
 8000978:	42a3      	cmp	r3, r4
 800097a:	d908      	bls.n	800098e <__udivmoddi4+0x276>
 800097c:	eb1c 0404 	adds.w	r4, ip, r4
 8000980:	f101 36ff 	add.w	r6, r1, #4294967295
 8000984:	d213      	bcs.n	80009ae <__udivmoddi4+0x296>
 8000986:	42a3      	cmp	r3, r4
 8000988:	d911      	bls.n	80009ae <__udivmoddi4+0x296>
 800098a:	3902      	subs	r1, #2
 800098c:	4464      	add	r4, ip
 800098e:	1ae4      	subs	r4, r4, r3
 8000990:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000994:	e739      	b.n	800080a <__udivmoddi4+0xf2>
 8000996:	4604      	mov	r4, r0
 8000998:	e6f0      	b.n	800077c <__udivmoddi4+0x64>
 800099a:	4608      	mov	r0, r1
 800099c:	e706      	b.n	80007ac <__udivmoddi4+0x94>
 800099e:	45c8      	cmp	r8, r9
 80009a0:	d2ae      	bcs.n	8000900 <__udivmoddi4+0x1e8>
 80009a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7a8      	b.n	8000900 <__udivmoddi4+0x1e8>
 80009ae:	4631      	mov	r1, r6
 80009b0:	e7ed      	b.n	800098e <__udivmoddi4+0x276>
 80009b2:	4603      	mov	r3, r0
 80009b4:	e799      	b.n	80008ea <__udivmoddi4+0x1d2>
 80009b6:	4630      	mov	r0, r6
 80009b8:	e7d4      	b.n	8000964 <__udivmoddi4+0x24c>
 80009ba:	46d6      	mov	lr, sl
 80009bc:	e77f      	b.n	80008be <__udivmoddi4+0x1a6>
 80009be:	4463      	add	r3, ip
 80009c0:	3802      	subs	r0, #2
 80009c2:	e74d      	b.n	8000860 <__udivmoddi4+0x148>
 80009c4:	4606      	mov	r6, r0
 80009c6:	4623      	mov	r3, r4
 80009c8:	4608      	mov	r0, r1
 80009ca:	e70f      	b.n	80007ec <__udivmoddi4+0xd4>
 80009cc:	3e02      	subs	r6, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	e730      	b.n	8000834 <__udivmoddi4+0x11c>
 80009d2:	bf00      	nop

080009d4 <__aeabi_idiv0>:
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b f909 	bl	800bc08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f6:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 80009f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009fe:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a20:	2204      	movs	r2, #4
 8000a22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a78:	4817      	ldr	r0, [pc, #92]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a7a:	f002 ffe9 	bl	8003a50 <HAL_ADC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a84:	f001 fb24 	bl	80020d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000a94:	f004 f908 	bl	8004ca8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000a9e:	f001 fb17 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_ADC1_Init+0x104>)
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aae:	237f      	movs	r3, #127	@ 0x7f
 8000ab0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_ADC1_Init+0x100>)
 8000ac0:	f003 fa74 	bl	8003fac <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000aca:	f001 fb01 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	@ 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000b4 	.word	0x200000b4
 8000adc:	04300002 	.word	0x04300002

08000ae0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00b f88b 	bl	800bc08 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000af4:	4a31      	ldr	r2, [pc, #196]	@ (8000bbc <MX_ADC2_Init+0xdc>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000afa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b12:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b72:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000b74:	f002 ff6c 	bl	8003a50 <HAL_ADC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000b7e:	f001 faa7 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_ADC2_Init+0xe0>)
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2306      	movs	r3, #6
 8000b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	237f      	movs	r3, #127	@ 0x7f
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b92:	2304      	movs	r3, #4
 8000b94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_ADC2_Init+0xd8>)
 8000ba0:	f003 fa04 	bl	8003fac <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000baa:	f001 fa91 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	50000100 	.word	0x50000100
 8000bc0:	0c900008 	.word	0x0c900008

08000bc4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	@ 0x30
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2220      	movs	r2, #32
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00b f813 	bl	800bc08 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000be4:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <MX_ADC3_Init+0x100>)
 8000be6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bea:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000bee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c64:	f002 fef4 	bl	8003a50 <HAL_ADC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000c6e:	f001 fa2f 	bl	80020d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000c7e:	f004 f813 	bl	8004ca8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000c88:	f001 fa22 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_ADC3_Init+0x104>)
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c90:	2306      	movs	r3, #6
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c98:	237f      	movs	r3, #127	@ 0x7f
 8000c9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_ADC3_Init+0xfc>)
 8000caa:	f003 f97f 	bl	8003fac <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000cb4:	f001 fa0c 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3730      	adds	r7, #48	@ 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000018c 	.word	0x2000018c
 8000cc4:	50000400 	.word	0x50000400
 8000cc8:	14f00020 	.word	0x14f00020

08000ccc <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00a ff95 	bl	800bc08 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000cde:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000ce0:	4a31      	ldr	r2, [pc, #196]	@ (8000da8 <MX_ADC4_Init+0xdc>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000ce6:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000cea:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d4e:	2280      	movs	r2, #128	@ 0x80
 8000d50:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d60:	f002 fe76 	bl	8003a50 <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000d6a:	f001 f9b1 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_ADC4_Init+0xe0>)
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2306      	movs	r3, #6
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	237f      	movs	r3, #127	@ 0x7f
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <MX_ADC4_Init+0xd8>)
 8000d8c:	f003 f90e 	bl	8003fac <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000d96:	f001 f99b 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001f8 	.word	0x200001f8
 8000da8:	50000500 	.word	0x50000500
 8000dac:	14f00020 	.word	0x14f00020

08000db0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2220      	movs	r2, #32
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00a ff23 	bl	800bc08 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dc4:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <MX_ADC5_Init+0xdc>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dca:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000dce:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e44:	f002 fe04 	bl	8003a50 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000e4e:	f001 f93f 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_ADC5_Init+0xe0>)
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5e:	237f      	movs	r3, #127	@ 0x7f
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2304      	movs	r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_ADC5_Init+0xd8>)
 8000e70:	f003 f89c 	bl	8003fac <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000e7a:	f001 f929 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000264 	.word	0x20000264
 8000e8c:	50000600 	.word	0x50000600
 8000e90:	08600004 	.word	0x08600004

08000e94 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0a6      	sub	sp, #152	@ 0x98
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb0:	2254      	movs	r2, #84	@ 0x54
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00a fea7 	bl	800bc08 <memset>
  if(adcHandle->Instance==ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec2:	d16c      	bne.n	8000f9e <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ece:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 fa85 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ee0:	f001 f8f6 	bl	80020d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a9f      	ldr	r2, [pc, #636]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eee:	4b9e      	ldr	r3, [pc, #632]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10b      	bne.n	8000f0e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a9c      	ldr	r2, [pc, #624]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b9a      	ldr	r3, [pc, #616]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b97      	ldr	r3, [pc, #604]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a96      	ldr	r2, [pc, #600]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b94      	ldr	r3, [pc, #592]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f004 fc09 	bl	8005758 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f46:	4b8a      	ldr	r3, [pc, #552]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f48:	4a8a      	ldr	r2, [pc, #552]	@ (8001174 <HAL_ADC_MspInit+0x2e0>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f4c:	4b88      	ldr	r3, [pc, #544]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f4e:	2205      	movs	r2, #5
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f52:	4b87      	ldr	r3, [pc, #540]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f58:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5e:	4b84      	ldr	r3, [pc, #528]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f64:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6c:	4b80      	ldr	r3, [pc, #512]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f74:	4b7e      	ldr	r3, [pc, #504]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f76:	2220      	movs	r2, #32
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f80:	487b      	ldr	r0, [pc, #492]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f82:	f004 f8a9 	bl	80050d8 <HAL_DMA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000f8c:	f001 f8a0 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a77      	ldr	r2, [pc, #476]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f94:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f96:	4a76      	ldr	r2, [pc, #472]	@ (8001170 <HAL_ADC_MspInit+0x2dc>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000f9c:	e1e0      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a75      	ldr	r2, [pc, #468]	@ (8001178 <HAL_ADC_MspInit+0x2e4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d16c      	bne.n	8001082 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fb2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fa13 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000fc4:	f001 f884 	bl	80020d0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc8:	4b67      	ldr	r3, [pc, #412]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a66      	ldr	r2, [pc, #408]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fd2:	4b65      	ldr	r3, [pc, #404]	@ (8001168 <HAL_ADC_MspInit+0x2d4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	4a63      	ldr	r2, [pc, #396]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe6:	4b61      	ldr	r3, [pc, #388]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 800100a:	2340      	movs	r3, #64	@ 0x40
 800100c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	2303      	movs	r3, #3
 8001012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f004 fb97 	bl	8005758 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800102a:	4b54      	ldr	r3, [pc, #336]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800102c:	4a54      	ldr	r2, [pc, #336]	@ (8001180 <HAL_ADC_MspInit+0x2ec>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001030:	4b52      	ldr	r3, [pc, #328]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001032:	2224      	movs	r2, #36	@ 0x24
 8001034:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b51      	ldr	r3, [pc, #324]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b4f      	ldr	r3, [pc, #316]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001048:	4b4c      	ldr	r3, [pc, #304]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800104a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001050:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001056:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800105a:	2220      	movs	r2, #32
 800105c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001064:	4845      	ldr	r0, [pc, #276]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001066:	f004 f837 	bl	80050d8 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8001070:	f001 f82e 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a41      	ldr	r2, [pc, #260]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 8001078:	655a      	str	r2, [r3, #84]	@ 0x54
 800107a:	4a40      	ldr	r2, [pc, #256]	@ (800117c <HAL_ADC_MspInit+0x2e8>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001080:	e16e      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3f      	ldr	r2, [pc, #252]	@ (8001184 <HAL_ADC_MspInit+0x2f0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	f040 8085 	bne.w	8001198 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001098:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 f9a0 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80010aa:	f001 f811 	bl	80020d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80010ae:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <HAL_ADC_MspInit+0x2f4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	4a29      	ldr	r2, [pc, #164]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010cc:	4b27      	ldr	r3, [pc, #156]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b24      	ldr	r3, [pc, #144]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	4a23      	ldr	r2, [pc, #140]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <HAL_ADC_MspInit+0x2d8>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 80010f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001108:	4619      	mov	r1, r3
 800110a:	4820      	ldr	r0, [pc, #128]	@ (800118c <HAL_ADC_MspInit+0x2f8>)
 800110c:	f004 fb24 	bl	8005758 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001112:	4a20      	ldr	r2, [pc, #128]	@ (8001194 <HAL_ADC_MspInit+0x300>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001118:	2225      	movs	r2, #37	@ 0x25
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001134:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001140:	2220      	movs	r2, #32
 8001142:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800114a:	4811      	ldr	r0, [pc, #68]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800114c:	f003 ffc4 	bl	80050d8 <HAL_DMA_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8001156:	f000 ffbb 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_ADC_MspInit+0x2fc>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001166:	e0fb      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
 8001168:	200004b0 	.word	0x200004b0
 800116c:	40021000 	.word	0x40021000
 8001170:	200002d0 	.word	0x200002d0
 8001174:	40020008 	.word	0x40020008
 8001178:	50000100 	.word	0x50000100
 800117c:	20000330 	.word	0x20000330
 8001180:	4002001c 	.word	0x4002001c
 8001184:	50000400 	.word	0x50000400
 8001188:	200004b4 	.word	0x200004b4
 800118c:	48000400 	.word	0x48000400
 8001190:	20000390 	.word	0x20000390
 8001194:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a72      	ldr	r2, [pc, #456]	@ (8001368 <HAL_ADC_MspInit+0x4d4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d16c      	bne.n	800127c <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80011ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 f916 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 80011be:	f000 ff87 	bl	80020d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011c2:	4b6a      	ldr	r3, [pc, #424]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a68      	ldr	r2, [pc, #416]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011cc:	4b67      	ldr	r3, [pc, #412]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10b      	bne.n	80011ec <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011d4:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800121c:	4619      	mov	r1, r3
 800121e:	4855      	ldr	r0, [pc, #340]	@ (8001374 <HAL_ADC_MspInit+0x4e0>)
 8001220:	f004 fa9a 	bl	8005758 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001224:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001226:	4a55      	ldr	r2, [pc, #340]	@ (800137c <HAL_ADC_MspInit+0x4e8>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800122c:	2226      	movs	r2, #38	@ 0x26
 800122e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001230:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b4e      	ldr	r3, [pc, #312]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001242:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124a:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001254:	2220      	movs	r2, #32
 8001256:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800125e:	4846      	ldr	r0, [pc, #280]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001260:	f003 ff3a 	bl	80050d8 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 800126a:	f000 ff31 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a41      	ldr	r2, [pc, #260]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
 8001274:	4a40      	ldr	r2, [pc, #256]	@ (8001378 <HAL_ADC_MspInit+0x4e4>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800127a:	e071      	b.n	8001360 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3f      	ldr	r2, [pc, #252]	@ (8001380 <HAL_ADC_MspInit+0x4ec>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d16c      	bne.n	8001360 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800128c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f8a4 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80012a2:	f000 ff15 	bl	80020d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <HAL_ADC_MspInit+0x4d8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <HAL_ADC_MspInit+0x4dc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 80012e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f004 fa27 	bl	8005758 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800130c:	4a1e      	ldr	r2, [pc, #120]	@ (8001388 <HAL_ADC_MspInit+0x4f4>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001312:	2227      	movs	r2, #39	@ 0x27
 8001314:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800132a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001336:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800133a:	2220      	movs	r2, #32
 800133c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001346:	f003 fec7 	bl	80050d8 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001350:	f000 febe 	bl	80020d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_ADC_MspInit+0x4f0>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001360:	bf00      	nop
 8001362:	3798      	adds	r7, #152	@ 0x98
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	50000500 	.word	0x50000500
 800136c:	200004b4 	.word	0x200004b4
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400
 8001378:	200003f0 	.word	0x200003f0
 800137c:	40020044 	.word	0x40020044
 8001380:	50000600 	.word	0x50000600
 8001384:	20000450 	.word	0x20000450
 8001388:	40020058 	.word	0x40020058

0800138c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_DMA_Init+0x98>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <MX_DMA_Init+0x98>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6493      	str	r3, [r2, #72]	@ 0x48
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_DMA_Init+0x98>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_DMA_Init+0x98>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <MX_DMA_Init+0x98>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_DMA_Init+0x98>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_DMA_Init+0x98>)
 80013c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_DMA_Init+0x98>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_DMA_Init+0x98>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2010      	movs	r0, #16
 80013e0:	f003 fe45 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013e4:	2010      	movs	r0, #16
 80013e6:	f003 fe5c 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2011      	movs	r0, #17
 80013f0:	f003 fe3d 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f003 fe54 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2038      	movs	r0, #56	@ 0x38
 8001400:	f003 fe35 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001404:	2038      	movs	r0, #56	@ 0x38
 8001406:	f003 fe4c 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2039      	movs	r0, #57	@ 0x39
 8001410:	f003 fe2d 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001414:	2039      	movs	r0, #57	@ 0x39
 8001416:	f003 fe44 	bl	80050a2 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f007 fc4f 	bl	8008cd8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f007 fc4b 	bl	8008cd8 <HAL_TIM_IC_Start_IT>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <processarCaptura+0x94>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001466:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <processarCaptura+0x98>)
 8001468:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <processarCaptura+0x94>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001470:	e02f      	b.n	80014d2 <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	4a1b      	ldr	r2, [pc, #108]	@ (80014e8 <processarCaptura+0x9c>)
 800147a:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <processarCaptura+0x9c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <processarCaptura+0x98>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <processarCaptura+0xa0>)
 8001488:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <processarCaptura+0xa4>)
 800148c:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <processarCaptura+0xa0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800149a:	edd7 6a05 	vldr	s13, [r7, #20]
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80014f4 <processarCaptura+0xa8>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <processarCaptura+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200004cc 	.word	0x200004cc
 80014e4:	200004b8 	.word	0x200004b8
 80014e8:	200004bc 	.word	0x200004bc
 80014ec:	200004c8 	.word	0x200004c8
 80014f0:	49742400 	.word	0x49742400
 80014f4:	41a347ae 	.word	0x41a347ae

080014f8 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <processarCaptura2+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <processarCaptura2+0x98>)
 8001514:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <processarCaptura2+0x94>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 800151c:	e02f      	b.n	800157e <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <processarCaptura2+0x9c>)
 8001526:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <processarCaptura2+0x9c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <processarCaptura2+0x98>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <processarCaptura2+0xa0>)
 8001534:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <processarCaptura2+0xa4>)
 8001538:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <processarCaptura2+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001546:	edd7 6a05 	vldr	s13, [r7, #20]
 800154a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80015a0 <processarCaptura2+0xa8>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <processarCaptura2+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200004d4 	.word	0x200004d4
 8001590:	200004c0 	.word	0x200004c0
 8001594:	200004c4 	.word	0x200004c4
 8001598:	200004d0 	.word	0x200004d0
 800159c:	49742400 	.word	0x49742400
 80015a0:	41a347ae 	.word	0x41a347ae

080015a4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    if (htim == &htim16)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x34>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d104      	bne.n	80015be <HAL_TIM_IC_CaptureCallback+0x1a>
    {
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 80015b4:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x38>)
 80015b6:	490a      	ldr	r1, [pc, #40]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <processarCaptura>
    }
    if (htim == &htim17)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d104      	bne.n	80015d0 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80015c8:	4908      	ldr	r1, [pc, #32]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x48>)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff94 	bl	80014f8 <processarCaptura2>
    }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000079c 	.word	0x2000079c
 80015dc:	200004e0 	.word	0x200004e0
 80015e0:	200004d8 	.word	0x200004d8
 80015e4:	200007e8 	.word	0x200007e8
 80015e8:	200004e4 	.word	0x200004e4
 80015ec:	200004dc 	.word	0x200004dc

080015f0 <fGetVelocidadeRodaEsquerda>:

float fGetVelocidadeRodaEsquerda(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
    return velocidadeRodaEsquerda;
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <fGetVelocidadeRodaEsquerda+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
}
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	200004e0 	.word	0x200004e0

0800160c <fGetVelocidadeRodaDireita>:

float fGetVelocidadeRodaDireita(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
    return velocidadeRodaDireita;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <fGetVelocidadeRodaDireita+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200004e4 	.word	0x200004e4

08001628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <MX_GPIO_Init+0x104>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a3a      	ldr	r2, [pc, #232]	@ (800172c <MX_GPIO_Init+0x104>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <MX_GPIO_Init+0x104>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <MX_GPIO_Init+0x104>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a34      	ldr	r2, [pc, #208]	@ (800172c <MX_GPIO_Init+0x104>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b32      	ldr	r3, [pc, #200]	@ (800172c <MX_GPIO_Init+0x104>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <MX_GPIO_Init+0x104>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <MX_GPIO_Init+0x104>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <MX_GPIO_Init+0x104>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_GPIO_Init+0x104>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a28      	ldr	r2, [pc, #160]	@ (800172c <MX_GPIO_Init+0x104>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <MX_GPIO_Init+0x104>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80016a4:	4822      	ldr	r0, [pc, #136]	@ (8001730 <MX_GPIO_Init+0x108>)
 80016a6:	f004 f9d9 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f004 f9d2 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4819      	ldr	r0, [pc, #100]	@ (8001734 <MX_GPIO_Init+0x10c>)
 80016d0:	f004 f842 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 80016d4:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_GPIO_Init+0x108>)
 80016ee:	f004 f833 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80016f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f004 f823 	bl	8005758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2028      	movs	r0, #40	@ 0x28
 8001718:	f003 fca9 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171c:	2028      	movs	r0, #40	@ 0x28
 800171e:	f003 fcc0 	bl	80050a2 <HAL_NVIC_EnableIRQ>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	@ 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800

08001738 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_I2C2_Init+0x74>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <MX_I2C2_Init+0x78>)
 8001740:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001744:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <MX_I2C2_Init+0x7c>)
 8001746:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_I2C2_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001750:	2201      	movs	r2, #1
 8001752:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_I2C2_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_I2C2_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001774:	f004 f9ad 	bl	8005ad2 <HAL_I2C_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800177e:	f000 fca7 	bl	80020d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4809      	ldr	r0, [pc, #36]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001786:	f005 ffb3 	bl	80076f0 <HAL_I2CEx_ConfigAnalogFilter>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001790:	f000 fc9e 	bl	80020d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_I2C2_Init+0x74>)
 8001798:	f005 fff5 	bl	8007786 <HAL_I2CEx_ConfigDigitalFilter>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a2:	f000 fc95 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004e8 	.word	0x200004e8
 80017b0:	40005800 	.word	0x40005800
 80017b4:	40b285c2 	.word	0x40b285c2

080017b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a0      	sub	sp, #128	@ 0x80
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	2254      	movs	r2, #84	@ 0x54
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00a fa15 	bl	800bc08 <memset>
  if(i2cHandle->Instance==I2C2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001960 <HAL_I2C_MspInit+0x1a8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f040 80b6 	bne.w	8001956 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fdf4 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001802:	f000 fc65 	bl	80020d0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a56      	ldr	r2, [pc, #344]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b54      	ldr	r3, [pc, #336]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001836:	2310      	movs	r3, #16
 8001838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183a:	2312      	movs	r3, #18
 800183c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001846:	2304      	movs	r3, #4
 8001848:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800184e:	4619      	mov	r1, r3
 8001850:	4845      	ldr	r0, [pc, #276]	@ (8001968 <HAL_I2C_MspInit+0x1b0>)
 8001852:	f003 ff81 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001868:	2304      	movs	r3, #4
 800186a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001876:	f003 ff6f 	bl	8005758 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800187a:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a39      	ldr	r2, [pc, #228]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_I2C_MspInit+0x1ac>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001892:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 8001894:	4a36      	ldr	r2, [pc, #216]	@ (8001970 <HAL_I2C_MspInit+0x1b8>)
 8001896:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 800189a:	2212      	movs	r2, #18
 800189c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b30      	ldr	r3, [pc, #192]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80018c8:	4828      	ldr	r0, [pc, #160]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018ca:	f003 fc05 	bl	80050d8 <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80018d4:	f000 fbfc 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018de:	4a23      	ldr	r2, [pc, #140]	@ (800196c <HAL_I2C_MspInit+0x1b4>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018e6:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_I2C_MspInit+0x1c0>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018ec:	2213      	movs	r2, #19
 80018ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018f2:	2210      	movs	r2, #16
 80018f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800191a:	4816      	ldr	r0, [pc, #88]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800191c:	f003 fbdc 	bl	80050d8 <HAL_DMA_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001926:	f000 fbd3 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 800192e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001930:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <HAL_I2C_MspInit+0x1bc>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2021      	movs	r0, #33	@ 0x21
 800193c:	f003 fb97 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001940:	2021      	movs	r0, #33	@ 0x21
 8001942:	f003 fbae 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2022      	movs	r0, #34	@ 0x22
 800194c:	f003 fb8f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001950:	2022      	movs	r0, #34	@ 0x22
 8001952:	f003 fba6 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3780      	adds	r7, #128	@ 0x80
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005800 	.word	0x40005800
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800
 800196c:	2000053c 	.word	0x2000053c
 8001970:	4002006c 	.word	0x4002006c
 8001974:	2000059c 	.word	0x2000059c
 8001978:	40020080 	.word	0x40020080

0800197c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	70fb      	strb	r3, [r7, #3]
 800198e:	460b      	mov	r3, r1
 8001990:	70bb      	strb	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001996:	2300      	movs	r3, #0
 8001998:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 800199a:	4a53      	ldr	r2, [pc, #332]	@ (8001ae8 <lcdInit+0x16c>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <lcdInit+0x16c>)
 80019a8:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 80019aa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <lcdInit+0x16c>)
 80019ac:	78bb      	ldrb	r3, [r7, #2]
 80019ae:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <lcdInit+0x16c>)
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <lcdInit+0x16c>)
 80019b8:	2208      	movs	r2, #8
 80019ba:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <lcdInit+0x170>)
 80019be:	2234      	movs	r2, #52	@ 0x34
 80019c0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80019c2:	4b4a      	ldr	r3, [pc, #296]	@ (8001aec <lcdInit+0x170>)
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <lcdInit+0x170>)
 80019c8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80019ca:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <lcdInit+0x170>)
 80019cc:	2230      	movs	r2, #48	@ 0x30
 80019ce:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	737b      	strb	r3, [r7, #13]
 80019d4:	e02f      	b.n	8001a36 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80019d6:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <lcdInit+0x16c>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <lcdInit+0x16c>)
 80019dc:	799b      	ldrb	r3, [r3, #6]
 80019de:	4619      	mov	r1, r3
 80019e0:	2303      	movs	r3, #3
 80019e2:	4a42      	ldr	r2, [pc, #264]	@ (8001aec <lcdInit+0x170>)
 80019e4:	f004 f910 	bl	8005c08 <HAL_I2C_Master_Transmit_DMA>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <lcdInit+0x76>
            return -1;
 80019ee:	23ff      	movs	r3, #255	@ 0xff
 80019f0:	e076      	b.n	8001ae0 <lcdInit+0x164>
        }

        usCont = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80019f6:	e009      	b.n	8001a0c <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	81fa      	strh	r2, [r7, #14]
 80019fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a00:	d101      	bne.n	8001a06 <lcdInit+0x8a>
        		return -1;
 8001a02:	23ff      	movs	r3, #255	@ 0xff
 8001a04:	e06c      	b.n	8001ae0 <lcdInit+0x164>
        	HAL_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f001 fdbc 	bl	8003584 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <lcdInit+0x16c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 faea 	bl	8005fea <HAL_I2C_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d1ed      	bne.n	80019f8 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001a1c:	7b7b      	ldrb	r3, [r7, #13]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d103      	bne.n	8001a2a <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 fdae 	bl	8003584 <HAL_Delay>
 8001a28:	e002      	b.n	8001a30 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f001 fdaa 	bl	8003584 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001a30:	7b7b      	ldrb	r3, [r7, #13]
 8001a32:	3301      	adds	r3, #1
 8001a34:	737b      	strb	r3, [r7, #13]
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d9cc      	bls.n	80019d6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <lcdInit+0x170>)
 8001a3e:	222c      	movs	r2, #44	@ 0x2c
 8001a40:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <lcdInit+0x170>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <lcdInit+0x170>)
 8001a48:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <lcdInit+0x170>)
 8001a4c:	2228      	movs	r2, #40	@ 0x28
 8001a4e:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <lcdInit+0x16c>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <lcdInit+0x16c>)
 8001a56:	799b      	ldrb	r3, [r3, #6]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <lcdInit+0x170>)
 8001a5e:	f004 f8d3 	bl	8005c08 <HAL_I2C_Master_Transmit_DMA>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <lcdInit+0xf0>
        return -1;
 8001a68:	23ff      	movs	r3, #255	@ 0xff
 8001a6a:	e039      	b.n	8001ae0 <lcdInit+0x164>
    }

    usCont = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a70:	e009      	b.n	8001a86 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	81fa      	strh	r2, [r7, #14]
 8001a78:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a7a:	d101      	bne.n	8001a80 <lcdInit+0x104>
    		return -1;
 8001a7c:	23ff      	movs	r3, #255	@ 0xff
 8001a7e:	e02f      	b.n	8001ae0 <lcdInit+0x164>
    	HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f001 fd7f 	bl	8003584 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <lcdInit+0x16c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 faad 	bl	8005fea <HAL_I2C_GetState>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d1ed      	bne.n	8001a72 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <lcdInit+0x16c>)
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d904      	bls.n	8001ab2 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 f945 	bl	8001d48 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 f815 	bl	8001af0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2007      	movs	r0, #7
 8001aca:	f000 f811 	bl	8001af0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f000 f80d 	bl	8001af0 <lcdCommand>
    lcdCursorHome();
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2005      	movs	r0, #5
 8001ada:	f000 f809 	bl	8001af0 <lcdCommand>

    return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000604 	.word	0x20000604
 8001aec:	200005fc 	.word	0x200005fc

08001af0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d064      	beq.n	8001bd4 <lcdCommand+0xe4>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	f040 80aa 	bne.w	8001c64 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b07      	cmp	r3, #7
 8001b16:	d85a      	bhi.n	8001bce <lcdCommand+0xde>
 8001b18:	a201      	add	r2, pc, #4	@ (adr r2, 8001b20 <lcdCommand+0x30>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b41 	.word	0x08001b41
 8001b24:	08001b71 	.word	0x08001b71
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	08001b61 	.word	0x08001b61
 8001b30:	08001b8b 	.word	0x08001b8b
 8001b34:	08001bb5 	.word	0x08001bb5
 8001b38:	08001ba5 	.word	0x08001ba5
 8001b3c:	08001bbf 	.word	0x08001bbf
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001b40:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b42:	7a1b      	ldrb	r3, [r3, #8]
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b4c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b4e:	e040      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001b50:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b52:	7a1b      	ldrb	r3, [r3, #8]
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b5c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b5e:	e038      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001b60:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b62:	7a1b      	ldrb	r3, [r3, #8]
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b52      	ldr	r3, [pc, #328]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001b6c:	721a      	strb	r2, [r3, #8]
                    break;
 8001b6e:	e030      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001b74:	f107 030f 	add.w	r3, r7, #15
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f8e4 	bl	8001d48 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001b80:	2002      	movs	r0, #2
 8001b82:	f001 fcff 	bl	8003584 <HAL_Delay>
                        return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e090      	b.n	8001cac <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	4619      	mov	r1, r3
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f8d7 	bl	8001d48 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f001 fcf2 	bl	8003584 <HAL_Delay>
                        return 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e083      	b.n	8001cac <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001ba4:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001ba6:	7a5b      	ldrb	r3, [r3, #9]
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bb0:	725a      	strb	r2, [r3, #9]
                    break;
 8001bb2:	e00e      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bb6:	7a5a      	ldrb	r2, [r3, #9]
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bba:	725a      	strb	r2, [r3, #9]
                    break;
 8001bbc:	e009      	b.n	8001bd2 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bc0:	7a5b      	ldrb	r3, [r3, #9]
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001bca:	725a      	strb	r2, [r3, #9]
                    break;
 8001bcc:	e001      	b.n	8001bd2 <lcdCommand+0xe2>

                default:
                    return -1;
 8001bce:	23ff      	movs	r3, #255	@ 0xff
 8001bd0:	e06c      	b.n	8001cac <lcdCommand+0x1bc>
            }

            break;
 8001bd2:	e049      	b.n	8001c68 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	2b07      	cmp	r3, #7
 8001bda:	d840      	bhi.n	8001c5e <lcdCommand+0x16e>
 8001bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <lcdCommand+0xf4>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c05 	.word	0x08001c05
 8001be8:	08001c5f 	.word	0x08001c5f
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001c5f 	.word	0x08001c5f
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	08001c35 	.word	0x08001c35
 8001c00:	08001c4f 	.word	0x08001c4f
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c10:	721a      	strb	r2, [r3, #8]
                    break;
 8001c12:	e026      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c16:	7a1b      	ldrb	r3, [r3, #8]
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c20:	721a      	strb	r2, [r3, #8]
                    break;
 8001c22:	e01e      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001c24:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c30:	721a      	strb	r2, [r3, #8]
                    break;
 8001c32:	e016      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	f023 0302 	bic.w	r3, r3, #2
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c40:	725a      	strb	r2, [r3, #9]
                    break;
 8001c42:	e00e      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c46:	7a5a      	ldrb	r2, [r3, #9]
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c4a:	725a      	strb	r2, [r3, #9]
                    break;
 8001c4c:	e009      	b.n	8001c62 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c50:	7a5b      	ldrb	r3, [r3, #9]
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c5a:	725a      	strb	r2, [r3, #9]
                    break;
 8001c5c:	e001      	b.n	8001c62 <lcdCommand+0x172>

                default:
                    return -1;
 8001c5e:	23ff      	movs	r3, #255	@ 0xff
 8001c60:	e024      	b.n	8001cac <lcdCommand+0x1bc>
            }

            break;
 8001c62:	e001      	b.n	8001c68 <lcdCommand+0x178>

        default:
            return -1;
 8001c64:	23ff      	movs	r3, #255	@ 0xff
 8001c66:	e021      	b.n	8001cac <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	dc16      	bgt.n	8001c9c <lcdCommand+0x1ac>
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	da0d      	bge.n	8001c8e <lcdCommand+0x19e>
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d004      	beq.n	8001c80 <lcdCommand+0x190>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd10      	ble.n	8001c9c <lcdCommand+0x1ac>
 8001c7a:	3b03      	subs	r3, #3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d80d      	bhi.n	8001c9c <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c82:	7a1b      	ldrb	r3, [r3, #8]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	73fb      	strb	r3, [r7, #15]
            break;
 8001c8c:	e007      	b.n	8001c9e <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <lcdCommand+0x1c4>)
 8001c90:	7a5b      	ldrb	r3, [r3, #9]
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
            break;
 8001c9a:	e000      	b.n	8001c9e <lcdCommand+0x1ae>

        default:
            break;
 8001c9c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f84f 	bl	8001d48 <lcdWriteByte>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000604 	.word	0x20000604

08001cb8 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <lcdSetCursorPosition+0x50>)
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	79ba      	ldrb	r2, [r7, #6]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d303      	bcc.n	8001cda <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <lcdSetCursorPosition+0x50>)
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <lcdSetCursorPosition+0x54>)
 8001cde:	5cd2      	ldrb	r2, [r2, r3]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001cf2:	f107 030f 	add.w	r3, r7, #15
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f825 	bl	8001d48 <lcdWriteByte>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000604 	.word	0x20000604
 8001d0c:	0800c55c 	.word	0x0800c55c

08001d10 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e009      	b.n	8001d36 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 f80c 	bl	8001d48 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3f1      	bcc.n	8001d22 <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001d56:	79da      	ldrb	r2, [r3, #7]
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f023 030f 	bic.w	r3, r3, #15
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d74:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d7c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001d80:	79da      	ldrb	r2, [r3, #7]
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001d9e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001da2:	79da      	ldrb	r2, [r3, #7]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dbe:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dc2:	78da      	ldrb	r2, [r3, #3]
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001dc6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001dca:	79da      	ldrb	r2, [r3, #7]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001de4:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001dec:	799b      	ldrb	r3, [r3, #6]
 8001dee:	4619      	mov	r1, r3
 8001df0:	2306      	movs	r3, #6
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <lcdWriteByte+0xf4>)
 8001df4:	f003 ff08 	bl	8005c08 <HAL_I2C_Master_Transmit_DMA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <lcdWriteByte+0xba>
        return -1;
 8001dfe:	23ff      	movs	r3, #255	@ 0xff
 8001e00:	e015      	b.n	8001e2e <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e06:	e009      	b.n	8001e1c <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	81fa      	strh	r2, [r7, #14]
 8001e0e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e10:	d101      	bne.n	8001e16 <lcdWriteByte+0xce>
    		return -1;
 8001e12:	23ff      	movs	r3, #255	@ 0xff
 8001e14:	e00b      	b.n	8001e2e <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f001 fbb4 	bl	8003584 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <lcdWriteByte+0xf0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 f8e2 	bl	8005fea <HAL_I2C_GetState>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d1ed      	bne.n	8001e08 <lcdWriteByte+0xc0>
    }

    return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000604 	.word	0x20000604
 8001e3c:	200005fc 	.word	0x200005fc

08001e40 <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(void){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	@ 0x40
 8001e44:	af00      	add	r7, sp, #0
    float fVelocidadeRodaEsquerda = fGetVelocidadeRodaEsquerda();
 8001e46:	f7ff fbd3 	bl	80015f0 <fGetVelocidadeRodaEsquerda>
 8001e4a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    float fVelocidadeRodaDireita = fGetVelocidadeRodaDireita();
 8001e4e:	f7ff fbdd 	bl	800160c <fGetVelocidadeRodaDireita>
 8001e52:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 8001e56:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDInteiro = (int)fVelocidadeRodaDireita;
 8001e64:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6c:	ee17 3a90 	vmov	r3, s15
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001f1c <vPrintMotorSpeed+0xdc>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e90:	ee17 3a90 	vmov	r3, s15
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f1c <vPrintMotorSpeed+0xdc>
 8001eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L: %d,%d", iVEInteiro, iVEdec);
 8001eba:	f107 0014 	add.w	r0, r7, #20
 8001ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ec2:	4917      	ldr	r1, [pc, #92]	@ (8001f20 <vPrintMotorSpeed+0xe0>)
 8001ec4:	f009 fe80 	bl	800bbc8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fef4 	bl	8001cb8 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe f9a3 	bl	8000220 <strlen>
 8001eda:	4603      	mov	r3, r0
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff13 	bl	8001d10 <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R: %d,%d", iVDInteiro, iVDdec);
 8001eea:	4638      	mov	r0, r7
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <vPrintMotorSpeed+0xe4>)
 8001ef2:	f009 fe69 	bl	800bbc8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fedd 	bl	8001cb8 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8001efe:	463b      	mov	r3, r7
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe f98d 	bl	8000220 <strlen>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fefe 	bl	8001d10 <lcdPrintStr>
}
 8001f14:	bf00      	nop
 8001f16:	3740      	adds	r7, #64	@ 0x40
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	42c80000 	.word	0x42c80000
 8001f20:	0800c520 	.word	0x0800c520
 8001f24:	0800c530 	.word	0x0800c530

08001f28 <vPrintUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vPrintUART(unsigned char *ucBuffer)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, ucBuffer, strlen(ucBuffer), 100);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe f975 	bl	8000220 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	2364      	movs	r3, #100	@ 0x64
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4803      	ldr	r0, [pc, #12]	@ (8001f4c <vPrintUART+0x24>)
 8001f40:	f008 fbd8 	bl	800a6f4 <HAL_UART_Transmit>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000834 	.word	0x20000834

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f56:	f001 faa4 	bl	80034a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5a:	f000 f84f 	bl	8001ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5e:	f7ff fb63 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f62:	f7ff fa13 	bl	800138c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001f66:	f001 f96d 	bl	8003244 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001f6a:	f000 fe03 	bl	8002b74 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001f6e:	f7ff fbe3 	bl	8001738 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001f72:	f7fe fe27 	bl	8000bc4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001f76:	f7fe fd2f 	bl	80009d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f7a:	f7fe fdb1 	bl	8000ae0 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001f7e:	f7fe fea5 	bl	8000ccc <MX_ADC4_Init>
  MX_ADC5_Init();
 8001f82:	f7fe ff15 	bl	8000db0 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001f86:	f000 ff8d 	bl	8002ea4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f8a:	f000 ffd5 	bl	8002f38 <MX_TIM17_Init>
  MX_TIM6_Init();
 8001f8e:	f000 fead 	bl	8002cec <MX_TIM6_Init>
  MX_TIM15_Init();
 8001f92:	f000 ff35 	bl	8002e00 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001f96:	f000 fedf 	bl	8002d58 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8001f9a:	480f      	ldr	r0, [pc, #60]	@ (8001fd8 <main+0x88>)
 8001f9c:	f000 f89e 	bl	80020dc <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8001fa0:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <main+0x8c>)
 8001fa2:	480f      	ldr	r0, [pc, #60]	@ (8001fe0 <main+0x90>)
 8001fa4:	f7ff fa40 	bl	8001428 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8001fa8:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <main+0x94>)
 8001faa:	f000 f901 	bl	80021b0 <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8001fae:	480e      	ldr	r0, [pc, #56]	@ (8001fe8 <main+0x98>)
 8001fb0:	f000 f91a 	bl	80021e8 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8001fb4:	480d      	ldr	r0, [pc, #52]	@ (8001fec <main+0x9c>)
 8001fb6:	f000 f933 	bl	8002220 <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <main+0xa0>)
 8001fbc:	f000 f94c 	bl	8002258 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <main+0xa4>)
 8001fc2:	f000 f965 	bl	8002290 <vLineSensor5Init>

  // Initialize the LCD
  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	2202      	movs	r2, #2
 8001fca:	2127      	movs	r1, #39	@ 0x27
 8001fcc:	480a      	ldr	r0, [pc, #40]	@ (8001ff8 <main+0xa8>)
 8001fce:	f7ff fcd5 	bl	800197c <lcdInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 8001fd2:	bf00      	nop
 8001fd4:	e7fd      	b.n	8001fd2 <main+0x82>
 8001fd6:	bf00      	nop
 8001fd8:	2000066c 	.word	0x2000066c
 8001fdc:	200007e8 	.word	0x200007e8
 8001fe0:	2000079c 	.word	0x2000079c
 8001fe4:	200000b4 	.word	0x200000b4
 8001fe8:	20000120 	.word	0x20000120
 8001fec:	2000018c 	.word	0x2000018c
 8001ff0:	200001f8 	.word	0x200001f8
 8001ff4:	20000264 	.word	0x20000264
 8001ff8:	200004e8 	.word	0x200004e8

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	@ 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0318 	add.w	r3, r7, #24
 8002006:	2238      	movs	r2, #56	@ 0x38
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f009 fdfc 	bl	800bc08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800201e:	2000      	movs	r0, #0
 8002020:	f005 fbfe 	bl	8007820 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202e:	2340      	movs	r3, #64	@ 0x40
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002032:	2302      	movs	r3, #2
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002036:	2302      	movs	r3, #2
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800203a:	2304      	movs	r3, #4
 800203c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800203e:	2355      	movs	r3, #85	@ 0x55
 8002040:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002042:	2302      	movs	r3, #2
 8002044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002046:	2302      	movs	r3, #2
 8002048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800204a:	2302      	movs	r3, #2
 800204c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	4618      	mov	r0, r3
 8002054:	f005 fc98 	bl	8007988 <HAL_RCC_OscConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800205e:	f000 f837 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002062:	230f      	movs	r3, #15
 8002064:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002066:	2303      	movs	r3, #3
 8002068:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2104      	movs	r1, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f005 ff96 	bl	8007fac <HAL_RCC_ClockConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002086:	f000 f823 	bl	80020d0 <Error_Handler>
  }
}
 800208a:	bf00      	nop
 800208c:	3750      	adds	r7, #80	@ 0x50
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 80020a4:	f000 fb26 	bl	80026f4 <vLineSensorPIDControl>
	}
  // Chamada a cada 500 ms
  if (htim == &htim8){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d104      	bne.n	80020ba <HAL_TIM_PeriodElapsedCallback+0x26>
    vPrintUART("Teste!\n");
 80020b0:	4806      	ldr	r0, [pc, #24]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020b2:	f7ff ff39 	bl	8001f28 <vPrintUART>
    vPrintMotorSpeed();
 80020b6:	f7ff fec3 	bl	8001e40 <vPrintMotorSpeed>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000750 	.word	0x20000750
 80020c8:	20000704 	.word	0x20000704
 80020cc:	0800c540 	.word	0x0800c540

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <Error_Handler+0x8>

080020dc <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80020e4:	4a15      	ldr	r2, [pc, #84]	@ (800213c <vMotorInit+0x60>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <vMotorInit+0x60>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 fc7d 	bl	80089f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <vMotorInit+0x60>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2104      	movs	r1, #4
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 fc77 	bl	80089f0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002108:	480d      	ldr	r0, [pc, #52]	@ (8002140 <vMotorInit+0x64>)
 800210a:	f003 fca7 	bl	8005a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002114:	480a      	ldr	r0, [pc, #40]	@ (8002140 <vMotorInit+0x64>)
 8002116:	f003 fca1 	bl	8005a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	4808      	ldr	r0, [pc, #32]	@ (8002140 <vMotorInit+0x64>)
 8002120:	f003 fc9c 	bl	8005a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800212a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212e:	f003 fc95 	bl	8005a5c <HAL_GPIO_WritePin>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000610 	.word	0x20000610
 8002140:	48000400 	.word	0x48000400

08002144 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	ed87 0a01 	vstr	s0, [r7, #4]
 800214e:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8002152:	edd7 7a01 	vldr	s15, [r7, #4]
 8002156:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80021a8 <vSetRodasDC+0x64>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <vSetRodasDC+0x68>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002170:	ee17 2a90 	vmov	r2, s15
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8002176:	edd7 7a00 	vldr	s15, [r7]
 800217a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80021a8 <vSetRodasDC+0x64>
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <vSetRodasDC+0x68>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	447a0000 	.word	0x447a0000
 80021ac:	20000610 	.word	0x20000610

080021b0 <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 80021b8:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <vLineSensor1Init+0x30>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <vLineSensor1Init+0x30>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	217f      	movs	r1, #127	@ 0x7f
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fd0d 	bl	8004be4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <vLineSensor1Init+0x30>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4904      	ldr	r1, [pc, #16]	@ (80021e4 <vLineSensor1Init+0x34>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fdf8 	bl	8003dc8 <HAL_ADC_Start_DMA>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000614 	.word	0x20000614
 80021e4:	20000628 	.word	0x20000628

080021e8 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 80021f0:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <vLineSensor2Init+0x30>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <vLineSensor2Init+0x30>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	217f      	movs	r1, #127	@ 0x7f
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fcf1 	bl	8004be4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <vLineSensor2Init+0x30>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	4904      	ldr	r1, [pc, #16]	@ (800221c <vLineSensor2Init+0x34>)
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fddc 	bl	8003dc8 <HAL_ADC_Start_DMA>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000618 	.word	0x20000618
 800221c:	2000062c 	.word	0x2000062c

08002220 <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8002228:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <vLineSensor3Init+0x30>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <vLineSensor3Init+0x30>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	217f      	movs	r1, #127	@ 0x7f
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fcd5 	bl	8004be4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <vLineSensor3Init+0x30>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4904      	ldr	r1, [pc, #16]	@ (8002254 <vLineSensor3Init+0x34>)
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fdc0 	bl	8003dc8 <HAL_ADC_Start_DMA>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000061c 	.word	0x2000061c
 8002254:	20000630 	.word	0x20000630

08002258 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8002260:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <vLineSensor4Init+0x30>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <vLineSensor4Init+0x30>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	217f      	movs	r1, #127	@ 0x7f
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fcb9 	bl	8004be4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <vLineSensor4Init+0x30>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	4904      	ldr	r1, [pc, #16]	@ (800228c <vLineSensor4Init+0x34>)
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fda4 	bl	8003dc8 <HAL_ADC_Start_DMA>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000620 	.word	0x20000620
 800228c:	20000634 	.word	0x20000634

08002290 <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8002298:	4a09      	ldr	r2, [pc, #36]	@ (80022c0 <vLineSensor5Init+0x30>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <vLineSensor5Init+0x30>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	217f      	movs	r1, #127	@ 0x7f
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fc9d 	bl	8004be4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 80022aa:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <vLineSensor5Init+0x30>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4904      	ldr	r1, [pc, #16]	@ (80022c4 <vLineSensor5Init+0x34>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fd88 	bl	8003dc8 <HAL_ADC_Start_DMA>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000624 	.word	0x20000624
 80022c4:	20000638 	.word	0x20000638

080022c8 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 80022c8:	b4b0      	push	{r4, r5, r7}
 80022ca:	b091      	sub	sp, #68	@ 0x44
 80022cc:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 80022ce:	4b46      	ldr	r3, [pc, #280]	@ (80023e8 <fLineSensorCalculatePosition+0x120>)
 80022d0:	f107 0418 	add.w	r4, r7, #24
 80022d4:	461d      	mov	r5, r3
 80022d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 80022ea:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <fLineSensorCalculatePosition+0x124>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <fLineSensorCalculatePosition+0x128>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <fLineSensorCalculatePosition+0x12c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	4b3e      	ldr	r3, [pc, #248]	@ (80023f8 <fLineSensorCalculatePosition+0x130>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <fLineSensorCalculatePosition+0x134>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
 800230c:	e04c      	b.n	80023a8 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 800230e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3340      	adds	r3, #64	@ 0x40
 8002314:	443b      	add	r3, r7
 8002316:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800231a:	4939      	ldr	r1, [pc, #228]	@ (8002400 <fLineSensorCalculatePosition+0x138>)
 800231c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800231e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002322:	4293      	cmp	r3, r2
 8002324:	d33d      	bcc.n	80023a2 <fLineSensorCalculatePosition+0xda>
 8002326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3340      	adds	r3, #64	@ 0x40
 800232c:	443b      	add	r3, r7
 800232e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002332:	4934      	ldr	r1, [pc, #208]	@ (8002404 <fLineSensorCalculatePosition+0x13c>)
 8002334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800233a:	4293      	cmp	r3, r2
 800233c:	d831      	bhi.n	80023a2 <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3340      	adds	r3, #64	@ 0x40
 8002344:	443b      	add	r3, r7
 8002346:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800234a:	492d      	ldr	r1, [pc, #180]	@ (8002400 <fLineSensorCalculatePosition+0x138>)
 800234c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800234e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	3301      	adds	r3, #1
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800235e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	3340      	adds	r3, #64	@ 0x40
 8002370:	443b      	add	r3, r7
 8002372:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8002392:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002396:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 80023a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a4:	3301      	adds	r3, #1
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	ddaf      	ble.n	800230e <fLineSensorCalculatePosition+0x46>
        }
    }

    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 80023ae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d101      	bne.n	80023c0 <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 80023bc:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <fLineSensorCalculatePosition+0x140>)
 80023be:	e00b      	b.n	80023d8 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 80023c0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80023c4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80023c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 80023d0:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <fLineSensorCalculatePosition+0x144>)
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	6013      	str	r3, [r2, #0]
    return posicao;
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb0 0a67 	vmov.f32	s0, s15
 80023e0:	3744      	adds	r7, #68	@ 0x44
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bcb0      	pop	{r4, r5, r7}
 80023e6:	4770      	bx	lr
 80023e8:	0800c548 	.word	0x0800c548
 80023ec:	20000628 	.word	0x20000628
 80023f0:	2000062c 	.word	0x2000062c
 80023f4:	20000630 	.word	0x20000630
 80023f8:	20000634 	.word	0x20000634
 80023fc:	20000638 	.word	0x20000638
 8002400:	20000000 	.word	0x20000000
 8002404:	20000014 	.word	0x20000014
 8002408:	42c60000 	.word	0x42c60000
 800240c:	20000648 	.word	0x20000648

08002410 <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <isSensor3DetectingLine+0x38>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	461a      	mov	r2, r3
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <isSensor3DetectingLine+0x3c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d808      	bhi.n	8002434 <isSensor3DetectingLine+0x24>
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <isSensor3DetectingLine+0x40>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	461a      	mov	r2, r3
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <isSensor3DetectingLine+0x3c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d301      	bcc.n	8002434 <isSensor3DetectingLine+0x24>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <isSensor3DetectingLine+0x26>
 8002434:	2300      	movs	r3, #0
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000
 800244c:	20000630 	.word	0x20000630
 8002450:	20000014 	.word	0x20000014

08002454 <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <isSensor4DetectingLine+0x38>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	461a      	mov	r2, r3
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <isSensor4DetectingLine+0x3c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d808      	bhi.n	8002478 <isSensor4DetectingLine+0x24>
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <isSensor4DetectingLine+0x40>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <isSensor4DetectingLine+0x3c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d301      	bcc.n	8002478 <isSensor4DetectingLine+0x24>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <isSensor4DetectingLine+0x26>
 8002478:	2300      	movs	r3, #0
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	20000634 	.word	0x20000634
 8002494:	20000014 	.word	0x20000014

08002498 <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[2]);
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <isSensor2DetectingLine+0x38>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <isSensor2DetectingLine+0x3c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d808      	bhi.n	80024bc <isSensor2DetectingLine+0x24>
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <isSensor2DetectingLine+0x40>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <isSensor2DetectingLine+0x3c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d301      	bcc.n	80024bc <isSensor2DetectingLine+0x24>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <isSensor2DetectingLine+0x26>
 80024bc:	2300      	movs	r3, #0
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000
 80024d4:	2000062c 	.word	0x2000062c
 80024d8:	20000014 	.word	0x20000014
 80024dc:	00000000 	.word	0x00000000

080024e0 <ajustarVelocidadeMotores>:

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80024ea:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 80024ee:	4b7c      	ldr	r3, [pc, #496]	@ (80026e0 <ajustarVelocidadeMotores+0x200>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 80024f4:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <ajustarVelocidadeMotores+0x204>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 e o 4 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()) {
 80024fa:	f7ff ff89 	bl	8002410 <isSensor3DetectingLine>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d028      	beq.n	8002556 <ajustarVelocidadeMotores+0x76>
 8002504:	f7ff ffa6 	bl	8002454 <isSensor4DetectingLine>
 8002508:	4603      	mov	r3, r0
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <ajustarVelocidadeMotores+0x76>
        left_duty_cycle = max_duty_cycle;
 8002514:	4b74      	ldr	r3, [pc, #464]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle - 0.1;
 800251a:	4b73      	ldr	r3, [pc, #460]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36c      	add	r3, pc, #432	@ (adr r3, 80026d8 <ajustarVelocidadeMotores+0x1f8>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fd fed5 	bl	80002d8 <__aeabi_dsub>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe f887 	bl	8000648 <__aeabi_d2f>
 800253a:	4603      	mov	r3, r0
 800253c:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 800253e:	4a6b      	ldr	r2, [pc, #428]	@ (80026ec <ajustarVelocidadeMotores+0x20c>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8002544:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <ajustarVelocidadeMotores+0x210>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 800254a:	edd7 0a00 	vldr	s1, [r7]
 800254e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002552:	f7ff fdf7 	bl	8002144 <vSetRodasDC>
    }

    // Se o sensor 3 e o 2 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor2DetectingLine()) {
 8002556:	f7ff ff5b 	bl	8002410 <isSensor3DetectingLine>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d037      	beq.n	80025d0 <ajustarVelocidadeMotores+0xf0>
 8002560:	f7ff ff9a 	bl	8002498 <isSensor2DetectingLine>
 8002564:	4603      	mov	r3, r0
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02f      	beq.n	80025d0 <ajustarVelocidadeMotores+0xf0>
        left_duty_cycle = max_duty_cycle - 0.1;
 8002570:	4b5d      	ldr	r3, [pc, #372]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f80f 	bl	8000598 <__aeabi_f2d>
 800257a:	a357      	add	r3, pc, #348	@ (adr r3, 80026d8 <ajustarVelocidadeMotores+0x1f8>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fd feaa 	bl	80002d8 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe f85c 	bl	8000648 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
 8002592:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle +0.1 ;
 8002594:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fffd 	bl	8000598 <__aeabi_f2d>
 800259e:	a34e      	add	r3, pc, #312	@ (adr r3, 80026d8 <ajustarVelocidadeMotores+0x1f8>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fd fe9a 	bl	80002dc <__adddf3>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe f84a 	bl	8000648 <__aeabi_d2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80025b8:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <ajustarVelocidadeMotores+0x20c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 80025be:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <ajustarVelocidadeMotores+0x210>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80025c4:	edd7 0a00 	vldr	s1, [r7]
 80025c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80025cc:	f7ff fdba 	bl	8002144 <vSetRodasDC>
    }

    if (isSensor3DetectingLine()) {
 80025d0:	f7ff ff1e 	bl	8002410 <isSensor3DetectingLine>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d011      	beq.n	80025fe <ajustarVelocidadeMotores+0x11e>
        left_duty_cycle = max_duty_cycle;
 80025da:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle;
 80025e0:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80025e6:	4a41      	ldr	r2, [pc, #260]	@ (80026ec <ajustarVelocidadeMotores+0x20c>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 80025ec:	4a40      	ldr	r2, [pc, #256]	@ (80026f0 <ajustarVelocidadeMotores+0x210>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80025f2:	edd7 0a00 	vldr	s1, [r7]
 80025f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80025fa:	f7ff fda3 	bl	8002144 <vSetRodasDC>
    }

    // Se a velocidade da roda esquerda é maior, ajustamos a direita
    if (velEsquerda > velDireita) {
 80025fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002602:	edd7 7a04 	vldr	s15, [r7, #16]
 8002606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd26      	ble.n	800265e <ajustarVelocidadeMotores+0x17e>
        float ajuste = velEsquerda / velDireita; // Fator de ajuste
 8002610:	edd7 6a05 	vldr	s13, [r7, #20]
 8002614:	ed97 7a04 	vldr	s14, [r7, #16]
 8002618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261c:	edc7 7a02 	vstr	s15, [r7, #8]
        float novoDutyCycleDireita = right_duty_cycle * ajuste;
 8002620:	ed97 7a00 	vldr	s14, [r7]
 8002624:	edd7 7a02 	vldr	s15, [r7, #8]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	edc7 7a07 	vstr	s15, [r7, #28]
        //EsquMaiorDir = novoDutyCycleDireita;
        fsaidaDutyDireita =novoDutyCycleDireita;
 8002630:	4a2f      	ldr	r2, [pc, #188]	@ (80026f0 <ajustarVelocidadeMotores+0x210>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	6013      	str	r3, [r2, #0]
        // Limita o novo duty cycle para o máximo permitido
        if (novoDutyCycleDireita > max_duty_cycle) {
 8002636:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	dd02      	ble.n	8002650 <ajustarVelocidadeMotores+0x170>
            novoDutyCycleDireita = max_duty_cycle;
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61fb      	str	r3, [r7, #28]
        }
        vSetRodasDC(left_duty_cycle, novoDutyCycleDireita);
 8002650:	edd7 0a07 	vldr	s1, [r7, #28]
 8002654:	ed97 0a01 	vldr	s0, [r7, #4]
 8002658:	f7ff fd74 	bl	8002144 <vSetRodasDC>
    }
    else {
        // Se as velocidades estão equilibradas, aplica os duty cycles normais
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
    }
}
 800265c:	e035      	b.n	80026ca <ajustarVelocidadeMotores+0x1ea>
    else if (velDireita > velEsquerda) {
 800265e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002662:	edd7 7a05 	vldr	s15, [r7, #20]
 8002666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd26      	ble.n	80026be <ajustarVelocidadeMotores+0x1de>
        float ajuste = velDireita / velEsquerda; // Fator de ajuste
 8002670:	edd7 6a04 	vldr	s13, [r7, #16]
 8002674:	ed97 7a05 	vldr	s14, [r7, #20]
 8002678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267c:	edc7 7a03 	vstr	s15, [r7, #12]
        float novoDutyCycleEsquerda = left_duty_cycle * ajuste;
 8002680:	ed97 7a01 	vldr	s14, [r7, #4]
 8002684:	edd7 7a03 	vldr	s15, [r7, #12]
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a06 	vstr	s15, [r7, #24]
        fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 8002690:	4a16      	ldr	r2, [pc, #88]	@ (80026ec <ajustarVelocidadeMotores+0x20c>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]
        if (novoDutyCycleEsquerda > max_duty_cycle) {
 8002696:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ed97 7a06 	vldr	s14, [r7, #24]
 80026a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd02      	ble.n	80026b0 <ajustarVelocidadeMotores+0x1d0>
            novoDutyCycleEsquerda = max_duty_cycle;
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <ajustarVelocidadeMotores+0x208>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
        vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle);
 80026b0:	edd7 0a00 	vldr	s1, [r7]
 80026b4:	ed97 0a06 	vldr	s0, [r7, #24]
 80026b8:	f7ff fd44 	bl	8002144 <vSetRodasDC>
}
 80026bc:	e005      	b.n	80026ca <ajustarVelocidadeMotores+0x1ea>
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80026be:	edd7 0a00 	vldr	s1, [r7]
 80026c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80026c6:	f7ff fd3d 	bl	8002144 <vSetRodasDC>
}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	f3af 8000 	nop.w
 80026d8:	9999999a 	.word	0x9999999a
 80026dc:	3fb99999 	.word	0x3fb99999
 80026e0:	200004e0 	.word	0x200004e0
 80026e4:	200004e4 	.word	0x200004e4
 80026e8:	20000038 	.word	0x20000038
 80026ec:	20000640 	.word	0x20000640
 80026f0:	20000644 	.word	0x20000644

080026f4 <vLineSensorPIDControl>:


void vLineSensorPIDControl(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80026fa:	f000 ff37 	bl	800356c <HAL_GetTick>
 80026fe:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8002700:	4b77      	ldr	r3, [pc, #476]	@ (80028e0 <vLineSensorPIDControl+0x1ec>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002710:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80028e4 <vLineSensorPIDControl+0x1f0>
 8002714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002718:	4b73      	ldr	r3, [pc, #460]	@ (80028e8 <vLineSensorPIDControl+0x1f4>)
 800271a:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 800271e:	4b72      	ldr	r3, [pc, #456]	@ (80028e8 <vLineSensorPIDControl+0x1f4>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	d802      	bhi.n	8002734 <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <vLineSensorPIDControl+0x1f4>)
 8002730:	4a6e      	ldr	r2, [pc, #440]	@ (80028ec <vLineSensorPIDControl+0x1f8>)
 8002732:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 8002734:	f7ff fdc8 	bl	80022c8 <fLineSensorCalculatePosition>
 8002738:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 800273c:	edd7 7a00 	vldr	s15, [r7]
 8002740:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80028f0 <vLineSensorPIDControl+0x1fc>
 8002744:	eef4 7a47 	vcmp.f32	s15, s14
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	d106      	bne.n	800275c <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        vSetRodasDC(0, 0);
 800274e:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80028f4 <vLineSensorPIDControl+0x200>
 8002752:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80028f4 <vLineSensorPIDControl+0x200>
 8002756:	f7ff fcf5 	bl	8002144 <vSetRodasDC>
        return;
 800275a:	e0be      	b.n	80028da <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 800275c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80028f4 <vLineSensorPIDControl+0x200>
 8002760:	edd7 7a00 	vldr	s15, [r7]
 8002764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002768:	4b63      	ldr	r3, [pc, #396]	@ (80028f8 <vLineSensorPIDControl+0x204>)
 800276a:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 800276e:	4b62      	ldr	r3, [pc, #392]	@ (80028f8 <vLineSensorPIDControl+0x204>)
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	4b5c      	ldr	r3, [pc, #368]	@ (80028e8 <vLineSensorPIDControl+0x1f4>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <vLineSensorPIDControl+0x208>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <vLineSensorPIDControl+0x208>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 800278e:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <vLineSensorPIDControl+0x204>)
 8002790:	ed93 7a00 	vldr	s14, [r3]
 8002794:	4b5a      	ldr	r3, [pc, #360]	@ (8002900 <vLineSensorPIDControl+0x20c>)
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800279e:	4b52      	ldr	r3, [pc, #328]	@ (80028e8 <vLineSensorPIDControl+0x1f4>)
 80027a0:	ed93 7a00 	vldr	s14, [r3]
 80027a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a8:	4b56      	ldr	r3, [pc, #344]	@ (8002904 <vLineSensorPIDControl+0x210>)
 80027aa:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 80027ae:	4b56      	ldr	r3, [pc, #344]	@ (8002908 <vLineSensorPIDControl+0x214>)
 80027b0:	ed93 7a00 	vldr	s14, [r3]
 80027b4:	4b50      	ldr	r3, [pc, #320]	@ (80028f8 <vLineSensorPIDControl+0x204>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027be:	4b53      	ldr	r3, [pc, #332]	@ (800290c <vLineSensorPIDControl+0x218>)
 80027c0:	edd3 6a00 	vldr	s13, [r3]
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <vLineSensorPIDControl+0x208>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <vLineSensorPIDControl+0x21c>)
 80027d4:	edd3 6a00 	vldr	s13, [r3]
 80027d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <vLineSensorPIDControl+0x210>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	eef1 7a67 	vneg.f32	s15, s15
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <vLineSensorPIDControl+0x220>)
 80027ec:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 80027f0:	4b48      	ldr	r3, [pc, #288]	@ (8002914 <vLineSensorPIDControl+0x220>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a48      	ldr	r2, [pc, #288]	@ (8002918 <vLineSensorPIDControl+0x224>)
 80027f6:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 80027f8:	4b46      	ldr	r3, [pc, #280]	@ (8002914 <vLineSensorPIDControl+0x220>)
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <vLineSensorPIDControl+0x228>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	dd03      	ble.n	8002816 <vLineSensorPIDControl+0x122>
 800280e:	4b43      	ldr	r3, [pc, #268]	@ (800291c <vLineSensorPIDControl+0x228>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <vLineSensorPIDControl+0x220>)
 8002814:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 8002816:	4b41      	ldr	r3, [pc, #260]	@ (800291c <vLineSensorPIDControl+0x228>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	eeb1 7a67 	vneg.f32	s14, s15
 8002820:	4b3c      	ldr	r3, [pc, #240]	@ (8002914 <vLineSensorPIDControl+0x220>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	dd07      	ble.n	8002840 <vLineSensorPIDControl+0x14c>
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <vLineSensorPIDControl+0x228>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	eef1 7a67 	vneg.f32	s15, s15
 800283a:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <vLineSensorPIDControl+0x220>)
 800283c:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 8002840:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <vLineSensorPIDControl+0x204>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <vLineSensorPIDControl+0x20c>)
 8002846:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002848:	4a25      	ldr	r2, [pc, #148]	@ (80028e0 <vLineSensorPIDControl+0x1ec>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <vLineSensorPIDControl+0x22c>)
 8002850:	ed93 7a00 	vldr	s14, [r3]
 8002854:	4b2f      	ldr	r3, [pc, #188]	@ (8002914 <vLineSensorPIDControl+0x220>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 8002862:	4b2f      	ldr	r3, [pc, #188]	@ (8002920 <vLineSensorPIDControl+0x22c>)
 8002864:	ed93 7a00 	vldr	s14, [r3]
 8002868:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <vLineSensorPIDControl+0x220>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002872:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 1.0f) left_duty_cycle = 1.0f;
 8002876:	edd7 7a03 	vldr	s15, [r7, #12]
 800287a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	dd02      	ble.n	800288e <vLineSensorPIDControl+0x19a>
 8002888:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800288c:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = 0.0f;
 800288e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	d502      	bpl.n	80028a2 <vLineSensorPIDControl+0x1ae>
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 1.0f) right_duty_cycle = 1.0f;
 80028a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dd02      	ble.n	80028ba <vLineSensorPIDControl+0x1c6>
 80028b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028b8:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = 0.0f;
 80028ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80028be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d502      	bpl.n	80028ce <vLineSensorPIDControl+0x1da>
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 80028ce:	edd7 0a02 	vldr	s1, [r7, #8]
 80028d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80028d6:	f7ff fe03 	bl	80024e0 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000664 	.word	0x20000664
 80028e4:	447a0000 	.word	0x447a0000
 80028e8:	20000030 	.word	0x20000030
 80028ec:	3c23d70a 	.word	0x3c23d70a
 80028f0:	42c60000 	.word	0x42c60000
 80028f4:	00000000 	.word	0x00000000
 80028f8:	20000650 	.word	0x20000650
 80028fc:	20000658 	.word	0x20000658
 8002900:	20000654 	.word	0x20000654
 8002904:	2000065c 	.word	0x2000065c
 8002908:	20000028 	.word	0x20000028
 800290c:	2000064c 	.word	0x2000064c
 8002910:	2000002c 	.word	0x2000002c
 8002914:	20000660 	.word	0x20000660
 8002918:	2000063c 	.word	0x2000063c
 800291c:	20000038 	.word	0x20000038
 8002920:	20000034 	.word	0x20000034

08002924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_MspInit+0x44>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	4a0e      	ldr	r2, [pc, #56]	@ (8002968 <HAL_MspInit+0x44>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6613      	str	r3, [r2, #96]	@ 0x60
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_MspInit+0x44>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_MspInit+0x44>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <HAL_MspInit+0x44>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	@ 0x58
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_MspInit+0x44>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800295a:	f005 f805 	bl	8007968 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f000 fdc1 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <DMA1_Channel6_IRQHandler+0x10>)
 80029d2:	f002 fd64 	bl	800549e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000053c 	.word	0x2000053c

080029e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <DMA1_Channel7_IRQHandler+0x10>)
 80029e6:	f002 fd5a 	bl	800549e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000059c 	.word	0x2000059c

080029f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f8:	4803      	ldr	r0, [pc, #12]	@ (8002a08 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80029fa:	f006 fabd 	bl	8008f78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80029fe:	4803      	ldr	r0, [pc, #12]	@ (8002a0c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002a00:	f006 faba 	bl	8008f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	2000066c 	.word	0x2000066c
 8002a0c:	20000750 	.word	0x20000750

08002a10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a14:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002a16:	f006 faaf 	bl	8008f78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002a1a:	4803      	ldr	r0, [pc, #12]	@ (8002a28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002a1c:	f006 faac 	bl	8008f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000066c 	.word	0x2000066c
 8002a28:	2000079c 	.word	0x2000079c

08002a2c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a30:	4803      	ldr	r0, [pc, #12]	@ (8002a40 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002a32:	f006 faa1 	bl	8008f78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002a36:	4803      	ldr	r0, [pc, #12]	@ (8002a44 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002a38:	f006 fa9e 	bl	8008f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000066c 	.word	0x2000066c
 8002a44:	200007e8 	.word	0x200007e8

08002a48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <I2C2_EV_IRQHandler+0x10>)
 8002a4e:	f003 f9ef 	bl	8005e30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200004e8 	.word	0x200004e8

08002a5c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <I2C2_ER_IRQHandler+0x10>)
 8002a62:	f003 f9ff 	bl	8005e64 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200004e8 	.word	0x200004e8

08002a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a78:	f003 f808 	bl	8005a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <TIM8_BRK_IRQHandler+0x10>)
 8002a86:	f006 fa77 	bl	8008f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000704 	.word	0x20000704

08002a94 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <TIM8_UP_IRQHandler+0x10>)
 8002a9a:	f006 fa6d 	bl	8008f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000704 	.word	0x20000704

08002aa8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <DMA2_Channel1_IRQHandler+0x10>)
 8002aae:	f002 fcf6 	bl	800549e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200008c8 	.word	0x200008c8

08002abc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <DMA2_Channel2_IRQHandler+0x10>)
 8002ac2:	f002 fcec 	bl	800549e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000928 	.word	0x20000928

08002ad0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <LPUART1_IRQHandler+0x10>)
 8002ad6:	f007 fe9b 	bl	800a810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000834 	.word	0x20000834

08002ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aec:	4a14      	ldr	r2, [pc, #80]	@ (8002b40 <_sbrk+0x5c>)
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <_sbrk+0x60>)
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <_sbrk+0x64>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <_sbrk+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <_sbrk+0x64>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d207      	bcs.n	8002b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b14:	f009 f880 	bl	800bc18 <__errno>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e009      	b.n	8002b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <_sbrk+0x64>)
 8002b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20020000 	.word	0x20020000
 8002b44:	00000400 	.word	0x00000400
 8002b48:	20000668 	.word	0x20000668
 8002b4c:	20000ad8 	.word	0x20000ad8

08002b50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <SystemInit+0x20>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <SystemInit+0x20>)
 8002b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b09c      	sub	sp, #112	@ 0x70
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
 8002ba4:	615a      	str	r2, [r3, #20]
 8002ba6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2234      	movs	r2, #52	@ 0x34
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f009 f82a 	bl	800bc08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce8 <MX_TIM1_Init+0x174>)
 8002bb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002bba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bbc:	22a9      	movs	r2, #169	@ 0xa9
 8002bbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc0:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002bc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bce:	4b45      	ldr	r3, [pc, #276]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bd4:	4b43      	ldr	r3, [pc, #268]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bda:	4b42      	ldr	r3, [pc, #264]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002be0:	4840      	ldr	r0, [pc, #256]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002be2:	f005 fe4d 	bl	8008880 <HAL_TIM_Base_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bec:	f7ff fa70 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4839      	ldr	r0, [pc, #228]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002bfe:	f006 fcbb 	bl	8009578 <HAL_TIM_ConfigClockSource>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c08:	f7ff fa62 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c0c:	4835      	ldr	r0, [pc, #212]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002c0e:	f005 fe8e 	bl	800892e <HAL_TIM_PWM_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c18:	f7ff fa5a 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	482d      	ldr	r0, [pc, #180]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002c30:	f007 fba0 	bl	800a374 <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c3a:	f7ff fa49 	bl	80020d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c3e:	2360      	movs	r3, #96	@ 0x60
 8002c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c46:	2300      	movs	r3, #0
 8002c48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4820      	ldr	r0, [pc, #128]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002c64:	f006 fb74 	bl	8009350 <HAL_TIM_PWM_ConfigChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c6e:	f7ff fa2f 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c76:	2204      	movs	r2, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	481a      	ldr	r0, [pc, #104]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002c7c:	f006 fb68 	bl	8009350 <HAL_TIM_PWM_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002c86:	f7ff fa23 	bl	80020d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4807      	ldr	r0, [pc, #28]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002cc8:	f007 fbea 	bl	800a4a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002cd2:	f7ff f9fd 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <MX_TIM1_Init+0x170>)
 8002cd8:	f000 fa7c 	bl	80031d4 <HAL_TIM_MspPostInit>

}
 8002cdc:	bf00      	nop
 8002cde:	3770      	adds	r7, #112	@ 0x70
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000066c 	.word	0x2000066c
 8002ce8:	40012c00 	.word	0x40012c00

08002cec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002cfe:	4a15      	ldr	r2, [pc, #84]	@ (8002d54 <MX_TIM6_Init+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002d02:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d1c:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d1e:	f005 fdaf 	bl	8008880 <HAL_TIM_Base_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d28:	f7ff f9d2 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <MX_TIM6_Init+0x64>)
 8002d3a:	f007 fb1b 	bl	800a374 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d44:	f7ff f9c4 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200006b8 	.word	0x200006b8
 8002d54:	40001000 	.word	0x40001000

08002d58 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d78:	4a20      	ldr	r2, [pc, #128]	@ (8002dfc <MX_TIM8_Init+0xa4>)
 8002d7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 17000-1;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d7e:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002d82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d8c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002d90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002da4:	4814      	ldr	r0, [pc, #80]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002da6:	f005 fd6b 	bl	8008880 <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8002db0:	f7ff f98e 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002dba:	f107 0310 	add.w	r3, r7, #16
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480d      	ldr	r0, [pc, #52]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002dc2:	f006 fbd9 	bl	8009578 <HAL_TIM_ConfigClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002dcc:	f7ff f980 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	@ (8002df8 <MX_TIM8_Init+0xa0>)
 8002de2:	f007 fac7 	bl	800a374 <HAL_TIMEx_MasterConfigSynchronization>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002dec:	f7ff f970 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000704 	.word	0x20000704
 8002dfc:	40013400 	.word	0x40013400

08002e00 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <MX_TIM15_Init+0xa0>)
 8002e22:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e26:	22a9      	movs	r2, #169	@ 0xa9
 8002e28:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e36:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002e4a:	4814      	ldr	r0, [pc, #80]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e4c:	f005 fd18 	bl	8008880 <HAL_TIM_Base_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002e56:	f7ff f93b 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4619      	mov	r1, r3
 8002e66:	480d      	ldr	r0, [pc, #52]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e68:	f006 fb86 	bl	8009578 <HAL_TIM_ConfigClockSource>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002e72:	f7ff f92d 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	@ (8002e9c <MX_TIM15_Init+0x9c>)
 8002e84:	f007 fa76 	bl	800a374 <HAL_TIMEx_MasterConfigSynchronization>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002e8e:	f7ff f91f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000750 	.word	0x20000750
 8002ea0:	40014000 	.word	0x40014000

08002ea4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eaa:	463b      	mov	r3, r7
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <MX_TIM16_Init+0x90>)
 8002eba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ebe:	22a9      	movs	r2, #169	@ 0xa9
 8002ec0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002eca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ece:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ed6:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002edc:	4b14      	ldr	r3, [pc, #80]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ee2:	4813      	ldr	r0, [pc, #76]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ee4:	f005 fccc 	bl	8008880 <HAL_TIM_Base_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002eee:	f7ff f8ef 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002ef2:	480f      	ldr	r0, [pc, #60]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002ef4:	f005 fe8e 	bl	8008c14 <HAL_TIM_IC_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002efe:	f7ff f8e7 	bl	80020d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f02:	2300      	movs	r3, #0
 8002f04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f06:	2301      	movs	r3, #1
 8002f08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <MX_TIM16_Init+0x8c>)
 8002f1a:	f006 f97c 	bl	8009216 <HAL_TIM_IC_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002f24:	f7ff f8d4 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000079c 	.word	0x2000079c
 8002f34:	40014400 	.word	0x40014400

08002f38 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f3e:	463b      	mov	r3, r7
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc8 <MX_TIM17_Init+0x90>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8002f50:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f52:	22a9      	movs	r2, #169	@ 0xa9
 8002f54:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f56:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f62:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f76:	4813      	ldr	r0, [pc, #76]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f78:	f005 fc82 	bl	8008880 <HAL_TIM_Base_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002f82:	f7ff f8a5 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002f86:	480f      	ldr	r0, [pc, #60]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002f88:	f005 fe44 	bl	8008c14 <HAL_TIM_IC_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002f92:	f7ff f89d 	bl	80020d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f96:	2300      	movs	r3, #0
 8002f98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	@ (8002fc4 <MX_TIM17_Init+0x8c>)
 8002fae:	f006 f932 	bl	8009216 <HAL_TIM_IC_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002fb8:	f7ff f88a 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200007e8 	.word	0x200007e8
 8002fc8:	40014800 	.word	0x40014800

08002fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b090      	sub	sp, #64	@ 0x40
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a72      	ldr	r2, [pc, #456]	@ (80031b4 <HAL_TIM_Base_MspInit+0x1e8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d124      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fee:	4b72      	ldr	r3, [pc, #456]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff2:	4a71      	ldr	r2, [pc, #452]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8002ff4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003004:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	2018      	movs	r0, #24
 800300c:	f002 f82f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003010:	2018      	movs	r0, #24
 8003012:	f002 f846 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	2019      	movs	r0, #25
 800301c:	f002 f827 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003020:	2019      	movs	r0, #25
 8003022:	f002 f83e 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	201a      	movs	r0, #26
 800302c:	f002 f81f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003030:	201a      	movs	r0, #26
 8003032:	f002 f836 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003036:	e0b8      	b.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5f      	ldr	r2, [pc, #380]	@ (80031bc <HAL_TIM_Base_MspInit+0x1f0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003042:	4b5d      	ldr	r3, [pc, #372]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	4a5c      	ldr	r2, [pc, #368]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
 800304e:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800305a:	e0a6      	b.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM8)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a57      	ldr	r2, [pc, #348]	@ (80031c0 <HAL_TIM_Base_MspInit+0x1f4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d11c      	bne.n	80030a0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003066:	4b54      	ldr	r3, [pc, #336]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	4a53      	ldr	r2, [pc, #332]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 800306c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003070:	6613      	str	r3, [r2, #96]	@ 0x60
 8003072:	4b51      	ldr	r3, [pc, #324]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	202b      	movs	r0, #43	@ 0x2b
 8003084:	f001 fff3 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8003088:	202b      	movs	r0, #43	@ 0x2b
 800308a:	f002 f80a 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	202c      	movs	r0, #44	@ 0x2c
 8003094:	f001 ffeb 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003098:	202c      	movs	r0, #44	@ 0x2c
 800309a:	f002 f802 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 800309e:	e084      	b.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM15)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a47      	ldr	r2, [pc, #284]	@ (80031c4 <HAL_TIM_Base_MspInit+0x1f8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d114      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030aa:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ae:	4a42      	ldr	r2, [pc, #264]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030b6:	4b40      	ldr	r3, [pc, #256]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	2018      	movs	r0, #24
 80030c8:	f001 ffd1 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80030cc:	2018      	movs	r0, #24
 80030ce:	f001 ffe8 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 80030d2:	e06a      	b.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_TIM_Base_MspInit+0x1fc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d130      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030de:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	4a35      	ldr	r2, [pc, #212]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4b30      	ldr	r3, [pc, #192]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a2f      	ldr	r2, [pc, #188]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 800310e:	2310      	movs	r3, #16
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800311e:	2301      	movs	r3, #1
 8003120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003126:	4619      	mov	r1, r3
 8003128:	4828      	ldr	r0, [pc, #160]	@ (80031cc <HAL_TIM_Base_MspInit+0x200>)
 800312a:	f002 fb15 	bl	8005758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	2019      	movs	r0, #25
 8003134:	f001 ff9b 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003138:	2019      	movs	r0, #25
 800313a:	f001 ffb2 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 800313e:	e034      	b.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <HAL_TIM_Base_MspInit+0x204>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12f      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	4a1a      	ldr	r2, [pc, #104]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003154:	6613      	str	r3, [r2, #96]	@ 0x60
 8003156:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_TIM_Base_MspInit+0x1ec>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 800317a:	2320      	movs	r3, #32
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800318a:	230a      	movs	r3, #10
 800318c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003192:	4619      	mov	r1, r3
 8003194:	480d      	ldr	r0, [pc, #52]	@ (80031cc <HAL_TIM_Base_MspInit+0x200>)
 8003196:	f002 fadf 	bl	8005758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	201a      	movs	r0, #26
 80031a0:	f001 ff65 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80031a4:	201a      	movs	r0, #26
 80031a6:	f001 ff7c 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3740      	adds	r7, #64	@ 0x40
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40001000 	.word	0x40001000
 80031c0:	40013400 	.word	0x40013400
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	48000400 	.word	0x48000400
 80031d0:	40014800 	.word	0x40014800

080031d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <HAL_TIM_MspPostInit+0x64>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d11b      	bne.n	800322e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_TIM_MspPostInit+0x68>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	4a10      	ldr	r2, [pc, #64]	@ (800323c <HAL_TIM_MspPostInit+0x68>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_TIM_MspPostInit+0x68>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 800320e:	2303      	movs	r3, #3
 8003210:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800321e:	2302      	movs	r3, #2
 8003220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	4619      	mov	r1, r3
 8003228:	4805      	ldr	r0, [pc, #20]	@ (8003240 <HAL_TIM_MspPostInit+0x6c>)
 800322a:	f002 fa95 	bl	8005758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800322e:	bf00      	nop
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40021000 	.word	0x40021000
 8003240:	48000800 	.word	0x48000800

08003244 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003248:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 800324a:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <MX_LPUART1_UART_Init+0x90>)
 800324c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003254:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800325c:	4b1c      	ldr	r3, [pc, #112]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003262:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 800326a:	220c      	movs	r2, #12
 800326c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326e:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003274:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003280:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003286:	4812      	ldr	r0, [pc, #72]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 8003288:	f007 f9e4 	bl	800a654 <HAL_UART_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003292:	f7fe ff1d 	bl	80020d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003296:	2100      	movs	r1, #0
 8003298:	480d      	ldr	r0, [pc, #52]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 800329a:	f008 fbca 	bl	800ba32 <HAL_UARTEx_SetTxFifoThreshold>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80032a4:	f7fe ff14 	bl	80020d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a8:	2100      	movs	r1, #0
 80032aa:	4809      	ldr	r0, [pc, #36]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 80032ac:	f008 fbff 	bl	800baae <HAL_UARTEx_SetRxFifoThreshold>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80032b6:	f7fe ff0b 	bl	80020d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80032ba:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <MX_LPUART1_UART_Init+0x8c>)
 80032bc:	f008 fb80 	bl	800b9c0 <HAL_UARTEx_DisableFifoMode>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80032c6:	f7fe ff03 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000834 	.word	0x20000834
 80032d4:	40008000 	.word	0x40008000

080032d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b09e      	sub	sp, #120	@ 0x78
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	2254      	movs	r2, #84	@ 0x54
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f008 fc85 	bl	800bc08 <memset>
  if(uartHandle->Instance==LPUART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a4d      	ldr	r2, [pc, #308]	@ (8003438 <HAL_UART_MspInit+0x160>)
 8003304:	4293      	cmp	r3, r2
 8003306:	f040 8092 	bne.w	800342e <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800330a:	2320      	movs	r3, #32
 800330c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4618      	mov	r0, r3
 8003318:	f005 f864 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003322:	f7fe fed5 	bl	80020d0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003326:	4b45      	ldr	r3, [pc, #276]	@ (800343c <HAL_UART_MspInit+0x164>)
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	4a44      	ldr	r2, [pc, #272]	@ (800343c <HAL_UART_MspInit+0x164>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003332:	4b42      	ldr	r3, [pc, #264]	@ (800343c <HAL_UART_MspInit+0x164>)
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <HAL_UART_MspInit+0x164>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003342:	4a3e      	ldr	r2, [pc, #248]	@ (800343c <HAL_UART_MspInit+0x164>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800334a:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <HAL_UART_MspInit+0x164>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003356:	230c      	movs	r3, #12
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003366:	230c      	movs	r3, #12
 8003368:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003374:	f002 f9f0 	bl	8005758 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA2_Channel1;
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_UART_MspInit+0x168>)
 800337a:	4a32      	ldr	r2, [pc, #200]	@ (8003444 <HAL_UART_MspInit+0x16c>)
 800337c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800337e:	4b30      	ldr	r3, [pc, #192]	@ (8003440 <HAL_UART_MspInit+0x168>)
 8003380:	2222      	movs	r2, #34	@ 0x22
 8003382:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003384:	4b2e      	ldr	r3, [pc, #184]	@ (8003440 <HAL_UART_MspInit+0x168>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338a:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_UART_MspInit+0x168>)
 800338c:	2200      	movs	r2, #0
 800338e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_UART_MspInit+0x168>)
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003396:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <HAL_UART_MspInit+0x168>)
 8003398:	2200      	movs	r2, #0
 800339a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800339c:	4b28      	ldr	r3, [pc, #160]	@ (8003440 <HAL_UART_MspInit+0x168>)
 800339e:	2200      	movs	r2, #0
 80033a0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80033a2:	4b27      	ldr	r3, [pc, #156]	@ (8003440 <HAL_UART_MspInit+0x168>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_UART_MspInit+0x168>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80033ae:	4824      	ldr	r0, [pc, #144]	@ (8003440 <HAL_UART_MspInit+0x168>)
 80033b0:	f001 fe92 	bl	80050d8 <HAL_DMA_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80033ba:	f7fe fe89 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_UART_MspInit+0x168>)
 80033c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003440 <HAL_UART_MspInit+0x168>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033ce:	4a1f      	ldr	r2, [pc, #124]	@ (800344c <HAL_UART_MspInit+0x174>)
 80033d0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033d4:	2223      	movs	r2, #35	@ 0x23
 80033d6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033da:	2210      	movs	r2, #16
 80033dc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033e6:	2280      	movs	r2, #128	@ 0x80
 80033e8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_UART_MspInit+0x170>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003402:	4811      	ldr	r0, [pc, #68]	@ (8003448 <HAL_UART_MspInit+0x170>)
 8003404:	f001 fe68 	bl	80050d8 <HAL_DMA_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800340e:	f7fe fe5f 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <HAL_UART_MspInit+0x170>)
 8003416:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003418:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <HAL_UART_MspInit+0x170>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	205b      	movs	r0, #91	@ 0x5b
 8003424:	f001 fe23 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003428:	205b      	movs	r0, #91	@ 0x5b
 800342a:	f001 fe3a 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800342e:	bf00      	nop
 8003430:	3778      	adds	r7, #120	@ 0x78
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40008000 	.word	0x40008000
 800343c:	40021000 	.word	0x40021000
 8003440:	200008c8 	.word	0x200008c8
 8003444:	40020408 	.word	0x40020408
 8003448:	20000928 	.word	0x20000928
 800344c:	4002041c 	.word	0x4002041c

08003450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003450:	480d      	ldr	r0, [pc, #52]	@ (8003488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003452:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003454:	f7ff fb7c 	bl	8002b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003458:	480c      	ldr	r0, [pc, #48]	@ (800348c <LoopForever+0x6>)
  ldr r1, =_edata
 800345a:	490d      	ldr	r1, [pc, #52]	@ (8003490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800345c:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <LoopForever+0xe>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003460:	e002      	b.n	8003468 <LoopCopyDataInit>

08003462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003466:	3304      	adds	r3, #4

08003468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800346c:	d3f9      	bcc.n	8003462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003470:	4c0a      	ldr	r4, [pc, #40]	@ (800349c <LoopForever+0x16>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003474:	e001      	b.n	800347a <LoopFillZerobss>

08003476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003478:	3204      	adds	r2, #4

0800347a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800347c:	d3fb      	bcc.n	8003476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800347e:	f008 fbd1 	bl	800bc24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003482:	f7fe fd65 	bl	8001f50 <main>

08003486 <LoopForever>:

LoopForever:
    b LoopForever
 8003486:	e7fe      	b.n	8003486 <LoopForever>
  ldr   r0, =_estack
 8003488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003490:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003494:	0800c5e4 	.word	0x0800c5e4
  ldr r2, =_sbss
 8003498:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800349c:	20000ad4 	.word	0x20000ad4

080034a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034a0:	e7fe      	b.n	80034a0 <ADC1_2_IRQHandler>

080034a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f001 fdd3 	bl	8005058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 f80e 	bl	80034d4 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	71fb      	strb	r3, [r7, #7]
 80034c2:	e001      	b.n	80034c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c4:	f7ff fa2e 	bl	8002924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c8:	79fb      	ldrb	r3, [r7, #7]

}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034e0:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_InitTick+0x68>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d022      	beq.n	800352e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_InitTick+0x6c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <HAL_InitTick+0x68>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80034f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fdde 	bl	80050be <HAL_SYSTICK_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	d809      	bhi.n	8003522 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800350e:	2200      	movs	r2, #0
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	f001 fdaa 	bl	800506e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_InitTick+0x70>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e007      	b.n	8003532 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e004      	b.n	8003532 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e001      	b.n	8003532 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000044 	.word	0x20000044
 8003540:	2000003c 	.word	0x2000003c
 8003544:	20000040 	.word	0x20000040

08003548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_IncTick+0x1c>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_IncTick+0x20>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4413      	add	r3, r2
 8003556:	4a03      	ldr	r2, [pc, #12]	@ (8003564 <HAL_IncTick+0x1c>)
 8003558:	6013      	str	r3, [r2, #0]
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000988 	.word	0x20000988
 8003568:	20000044 	.word	0x20000044

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000988 	.word	0x20000988

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d004      	beq.n	80035a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_Delay+0x40>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4413      	add	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035a8:	bf00      	nop
 80035aa:	f7ff ffdf 	bl	800356c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d8f7      	bhi.n	80035aa <HAL_Delay+0x26>
  {
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000044 	.word	0x20000044

080035c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3360      	adds	r3, #96	@ 0x60
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <LL_ADC_SetOffset+0x44>)
 8003652:	4013      	ands	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	03fff000 	.word	0x03fff000

08003678 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3360      	adds	r3, #96	@ 0x60
 8003686:	461a      	mov	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3360      	adds	r3, #96	@ 0x60
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036da:	b480      	push	{r7}
 80036dc:	b087      	sub	sp, #28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3360      	adds	r3, #96	@ 0x60
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	431a      	orrs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3360      	adds	r3, #96	@ 0x60
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	615a      	str	r2, [r3, #20]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3330      	adds	r3, #48	@ 0x30
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	4413      	add	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	211f      	movs	r1, #31
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	f003 011f 	and.w	r1, r3, #31
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	431a      	orrs	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b087      	sub	sp, #28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3314      	adds	r3, #20
 80037fa:	461a      	mov	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	0e5b      	lsrs	r3, r3, #25
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2107      	movs	r1, #7
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	0d1b      	lsrs	r3, r3, #20
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	431a      	orrs	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	43db      	mvns	r3, r3
 800385a:	401a      	ands	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0318 	and.w	r3, r3, #24
 8003862:	4908      	ldr	r1, [pc, #32]	@ (8003884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003864:	40d9      	lsrs	r1, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	400b      	ands	r3, r1
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	431a      	orrs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	0007ffff 	.word	0x0007ffff

08003888 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 031f 	and.w	r3, r3, #31
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6093      	str	r3, [r2, #8]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d101      	bne.n	80038e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003904:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800392c:	d101      	bne.n	8003932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003950:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <LL_ADC_IsEnabled+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_ADC_IsEnabled+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d101      	bne.n	80039ce <LL_ADC_IsDisableOngoing+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_IsDisableOngoing+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d101      	bne.n	8003a1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d101      	bne.n	8003a42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1a9      	b.n	8003dbe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fd fa0b 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff19 	bl	80038c8 <LL_ADC_IsDeepPowerDownEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff feff 	bl	80038a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff34 	bl	8003918 <LL_ADC_IsInternalRegulatorEnabled>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d115      	bne.n	8003ae2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff18 	bl	80038f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8003d34 <HAL_ADC_Init+0x2e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	4a9c      	ldr	r2, [pc, #624]	@ (8003d38 <HAL_ADC_Init+0x2e8>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	3301      	adds	r3, #1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ad4:	e002      	b.n	8003adc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff16 	bl	8003918 <LL_ADC_IsInternalRegulatorEnabled>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	f043 0210 	orr.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff76 	bl	8003a04 <LL_ADC_REG_IsConversionOngoing>
 8003b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 8142 	bne.w	8003dac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 813e 	bne.w	8003dac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b38:	f043 0202 	orr.w	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff23 	bl	8003990 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d141      	bne.n	8003bd4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_Init+0x114>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a77      	ldr	r2, [pc, #476]	@ (8003d3c <HAL_ADC_Init+0x2ec>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10f      	bne.n	8003b84 <HAL_ADC_Init+0x134>
 8003b64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b68:	f7ff ff12 	bl	8003990 <LL_ADC_IsEnabled>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4873      	ldr	r0, [pc, #460]	@ (8003d3c <HAL_ADC_Init+0x2ec>)
 8003b70:	f7ff ff0e 	bl	8003990 <LL_ADC_IsEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4323      	orrs	r3, r4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_ADC_Init+0x15a>
 8003b84:	486e      	ldr	r0, [pc, #440]	@ (8003d40 <HAL_ADC_Init+0x2f0>)
 8003b86:	f7ff ff03 	bl	8003990 <LL_ADC_IsEnabled>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	486d      	ldr	r0, [pc, #436]	@ (8003d44 <HAL_ADC_Init+0x2f4>)
 8003b8e:	f7ff feff 	bl	8003990 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	431c      	orrs	r4, r3
 8003b96:	486c      	ldr	r0, [pc, #432]	@ (8003d48 <HAL_ADC_Init+0x2f8>)
 8003b98:	f7ff fefa 	bl	8003990 <LL_ADC_IsEnabled>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4323      	orrs	r3, r4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb6:	d004      	beq.n	8003bc2 <HAL_ADC_Init+0x172>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8003d3c <HAL_ADC_Init+0x2ec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADC_Init+0x176>
 8003bc2:	4a62      	ldr	r2, [pc, #392]	@ (8003d4c <HAL_ADC_Init+0x2fc>)
 8003bc4:	e000      	b.n	8003bc8 <HAL_ADC_Init+0x178>
 8003bc6:	4a62      	ldr	r2, [pc, #392]	@ (8003d50 <HAL_ADC_Init+0x300>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7ff fcfa 	bl	80035c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7f5b      	ldrb	r3, [r3, #29]
 8003bd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003be4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003bea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bf2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	045b      	lsls	r3, r3, #17
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	4b48      	ldr	r3, [pc, #288]	@ (8003d54 <HAL_ADC_Init+0x304>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	69b9      	ldr	r1, [r7, #24]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fee5 	bl	8003a2a <LL_ADC_INJ_IsConversionOngoing>
 8003c60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d17f      	bne.n	8003d68 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d17c      	bne.n	8003d68 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c8a:	f023 0302 	bic.w	r3, r3, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003cae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cb8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6911      	ldr	r1, [r2, #16]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003cce:	e013      	b.n	8003cf8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cf4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d12a      	bne.n	8003d58 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d24:	430a      	orrs	r2, r1
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e019      	b.n	8003d68 <HAL_ADC_Init+0x318>
 8003d34:	2000003c 	.word	0x2000003c
 8003d38:	053e2d63 	.word	0x053e2d63
 8003d3c:	50000100 	.word	0x50000100
 8003d40:	50000400 	.word	0x50000400
 8003d44:	50000500 	.word	0x50000500
 8003d48:	50000600 	.word	0x50000600
 8003d4c:	50000300 	.word	0x50000300
 8003d50:	50000700 	.word	0x50000700
 8003d54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f023 010f 	bic.w	r1, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d88:	e007      	b.n	8003d9a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020f 	bic.w	r2, r2, #15
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003daa:	e007      	b.n	8003dbc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	f043 0210 	orr.w	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_Start_DMA+0x20>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5a      	ldr	r2, [pc, #360]	@ (8003f4c <HAL_ADC_Start_DMA+0x184>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_Start_DMA+0x24>
 8003de8:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_ADC_Start_DMA+0x188>)
 8003dea:	e000      	b.n	8003dee <HAL_ADC_Start_DMA+0x26>
 8003dec:	4b59      	ldr	r3, [pc, #356]	@ (8003f54 <HAL_ADC_Start_DMA+0x18c>)
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fd4a 	bl	8003888 <LL_ADC_GetMultimode>
 8003df4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fe02 	bl	8003a04 <LL_ADC_REG_IsConversionOngoing>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 809b 	bne.w	8003f3e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x4e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e096      	b.n	8003f44 <HAL_ADC_Start_DMA+0x17c>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4d      	ldr	r2, [pc, #308]	@ (8003f58 <HAL_ADC_Start_DMA+0x190>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d008      	beq.n	8003e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d002      	beq.n	8003e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d17a      	bne.n	8003f30 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fcf6 	bl	800482c <ADC_Enable>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d16d      	bne.n	8003f26 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3a      	ldr	r2, [pc, #232]	@ (8003f4c <HAL_ADC_Start_DMA+0x184>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_ADC_Start_DMA+0xb4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f5c <HAL_ADC_Start_DMA+0x194>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d002      	beq.n	8003e78 <HAL_ADC_Start_DMA+0xb0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_Start_DMA+0xb8>
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_ADC_Start_DMA+0x198>)
 8003e7a:	e001      	b.n	8003e80 <HAL_ADC_Start_DMA+0xb8>
 8003e7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d002      	beq.n	8003e8e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f023 0206 	bic.w	r2, r3, #6
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <HAL_ADC_Start_DMA+0x19c>)
 8003ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	4a28      	ldr	r2, [pc, #160]	@ (8003f68 <HAL_ADC_Start_DMA+0x1a0>)
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	4a27      	ldr	r2, [pc, #156]	@ (8003f6c <HAL_ADC_Start_DMA+0x1a4>)
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	221c      	movs	r2, #28
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0210 	orr.w	r2, r2, #16
 8003ef0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3340      	adds	r3, #64	@ 0x40
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f001 f989 	bl	8005228 <HAL_DMA_Start_IT>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fd5c 	bl	80039dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f24:	e00d      	b.n	8003f42 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003f2e:	e008      	b.n	8003f42 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003f3c:	e001      	b.n	8003f42 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	50000100 	.word	0x50000100
 8003f50:	50000300 	.word	0x50000300
 8003f54:	50000700 	.word	0x50000700
 8003f58:	50000600 	.word	0x50000600
 8003f5c:	50000500 	.word	0x50000500
 8003f60:	50000400 	.word	0x50000400
 8003f64:	08004a17 	.word	0x08004a17
 8003f68:	08004aef 	.word	0x08004aef
 8003f6c:	08004b0b 	.word	0x08004b0b

08003f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b6      	sub	sp, #216	@ 0xd8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x24>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f000 bc13 	b.w	80047f6 <HAL_ADC_ConfigChannel+0x84a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fd11 	bl	8003a04 <LL_ADC_REG_IsConversionOngoing>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 83f3 	bne.w	80047d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f7ff fbcb 	bl	8003792 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fcff 	bl	8003a04 <LL_ADC_REG_IsConversionOngoing>
 8004006:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fd0b 	bl	8003a2a <LL_ADC_INJ_IsConversionOngoing>
 8004014:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004018:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 81d9 	bne.w	80043d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 81d4 	bne.w	80043d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004034:	d10f      	bne.n	8004056 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	4619      	mov	r1, r3
 8004042:	f7ff fbd2 	bl	80037ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fb79 	bl	8003746 <LL_ADC_SetSamplingTimeCommonConfig>
 8004054:	e00e      	b.n	8004074 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	461a      	mov	r2, r3
 8004064:	f7ff fbc1 	bl	80037ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fb69 	bl	8003746 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d022      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6919      	ldr	r1, [r3, #16]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040a6:	f7ff fac3 	bl	8003630 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6919      	ldr	r1, [r3, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7ff fb0f 	bl	80036da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x126>
 80040cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040d0:	e000      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x128>
 80040d2:	2300      	movs	r3, #0
 80040d4:	461a      	mov	r2, r3
 80040d6:	f7ff fb1b 	bl	8003710 <LL_ADC_SetOffsetSaturation>
 80040da:	e17b      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fac8 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x15c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fabd 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	f003 021f 	and.w	r2, r3, #31
 8004106:	e01e      	b.n	8004146 <HAL_ADC_ConfigChannel+0x19a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fab2 	bl	8003678 <LL_ADC_GetOffsetChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800412a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800412e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004136:	2320      	movs	r3, #32
 8004138:	e004      	b.n	8004144 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800413a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414e:	2b00      	cmp	r3, #0
 8004150:	d105      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1b2>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0e9b      	lsrs	r3, r3, #26
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	e018      	b.n	8004190 <HAL_ADC_ConfigChannel+0x1e4>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800417a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e004      	b.n	8004190 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004190:	429a      	cmp	r2, r3
 8004192:	d106      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fa81 	bl	80036a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fa65 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x222>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fa5a 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80041c4:	4603      	mov	r3, r0
 80041c6:	0e9b      	lsrs	r3, r3, #26
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	e01e      	b.n	800420c <HAL_ADC_ConfigChannel+0x260>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fa4f 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e004      	b.n	800420a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x278>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	e018      	b.n	8004256 <HAL_ADC_ConfigChannel+0x2aa>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800423c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e004      	b.n	8004256 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004256:	429a      	cmp	r2, r3
 8004258:	d106      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fa1e 	bl	80036a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fa02 	bl	8003678 <LL_ADC_GetOffsetChannel>
 8004274:	4603      	mov	r3, r0
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x2e8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff f9f7 	bl	8003678 <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	f003 021f 	and.w	r2, r3, #31
 8004292:	e01e      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x326>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f9ec 	bl	8003678 <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80042b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80042ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80042c2:	2320      	movs	r3, #32
 80042c4:	e004      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80042c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x33e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	0e9b      	lsrs	r3, r3, #26
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	e016      	b.n	8004318 <HAL_ADC_ConfigChannel+0x36c>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004302:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800430a:	2320      	movs	r3, #32
 800430c:	e004      	b.n	8004318 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800430e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004318:	429a      	cmp	r2, r3
 800431a:	d106      	bne.n	800432a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f9bd 	bl	80036a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2103      	movs	r1, #3
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff f9a1 	bl	8003678 <LL_ADC_GetOffsetChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x3aa>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2103      	movs	r1, #3
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f996 	bl	8003678 <LL_ADC_GetOffsetChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	0e9b      	lsrs	r3, r3, #26
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	e017      	b.n	8004386 <HAL_ADC_ConfigChannel+0x3da>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2103      	movs	r1, #3
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f98b 	bl	8003678 <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800436e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004370:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004372:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e003      	b.n	8004384 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800437c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <HAL_ADC_ConfigChannel+0x3f2>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0e9b      	lsrs	r3, r3, #26
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	e011      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x416>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80043ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80043b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80043b6:	2320      	movs	r3, #32
 80043b8:	e003      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80043ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d106      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2103      	movs	r1, #3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff f968 	bl	80036a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fad9 	bl	8003990 <LL_ADC_IsEnabled>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 813d 	bne.w	8004660 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7ff fa24 	bl	8003840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4aa2      	ldr	r2, [pc, #648]	@ (8004688 <HAL_ADC_ConfigChannel+0x6dc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f040 812e 	bne.w	8004660 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_ADC_ConfigChannel+0x480>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2b09      	cmp	r3, #9
 8004422:	bf94      	ite	ls
 8004424:	2301      	movls	r3, #1
 8004426:	2300      	movhi	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e019      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4b4>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800443a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800443e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004444:	2320      	movs	r3, #32
 8004446:	e003      	b.n	8004450 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004448:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2b09      	cmp	r3, #9
 8004458:	bf94      	ite	ls
 800445a:	2301      	movls	r3, #1
 800445c:	2300      	movhi	r3, #0
 800445e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004460:	2b00      	cmp	r3, #0
 8004462:	d079      	beq.n	8004558 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x4d4>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	3301      	adds	r3, #1
 8004478:	069b      	lsls	r3, r3, #26
 800447a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800447e:	e015      	b.n	80044ac <HAL_ADC_ConfigChannel+0x500>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	fa93 f3a3 	rbit	r3, r3
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800448e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004490:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004498:	2320      	movs	r3, #32
 800449a:	e003      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800449c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	069b      	lsls	r3, r3, #26
 80044a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x520>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e9b      	lsrs	r3, r3, #26
 80044be:	3301      	adds	r3, #1
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2101      	movs	r1, #1
 80044c6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ca:	e017      	b.n	80044fc <HAL_ADC_ConfigChannel+0x550>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044d4:	fa93 f3a3 	rbit	r3, r3
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80044da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80044de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e003      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	ea42 0103 	orr.w	r1, r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x576>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0e9b      	lsrs	r3, r3, #26
 8004512:	3301      	adds	r3, #1
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	051b      	lsls	r3, r3, #20
 8004520:	e018      	b.n	8004554 <HAL_ADC_ConfigChannel+0x5a8>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800453a:	2320      	movs	r3, #32
 800453c:	e003      	b.n	8004546 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	3301      	adds	r3, #1
 8004548:	f003 021f 	and.w	r2, r3, #31
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004554:	430b      	orrs	r3, r1
 8004556:	e07e      	b.n	8004656 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x5c8>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	3301      	adds	r3, #1
 800456c:	069b      	lsls	r3, r3, #26
 800456e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004572:	e015      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x5f4>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800458c:	2320      	movs	r3, #32
 800458e:	e003      	b.n	8004598 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	3301      	adds	r3, #1
 800459a:	069b      	lsls	r3, r3, #26
 800459c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x614>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	e017      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x644>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	61fb      	str	r3, [r7, #28]
  return result;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80045d8:	2320      	movs	r3, #32
 80045da:	e003      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3301      	adds	r3, #1
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2101      	movs	r1, #1
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	ea42 0103 	orr.w	r1, r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_ADC_ConfigChannel+0x670>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	3301      	adds	r3, #1
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	3b1e      	subs	r3, #30
 8004614:	051b      	lsls	r3, r3, #20
 8004616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800461a:	e01b      	b.n	8004654 <HAL_ADC_ConfigChannel+0x6a8>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	613b      	str	r3, [r7, #16]
  return result;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e003      	b.n	8004640 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	3301      	adds	r3, #1
 8004642:	f003 021f 	and.w	r2, r3, #31
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	3b1e      	subs	r3, #30
 800464e:	051b      	lsls	r3, r3, #20
 8004650:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004654:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800465a:	4619      	mov	r1, r3
 800465c:	f7ff f8c5 	bl	80037ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <HAL_ADC_ConfigChannel+0x6e0>)
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80be 	beq.w	80047ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004676:	d004      	beq.n	8004682 <HAL_ADC_ConfigChannel+0x6d6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <HAL_ADC_ConfigChannel+0x6e4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10a      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x6ec>
 8004682:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <HAL_ADC_ConfigChannel+0x6e8>)
 8004684:	e009      	b.n	800469a <HAL_ADC_ConfigChannel+0x6ee>
 8004686:	bf00      	nop
 8004688:	407f0000 	.word	0x407f0000
 800468c:	80080000 	.word	0x80080000
 8004690:	50000100 	.word	0x50000100
 8004694:	50000300 	.word	0x50000300
 8004698:	4b59      	ldr	r3, [pc, #356]	@ (8004800 <HAL_ADC_ConfigChannel+0x854>)
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe ffba 	bl	8003614 <LL_ADC_GetCommonPathInternalCh>
 80046a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a56      	ldr	r2, [pc, #344]	@ (8004804 <HAL_ADC_ConfigChannel+0x858>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_ConfigChannel+0x70c>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a55      	ldr	r2, [pc, #340]	@ (8004808 <HAL_ADC_ConfigChannel+0x85c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d13a      	bne.n	800472e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d134      	bne.n	800472e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046cc:	d005      	beq.n	80046da <HAL_ADC_ConfigChannel+0x72e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4e      	ldr	r2, [pc, #312]	@ (800480c <HAL_ADC_ConfigChannel+0x860>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f040 8085 	bne.w	80047e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046e2:	d004      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x742>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a49      	ldr	r2, [pc, #292]	@ (8004810 <HAL_ADC_ConfigChannel+0x864>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x746>
 80046ee:	4a49      	ldr	r2, [pc, #292]	@ (8004814 <HAL_ADC_ConfigChannel+0x868>)
 80046f0:	e000      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x748>
 80046f2:	4a43      	ldr	r2, [pc, #268]	@ (8004800 <HAL_ADC_ConfigChannel+0x854>)
 80046f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe ff75 	bl	80035ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_ADC_ConfigChannel+0x86c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	4a44      	ldr	r2, [pc, #272]	@ (800481c <HAL_ADC_ConfigChannel+0x870>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800471e:	e002      	b.n	8004726 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b01      	subs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f9      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800472c:	e05a      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3b      	ldr	r2, [pc, #236]	@ (8004820 <HAL_ADC_ConfigChannel+0x874>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800473c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11f      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a31      	ldr	r2, [pc, #196]	@ (8004810 <HAL_ADC_ConfigChannel+0x864>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d104      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x7ac>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <HAL_ADC_ConfigChannel+0x878>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d047      	beq.n	80047e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004760:	d004      	beq.n	800476c <HAL_ADC_ConfigChannel+0x7c0>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <HAL_ADC_ConfigChannel+0x864>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x7c4>
 800476c:	4a29      	ldr	r2, [pc, #164]	@ (8004814 <HAL_ADC_ConfigChannel+0x868>)
 800476e:	e000      	b.n	8004772 <HAL_ADC_ConfigChannel+0x7c6>
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <HAL_ADC_ConfigChannel+0x854>)
 8004772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f7fe ff36 	bl	80035ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004782:	e031      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a27      	ldr	r2, [pc, #156]	@ (8004828 <HAL_ADC_ConfigChannel+0x87c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d12d      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d127      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_ADC_ConfigChannel+0x864>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ac:	d004      	beq.n	80047b8 <HAL_ADC_ConfigChannel+0x80c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <HAL_ADC_ConfigChannel+0x864>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x810>
 80047b8:	4a16      	ldr	r2, [pc, #88]	@ (8004814 <HAL_ADC_ConfigChannel+0x868>)
 80047ba:	e000      	b.n	80047be <HAL_ADC_ConfigChannel+0x812>
 80047bc:	4a10      	ldr	r2, [pc, #64]	@ (8004800 <HAL_ADC_ConfigChannel+0x854>)
 80047be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe ff10 	bl	80035ee <LL_ADC_SetCommonPathInternalCh>
 80047ce:	e00c      	b.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80047e2:	e002      	b.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	37d8      	adds	r7, #216	@ 0xd8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	50000700 	.word	0x50000700
 8004804:	c3210000 	.word	0xc3210000
 8004808:	90c00010 	.word	0x90c00010
 800480c:	50000600 	.word	0x50000600
 8004810:	50000100 	.word	0x50000100
 8004814:	50000300 	.word	0x50000300
 8004818:	2000003c 	.word	0x2000003c
 800481c:	053e2d63 	.word	0x053e2d63
 8004820:	c7520000 	.word	0xc7520000
 8004824:	50000500 	.word	0x50000500
 8004828:	cb840000 	.word	0xcb840000

0800482c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff f8a7 	bl	8003990 <LL_ADC_IsEnabled>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d176      	bne.n	8004936 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <ADC_Enable+0x114>)
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e062      	b.n	8004938 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f862 	bl	8003940 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004884:	d004      	beq.n	8004890 <ADC_Enable+0x64>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2e      	ldr	r2, [pc, #184]	@ (8004944 <ADC_Enable+0x118>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <ADC_Enable+0x68>
 8004890:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <ADC_Enable+0x11c>)
 8004892:	e000      	b.n	8004896 <ADC_Enable+0x6a>
 8004894:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <ADC_Enable+0x120>)
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe febc 	bl	8003614 <LL_ADC_GetCommonPathInternalCh>
 800489c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800489e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d013      	beq.n	80048ce <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004950 <ADC_Enable+0x124>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <ADC_Enable+0x128>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048c0:	e002      	b.n	80048c8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f9      	bne.n	80048c2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048ce:	f7fe fe4d 	bl	800356c <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d4:	e028      	b.n	8004928 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f858 	bl	8003990 <LL_ADC_IsEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f828 	bl	8003940 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048f0:	f7fe fe3c 	bl	800356c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d914      	bls.n	8004928 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d00d      	beq.n	8004928 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004910:	f043 0210 	orr.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e007      	b.n	8004938 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d1cf      	bne.n	80048d6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	8000003f 	.word	0x8000003f
 8004944:	50000100 	.word	0x50000100
 8004948:	50000300 	.word	0x50000300
 800494c:	50000700 	.word	0x50000700
 8004950:	2000003c 	.word	0x2000003c
 8004954:	053e2d63 	.word	0x053e2d63

08004958 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f826 	bl	80039b6 <LL_ADC_IsDisableOngoing>
 800496a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff f80d 	bl	8003990 <LL_ADC_IsEnabled>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d047      	beq.n	8004a0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d144      	bne.n	8004a0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030d 	and.w	r3, r3, #13
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10c      	bne.n	80049aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe ffe7 	bl	8003968 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2203      	movs	r2, #3
 80049a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049a2:	f7fe fde3 	bl	800356c <HAL_GetTick>
 80049a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a8:	e029      	b.n	80049fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	f043 0210 	orr.w	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e023      	b.n	8004a0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049c6:	f7fe fdd1 	bl	800356c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d914      	bls.n	80049fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	f043 0210 	orr.w	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	f043 0201 	orr.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e007      	b.n	8004a0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1dc      	bne.n	80049c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d14b      	bne.n	8004ac8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d021      	beq.n	8004a8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fe8c 	bl	800376c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d032      	beq.n	8004ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d12b      	bne.n	8004ac0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11f      	bne.n	8004ac0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a8c:	e018      	b.n	8004ac0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d111      	bne.n	8004ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff fa55 	bl	8003f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ac6:	e00e      	b.n	8004ae6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff fa5f 	bl	8003f98 <HAL_ADC_ErrorCallback>
}
 8004ada:	e004      	b.n	8004ae6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fa41 	bl	8003f84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b28:	f043 0204 	orr.w	r2, r3, #4
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff fa31 	bl	8003f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <LL_ADC_IsEnabled>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <LL_ADC_IsEnabled+0x18>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <LL_ADC_IsEnabled+0x1a>
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_ADC_StartCalibration>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004baa:	d101      	bne.n	8004bb0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_ADC_REG_IsConversionOngoing>:
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d101      	bne.n	8004bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADCEx_Calibration_Start+0x1c>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e04d      	b.n	8004c9c <HAL_ADCEx_Calibration_Start+0xb8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fea5 	bl	8004958 <ADC_Disable>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d136      	bne.n	8004c86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c20:	f023 0302 	bic.w	r3, r3, #2
 8004c24:	f043 0202 	orr.w	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ff96 	bl	8004b64 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c38:	e014      	b.n	8004c64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d90d      	bls.n	8004c64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	f023 0312 	bic.w	r3, r3, #18
 8004c50:	f043 0210 	orr.w	r2, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e01b      	b.n	8004c9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff94 	bl	8004b96 <LL_ADC_IsCalibrationOnGoing>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e2      	bne.n	8004c3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	f023 0303 	bic.w	r3, r3, #3
 8004c7c:	f043 0201 	orr.w	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c84:	e005      	b.n	8004c92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8a:	f043 0210 	orr.w	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	0004de01 	.word	0x0004de01

08004ca8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b0a1      	sub	sp, #132	@ 0x84
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0e7      	b.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cde:	d102      	bne.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	e009      	b.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d102      	bne.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004cf0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	e001      	b.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0be      	b.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff4f 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8004d20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff49 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 80a0 	bne.w	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 809c 	bne.w	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d44:	d004      	beq.n	8004d50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a55      	ldr	r2, [pc, #340]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004d50:	4b56      	ldr	r3, [pc, #344]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004d52:	e000      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004d54:	4b56      	ldr	r3, [pc, #344]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004d56:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d04b      	beq.n	8004df8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d72:	035b      	lsls	r3, r3, #13
 8004d74:	430b      	orrs	r3, r1
 8004d76:	431a      	orrs	r2, r3
 8004d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d84:	d004      	beq.n	8004d90 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a45      	ldr	r2, [pc, #276]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10f      	bne.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d94:	f7ff fed3 	bl	8004b3e <LL_ADC_IsEnabled>
 8004d98:	4604      	mov	r4, r0
 8004d9a:	4841      	ldr	r0, [pc, #260]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d9c:	f7ff fecf 	bl	8004b3e <LL_ADC_IsEnabled>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4323      	orrs	r3, r4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	e012      	b.n	8004dd6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004db0:	483c      	ldr	r0, [pc, #240]	@ (8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004db2:	f7ff fec4 	bl	8004b3e <LL_ADC_IsEnabled>
 8004db6:	4604      	mov	r4, r0
 8004db8:	483b      	ldr	r0, [pc, #236]	@ (8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dba:	f7ff fec0 	bl	8004b3e <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	431c      	orrs	r4, r3
 8004dc2:	483c      	ldr	r0, [pc, #240]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004dc4:	f7ff febb 	bl	8004b3e <LL_ADC_IsEnabled>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4323      	orrs	r3, r4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d056      	beq.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004de2:	f023 030f 	bic.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	6811      	ldr	r1, [r2, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	431a      	orrs	r2, r3
 8004df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004df6:	e047      	b.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004df8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0c:	d004      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a23      	ldr	r2, [pc, #140]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10f      	bne.n	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004e18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e1c:	f7ff fe8f 	bl	8004b3e <LL_ADC_IsEnabled>
 8004e20:	4604      	mov	r4, r0
 8004e22:	481f      	ldr	r0, [pc, #124]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e24:	f7ff fe8b 	bl	8004b3e <LL_ADC_IsEnabled>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4323      	orrs	r3, r4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e012      	b.n	8004e5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004e38:	481a      	ldr	r0, [pc, #104]	@ (8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e3a:	f7ff fe80 	bl	8004b3e <LL_ADC_IsEnabled>
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4819      	ldr	r0, [pc, #100]	@ (8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e42:	f7ff fe7c 	bl	8004b3e <LL_ADC_IsEnabled>
 8004e46:	4603      	mov	r3, r0
 8004e48:	431c      	orrs	r4, r3
 8004e4a:	481a      	ldr	r0, [pc, #104]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e4c:	f7ff fe77 	bl	8004b3e <LL_ADC_IsEnabled>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4323      	orrs	r3, r4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bf0c      	ite	eq
 8004e58:	2301      	moveq	r3, #1
 8004e5a:	2300      	movne	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e6a:	f023 030f 	bic.w	r3, r3, #15
 8004e6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e72:	e009      	b.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e86:	e000      	b.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3784      	adds	r7, #132	@ 0x84
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	50000100 	.word	0x50000100
 8004ea4:	50000400 	.word	0x50000400
 8004ea8:	50000500 	.word	0x50000500
 8004eac:	50000300 	.word	0x50000300
 8004eb0:	50000700 	.word	0x50000700
 8004eb4:	50000600 	.word	0x50000600

08004eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <__NVIC_SetPriorityGrouping+0x44>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eea:	4a04      	ldr	r2, [pc, #16]	@ (8004efc <__NVIC_SetPriorityGrouping+0x44>)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	60d3      	str	r3, [r2, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f04:	4b04      	ldr	r3, [pc, #16]	@ (8004f18 <__NVIC_GetPriorityGrouping+0x18>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0307 	and.w	r3, r3, #7
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db0b      	blt.n	8004f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	4907      	ldr	r1, [pc, #28]	@ (8004f54 <__NVIC_EnableIRQ+0x38>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000e100 	.word	0xe000e100

08004f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db0a      	blt.n	8004f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	490c      	ldr	r1, [pc, #48]	@ (8004fa4 <__NVIC_SetPriority+0x4c>)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f80:	e00a      	b.n	8004f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4908      	ldr	r1, [pc, #32]	@ (8004fa8 <__NVIC_SetPriority+0x50>)
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	440b      	add	r3, r1
 8004f96:	761a      	strb	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	@ 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf28      	it	cs
 8004fca:	2304      	movcs	r3, #4
 8004fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d902      	bls.n	8004fdc <NVIC_EncodePriority+0x30>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3b03      	subs	r3, #3
 8004fda:	e000      	b.n	8004fde <NVIC_EncodePriority+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	4313      	orrs	r3, r2
         );
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	@ 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005024:	d301      	bcc.n	800502a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005026:	2301      	movs	r3, #1
 8005028:	e00f      	b.n	800504a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502a:	4a0a      	ldr	r2, [pc, #40]	@ (8005054 <SysTick_Config+0x40>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005032:	210f      	movs	r1, #15
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	f7ff ff8e 	bl	8004f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <SysTick_Config+0x40>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005042:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <SysTick_Config+0x40>)
 8005044:	2207      	movs	r2, #7
 8005046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000e010 	.word	0xe000e010

08005058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff29 	bl	8004eb8 <__NVIC_SetPriorityGrouping>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800507c:	f7ff ff40 	bl	8004f00 <__NVIC_GetPriorityGrouping>
 8005080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7ff ff90 	bl	8004fac <NVIC_EncodePriority>
 800508c:	4602      	mov	r2, r0
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ff5f 	bl	8004f58 <__NVIC_SetPriority>
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff33 	bl	8004f1c <__NVIC_EnableIRQ>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff ffa4 	bl	8005014 <SysTick_Config>
 80050cc:	4603      	mov	r3, r0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e08d      	b.n	8005206 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b47      	ldr	r3, [pc, #284]	@ (8005210 <HAL_DMA_Init+0x138>)
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d80f      	bhi.n	8005116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b45      	ldr	r3, [pc, #276]	@ (8005214 <HAL_DMA_Init+0x13c>)
 80050fe:	4413      	add	r3, r2
 8005100:	4a45      	ldr	r2, [pc, #276]	@ (8005218 <HAL_DMA_Init+0x140>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	091b      	lsrs	r3, r3, #4
 8005108:	009a      	lsls	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a42      	ldr	r2, [pc, #264]	@ (800521c <HAL_DMA_Init+0x144>)
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40
 8005114:	e00e      	b.n	8005134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	4b40      	ldr	r3, [pc, #256]	@ (8005220 <HAL_DMA_Init+0x148>)
 800511e:	4413      	add	r3, r2
 8005120:	4a3d      	ldr	r2, [pc, #244]	@ (8005218 <HAL_DMA_Init+0x140>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	009a      	lsls	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a3c      	ldr	r2, [pc, #240]	@ (8005224 <HAL_DMA_Init+0x14c>)
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800514a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa84 	bl	8005694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005194:	d102      	bne.n	800519c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_DMA_Init+0x104>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d80c      	bhi.n	80051dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 faa4 	bl	8005710 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	e008      	b.n	80051ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40020407 	.word	0x40020407
 8005214:	bffdfff8 	.word	0xbffdfff8
 8005218:	cccccccd 	.word	0xcccccccd
 800521c:	40020000 	.word	0x40020000
 8005220:	bffdfbf8 	.word	0xbffdfbf8
 8005224:	40020400 	.word	0x40020400

08005228 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Start_IT+0x20>
 8005244:	2302      	movs	r3, #2
 8005246:	e066      	b.n	8005316 <HAL_DMA_Start_IT+0xee>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d155      	bne.n	8005308 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f9c9 	bl	8005618 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 020e 	orr.w	r2, r2, #14
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e00f      	b.n	80052c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0204 	bic.w	r2, r2, #4
 80052ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 020a 	orr.w	r2, r2, #10
 80052be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e005      	b.n	8005314 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005310:	2302      	movs	r3, #2
 8005312:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d005      	beq.n	8005342 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2204      	movs	r2, #4
 800533a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e037      	b.n	80053b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 020e 	bic.w	r2, r2, #14
 8005350:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005360:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f003 021f 	and.w	r2, r3, #31
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	2101      	movs	r1, #1
 8005380:	fa01 f202 	lsl.w	r2, r1, r2
 8005384:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800538e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d00d      	beq.n	8005404 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2204      	movs	r2, #4
 80053ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
 8005402:	e047      	b.n	8005494 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 020e 	bic.w	r2, r2, #14
 8005412:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f003 021f 	and.w	r2, r3, #31
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f202 	lsl.w	r2, r1, r2
 8005446:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005450:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005468:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005472:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
    }
  }
  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2204      	movs	r2, #4
 80054c0:	409a      	lsls	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d026      	beq.n	8005518 <HAL_DMA_IRQHandler+0x7a>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d021      	beq.n	8005518 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	f003 021f 	and.w	r2, r3, #31
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	2104      	movs	r1, #4
 8005500:	fa01 f202 	lsl.w	r2, r1, r2
 8005504:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d071      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005516:	e06c      	b.n	80055f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2202      	movs	r2, #2
 8005522:	409a      	lsls	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02e      	beq.n	800558a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d029      	beq.n	800558a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 020a 	bic.w	r2, r2, #10
 8005552:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	2102      	movs	r1, #2
 800556a:	fa01 f202 	lsl.w	r2, r1, r2
 800556e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d038      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005588:	e033      	b.n	80055f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2208      	movs	r2, #8
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02a      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d025      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 020e 	bic.w	r2, r2, #14
 80055b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
}
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800560a:	b2db      	uxtb	r3, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800562e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f003 021f 	and.w	r2, r3, #31
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	2101      	movs	r1, #1
 8005650:	fa01 f202 	lsl.w	r2, r1, r2
 8005654:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b10      	cmp	r3, #16
 8005664:	d108      	bne.n	8005678 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005676:	e007      	b.n	8005688 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d802      	bhi.n	80056ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e001      	b.n	80056b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80056ae:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	3b08      	subs	r3, #8
 80056be:	4a12      	ldr	r2, [pc, #72]	@ (8005708 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	009a      	lsls	r2, r3, #2
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2201      	movs	r2, #1
 80056e8:	409a      	lsls	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40020407 	.word	0x40020407
 8005700:	40020800 	.word	0x40020800
 8005704:	40020820 	.word	0x40020820
 8005708:	cccccccd 	.word	0xcccccccd
 800570c:	40020880 	.word	0x40020880

08005710 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	461a      	mov	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a08      	ldr	r2, [pc, #32]	@ (8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005732:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	1000823f 	.word	0x1000823f
 8005754:	40020940 	.word	0x40020940

08005758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005766:	e15a      	b.n	8005a1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2101      	movs	r1, #1
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	fa01 f303 	lsl.w	r3, r1, r3
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 814c 	beq.w	8005a18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d005      	beq.n	8005798 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005794:	2b02      	cmp	r3, #2
 8005796:	d130      	bne.n	80057fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2203      	movs	r2, #3
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4013      	ands	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ce:	2201      	movs	r2, #1
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4013      	ands	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	f003 0201 	and.w	r2, r3, #1
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b03      	cmp	r3, #3
 8005804:	d017      	beq.n	8005836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	2203      	movs	r2, #3
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4013      	ands	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d123      	bne.n	800588a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	08da      	lsrs	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3208      	adds	r2, #8
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	220f      	movs	r2, #15
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	08da      	lsrs	r2, r3, #3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3208      	adds	r2, #8
 8005884:	6939      	ldr	r1, [r7, #16]
 8005886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2203      	movs	r2, #3
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 0203 	and.w	r2, r3, #3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80a6 	beq.w	8005a18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058cc:	4b5b      	ldr	r3, [pc, #364]	@ (8005a3c <HAL_GPIO_Init+0x2e4>)
 80058ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d0:	4a5a      	ldr	r2, [pc, #360]	@ (8005a3c <HAL_GPIO_Init+0x2e4>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80058d8:	4b58      	ldr	r3, [pc, #352]	@ (8005a3c <HAL_GPIO_Init+0x2e4>)
 80058da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058e4:	4a56      	ldr	r2, [pc, #344]	@ (8005a40 <HAL_GPIO_Init+0x2e8>)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	089b      	lsrs	r3, r3, #2
 80058ea:	3302      	adds	r3, #2
 80058ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	220f      	movs	r2, #15
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4013      	ands	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800590e:	d01f      	beq.n	8005950 <HAL_GPIO_Init+0x1f8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a4c      	ldr	r2, [pc, #304]	@ (8005a44 <HAL_GPIO_Init+0x2ec>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d019      	beq.n	800594c <HAL_GPIO_Init+0x1f4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a4b      	ldr	r2, [pc, #300]	@ (8005a48 <HAL_GPIO_Init+0x2f0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_GPIO_Init+0x1f0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a4a      	ldr	r2, [pc, #296]	@ (8005a4c <HAL_GPIO_Init+0x2f4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00d      	beq.n	8005944 <HAL_GPIO_Init+0x1ec>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a49      	ldr	r2, [pc, #292]	@ (8005a50 <HAL_GPIO_Init+0x2f8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <HAL_GPIO_Init+0x1e8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a48      	ldr	r2, [pc, #288]	@ (8005a54 <HAL_GPIO_Init+0x2fc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d101      	bne.n	800593c <HAL_GPIO_Init+0x1e4>
 8005938:	2305      	movs	r3, #5
 800593a:	e00a      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 800593c:	2306      	movs	r3, #6
 800593e:	e008      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 8005940:	2304      	movs	r3, #4
 8005942:	e006      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 8005944:	2303      	movs	r3, #3
 8005946:	e004      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 8005948:	2302      	movs	r3, #2
 800594a:	e002      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_GPIO_Init+0x1fa>
 8005950:	2300      	movs	r3, #0
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	f002 0203 	and.w	r2, r2, #3
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4093      	lsls	r3, r2
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005962:	4937      	ldr	r1, [pc, #220]	@ (8005a40 <HAL_GPIO_Init+0x2e8>)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43db      	mvns	r3, r3
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005994:	4a30      	ldr	r2, [pc, #192]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4013      	ands	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059be:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80059c4:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4013      	ands	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a12:	4a11      	ldr	r2, [pc, #68]	@ (8005a58 <HAL_GPIO_Init+0x300>)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f ae9d 	bne.w	8005768 <HAL_GPIO_Init+0x10>
  }
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40010000 	.word	0x40010000
 8005a44:	48000400 	.word	0x48000400
 8005a48:	48000800 	.word	0x48000800
 8005a4c:	48000c00 	.word	0x48000c00
 8005a50:	48001000 	.word	0x48001000
 8005a54:	48001400 	.word	0x48001400
 8005a58:	40010400 	.word	0x40010400

08005a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a6c:	787b      	ldrb	r3, [r7, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a78:	e002      	b.n	8005a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aa2:	4a05      	ldr	r2, [pc, #20]	@ (8005ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f806 	bl	8005abc <HAL_GPIO_EXTI_Callback>
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40010400 	.word	0x40010400

08005abc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e08d      	b.n	8005c00 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fb fe5d 	bl	80017b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2224      	movs	r2, #36	@ 0x24
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b48:	609a      	str	r2, [r3, #8]
 8005b4a:	e006      	b.n	8005b5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d108      	bne.n	8005b74 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e007      	b.n	8005b84 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b96:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69d9      	ldr	r1, [r3, #28]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	817b      	strh	r3, [r7, #10]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	f040 80ef 	bne.w	8005e0c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0e5      	b.n	8005e0e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e0de      	b.n	8005e0e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2221      	movs	r2, #33	@ 0x21
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2210      	movs	r2, #16
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	893a      	ldrh	r2, [r7, #8]
 8005c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a66      	ldr	r2, [pc, #408]	@ (8005e18 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a66      	ldr	r2, [pc, #408]	@ (8005e1c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2bff      	cmp	r3, #255	@ 0xff
 8005c8e:	d906      	bls.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	22ff      	movs	r2, #255	@ 0xff
 8005c94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e007      	b.n	8005cae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01a      	beq.n	8005cec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d074      	beq.n	8005dde <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d022      	beq.n	8005d42 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	4a47      	ldr	r2, [pc, #284]	@ (8005e20 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005d02:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	4a46      	ldr	r2, [pc, #280]	@ (8005e24 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005d0a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	2200      	movs	r2, #0
 8005d1a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d2c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d32:	f7ff fa79 	bl	8005228 <HAL_DMA_Start_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d13a      	bne.n	8005db6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005d40:	e013      	b.n	8005d6a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e051      	b.n	8005e0e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	3301      	adds	r3, #1
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f001 fba3 	bl	80074c8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d9c:	2110      	movs	r1, #16
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f001 fbc4 	bl	800752c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e028      	b.n	8005e08 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f043 0210 	orr.w	r2, r3, #16
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e017      	b.n	8005e0e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a12      	ldr	r2, [pc, #72]	@ (8005e2c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005de2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	8979      	ldrh	r1, [r7, #10]
 8005dea:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f001 fb68 	bl	80074c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e00:	2101      	movs	r1, #1
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f001 fb92 	bl	800752c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	ffff0000 	.word	0xffff0000
 8005e1c:	08006447 	.word	0x08006447
 8005e20:	080073c7 	.word	0x080073c7
 8005e24:	0800745d 	.word	0x0800745d
 8005e28:	80002000 	.word	0x80002000
 8005e2c:	08006007 	.word	0x08006007

08005e30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ea4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f043 0208 	orr.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ece:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00f      	beq.n	8005efa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee8:	f043 0202 	orr.w	r2, r3, #2
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 030b 	and.w	r3, r3, #11
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 f91f 	bl	8007150 <I2C_ITError>
  }
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
 8005f76:	4613      	mov	r3, r2
 8005f78:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff8:	b2db      	uxtb	r3, r3
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af02      	add	r7, sp, #8
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <I2C_Master_ISR_IT+0x1e>
 8006020:	2302      	movs	r3, #2
 8006022:	e113      	b.n	800624c <I2C_Master_ISR_IT+0x246>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2210      	movs	r2, #16
 8006046:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604c:	f043 0204 	orr.w	r2, r3, #4
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f001 f992 	bl	800737e <I2C_Flush_TXDR>
 800605a:	e0e4      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d022      	beq.n	80060ac <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01d      	beq.n	80060ac <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0304 	bic.w	r3, r3, #4
 8006076:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060aa:	e0bc      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d128      	bne.n	8006108 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d023      	beq.n	8006108 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01e      	beq.n	8006108 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80a8 	beq.w	8006226 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006106:	e08e      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d05c      	beq.n	80061cc <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006118:	2b00      	cmp	r3, #0
 800611a:	d057      	beq.n	80061cc <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d040      	beq.n	80061a8 <I2C_Master_ISR_IT+0x1a2>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d13c      	bne.n	80061a8 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800613a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2bff      	cmp	r3, #255	@ 0xff
 8006144:	d90e      	bls.n	8006164 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22ff      	movs	r2, #255	@ 0xff
 800614a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8a79      	ldrh	r1, [r7, #18]
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f001 f9b3 	bl	80074c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006162:	e032      	b.n	80061ca <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006176:	d00b      	beq.n	8006190 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006182:	8a79      	ldrh	r1, [r7, #18]
 8006184:	2000      	movs	r0, #0
 8006186:	9000      	str	r0, [sp, #0]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f001 f99d 	bl	80074c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800618e:	e01c      	b.n	80061ca <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006194:	b2da      	uxtb	r2, r3
 8006196:	8a79      	ldrh	r1, [r7, #18]
 8006198:	2300      	movs	r3, #0
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 f991 	bl	80074c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061a6:	e010      	b.n	80061ca <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b6:	d003      	beq.n	80061c0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fcb0 	bl	8006b1e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061be:	e032      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061c0:	2140      	movs	r1, #64	@ 0x40
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 ffc4 	bl	8007150 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c8:	e02d      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
 80061ca:	e02c      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d027      	beq.n	8006226 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d022      	beq.n	8006226 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d119      	bne.n	800621e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061f8:	d015      	beq.n	8006226 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006202:	d108      	bne.n	8006216 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	e007      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fc81 	bl	8006b1e <I2C_ITMasterSeqCplt>
 800621c:	e003      	b.n	8006226 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800621e:	2140      	movs	r1, #64	@ 0x40
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 ff95 	bl	8007150 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fd07 	bl	8006c50 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <I2C_Slave_ISR_IT+0x24>
 8006274:	2302      	movs	r3, #2
 8006276:	e0e2      	b.n	800643e <I2C_Slave_ISR_IT+0x1ea>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006294:	6939      	ldr	r1, [r7, #16]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fda2 	bl	8006de0 <I2C_ITSlaveCplt>
 800629c:	e0ca      	b.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d04b      	beq.n	8006340 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d046      	beq.n	8006340 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d128      	bne.n	800630e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b28      	cmp	r3, #40	@ 0x28
 80062c6:	d108      	bne.n	80062da <I2C_Slave_ISR_IT+0x86>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ce:	d104      	bne.n	80062da <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80062d0:	6939      	ldr	r1, [r7, #16]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fee8 	bl	80070a8 <I2C_ITListenCplt>
 80062d8:	e031      	b.n	800633e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b29      	cmp	r3, #41	@ 0x29
 80062e4:	d10e      	bne.n	8006304 <I2C_Slave_ISR_IT+0xb0>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062ec:	d00a      	beq.n	8006304 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f001 f841 	bl	800737e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fc4b 	bl	8006b98 <I2C_ITSlaveSeqCplt>
 8006302:	e01c      	b.n	800633e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2210      	movs	r2, #16
 800630a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800630c:	e08f      	b.n	800642e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2210      	movs	r2, #16
 8006314:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631a:	f043 0204 	orr.w	r2, r3, #4
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <I2C_Slave_ISR_IT+0xdc>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800632e:	d17e      	bne.n	800642e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 ff0a 	bl	8007150 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800633c:	e077      	b.n	800642e <I2C_Slave_ISR_IT+0x1da>
 800633e:	e076      	b.n	800642e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d02f      	beq.n	80063aa <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02a      	beq.n	80063aa <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d14b      	bne.n	8006432 <I2C_Slave_ISR_IT+0x1de>
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063a0:	d047      	beq.n	8006432 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fbf8 	bl	8006b98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80063a8:	e043      	b.n	8006432 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80063be:	6939      	ldr	r1, [r7, #16]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fb28 	bl	8006a16 <I2C_ITAddrCplt>
 80063c6:	e035      	b.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d030      	beq.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d02b      	beq.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006416:	e00d      	b.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800641e:	d002      	beq.n	8006426 <I2C_Slave_ISR_IT+0x1d2>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fbb6 	bl	8006b98 <I2C_ITSlaveSeqCplt>
 800642c:	e002      	b.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006432:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af02      	add	r7, sp, #8
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <I2C_Master_ISR_DMA+0x1a>
 800645c:	2302      	movs	r3, #2
 800645e:	e0d9      	b.n	8006614 <I2C_Master_ISR_DMA+0x1ce>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2210      	movs	r2, #16
 8006482:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006488:	f043 0204 	orr.w	r2, r3, #4
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006490:	2120      	movs	r1, #32
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 f84a 	bl	800752c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 ff70 	bl	800737e <I2C_Flush_TXDR>
 800649e:	e0b4      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d071      	beq.n	800658e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d06c      	beq.n	800658e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04e      	beq.n	800656c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064da:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2bff      	cmp	r3, #255	@ 0xff
 80064e4:	d906      	bls.n	80064f4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80064ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e010      	b.n	8006516 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006506:	d003      	beq.n	8006510 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e002      	b.n	8006516 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006514:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	8a79      	ldrh	r1, [r7, #18]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 ffcf 	bl	80074c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b22      	cmp	r3, #34	@ 0x22
 8006546:	d108      	bne.n	800655a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006556:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006558:	e057      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006568:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800656a:	e04e      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006576:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800657a:	d003      	beq.n	8006584 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 face 	bl	8006b1e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006582:	e042      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006584:	2140      	movs	r1, #64	@ 0x40
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fde2 	bl	8007150 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800658c:	e03d      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d028      	beq.n	80065ea <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d023      	beq.n	80065ea <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d119      	bne.n	80065e0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ba:	d025      	beq.n	8006608 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065c4:	d108      	bne.n	80065d8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065d4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80065d6:	e017      	b.n	8006608 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 faa0 	bl	8006b1e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80065de:	e013      	b.n	8006608 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065e0:	2140      	movs	r1, #64	@ 0x40
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fdb4 	bl	8007150 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80065e8:	e00e      	b.n	8006608 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fb25 	bl	8006c50 <I2C_ITMasterCplt>
 8006606:	e000      	b.n	800660a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006608:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006628:	4b8d      	ldr	r3, [pc, #564]	@ (8006860 <I2C_Mem_ISR_DMA+0x244>)
 800662a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <I2C_Mem_ISR_DMA+0x1e>
 8006636:	2302      	movs	r3, #2
 8006638:	e10e      	b.n	8006858 <I2C_Mem_ISR_DMA+0x23c>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d016      	beq.n	800667a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006652:	2b00      	cmp	r3, #0
 8006654:	d011      	beq.n	800667a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2210      	movs	r2, #16
 800665c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006662:	f043 0204 	orr.w	r2, r3, #4
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800666a:	2120      	movs	r1, #32
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 ff5d 	bl	800752c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fe83 	bl	800737e <I2C_Flush_TXDR>
 8006678:	e0e9      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00e      	beq.n	80066a2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	651a      	str	r2, [r3, #80]	@ 0x50
 80066a0:	e0d5      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05f      	beq.n	800676c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d05a      	beq.n	800676c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066b6:	2101      	movs	r1, #1
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ffbb 	bl	8007634 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80066be:	2110      	movs	r1, #16
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 ff33 	bl	800752c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d048      	beq.n	8006762 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2bff      	cmp	r3, #255	@ 0xff
 80066d8:	d910      	bls.n	80066fc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22ff      	movs	r2, #255	@ 0xff
 80066de:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e4:	b299      	uxth	r1, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fee7 	bl	80074c8 <I2C_TransferConfig>
 80066fa:	e011      	b.n	8006720 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670a:	b299      	uxth	r1, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006710:	b2da      	uxtb	r2, r3
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fed4 	bl	80074c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b22      	cmp	r3, #34	@ 0x22
 800673c:	d108      	bne.n	8006750 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800674c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800674e:	e07e      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800675e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006760:	e075      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006762:	2140      	movs	r1, #64	@ 0x40
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fcf3 	bl	8007150 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800676a:	e070      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d05d      	beq.n	8006832 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800677c:	2b00      	cmp	r3, #0
 800677e:	d058      	beq.n	8006832 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006780:	2101      	movs	r1, #1
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 ff56 	bl	8007634 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006788:	2110      	movs	r1, #16
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fece 	bl	800752c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b22      	cmp	r3, #34	@ 0x22
 800679a:	d101      	bne.n	80067a0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800679c:	4b31      	ldr	r3, [pc, #196]	@ (8006864 <I2C_Mem_ISR_DMA+0x248>)
 800679e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2bff      	cmp	r3, #255	@ 0xff
 80067a8:	d910      	bls.n	80067cc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	22ff      	movs	r2, #255	@ 0xff
 80067ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b4:	b299      	uxth	r1, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fe7f 	bl	80074c8 <I2C_TransferConfig>
 80067ca:	e011      	b.n	80067f0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067da:	b299      	uxth	r1, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fe6c 	bl	80074c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b22      	cmp	r3, #34	@ 0x22
 800680c:	d108      	bne.n	8006820 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800681c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800681e:	e016      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800682e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006830:	e00d      	b.n	800684e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa01 	bl	8006c50 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	80002000 	.word	0x80002000
 8006864:	80002400 	.word	0x80002400

08006868 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006878:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <I2C_Slave_ISR_DMA+0x24>
 8006888:	2302      	movs	r3, #2
 800688a:	e0c0      	b.n	8006a0e <I2C_Slave_ISR_DMA+0x1a6>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fa98 	bl	8006de0 <I2C_ITSlaveCplt>
 80068b0:	e0a8      	b.n	8006a04 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8095 	beq.w	80069e8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 808f 	beq.w	80069e8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d07d      	beq.n	80069da <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80068fc:	2301      	movs	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00c      	beq.n	8006922 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800691e:	2301      	movs	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d128      	bne.n	800697a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b28      	cmp	r3, #40	@ 0x28
 8006932:	d108      	bne.n	8006946 <I2C_Slave_ISR_DMA+0xde>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800693a:	d104      	bne.n	8006946 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fbb2 	bl	80070a8 <I2C_ITListenCplt>
 8006944:	e048      	b.n	80069d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b29      	cmp	r3, #41	@ 0x29
 8006950:	d10e      	bne.n	8006970 <I2C_Slave_ISR_DMA+0x108>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006958:	d00a      	beq.n	8006970 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fd0b 	bl	800737e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f915 	bl	8006b98 <I2C_ITSlaveSeqCplt>
 800696e:	e033      	b.n	80069d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2210      	movs	r2, #16
 8006976:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006978:	e034      	b.n	80069e4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2210      	movs	r2, #16
 8006980:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006986:	f043 0204 	orr.w	r2, r3, #4
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006994:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <I2C_Slave_ISR_DMA+0x13c>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069a2:	d11f      	bne.n	80069e4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b21      	cmp	r3, #33	@ 0x21
 80069a8:	d002      	beq.n	80069b0 <I2C_Slave_ISR_DMA+0x148>
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b29      	cmp	r3, #41	@ 0x29
 80069ae:	d103      	bne.n	80069b8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2221      	movs	r2, #33	@ 0x21
 80069b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80069b6:	e008      	b.n	80069ca <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b22      	cmp	r3, #34	@ 0x22
 80069bc:	d002      	beq.n	80069c4 <I2C_Slave_ISR_DMA+0x15c>
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c2:	d102      	bne.n	80069ca <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2222      	movs	r2, #34	@ 0x22
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fbbd 	bl	8007150 <I2C_ITError>
      if (treatdmanack == 1U)
 80069d6:	e005      	b.n	80069e4 <I2C_Slave_ISR_DMA+0x17c>
 80069d8:	e004      	b.n	80069e4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069e2:	e00f      	b.n	8006a04 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80069e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069e6:	e00d      	b.n	8006a04 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f809 	bl	8006a16 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a2c:	2b28      	cmp	r3, #40	@ 0x28
 8006a2e:	d16a      	bne.n	8006b06 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a4e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a6a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d138      	bne.n	8006ae6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006a74:	897b      	ldrh	r3, [r7, #10]
 8006a76:	09db      	lsrs	r3, r3, #7
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	4053      	eors	r3, r2
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f003 0306 	and.w	r3, r3, #6
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11c      	bne.n	8006ac2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006a88:	897b      	ldrh	r3, [r7, #10]
 8006a8a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d13b      	bne.n	8006b16 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ab4:	89ba      	ldrh	r2, [r7, #12]
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fa55 	bl	8005f6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ac0:	e029      	b.n	8006b16 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006ac2:	893b      	ldrh	r3, [r7, #8]
 8006ac4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ac6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fdb2 	bl	8007634 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ad8:	89ba      	ldrh	r2, [r7, #12]
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fa43 	bl	8005f6a <HAL_I2C_AddrCallback>
}
 8006ae4:	e017      	b.n	8006b16 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fda2 	bl	8007634 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006af8:	89ba      	ldrh	r2, [r7, #12]
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fa33 	bl	8005f6a <HAL_I2C_AddrCallback>
}
 8006b04:	e007      	b.n	8006b16 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b21      	cmp	r3, #33	@ 0x21
 8006b38:	d115      	bne.n	8006b66 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2211      	movs	r2, #17
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fd6f 	bl	8007634 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff f9db 	bl	8005f1a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b64:	e014      	b.n	8006b90 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2212      	movs	r2, #18
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fd59 	bl	8007634 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff f9cf 	bl	8005f2e <HAL_I2C_MasterRxCpltCallback>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e00c      	b.n	8006be6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006be4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b29      	cmp	r3, #41	@ 0x29
 8006bf0:	d112      	bne.n	8006c18 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2228      	movs	r2, #40	@ 0x28
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2221      	movs	r2, #33	@ 0x21
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c00:	2101      	movs	r1, #1
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fd16 	bl	8007634 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff f996 	bl	8005f42 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c16:	e017      	b.n	8006c48 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c22:	d111      	bne.n	8006c48 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2228      	movs	r2, #40	@ 0x28
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2222      	movs	r2, #34	@ 0x22
 8006c30:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c32:	2102      	movs	r1, #2
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fcfd 	bl	8007634 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff f987 	bl	8005f56 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2220      	movs	r2, #32
 8006c64:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b21      	cmp	r3, #33	@ 0x21
 8006c70:	d107      	bne.n	8006c82 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c72:	2101      	movs	r1, #1
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fcdd 	bl	8007634 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2211      	movs	r2, #17
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c80:	e00c      	b.n	8006c9c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b22      	cmp	r3, #34	@ 0x22
 8006c8c:	d106      	bne.n	8006c9c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c8e:	2102      	movs	r1, #2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fccf 	bl	8007634 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2212      	movs	r2, #18
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8006dd8 <I2C_ITMasterCplt+0x188>)
 8006ca8:	400b      	ands	r3, r1
 8006caa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a49      	ldr	r2, [pc, #292]	@ (8006ddc <I2C_ITMasterCplt+0x18c>)
 8006cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f043 0204 	orr.w	r2, r3, #4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b60      	cmp	r3, #96	@ 0x60
 8006ce0:	d10a      	bne.n	8006cf8 <I2C_ITMasterCplt+0xa8>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb40 	bl	800737e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b60      	cmp	r3, #96	@ 0x60
 8006d0e:	d002      	beq.n	8006d16 <I2C_ITMasterCplt+0xc6>
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fa17 	bl	8007150 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d22:	e054      	b.n	8006dce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b21      	cmp	r3, #33	@ 0x21
 8006d2e:	d124      	bne.n	8006d7a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b40      	cmp	r3, #64	@ 0x40
 8006d48:	d10b      	bne.n	8006d62 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff f91d 	bl	8005f9a <HAL_I2C_MemTxCpltCallback>
}
 8006d60:	e035      	b.n	8006dce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff f8d1 	bl	8005f1a <HAL_I2C_MasterTxCpltCallback>
}
 8006d78:	e029      	b.n	8006dce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b22      	cmp	r3, #34	@ 0x22
 8006d84:	d123      	bne.n	8006dce <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b40      	cmp	r3, #64	@ 0x40
 8006d9e:	d10b      	bne.n	8006db8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff f8fc 	bl	8005fae <HAL_I2C_MemRxCpltCallback>
}
 8006db6:	e00a      	b.n	8006dce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff f8b0 	bl	8005f2e <HAL_I2C_MasterRxCpltCallback>
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	fe00e800 	.word	0xfe00e800
 8006ddc:	ffff0000 	.word	0xffff0000

08006de0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e02:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b21      	cmp	r3, #33	@ 0x21
 8006e10:	d002      	beq.n	8006e18 <I2C_ITSlaveCplt+0x38>
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b29      	cmp	r3, #41	@ 0x29
 8006e16:	d108      	bne.n	8006e2a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006e18:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc09 	bl	8007634 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2221      	movs	r2, #33	@ 0x21
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e28:	e019      	b.n	8006e5e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	2b22      	cmp	r3, #34	@ 0x22
 8006e2e:	d002      	beq.n	8006e36 <I2C_ITSlaveCplt+0x56>
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e34:	d108      	bne.n	8006e48 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006e36:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fbfa 	bl	8007634 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2222      	movs	r2, #34	@ 0x22
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e46:	e00a      	b.n	8006e5e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	2b28      	cmp	r3, #40	@ 0x28
 8006e4c:	d107      	bne.n	8006e5e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006e4e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fbee 	bl	8007634 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b89      	ldr	r3, [pc, #548]	@ (80070a0 <I2C_ITSlaveCplt+0x2c0>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa7d 	bl	800737e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d013      	beq.n	8006eb6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01f      	beq.n	8006ee6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eb4:	e017      	b.n	8006ee6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d012      	beq.n	8006ee6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ece:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d020      	beq.n	8006f32 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0304 	bic.w	r3, r3, #4
 8006ef6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00c      	beq.n	8006f32 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f40:	f043 0204 	orr.w	r2, r3, #4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 0310 	and.w	r3, r3, #16
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d049      	beq.n	8006fe6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d044      	beq.n	8006fe6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d128      	bne.n	8006fb8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b28      	cmp	r3, #40	@ 0x28
 8006f70:	d108      	bne.n	8006f84 <I2C_ITSlaveCplt+0x1a4>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f78:	d104      	bne.n	8006f84 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f893 	bl	80070a8 <I2C_ITListenCplt>
 8006f82:	e030      	b.n	8006fe6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b29      	cmp	r3, #41	@ 0x29
 8006f8e:	d10e      	bne.n	8006fae <I2C_ITSlaveCplt+0x1ce>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f96:	d00a      	beq.n	8006fae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9ec 	bl	800737e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fdf6 	bl	8006b98 <I2C_ITSlaveSeqCplt>
 8006fac:	e01b      	b.n	8006fe6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	61da      	str	r2, [r3, #28]
 8006fb6:	e016      	b.n	8006fe6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <I2C_ITSlaveCplt+0x1fa>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fd8:	d105      	bne.n	8006fe6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8b5 	bl	8007150 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8a4 	bl	8007150 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b28      	cmp	r3, #40	@ 0x28
 8007012:	d141      	bne.n	8007098 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007014:	6979      	ldr	r1, [r7, #20]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f846 	bl	80070a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800701c:	e03c      	b.n	8007098 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007026:	d014      	beq.n	8007052 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff fdb5 	bl	8006b98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a1c      	ldr	r2, [pc, #112]	@ (80070a4 <I2C_ITSlaveCplt+0x2c4>)
 8007032:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fe ff9b 	bl	8005f86 <HAL_I2C_ListenCpltCallback>
}
 8007050:	e022      	b.n	8007098 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b22      	cmp	r3, #34	@ 0x22
 800705c:	d10e      	bne.n	800707c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe ff6e 	bl	8005f56 <HAL_I2C_SlaveRxCpltCallback>
}
 800707a:	e00d      	b.n	8007098 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fe ff55 	bl	8005f42 <HAL_I2C_SlaveTxCpltCallback>
}
 8007098:	bf00      	nop
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	fe00e800 	.word	0xfe00e800
 80070a4:	ffff0000 	.word	0xffff0000

080070a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a25      	ldr	r2, [pc, #148]	@ (800714c <I2C_ITListenCplt+0xa4>)
 80070b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d022      	beq.n	8007124 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d012      	beq.n	8007124 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711c:	f043 0204 	orr.w	r2, r3, #4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007124:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa83 	bl	8007634 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2210      	movs	r2, #16
 8007134:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe ff21 	bl	8005f86 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	ffff0000 	.word	0xffff0000

08007150 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007160:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a6d      	ldr	r2, [pc, #436]	@ (8007324 <I2C_ITError+0x1d4>)
 800716e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b28      	cmp	r3, #40	@ 0x28
 8007186:	d005      	beq.n	8007194 <I2C_ITError+0x44>
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b29      	cmp	r3, #41	@ 0x29
 800718c:	d002      	beq.n	8007194 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b2a      	cmp	r3, #42	@ 0x2a
 8007192:	d10b      	bne.n	80071ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007194:	2103      	movs	r1, #3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa4c 	bl	8007634 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2228      	movs	r2, #40	@ 0x28
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a60      	ldr	r2, [pc, #384]	@ (8007328 <I2C_ITError+0x1d8>)
 80071a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80071aa:	e030      	b.n	800720e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa3f 	bl	8007634 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8e1 	bl	800737e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b60      	cmp	r3, #96	@ 0x60
 80071c6:	d01f      	beq.n	8007208 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d114      	bne.n	8007208 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d109      	bne.n	8007200 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2210      	movs	r2, #16
 80071f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f8:	f043 0204 	orr.w	r2, r3, #4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2220      	movs	r2, #32
 8007206:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007212:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d039      	beq.n	8007290 <I2C_ITError+0x140>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b11      	cmp	r3, #17
 8007220:	d002      	beq.n	8007228 <I2C_ITError+0xd8>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b21      	cmp	r3, #33	@ 0x21
 8007226:	d133      	bne.n	8007290 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007236:	d107      	bne.n	8007248 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007246:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe f9d5 	bl	80055fc <HAL_DMA_GetState>
 8007252:	4603      	mov	r3, r0
 8007254:	2b01      	cmp	r3, #1
 8007256:	d017      	beq.n	8007288 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	4a33      	ldr	r2, [pc, #204]	@ (800732c <I2C_ITError+0x1dc>)
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe f8af 	bl	80053d0 <HAL_DMA_Abort_IT>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d04d      	beq.n	8007314 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007286:	e045      	b.n	8007314 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f851 	bl	8007330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800728e:	e041      	b.n	8007314 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d039      	beq.n	800730c <I2C_ITError+0x1bc>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b12      	cmp	r3, #18
 800729c:	d002      	beq.n	80072a4 <I2C_ITError+0x154>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b22      	cmp	r3, #34	@ 0x22
 80072a2:	d133      	bne.n	800730c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b2:	d107      	bne.n	80072c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe f997 	bl	80055fc <HAL_DMA_GetState>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d017      	beq.n	8007304 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d8:	4a14      	ldr	r2, [pc, #80]	@ (800732c <I2C_ITError+0x1dc>)
 80072da:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe f871 	bl	80053d0 <HAL_DMA_Abort_IT>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d011      	beq.n	8007318 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072fe:	4610      	mov	r0, r2
 8007300:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007302:	e009      	b.n	8007318 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f813 	bl	8007330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800730a:	e005      	b.n	8007318 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f80f 	bl	8007330 <I2C_TreatErrorCallback>
  }
}
 8007312:	e002      	b.n	800731a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007318:	bf00      	nop
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	ffff0000 	.word	0xffff0000
 8007328:	08006255 	.word	0x08006255
 800732c:	0800748b 	.word	0x0800748b

08007330 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b60      	cmp	r3, #96	@ 0x60
 8007342:	d10e      	bne.n	8007362 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fe fe3b 	bl	8005fd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007360:	e009      	b.n	8007376 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fe fe26 	bl	8005fc2 <HAL_I2C_ErrorCallback>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b02      	cmp	r3, #2
 8007392:	d103      	bne.n	800739c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d007      	beq.n	80073ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0201 	orr.w	r2, r2, #1
 80073b8:	619a      	str	r2, [r3, #24]
  }
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073e2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073ee:	2120      	movs	r1, #32
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f89b 	bl	800752c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073f6:	e02d      	b.n	8007454 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800740a:	b29b      	uxth	r3, r3
 800740c:	2bff      	cmp	r3, #255	@ 0xff
 800740e:	d903      	bls.n	8007418 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	22ff      	movs	r2, #255	@ 0xff
 8007414:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007416:	e004      	b.n	8007422 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	4619      	mov	r1, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3328      	adds	r3, #40	@ 0x28
 8007432:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007438:	f7fd fef6 	bl	8005228 <HAL_DMA_Start_IT>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007442:	2110      	movs	r1, #16
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fe83 	bl	8007150 <I2C_ITError>
}
 800744a:	e003      	b.n	8007454 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800744c:	2140      	movs	r1, #64	@ 0x40
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f86c 	bl	800752c <I2C_Enable_IRQ>
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007468:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007478:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800747a:	2110      	movs	r1, #16
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fe67 	bl	8007150 <I2C_ITError>
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a4:	2200      	movs	r2, #0
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	2200      	movs	r2, #0
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff ff39 	bl	8007330 <I2C_TreatErrorCallback>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	817b      	strh	r3, [r7, #10]
 80074d6:	4613      	mov	r3, r2
 80074d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074da:	897b      	ldrh	r3, [r7, #10]
 80074dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074e0:	7a7b      	ldrb	r3, [r7, #9]
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	0d5b      	lsrs	r3, r3, #21
 8007502:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007506:	4b08      	ldr	r3, [pc, #32]	@ (8007528 <I2C_TransferConfig+0x60>)
 8007508:	430b      	orrs	r3, r1
 800750a:	43db      	mvns	r3, r3
 800750c:	ea02 0103 	and.w	r1, r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	03ff63ff 	.word	0x03ff63ff

0800752c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007540:	4a39      	ldr	r2, [pc, #228]	@ (8007628 <I2C_Enable_IRQ+0xfc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d032      	beq.n	80075ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800754a:	4a38      	ldr	r2, [pc, #224]	@ (800762c <I2C_Enable_IRQ+0x100>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d02d      	beq.n	80075ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007554:	4a36      	ldr	r2, [pc, #216]	@ (8007630 <I2C_Enable_IRQ+0x104>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d028      	beq.n	80075ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800755a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da03      	bge.n	800756a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007568:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800757a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800757c:	887b      	ldrh	r3, [r7, #2]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800758c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	2b10      	cmp	r3, #16
 8007592:	d103      	bne.n	800759c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800759a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800759c:	887b      	ldrh	r3, [r7, #2]
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d133      	bne.n	800760a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f043 0320 	orr.w	r3, r3, #32
 80075a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075aa:	e02e      	b.n	800760a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da03      	bge.n	80075bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075ce:	887b      	ldrh	r3, [r7, #2]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075e0:	887b      	ldrh	r3, [r7, #2]
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d103      	bne.n	80075ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075ee:	887b      	ldrh	r3, [r7, #2]
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d103      	bne.n	80075fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80075fc:	887b      	ldrh	r3, [r7, #2]
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d103      	bne.n	800760a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007608:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	430a      	orrs	r2, r1
 8007618:	601a      	str	r2, [r3, #0]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	08006447 	.word	0x08006447
 800762c:	08006869 	.word	0x08006869
 8007630:	0800661d 	.word	0x0800661d

08007634 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007644:	887b      	ldrh	r3, [r7, #2]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007654:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007662:	2b28      	cmp	r3, #40	@ 0x28
 8007664:	d003      	beq.n	800766e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800766c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800766e:	887b      	ldrh	r3, [r7, #2]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00f      	beq.n	8007698 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800767e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800768c:	2b28      	cmp	r3, #40	@ 0x28
 800768e:	d003      	beq.n	8007698 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007696:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	da03      	bge.n	80076a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	2b10      	cmp	r3, #16
 80076ac:	d103      	bne.n	80076b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076b6:	887b      	ldrh	r3, [r7, #2]
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d103      	bne.n	80076c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f043 0320 	orr.w	r3, r3, #32
 80076c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076c4:	887b      	ldrh	r3, [r7, #2]
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d103      	bne.n	80076d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6819      	ldr	r1, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	43da      	mvns	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	400a      	ands	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b20      	cmp	r3, #32
 8007704:	d138      	bne.n	8007778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007710:	2302      	movs	r3, #2
 8007712:	e032      	b.n	800777a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2224      	movs	r2, #36	@ 0x24
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6819      	ldr	r1, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	e000      	b.n	800777a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007778:	2302      	movs	r3, #2
  }
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b20      	cmp	r3, #32
 800779a:	d139      	bne.n	8007810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e033      	b.n	8007812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2224      	movs	r2, #36	@ 0x24
 80077b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0201 	bic.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d141      	bne.n	80078b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800782e:	4b4b      	ldr	r3, [pc, #300]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783a:	d131      	bne.n	80078a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800783c:	4b47      	ldr	r3, [pc, #284]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800783e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007842:	4a46      	ldr	r2, [pc, #280]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800784c:	4b43      	ldr	r3, [pc, #268]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007854:	4a41      	ldr	r2, [pc, #260]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800785a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800785c:	4b40      	ldr	r3, [pc, #256]	@ (8007960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2232      	movs	r2, #50	@ 0x32
 8007862:	fb02 f303 	mul.w	r3, r2, r3
 8007866:	4a3f      	ldr	r2, [pc, #252]	@ (8007964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007868:	fba2 2303 	umull	r2, r3, r2, r3
 800786c:	0c9b      	lsrs	r3, r3, #18
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007872:	e002      	b.n	800787a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3b01      	subs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800787a:	4b38      	ldr	r3, [pc, #224]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007886:	d102      	bne.n	800788e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f2      	bne.n	8007874 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800788e:	4b33      	ldr	r3, [pc, #204]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789a:	d158      	bne.n	800794e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e057      	b.n	8007950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078a0:	4b2e      	ldr	r3, [pc, #184]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a6:	4a2d      	ldr	r2, [pc, #180]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80078b0:	e04d      	b.n	800794e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b8:	d141      	bne.n	800793e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078ba:	4b28      	ldr	r3, [pc, #160]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c6:	d131      	bne.n	800792c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078c8:	4b24      	ldr	r3, [pc, #144]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ce:	4a23      	ldr	r2, [pc, #140]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078d8:	4b20      	ldr	r3, [pc, #128]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078e0:	4a1e      	ldr	r2, [pc, #120]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2232      	movs	r2, #50	@ 0x32
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	0c9b      	lsrs	r3, r3, #18
 80078fa:	3301      	adds	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078fe:	e002      	b.n	8007906 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b01      	subs	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007906:	4b15      	ldr	r3, [pc, #84]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007912:	d102      	bne.n	800791a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f2      	bne.n	8007900 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800791a:	4b10      	ldr	r3, [pc, #64]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007926:	d112      	bne.n	800794e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e011      	b.n	8007950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800792c:	4b0b      	ldr	r3, [pc, #44]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800792e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007932:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800793c:	e007      	b.n	800794e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800793e:	4b07      	ldr	r3, [pc, #28]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007946:	4a05      	ldr	r2, [pc, #20]	@ (800795c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800794c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	40007000 	.word	0x40007000
 8007960:	2000003c 	.word	0x2000003c
 8007964:	431bde83 	.word	0x431bde83

08007968 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	4a04      	ldr	r2, [pc, #16]	@ (8007984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007976:	6093      	str	r3, [r2, #8]
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40007000 	.word	0x40007000

08007988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e2fe      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d075      	beq.n	8007a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a6:	4b97      	ldr	r3, [pc, #604]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079b0:	4b94      	ldr	r3, [pc, #592]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b0c      	cmp	r3, #12
 80079be:	d102      	bne.n	80079c6 <HAL_RCC_OscConfig+0x3e>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d002      	beq.n	80079cc <HAL_RCC_OscConfig+0x44>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10b      	bne.n	80079e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079cc:	4b8d      	ldr	r3, [pc, #564]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d05b      	beq.n	8007a90 <HAL_RCC_OscConfig+0x108>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d157      	bne.n	8007a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e2d9      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ec:	d106      	bne.n	80079fc <HAL_RCC_OscConfig+0x74>
 80079ee:	4b85      	ldr	r3, [pc, #532]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a84      	ldr	r2, [pc, #528]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 80079f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	e01d      	b.n	8007a38 <HAL_RCC_OscConfig+0xb0>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a04:	d10c      	bne.n	8007a20 <HAL_RCC_OscConfig+0x98>
 8007a06:	4b7f      	ldr	r3, [pc, #508]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	4b7c      	ldr	r3, [pc, #496]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7b      	ldr	r2, [pc, #492]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e00b      	b.n	8007a38 <HAL_RCC_OscConfig+0xb0>
 8007a20:	4b78      	ldr	r3, [pc, #480]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a77      	ldr	r2, [pc, #476]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	4b75      	ldr	r3, [pc, #468]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a74      	ldr	r2, [pc, #464]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d013      	beq.n	8007a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7fb fd94 	bl	800356c <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a48:	f7fb fd90 	bl	800356c <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e29e      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0xc0>
 8007a66:	e014      	b.n	8007a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fb fd80 	bl	800356c <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a70:	f7fb fd7c 	bl	800356c <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b64      	cmp	r3, #100	@ 0x64
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e28a      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a82:	4b60      	ldr	r3, [pc, #384]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f0      	bne.n	8007a70 <HAL_RCC_OscConfig+0xe8>
 8007a8e:	e000      	b.n	8007a92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d075      	beq.n	8007b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a9e:	4b59      	ldr	r3, [pc, #356]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
 8007aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007aa8:	4b56      	ldr	r3, [pc, #344]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	d102      	bne.n	8007abe <HAL_RCC_OscConfig+0x136>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d002      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x13c>
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d11f      	bne.n	8007b04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_RCC_OscConfig+0x154>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e25d      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007adc:	4b49      	ldr	r3, [pc, #292]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	4946      	ldr	r1, [pc, #280]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007af0:	4b45      	ldr	r3, [pc, #276]	@ (8007c08 <HAL_RCC_OscConfig+0x280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fb fced 	bl	80034d4 <HAL_InitTick>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d043      	beq.n	8007b88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e249      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d023      	beq.n	8007b54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3c      	ldr	r2, [pc, #240]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fb fd28 	bl	800356c <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b20:	f7fb fd24 	bl	800356c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e232      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b32:	4b34      	ldr	r3, [pc, #208]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f0      	beq.n	8007b20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3e:	4b31      	ldr	r3, [pc, #196]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	061b      	lsls	r3, r3, #24
 8007b4c:	492d      	ldr	r1, [pc, #180]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	604b      	str	r3, [r1, #4]
 8007b52:	e01a      	b.n	8007b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b54:	4b2b      	ldr	r3, [pc, #172]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a2a      	ldr	r2, [pc, #168]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fb fd04 	bl	800356c <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b68:	f7fb fd00 	bl	800356c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e20e      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b7a:	4b22      	ldr	r3, [pc, #136]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0x1e0>
 8007b86:	e000      	b.n	8007b8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d041      	beq.n	8007c1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01c      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b9e:	4b19      	ldr	r3, [pc, #100]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bae:	f7fb fcdd 	bl	800356c <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb6:	f7fb fcd9 	bl	800356c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e1e7      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ef      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x22e>
 8007bd6:	e020      	b.n	8007c1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bde:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <HAL_RCC_OscConfig+0x27c>)
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be8:	f7fb fcc0 	bl	800356c <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bee:	e00d      	b.n	8007c0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bf0:	f7fb fcbc 	bl	800356c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d906      	bls.n	8007c0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e1ca      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
 8007c02:	bf00      	nop
 8007c04:	40021000 	.word	0x40021000
 8007c08:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ea      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0304 	and.w	r3, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80a6 	beq.w	8007d74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c2c:	4b84      	ldr	r3, [pc, #528]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_RCC_OscConfig+0x2b4>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <HAL_RCC_OscConfig+0x2b6>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	4b7f      	ldr	r3, [pc, #508]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c46:	4a7e      	ldr	r2, [pc, #504]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c5e:	4b79      	ldr	r3, [pc, #484]	@ (8007e44 <HAL_RCC_OscConfig+0x4bc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d118      	bne.n	8007c9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c6a:	4b76      	ldr	r3, [pc, #472]	@ (8007e44 <HAL_RCC_OscConfig+0x4bc>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a75      	ldr	r2, [pc, #468]	@ (8007e44 <HAL_RCC_OscConfig+0x4bc>)
 8007c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c76:	f7fb fc79 	bl	800356c <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7e:	f7fb fc75 	bl	800356c <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e183      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c90:	4b6c      	ldr	r3, [pc, #432]	@ (8007e44 <HAL_RCC_OscConfig+0x4bc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d108      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x32e>
 8007ca4:	4b66      	ldr	r3, [pc, #408]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007caa:	4a65      	ldr	r2, [pc, #404]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cb4:	e024      	b.n	8007d00 <HAL_RCC_OscConfig+0x378>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d110      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x358>
 8007cbe:	4b60      	ldr	r3, [pc, #384]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc4:	4a5e      	ldr	r2, [pc, #376]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cc6:	f043 0304 	orr.w	r3, r3, #4
 8007cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cce:	4b5c      	ldr	r3, [pc, #368]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cde:	e00f      	b.n	8007d00 <HAL_RCC_OscConfig+0x378>
 8007ce0:	4b57      	ldr	r3, [pc, #348]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce6:	4a56      	ldr	r2, [pc, #344]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cf0:	4b53      	ldr	r3, [pc, #332]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf6:	4a52      	ldr	r2, [pc, #328]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007cf8:	f023 0304 	bic.w	r3, r3, #4
 8007cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d016      	beq.n	8007d36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d08:	f7fb fc30 	bl	800356c <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d10:	f7fb fc2c 	bl	800356c <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e138      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d26:	4b46      	ldr	r3, [pc, #280]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0ed      	beq.n	8007d10 <HAL_RCC_OscConfig+0x388>
 8007d34:	e015      	b.n	8007d62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d36:	f7fb fc19 	bl	800356c <HAL_GetTick>
 8007d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d3c:	e00a      	b.n	8007d54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3e:	f7fb fc15 	bl	800356c <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e121      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d54:	4b3a      	ldr	r3, [pc, #232]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1ed      	bne.n	8007d3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d105      	bne.n	8007d74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d68:	4b35      	ldr	r3, [pc, #212]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6c:	4a34      	ldr	r2, [pc, #208]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d03c      	beq.n	8007dfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01c      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d88:	4b2d      	ldr	r3, [pc, #180]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007d90:	f043 0301 	orr.w	r3, r3, #1
 8007d94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d98:	f7fb fbe8 	bl	800356c <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007da0:	f7fb fbe4 	bl	800356c <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e0f2      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007db2:	4b23      	ldr	r3, [pc, #140]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0ef      	beq.n	8007da0 <HAL_RCC_OscConfig+0x418>
 8007dc0:	e01b      	b.n	8007dfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007dca:	f023 0301 	bic.w	r3, r3, #1
 8007dce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd2:	f7fb fbcb 	bl	800356c <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dda:	f7fb fbc7 	bl	800356c <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e0d5      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dec:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1ef      	bne.n	8007dda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80c9 	beq.w	8007f96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e04:	4b0e      	ldr	r3, [pc, #56]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 030c 	and.w	r3, r3, #12
 8007e0c:	2b0c      	cmp	r3, #12
 8007e0e:	f000 8083 	beq.w	8007f18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d15e      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e1a:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a08      	ldr	r2, [pc, #32]	@ (8007e40 <HAL_RCC_OscConfig+0x4b8>)
 8007e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e26:	f7fb fba1 	bl	800356c <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e2c:	e00c      	b.n	8007e48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e2e:	f7fb fb9d 	bl	800356c <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d905      	bls.n	8007e48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0ab      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
 8007e40:	40021000 	.word	0x40021000
 8007e44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e48:	4b55      	ldr	r3, [pc, #340]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ec      	bne.n	8007e2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e54:	4b52      	ldr	r3, [pc, #328]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	4b52      	ldr	r3, [pc, #328]	@ (8007fa4 <HAL_RCC_OscConfig+0x61c>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6a11      	ldr	r1, [r2, #32]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e64:	3a01      	subs	r2, #1
 8007e66:	0112      	lsls	r2, r2, #4
 8007e68:	4311      	orrs	r1, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007e6e:	0212      	lsls	r2, r2, #8
 8007e70:	4311      	orrs	r1, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e76:	0852      	lsrs	r2, r2, #1
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	0552      	lsls	r2, r2, #21
 8007e7c:	4311      	orrs	r1, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e82:	0852      	lsrs	r2, r2, #1
 8007e84:	3a01      	subs	r2, #1
 8007e86:	0652      	lsls	r2, r2, #25
 8007e88:	4311      	orrs	r1, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e8e:	06d2      	lsls	r2, r2, #27
 8007e90:	430a      	orrs	r2, r1
 8007e92:	4943      	ldr	r1, [pc, #268]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e98:	4b41      	ldr	r3, [pc, #260]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a40      	ldr	r2, [pc, #256]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ea2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb0:	f7fb fb5c 	bl	800356c <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb8:	f7fb fb58 	bl	800356c <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e066      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eca:	4b35      	ldr	r3, [pc, #212]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x530>
 8007ed6:	e05e      	b.n	8007f96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed8:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a30      	ldr	r2, [pc, #192]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fb fb42 	bl	800356c <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eec:	f7fb fb3e 	bl	800356c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e04c      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007efe:	4b28      	ldr	r3, [pc, #160]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007f0a:	4b25      	ldr	r3, [pc, #148]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	4924      	ldr	r1, [pc, #144]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007f10:	4b25      	ldr	r3, [pc, #148]	@ (8007fa8 <HAL_RCC_OscConfig+0x620>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	60cb      	str	r3, [r1, #12]
 8007f16:	e03e      	b.n	8007f96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e039      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f24:	4b1e      	ldr	r3, [pc, #120]	@ (8007fa0 <HAL_RCC_OscConfig+0x618>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f003 0203 	and.w	r2, r3, #3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d12c      	bne.n	8007f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	3b01      	subs	r3, #1
 8007f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d123      	bne.n	8007f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d11b      	bne.n	8007f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d113      	bne.n	8007f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	3b01      	subs	r3, #1
 8007f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d109      	bne.n	8007f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d001      	beq.n	8007f96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	019f800c 	.word	0x019f800c
 8007fa8:	feeefffc 	.word	0xfeeefffc

08007fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e11e      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fc4:	4b91      	ldr	r3, [pc, #580]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d910      	bls.n	8007ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fd2:	4b8e      	ldr	r3, [pc, #568]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f023 020f 	bic.w	r2, r3, #15
 8007fda:	498c      	ldr	r1, [pc, #560]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fe2:	4b8a      	ldr	r3, [pc, #552]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e106      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d073      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d129      	bne.n	800805c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008008:	4b81      	ldr	r3, [pc, #516]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0f4      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008018:	f000 f99e 	bl	8008358 <RCC_GetSysClockFreqFromPLLSource>
 800801c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4a7c      	ldr	r2, [pc, #496]	@ (8008214 <HAL_RCC_ClockConfig+0x268>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d93f      	bls.n	80080a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008026:	4b7a      	ldr	r3, [pc, #488]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800803a:	2b00      	cmp	r3, #0
 800803c:	d033      	beq.n	80080a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008042:	2b00      	cmp	r3, #0
 8008044:	d12f      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008046:	4b72      	ldr	r3, [pc, #456]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800804e:	4a70      	ldr	r2, [pc, #448]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008054:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008056:	2380      	movs	r3, #128	@ 0x80
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	e024      	b.n	80080a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d107      	bne.n	8008074 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008064:	4b6a      	ldr	r3, [pc, #424]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e0c6      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008074:	4b66      	ldr	r3, [pc, #408]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0be      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008084:	f000 f8ce 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 8008088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4a61      	ldr	r2, [pc, #388]	@ (8008214 <HAL_RCC_ClockConfig+0x268>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d909      	bls.n	80080a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008092:	4b5f      	ldr	r3, [pc, #380]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800809a:	4a5d      	ldr	r2, [pc, #372]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 800809c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80080a2:	2380      	movs	r3, #128	@ 0x80
 80080a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080a6:	4b5a      	ldr	r3, [pc, #360]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 0203 	bic.w	r2, r3, #3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4957      	ldr	r1, [pc, #348]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b8:	f7fb fa58 	bl	800356c <HAL_GetTick>
 80080bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080be:	e00a      	b.n	80080d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c0:	f7fb fa54 	bl	800356c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e095      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 020c 	and.w	r2, r3, #12
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d1eb      	bne.n	80080c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d023      	beq.n	800813c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008100:	4b43      	ldr	r3, [pc, #268]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	4a42      	ldr	r2, [pc, #264]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008106:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800810a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008118:	4b3d      	ldr	r3, [pc, #244]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008120:	4a3b      	ldr	r2, [pc, #236]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008128:	4b39      	ldr	r3, [pc, #228]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4936      	ldr	r1, [pc, #216]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008136:	4313      	orrs	r3, r2
 8008138:	608b      	str	r3, [r1, #8]
 800813a:	e008      	b.n	800814e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b80      	cmp	r3, #128	@ 0x80
 8008140:	d105      	bne.n	800814e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008142:	4b33      	ldr	r3, [pc, #204]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	4a32      	ldr	r2, [pc, #200]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 8008148:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800814c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800814e:	4b2f      	ldr	r3, [pc, #188]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d21d      	bcs.n	8008198 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815c:	4b2b      	ldr	r3, [pc, #172]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f023 020f 	bic.w	r2, r3, #15
 8008164:	4929      	ldr	r1, [pc, #164]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	4313      	orrs	r3, r2
 800816a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800816c:	f7fb f9fe 	bl	800356c <HAL_GetTick>
 8008170:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008172:	e00a      	b.n	800818a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008174:	f7fb f9fa 	bl	800356c <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e03b      	b.n	8008202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818a:	4b20      	ldr	r3, [pc, #128]	@ (800820c <HAL_RCC_ClockConfig+0x260>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d1ed      	bne.n	8008174 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	4917      	ldr	r1, [pc, #92]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081c2:	4b13      	ldr	r3, [pc, #76]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	490f      	ldr	r1, [pc, #60]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081d6:	f000 f825 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 80081da:	4602      	mov	r2, r0
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <HAL_RCC_ClockConfig+0x264>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	490c      	ldr	r1, [pc, #48]	@ (8008218 <HAL_RCC_ClockConfig+0x26c>)
 80081e8:	5ccb      	ldrb	r3, [r1, r3]
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	fa22 f303 	lsr.w	r3, r2, r3
 80081f2:	4a0a      	ldr	r2, [pc, #40]	@ (800821c <HAL_RCC_ClockConfig+0x270>)
 80081f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <HAL_RCC_ClockConfig+0x274>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fb f96a 	bl	80034d4 <HAL_InitTick>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40022000 	.word	0x40022000
 8008210:	40021000 	.word	0x40021000
 8008214:	04c4b400 	.word	0x04c4b400
 8008218:	0800c560 	.word	0x0800c560
 800821c:	2000003c 	.word	0x2000003c
 8008220:	20000040 	.word	0x20000040

08008224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800822a:	4b2c      	ldr	r3, [pc, #176]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 030c 	and.w	r3, r3, #12
 8008232:	2b04      	cmp	r3, #4
 8008234:	d102      	bne.n	800823c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008236:	4b2a      	ldr	r3, [pc, #168]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	e047      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800823c:	4b27      	ldr	r3, [pc, #156]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 030c 	and.w	r3, r3, #12
 8008244:	2b08      	cmp	r3, #8
 8008246:	d102      	bne.n	800824e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008248:	4b26      	ldr	r3, [pc, #152]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	e03e      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800824e:	4b23      	ldr	r3, [pc, #140]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f003 030c 	and.w	r3, r3, #12
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d136      	bne.n	80082c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800825a:	4b20      	ldr	r3, [pc, #128]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008264:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	3301      	adds	r3, #1
 8008270:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d10c      	bne.n	8008292 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008278:	4a1a      	ldr	r2, [pc, #104]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008282:	68d2      	ldr	r2, [r2, #12]
 8008284:	0a12      	lsrs	r2, r2, #8
 8008286:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	617b      	str	r3, [r7, #20]
      break;
 8008290:	e00c      	b.n	80082ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008292:	4a13      	ldr	r2, [pc, #76]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	fbb2 f3f3 	udiv	r3, r2, r3
 800829a:	4a10      	ldr	r2, [pc, #64]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800829c:	68d2      	ldr	r2, [r2, #12]
 800829e:	0a12      	lsrs	r2, r2, #8
 80082a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]
      break;
 80082aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082ac:	4b0b      	ldr	r3, [pc, #44]	@ (80082dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	0e5b      	lsrs	r3, r3, #25
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	3301      	adds	r3, #1
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	e001      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80082cc:	693b      	ldr	r3, [r7, #16]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40021000 	.word	0x40021000
 80082e0:	00f42400 	.word	0x00f42400
 80082e4:	016e3600 	.word	0x016e3600

080082e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082ec:	4b03      	ldr	r3, [pc, #12]	@ (80082fc <HAL_RCC_GetHCLKFreq+0x14>)
 80082ee:	681b      	ldr	r3, [r3, #0]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	2000003c 	.word	0x2000003c

08008300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008304:	f7ff fff0 	bl	80082e8 <HAL_RCC_GetHCLKFreq>
 8008308:	4602      	mov	r2, r0
 800830a:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	4904      	ldr	r1, [pc, #16]	@ (8008328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008316:	5ccb      	ldrb	r3, [r1, r3]
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008320:	4618      	mov	r0, r3
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40021000 	.word	0x40021000
 8008328:	0800c570 	.word	0x0800c570

0800832c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008330:	f7ff ffda 	bl	80082e8 <HAL_RCC_GetHCLKFreq>
 8008334:	4602      	mov	r2, r0
 8008336:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	0adb      	lsrs	r3, r3, #11
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	4904      	ldr	r1, [pc, #16]	@ (8008354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008342:	5ccb      	ldrb	r3, [r1, r3]
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40021000 	.word	0x40021000
 8008354:	0800c570 	.word	0x0800c570

08008358 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800835e:	4b1e      	ldr	r3, [pc, #120]	@ (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008368:	4b1b      	ldr	r3, [pc, #108]	@ (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	091b      	lsrs	r3, r3, #4
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d10c      	bne.n	8008396 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800837c:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	fbb2 f3f3 	udiv	r3, r2, r3
 8008384:	4a14      	ldr	r2, [pc, #80]	@ (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008386:	68d2      	ldr	r2, [r2, #12]
 8008388:	0a12      	lsrs	r2, r2, #8
 800838a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800838e:	fb02 f303 	mul.w	r3, r2, r3
 8008392:	617b      	str	r3, [r7, #20]
    break;
 8008394:	e00c      	b.n	80083b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008396:	4a12      	ldr	r2, [pc, #72]	@ (80083e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	4a0e      	ldr	r2, [pc, #56]	@ (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083a0:	68d2      	ldr	r2, [r2, #12]
 80083a2:	0a12      	lsrs	r2, r2, #8
 80083a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]
    break;
 80083ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083b0:	4b09      	ldr	r3, [pc, #36]	@ (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	0e5b      	lsrs	r3, r3, #25
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	3301      	adds	r3, #1
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80083ca:	687b      	ldr	r3, [r7, #4]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	371c      	adds	r7, #28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	40021000 	.word	0x40021000
 80083dc:	016e3600 	.word	0x016e3600
 80083e0:	00f42400 	.word	0x00f42400

080083e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083ec:	2300      	movs	r3, #0
 80083ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083f0:	2300      	movs	r3, #0
 80083f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8098 	beq.w	8008532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008406:	4b43      	ldr	r3, [pc, #268]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10d      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008412:	4b40      	ldr	r3, [pc, #256]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008416:	4a3f      	ldr	r2, [pc, #252]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800841c:	6593      	str	r3, [r2, #88]	@ 0x58
 800841e:	4b3d      	ldr	r3, [pc, #244]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008426:	60bb      	str	r3, [r7, #8]
 8008428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800842a:	2301      	movs	r3, #1
 800842c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800842e:	4b3a      	ldr	r3, [pc, #232]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a39      	ldr	r2, [pc, #228]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800843a:	f7fb f897 	bl	800356c <HAL_GetTick>
 800843e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008440:	e009      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008442:	f7fb f893 	bl	800356c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d902      	bls.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	74fb      	strb	r3, [r7, #19]
        break;
 8008454:	e005      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008456:	4b30      	ldr	r3, [pc, #192]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0ef      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008462:	7cfb      	ldrb	r3, [r7, #19]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d159      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008468:	4b2a      	ldr	r3, [pc, #168]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800846e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008472:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01e      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	429a      	cmp	r2, r3
 8008482:	d019      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008484:	4b23      	ldr	r3, [pc, #140]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800848e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008490:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008496:	4a1f      	ldr	r2, [pc, #124]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800849c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084b0:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d016      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c2:	f7fb f853 	bl	800356c <HAL_GetTick>
 80084c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084c8:	e00b      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ca:	f7fb f84f 	bl	800356c <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d8:	4293      	cmp	r3, r2
 80084da:	d902      	bls.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	74fb      	strb	r3, [r7, #19]
            break;
 80084e0:	e006      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0ec      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084f0:	7cfb      	ldrb	r3, [r7, #19]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084f6:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008504:	4903      	ldr	r1, [pc, #12]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800850c:	e008      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	74bb      	strb	r3, [r7, #18]
 8008512:	e005      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008514:	40021000 	.word	0x40021000
 8008518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	7cfb      	ldrb	r3, [r7, #19]
 800851e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008520:	7c7b      	ldrb	r3, [r7, #17]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d105      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008526:	4ba7      	ldr	r3, [pc, #668]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852a:	4aa6      	ldr	r2, [pc, #664]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800852c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008530:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800853e:	4ba1      	ldr	r3, [pc, #644]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008544:	f023 0203 	bic.w	r2, r3, #3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	499d      	ldr	r1, [pc, #628]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008560:	4b98      	ldr	r3, [pc, #608]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008566:	f023 020c 	bic.w	r2, r3, #12
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	4995      	ldr	r1, [pc, #596]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008582:	4b90      	ldr	r3, [pc, #576]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008588:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	498c      	ldr	r1, [pc, #560]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085a4:	4b87      	ldr	r3, [pc, #540]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	4984      	ldr	r1, [pc, #528]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085c6:	4b7f      	ldr	r3, [pc, #508]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	497b      	ldr	r1, [pc, #492]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085e8:	4b76      	ldr	r3, [pc, #472]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	4973      	ldr	r1, [pc, #460]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800860a:	4b6e      	ldr	r3, [pc, #440]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008610:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	496a      	ldr	r1, [pc, #424]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800862c:	4b65      	ldr	r3, [pc, #404]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008632:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	4962      	ldr	r1, [pc, #392]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800864e:	4b5d      	ldr	r3, [pc, #372]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008654:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	4959      	ldr	r1, [pc, #356]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008670:	4b54      	ldr	r3, [pc, #336]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008676:	f023 0203 	bic.w	r2, r3, #3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	4951      	ldr	r1, [pc, #324]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008692:	4b4c      	ldr	r3, [pc, #304]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	4948      	ldr	r1, [pc, #288]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d015      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086b4:	4b43      	ldr	r3, [pc, #268]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c2:	4940      	ldr	r1, [pc, #256]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086d2:	d105      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086d4:	4b3b      	ldr	r3, [pc, #236]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4a3a      	ldr	r2, [pc, #232]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d015      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086ec:	4b35      	ldr	r3, [pc, #212]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	4932      	ldr	r1, [pc, #200]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800870a:	d105      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800870c:	4b2d      	ldr	r3, [pc, #180]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a2c      	ldr	r2, [pc, #176]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008716:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d015      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008724:	4b27      	ldr	r3, [pc, #156]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800872a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008732:	4924      	ldr	r1, [pc, #144]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008734:	4313      	orrs	r3, r2
 8008736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800873e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008742:	d105      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008744:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	4a1e      	ldr	r2, [pc, #120]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800874a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800874e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d015      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800875c:	4b19      	ldr	r3, [pc, #100]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876a:	4916      	ldr	r1, [pc, #88]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800877a:	d105      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800877c:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4a10      	ldr	r2, [pc, #64]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d019      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008794:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a2:	4908      	ldr	r1, [pc, #32]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b2:	d109      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b4:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a02      	ldr	r2, [pc, #8]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087be:	60d3      	str	r3, [r2, #12]
 80087c0:	e002      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80087c2:	bf00      	nop
 80087c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d015      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80087d4:	4b29      	ldr	r3, [pc, #164]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e2:	4926      	ldr	r1, [pc, #152]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f2:	d105      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087f4:	4b21      	ldr	r3, [pc, #132]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4a20      	ldr	r2, [pc, #128]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d015      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800880c:	4b1b      	ldr	r3, [pc, #108]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008812:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800881a:	4918      	ldr	r1, [pc, #96]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800882a:	d105      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800882c:	4b13      	ldr	r3, [pc, #76]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4a12      	ldr	r2, [pc, #72]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008836:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d015      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008844:	4b0d      	ldr	r3, [pc, #52]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800884a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008852:	490a      	ldr	r1, [pc, #40]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008854:	4313      	orrs	r3, r2
 8008856:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800885e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008862:	d105      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008864:	4b05      	ldr	r3, [pc, #20]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4a04      	ldr	r2, [pc, #16]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800886a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800886e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008870:	7cbb      	ldrb	r3, [r7, #18]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40021000 	.word	0x40021000

08008880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e049      	b.n	8008926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fa fb90 	bl	8002fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 ff8e 	bl	80097e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e049      	b.n	80089d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f841 	bl	80089dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f000 ff37 	bl	80097e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_TIM_PWM_Start+0x24>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	bf14      	ite	ne
 8008a0c:	2301      	movne	r3, #1
 8008a0e:	2300      	moveq	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	e03c      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d109      	bne.n	8008a2e <HAL_TIM_PWM_Start+0x3e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e02f      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d109      	bne.n	8008a48 <HAL_TIM_PWM_Start+0x58>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	e022      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b0c      	cmp	r3, #12
 8008a4c:	d109      	bne.n	8008a62 <HAL_TIM_PWM_Start+0x72>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e015      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d109      	bne.n	8008a7c <HAL_TIM_PWM_Start+0x8c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	e008      	b.n	8008a8e <HAL_TIM_PWM_Start+0x9e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e0a6      	b.n	8008be4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xb6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aa4:	e023      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_PWM_Start+0xc6>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ab4:	e01b      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_PWM_Start+0xd6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ac4:	e013      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b0c      	cmp	r3, #12
 8008aca:	d104      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0xe6>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ad4:	e00b      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_PWM_Start+0xf6>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ae4:	e003      	b.n	8008aee <HAL_TIM_PWM_Start+0xfe>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fc16 	bl	800a328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a3a      	ldr	r2, [pc, #232]	@ (8008bec <HAL_TIM_PWM_Start+0x1fc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d018      	beq.n	8008b38 <HAL_TIM_PWM_Start+0x148>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a39      	ldr	r2, [pc, #228]	@ (8008bf0 <HAL_TIM_PWM_Start+0x200>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <HAL_TIM_PWM_Start+0x148>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a37      	ldr	r2, [pc, #220]	@ (8008bf4 <HAL_TIM_PWM_Start+0x204>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00e      	beq.n	8008b38 <HAL_TIM_PWM_Start+0x148>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a36      	ldr	r2, [pc, #216]	@ (8008bf8 <HAL_TIM_PWM_Start+0x208>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d009      	beq.n	8008b38 <HAL_TIM_PWM_Start+0x148>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a34      	ldr	r2, [pc, #208]	@ (8008bfc <HAL_TIM_PWM_Start+0x20c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <HAL_TIM_PWM_Start+0x148>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a33      	ldr	r2, [pc, #204]	@ (8008c00 <HAL_TIM_PWM_Start+0x210>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d101      	bne.n	8008b3c <HAL_TIM_PWM_Start+0x14c>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <HAL_TIM_PWM_Start+0x14e>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a25      	ldr	r2, [pc, #148]	@ (8008bec <HAL_TIM_PWM_Start+0x1fc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d022      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b64:	d01d      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a26      	ldr	r2, [pc, #152]	@ (8008c04 <HAL_TIM_PWM_Start+0x214>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d018      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a24      	ldr	r2, [pc, #144]	@ (8008c08 <HAL_TIM_PWM_Start+0x218>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d013      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a23      	ldr	r2, [pc, #140]	@ (8008c0c <HAL_TIM_PWM_Start+0x21c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00e      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a19      	ldr	r2, [pc, #100]	@ (8008bf0 <HAL_TIM_PWM_Start+0x200>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d009      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <HAL_TIM_PWM_Start+0x204>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d004      	beq.n	8008ba2 <HAL_TIM_PWM_Start+0x1b2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <HAL_TIM_PWM_Start+0x210>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d115      	bne.n	8008bce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	4b19      	ldr	r3, [pc, #100]	@ (8008c10 <HAL_TIM_PWM_Start+0x220>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b06      	cmp	r3, #6
 8008bb2:	d015      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x1f0>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bba:	d011      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bcc:	e008      	b.n	8008be0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0201 	orr.w	r2, r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e000      	b.n	8008be2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40013400 	.word	0x40013400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800
 8008c00:	40015000 	.word	0x40015000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	00010007 	.word	0x00010007

08008c14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e049      	b.n	8008cba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f841 	bl	8008cc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f000 fdc4 	bl	80097e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
	...

08008cd8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_IC_Start_IT+0x1e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	e023      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x66>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_IC_Start_IT+0x2e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	e01b      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x66>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_IC_Start_IT+0x3e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	e013      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x66>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_IC_Start_IT+0x4e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	e00b      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x66>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b10      	cmp	r3, #16
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_IC_Start_IT+0x5e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	e003      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x66>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <HAL_TIM_IC_Start_IT+0x78>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	e013      	b.n	8008d78 <HAL_TIM_IC_Start_IT+0xa0>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d104      	bne.n	8008d60 <HAL_TIM_IC_Start_IT+0x88>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	e00b      	b.n	8008d78 <HAL_TIM_IC_Start_IT+0xa0>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b08      	cmp	r3, #8
 8008d64:	d104      	bne.n	8008d70 <HAL_TIM_IC_Start_IT+0x98>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e003      	b.n	8008d78 <HAL_TIM_IC_Start_IT+0xa0>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d102      	bne.n	8008d86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d80:	7b7b      	ldrb	r3, [r7, #13]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d001      	beq.n	8008d8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e0e2      	b.n	8008f50 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <HAL_TIM_IC_Start_IT+0xc2>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d98:	e023      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x10a>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d104      	bne.n	8008daa <HAL_TIM_IC_Start_IT+0xd2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008da8:	e01b      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x10a>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d104      	bne.n	8008dba <HAL_TIM_IC_Start_IT+0xe2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008db8:	e013      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x10a>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b0c      	cmp	r3, #12
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_IC_Start_IT+0xf2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dc8:	e00b      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x10a>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d104      	bne.n	8008dda <HAL_TIM_IC_Start_IT+0x102>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dd8:	e003      	b.n	8008de2 <HAL_TIM_IC_Start_IT+0x10a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_IC_Start_IT+0x11a>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df0:	e013      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x142>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_IC_Start_IT+0x12a>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x142>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_IC_Start_IT+0x13a>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e10:	e003      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x142>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b0c      	cmp	r3, #12
 8008e1e:	d841      	bhi.n	8008ea4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008e20:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <HAL_TIM_IC_Start_IT+0x150>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e5d 	.word	0x08008e5d
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008ea5 	.word	0x08008ea5
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008e6f 	.word	0x08008e6f
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008e81 	.word	0x08008e81
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008e93 	.word	0x08008e93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0202 	orr.w	r2, r2, #2
 8008e6a:	60da      	str	r2, [r3, #12]
      break;
 8008e6c:	e01d      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f042 0204 	orr.w	r2, r2, #4
 8008e7c:	60da      	str	r2, [r3, #12]
      break;
 8008e7e:	e014      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0208 	orr.w	r2, r2, #8
 8008e8e:	60da      	str	r2, [r3, #12]
      break;
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0210 	orr.w	r2, r2, #16
 8008ea0:	60da      	str	r2, [r3, #12]
      break;
 8008ea2:	e002      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d14e      	bne.n	8008f4e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 fa35 	bl	800a328 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a25      	ldr	r2, [pc, #148]	@ (8008f58 <HAL_TIM_IC_Start_IT+0x280>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d022      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed0:	d01d      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a21      	ldr	r2, [pc, #132]	@ (8008f5c <HAL_TIM_IC_Start_IT+0x284>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d018      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8008f60 <HAL_TIM_IC_Start_IT+0x288>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d013      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a1e      	ldr	r2, [pc, #120]	@ (8008f64 <HAL_TIM_IC_Start_IT+0x28c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00e      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f68 <HAL_TIM_IC_Start_IT+0x290>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d009      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1b      	ldr	r2, [pc, #108]	@ (8008f6c <HAL_TIM_IC_Start_IT+0x294>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d004      	beq.n	8008f0e <HAL_TIM_IC_Start_IT+0x236>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a19      	ldr	r2, [pc, #100]	@ (8008f70 <HAL_TIM_IC_Start_IT+0x298>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d115      	bne.n	8008f3a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	4b17      	ldr	r3, [pc, #92]	@ (8008f74 <HAL_TIM_IC_Start_IT+0x29c>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b06      	cmp	r3, #6
 8008f1e:	d015      	beq.n	8008f4c <HAL_TIM_IC_Start_IT+0x274>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f26:	d011      	beq.n	8008f4c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0201 	orr.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f38:	e008      	b.n	8008f4c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f042 0201 	orr.w	r2, r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e000      	b.n	8008f4e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	40012c00 	.word	0x40012c00
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	40000800 	.word	0x40000800
 8008f64:	40000c00 	.word	0x40000c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40015000 	.word	0x40015000
 8008f74:	00010007 	.word	0x00010007

08008f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d020      	beq.n	8008fdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01b      	beq.n	8008fdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0202 	mvn.w	r2, #2
 8008fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f8 faee 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fbea 	bl	80097a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fbf1 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d020      	beq.n	8009028 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01b      	beq.n	8009028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0204 	mvn.w	r2, #4
 8008ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7f8 fac8 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8009014:	e005      	b.n	8009022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fbc4 	bl	80097a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fbcb 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d020      	beq.n	8009074 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01b      	beq.n	8009074 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0208 	mvn.w	r2, #8
 8009044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7f8 faa2 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb9e 	bl	80097a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fba5 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b00      	cmp	r3, #0
 800907c:	d020      	beq.n	80090c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01b      	beq.n	80090c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0210 	mvn.w	r2, #16
 8009090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2208      	movs	r2, #8
 8009096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7f8 fa7c 	bl	80015a4 <HAL_TIM_IC_CaptureCallback>
 80090ac:	e005      	b.n	80090ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb78 	bl	80097a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fb7f 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0201 	mvn.w	r2, #1
 80090dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7f8 ffd8 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fa65 	bl	800a5dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800912e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fa5d 	bl	800a5f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fb39 	bl	80097cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f06f 0220 	mvn.w	r2, #32
 8009176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fa25 	bl	800a5c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fa31 	bl	800a604 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fa29 	bl	800a618 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80091e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fa21 	bl	800a62c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00c      	beq.n	800920e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d007      	beq.n	800920e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fa19 	bl	800a640 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009230:	2302      	movs	r3, #2
 8009232:	e088      	b.n	8009346 <HAL_TIM_IC_ConfigChannel+0x130>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d11b      	bne.n	800927a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009252:	f000 fea3 	bl	8009f9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 020c 	bic.w	r2, r2, #12
 8009264:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6999      	ldr	r1, [r3, #24]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	619a      	str	r2, [r3, #24]
 8009278:	e060      	b.n	800933c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b04      	cmp	r3, #4
 800927e:	d11c      	bne.n	80092ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009290:	f000 ff27 	bl	800a0e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80092a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6999      	ldr	r1, [r3, #24]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	021a      	lsls	r2, r3, #8
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	619a      	str	r2, [r3, #24]
 80092b8:	e040      	b.n	800933c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d11b      	bne.n	80092f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80092d0:	f000 ff74 	bl	800a1bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	69da      	ldr	r2, [r3, #28]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 020c 	bic.w	r2, r2, #12
 80092e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69d9      	ldr	r1, [r3, #28]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	689a      	ldr	r2, [r3, #8]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	61da      	str	r2, [r3, #28]
 80092f6:	e021      	b.n	800933c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b0c      	cmp	r3, #12
 80092fc:	d11c      	bne.n	8009338 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800930e:	f000 ff91 	bl	800a234 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009320:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69d9      	ldr	r1, [r3, #28]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	021a      	lsls	r2, r3, #8
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	61da      	str	r2, [r3, #28]
 8009336:	e001      	b.n	800933c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800936a:	2302      	movs	r3, #2
 800936c:	e0ff      	b.n	800956e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b14      	cmp	r3, #20
 800937a:	f200 80f0 	bhi.w	800955e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800937e:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093d9 	.word	0x080093d9
 8009388:	0800955f 	.word	0x0800955f
 800938c:	0800955f 	.word	0x0800955f
 8009390:	0800955f 	.word	0x0800955f
 8009394:	08009419 	.word	0x08009419
 8009398:	0800955f 	.word	0x0800955f
 800939c:	0800955f 	.word	0x0800955f
 80093a0:	0800955f 	.word	0x0800955f
 80093a4:	0800945b 	.word	0x0800945b
 80093a8:	0800955f 	.word	0x0800955f
 80093ac:	0800955f 	.word	0x0800955f
 80093b0:	0800955f 	.word	0x0800955f
 80093b4:	0800949b 	.word	0x0800949b
 80093b8:	0800955f 	.word	0x0800955f
 80093bc:	0800955f 	.word	0x0800955f
 80093c0:	0800955f 	.word	0x0800955f
 80093c4:	080094dd 	.word	0x080094dd
 80093c8:	0800955f 	.word	0x0800955f
 80093cc:	0800955f 	.word	0x0800955f
 80093d0:	0800955f 	.word	0x0800955f
 80093d4:	0800951d 	.word	0x0800951d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fab2 	bl	8009948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0208 	orr.w	r2, r2, #8
 80093f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0204 	bic.w	r2, r2, #4
 8009402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6999      	ldr	r1, [r3, #24]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	619a      	str	r2, [r3, #24]
      break;
 8009416:	e0a5      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68b9      	ldr	r1, [r7, #8]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fb2c 	bl	8009a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6999      	ldr	r1, [r3, #24]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	619a      	str	r2, [r3, #24]
      break;
 8009458:	e084      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fb9f 	bl	8009ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69da      	ldr	r2, [r3, #28]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f042 0208 	orr.w	r2, r2, #8
 8009474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69da      	ldr	r2, [r3, #28]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0204 	bic.w	r2, r2, #4
 8009484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69d9      	ldr	r1, [r3, #28]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	61da      	str	r2, [r3, #28]
      break;
 8009498:	e064      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fc11 	bl	8009cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69da      	ldr	r2, [r3, #28]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69d9      	ldr	r1, [r3, #28]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	021a      	lsls	r2, r3, #8
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	61da      	str	r2, [r3, #28]
      break;
 80094da:	e043      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fc84 	bl	8009df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0208 	orr.w	r2, r2, #8
 80094f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0204 	bic.w	r2, r2, #4
 8009506:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	691a      	ldr	r2, [r3, #16]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800951a:	e023      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68b9      	ldr	r1, [r7, #8]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fcce 	bl	8009ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009536:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009546:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	021a      	lsls	r2, r3, #8
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800955c:	e002      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	75fb      	strb	r3, [r7, #23]
      break;
 8009562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_TIM_ConfigClockSource+0x1c>
 8009590:	2302      	movs	r3, #2
 8009592:	e0f6      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x20a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80095b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80095b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a6f      	ldr	r2, [pc, #444]	@ (800978c <HAL_TIM_ConfigClockSource+0x214>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	f000 80c1 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 80095d4:	4a6d      	ldr	r2, [pc, #436]	@ (800978c <HAL_TIM_ConfigClockSource+0x214>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f200 80c6 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 80095dc:	4a6c      	ldr	r2, [pc, #432]	@ (8009790 <HAL_TIM_ConfigClockSource+0x218>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	f000 80b9 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 80095e4:	4a6a      	ldr	r2, [pc, #424]	@ (8009790 <HAL_TIM_ConfigClockSource+0x218>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	f200 80be 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 80095ec:	4a69      	ldr	r2, [pc, #420]	@ (8009794 <HAL_TIM_ConfigClockSource+0x21c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f000 80b1 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 80095f4:	4a67      	ldr	r2, [pc, #412]	@ (8009794 <HAL_TIM_ConfigClockSource+0x21c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	f200 80b6 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 80095fc:	4a66      	ldr	r2, [pc, #408]	@ (8009798 <HAL_TIM_ConfigClockSource+0x220>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	f000 80a9 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009604:	4a64      	ldr	r2, [pc, #400]	@ (8009798 <HAL_TIM_ConfigClockSource+0x220>)
 8009606:	4293      	cmp	r3, r2
 8009608:	f200 80ae 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800960c:	4a63      	ldr	r2, [pc, #396]	@ (800979c <HAL_TIM_ConfigClockSource+0x224>)
 800960e:	4293      	cmp	r3, r2
 8009610:	f000 80a1 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009614:	4a61      	ldr	r2, [pc, #388]	@ (800979c <HAL_TIM_ConfigClockSource+0x224>)
 8009616:	4293      	cmp	r3, r2
 8009618:	f200 80a6 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800961c:	4a60      	ldr	r2, [pc, #384]	@ (80097a0 <HAL_TIM_ConfigClockSource+0x228>)
 800961e:	4293      	cmp	r3, r2
 8009620:	f000 8099 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009624:	4a5e      	ldr	r2, [pc, #376]	@ (80097a0 <HAL_TIM_ConfigClockSource+0x228>)
 8009626:	4293      	cmp	r3, r2
 8009628:	f200 809e 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800962c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009630:	f000 8091 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009634:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009638:	f200 8096 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800963c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009640:	f000 8089 	beq.w	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009648:	f200 808e 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800964c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009650:	d03e      	beq.n	80096d0 <HAL_TIM_ConfigClockSource+0x158>
 8009652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009656:	f200 8087 	bhi.w	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 800965a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800965e:	f000 8086 	beq.w	800976e <HAL_TIM_ConfigClockSource+0x1f6>
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009666:	d87f      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009668:	2b70      	cmp	r3, #112	@ 0x70
 800966a:	d01a      	beq.n	80096a2 <HAL_TIM_ConfigClockSource+0x12a>
 800966c:	2b70      	cmp	r3, #112	@ 0x70
 800966e:	d87b      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009670:	2b60      	cmp	r3, #96	@ 0x60
 8009672:	d050      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0x19e>
 8009674:	2b60      	cmp	r3, #96	@ 0x60
 8009676:	d877      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009678:	2b50      	cmp	r3, #80	@ 0x50
 800967a:	d03c      	beq.n	80096f6 <HAL_TIM_ConfigClockSource+0x17e>
 800967c:	2b50      	cmp	r3, #80	@ 0x50
 800967e:	d873      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009680:	2b40      	cmp	r3, #64	@ 0x40
 8009682:	d058      	beq.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
 8009684:	2b40      	cmp	r3, #64	@ 0x40
 8009686:	d86f      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009688:	2b30      	cmp	r3, #48	@ 0x30
 800968a:	d064      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 800968c:	2b30      	cmp	r3, #48	@ 0x30
 800968e:	d86b      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009690:	2b20      	cmp	r3, #32
 8009692:	d060      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 8009694:	2b20      	cmp	r3, #32
 8009696:	d867      	bhi.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d05c      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 800969c:	2b10      	cmp	r3, #16
 800969e:	d05a      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x1de>
 80096a0:	e062      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096b2:	f000 fe19 	bl	800a2e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	609a      	str	r2, [r3, #8]
      break;
 80096ce:	e04f      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096e0:	f000 fe02 	bl	800a2e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096f2:	609a      	str	r2, [r3, #8]
      break;
 80096f4:	e03c      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009702:	461a      	mov	r2, r3
 8009704:	f000 fcbe 	bl	800a084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2150      	movs	r1, #80	@ 0x50
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fdcd 	bl	800a2ae <TIM_ITRx_SetConfig>
      break;
 8009714:	e02c      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009722:	461a      	mov	r2, r3
 8009724:	f000 fd1a 	bl	800a15c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2160      	movs	r1, #96	@ 0x60
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fdbd 	bl	800a2ae <TIM_ITRx_SetConfig>
      break;
 8009734:	e01c      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009742:	461a      	mov	r2, r3
 8009744:	f000 fc9e 	bl	800a084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2140      	movs	r1, #64	@ 0x40
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fdad 	bl	800a2ae <TIM_ITRx_SetConfig>
      break;
 8009754:	e00c      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f000 fda4 	bl	800a2ae <TIM_ITRx_SetConfig>
      break;
 8009766:	e003      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
      break;
 800976c:	e000      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800976e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	00100070 	.word	0x00100070
 8009790:	00100060 	.word	0x00100060
 8009794:	00100050 	.word	0x00100050
 8009798:	00100040 	.word	0x00100040
 800979c:	00100030 	.word	0x00100030
 80097a0:	00100020 	.word	0x00100020

080097a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a4c      	ldr	r2, [pc, #304]	@ (8009924 <TIM_Base_SetConfig+0x144>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d017      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097fe:	d013      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a49      	ldr	r2, [pc, #292]	@ (8009928 <TIM_Base_SetConfig+0x148>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00f      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a48      	ldr	r2, [pc, #288]	@ (800992c <TIM_Base_SetConfig+0x14c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00b      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a47      	ldr	r2, [pc, #284]	@ (8009930 <TIM_Base_SetConfig+0x150>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d007      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a46      	ldr	r2, [pc, #280]	@ (8009934 <TIM_Base_SetConfig+0x154>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_Base_SetConfig+0x48>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a45      	ldr	r2, [pc, #276]	@ (8009938 <TIM_Base_SetConfig+0x158>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d108      	bne.n	800983a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a39      	ldr	r2, [pc, #228]	@ (8009924 <TIM_Base_SetConfig+0x144>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d023      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009848:	d01f      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a36      	ldr	r2, [pc, #216]	@ (8009928 <TIM_Base_SetConfig+0x148>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01b      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a35      	ldr	r2, [pc, #212]	@ (800992c <TIM_Base_SetConfig+0x14c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d017      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a34      	ldr	r2, [pc, #208]	@ (8009930 <TIM_Base_SetConfig+0x150>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a33      	ldr	r2, [pc, #204]	@ (8009934 <TIM_Base_SetConfig+0x154>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a33      	ldr	r2, [pc, #204]	@ (800993c <TIM_Base_SetConfig+0x15c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a32      	ldr	r2, [pc, #200]	@ (8009940 <TIM_Base_SetConfig+0x160>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a31      	ldr	r2, [pc, #196]	@ (8009944 <TIM_Base_SetConfig+0x164>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_Base_SetConfig+0xaa>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a2c      	ldr	r2, [pc, #176]	@ (8009938 <TIM_Base_SetConfig+0x158>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d108      	bne.n	800989c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a18      	ldr	r2, [pc, #96]	@ (8009924 <TIM_Base_SetConfig+0x144>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d013      	beq.n	80098f0 <TIM_Base_SetConfig+0x110>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009934 <TIM_Base_SetConfig+0x154>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00f      	beq.n	80098f0 <TIM_Base_SetConfig+0x110>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1a      	ldr	r2, [pc, #104]	@ (800993c <TIM_Base_SetConfig+0x15c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00b      	beq.n	80098f0 <TIM_Base_SetConfig+0x110>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a19      	ldr	r2, [pc, #100]	@ (8009940 <TIM_Base_SetConfig+0x160>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d007      	beq.n	80098f0 <TIM_Base_SetConfig+0x110>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a18      	ldr	r2, [pc, #96]	@ (8009944 <TIM_Base_SetConfig+0x164>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_Base_SetConfig+0x110>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a13      	ldr	r2, [pc, #76]	@ (8009938 <TIM_Base_SetConfig+0x158>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d103      	bne.n	80098f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b01      	cmp	r3, #1
 8009908:	d105      	bne.n	8009916 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f023 0201 	bic.w	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	611a      	str	r2, [r3, #16]
  }
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800
 8009930:	40000c00 	.word	0x40000c00
 8009934:	40013400 	.word	0x40013400
 8009938:	40015000 	.word	0x40015000
 800993c:	40014000 	.word	0x40014000
 8009940:	40014400 	.word	0x40014400
 8009944:	40014800 	.word	0x40014800

08009948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	f023 0201 	bic.w	r2, r3, #1
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800997a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 0302 	bic.w	r3, r3, #2
 8009994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a30      	ldr	r2, [pc, #192]	@ (8009a64 <TIM_OC1_SetConfig+0x11c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d013      	beq.n	80099d0 <TIM_OC1_SetConfig+0x88>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009a68 <TIM_OC1_SetConfig+0x120>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00f      	beq.n	80099d0 <TIM_OC1_SetConfig+0x88>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a2e      	ldr	r2, [pc, #184]	@ (8009a6c <TIM_OC1_SetConfig+0x124>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00b      	beq.n	80099d0 <TIM_OC1_SetConfig+0x88>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009a70 <TIM_OC1_SetConfig+0x128>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d007      	beq.n	80099d0 <TIM_OC1_SetConfig+0x88>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a2c      	ldr	r2, [pc, #176]	@ (8009a74 <TIM_OC1_SetConfig+0x12c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_OC1_SetConfig+0x88>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009a78 <TIM_OC1_SetConfig+0x130>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10c      	bne.n	80099ea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f023 0308 	bic.w	r3, r3, #8
 80099d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f023 0304 	bic.w	r3, r3, #4
 80099e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009a64 <TIM_OC1_SetConfig+0x11c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d013      	beq.n	8009a1a <TIM_OC1_SetConfig+0xd2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <TIM_OC1_SetConfig+0x120>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00f      	beq.n	8009a1a <TIM_OC1_SetConfig+0xd2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a1b      	ldr	r2, [pc, #108]	@ (8009a6c <TIM_OC1_SetConfig+0x124>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00b      	beq.n	8009a1a <TIM_OC1_SetConfig+0xd2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a1a      	ldr	r2, [pc, #104]	@ (8009a70 <TIM_OC1_SetConfig+0x128>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d007      	beq.n	8009a1a <TIM_OC1_SetConfig+0xd2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a19      	ldr	r2, [pc, #100]	@ (8009a74 <TIM_OC1_SetConfig+0x12c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC1_SetConfig+0xd2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a18      	ldr	r2, [pc, #96]	@ (8009a78 <TIM_OC1_SetConfig+0x130>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d111      	bne.n	8009a3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	621a      	str	r2, [r3, #32]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	40012c00 	.word	0x40012c00
 8009a68:	40013400 	.word	0x40013400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40014400 	.word	0x40014400
 8009a74:	40014800 	.word	0x40014800
 8009a78:	40015000 	.word	0x40015000

08009a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	f023 0210 	bic.w	r2, r3, #16
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0320 	bic.w	r3, r3, #32
 8009aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a2c      	ldr	r2, [pc, #176]	@ (8009b8c <TIM_OC2_SetConfig+0x110>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d007      	beq.n	8009af0 <TIM_OC2_SetConfig+0x74>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8009b90 <TIM_OC2_SetConfig+0x114>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d003      	beq.n	8009af0 <TIM_OC2_SetConfig+0x74>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a2a      	ldr	r2, [pc, #168]	@ (8009b94 <TIM_OC2_SetConfig+0x118>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d10d      	bne.n	8009b0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b8c <TIM_OC2_SetConfig+0x110>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d013      	beq.n	8009b3c <TIM_OC2_SetConfig+0xc0>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a1e      	ldr	r2, [pc, #120]	@ (8009b90 <TIM_OC2_SetConfig+0x114>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00f      	beq.n	8009b3c <TIM_OC2_SetConfig+0xc0>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b98 <TIM_OC2_SetConfig+0x11c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d00b      	beq.n	8009b3c <TIM_OC2_SetConfig+0xc0>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a1d      	ldr	r2, [pc, #116]	@ (8009b9c <TIM_OC2_SetConfig+0x120>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d007      	beq.n	8009b3c <TIM_OC2_SetConfig+0xc0>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba0 <TIM_OC2_SetConfig+0x124>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d003      	beq.n	8009b3c <TIM_OC2_SetConfig+0xc0>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a17      	ldr	r2, [pc, #92]	@ (8009b94 <TIM_OC2_SetConfig+0x118>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d113      	bne.n	8009b64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40013400 	.word	0x40013400
 8009b94:	40015000 	.word	0x40015000
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40014400 	.word	0x40014400
 8009ba0:	40014800 	.word	0x40014800

08009ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a2b      	ldr	r2, [pc, #172]	@ (8009cb0 <TIM_OC3_SetConfig+0x10c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d007      	beq.n	8009c16 <TIM_OC3_SetConfig+0x72>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a2a      	ldr	r2, [pc, #168]	@ (8009cb4 <TIM_OC3_SetConfig+0x110>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_OC3_SetConfig+0x72>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a29      	ldr	r2, [pc, #164]	@ (8009cb8 <TIM_OC3_SetConfig+0x114>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d10d      	bne.n	8009c32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb0 <TIM_OC3_SetConfig+0x10c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d013      	beq.n	8009c62 <TIM_OC3_SetConfig+0xbe>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb4 <TIM_OC3_SetConfig+0x110>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00f      	beq.n	8009c62 <TIM_OC3_SetConfig+0xbe>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1d      	ldr	r2, [pc, #116]	@ (8009cbc <TIM_OC3_SetConfig+0x118>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00b      	beq.n	8009c62 <TIM_OC3_SetConfig+0xbe>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc0 <TIM_OC3_SetConfig+0x11c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d007      	beq.n	8009c62 <TIM_OC3_SetConfig+0xbe>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc4 <TIM_OC3_SetConfig+0x120>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d003      	beq.n	8009c62 <TIM_OC3_SetConfig+0xbe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a16      	ldr	r2, [pc, #88]	@ (8009cb8 <TIM_OC3_SetConfig+0x114>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d113      	bne.n	8009c8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	621a      	str	r2, [r3, #32]
}
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	40012c00 	.word	0x40012c00
 8009cb4:	40013400 	.word	0x40013400
 8009cb8:	40015000 	.word	0x40015000
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800

08009cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	031b      	lsls	r3, r3, #12
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a2c      	ldr	r2, [pc, #176]	@ (8009dd8 <TIM_OC4_SetConfig+0x110>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d007      	beq.n	8009d3c <TIM_OC4_SetConfig+0x74>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8009ddc <TIM_OC4_SetConfig+0x114>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_OC4_SetConfig+0x74>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a2a      	ldr	r2, [pc, #168]	@ (8009de0 <TIM_OC4_SetConfig+0x118>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d10d      	bne.n	8009d58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	031b      	lsls	r3, r3, #12
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd8 <TIM_OC4_SetConfig+0x110>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d013      	beq.n	8009d88 <TIM_OC4_SetConfig+0xc0>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	@ (8009ddc <TIM_OC4_SetConfig+0x114>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00f      	beq.n	8009d88 <TIM_OC4_SetConfig+0xc0>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009de4 <TIM_OC4_SetConfig+0x11c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00b      	beq.n	8009d88 <TIM_OC4_SetConfig+0xc0>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1d      	ldr	r2, [pc, #116]	@ (8009de8 <TIM_OC4_SetConfig+0x120>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d007      	beq.n	8009d88 <TIM_OC4_SetConfig+0xc0>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009dec <TIM_OC4_SetConfig+0x124>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <TIM_OC4_SetConfig+0xc0>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a17      	ldr	r2, [pc, #92]	@ (8009de0 <TIM_OC4_SetConfig+0x118>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d113      	bne.n	8009db0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	019b      	lsls	r3, r3, #6
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	019b      	lsls	r3, r3, #6
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	621a      	str	r2, [r3, #32]
}
 8009dca:	bf00      	nop
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40012c00 	.word	0x40012c00
 8009ddc:	40013400 	.word	0x40013400
 8009de0:	40015000 	.word	0x40015000
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800

08009df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	041b      	lsls	r3, r3, #16
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a19      	ldr	r2, [pc, #100]	@ (8009eac <TIM_OC5_SetConfig+0xbc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d013      	beq.n	8009e72 <TIM_OC5_SetConfig+0x82>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a18      	ldr	r2, [pc, #96]	@ (8009eb0 <TIM_OC5_SetConfig+0xc0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00f      	beq.n	8009e72 <TIM_OC5_SetConfig+0x82>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a17      	ldr	r2, [pc, #92]	@ (8009eb4 <TIM_OC5_SetConfig+0xc4>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00b      	beq.n	8009e72 <TIM_OC5_SetConfig+0x82>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a16      	ldr	r2, [pc, #88]	@ (8009eb8 <TIM_OC5_SetConfig+0xc8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <TIM_OC5_SetConfig+0x82>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a15      	ldr	r2, [pc, #84]	@ (8009ebc <TIM_OC5_SetConfig+0xcc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_OC5_SetConfig+0x82>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a14      	ldr	r2, [pc, #80]	@ (8009ec0 <TIM_OC5_SetConfig+0xd0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d109      	bne.n	8009e86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	021b      	lsls	r3, r3, #8
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	621a      	str	r2, [r3, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40012c00 	.word	0x40012c00
 8009eb0:	40013400 	.word	0x40013400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40014400 	.word	0x40014400
 8009ebc:	40014800 	.word	0x40014800
 8009ec0:	40015000 	.word	0x40015000

08009ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	051b      	lsls	r3, r3, #20
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8009f84 <TIM_OC6_SetConfig+0xc0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d013      	beq.n	8009f48 <TIM_OC6_SetConfig+0x84>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a19      	ldr	r2, [pc, #100]	@ (8009f88 <TIM_OC6_SetConfig+0xc4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00f      	beq.n	8009f48 <TIM_OC6_SetConfig+0x84>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a18      	ldr	r2, [pc, #96]	@ (8009f8c <TIM_OC6_SetConfig+0xc8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00b      	beq.n	8009f48 <TIM_OC6_SetConfig+0x84>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a17      	ldr	r2, [pc, #92]	@ (8009f90 <TIM_OC6_SetConfig+0xcc>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d007      	beq.n	8009f48 <TIM_OC6_SetConfig+0x84>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a16      	ldr	r2, [pc, #88]	@ (8009f94 <TIM_OC6_SetConfig+0xd0>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d003      	beq.n	8009f48 <TIM_OC6_SetConfig+0x84>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a15      	ldr	r2, [pc, #84]	@ (8009f98 <TIM_OC6_SetConfig+0xd4>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d109      	bne.n	8009f5c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	029b      	lsls	r3, r3, #10
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	40013400 	.word	0x40013400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800
 8009f98:	40015000 	.word	0x40015000

08009f9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a1b      	ldr	r3, [r3, #32]
 8009fb4:	f023 0201 	bic.w	r2, r3, #1
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a28      	ldr	r2, [pc, #160]	@ (800a068 <TIM_TI1_SetConfig+0xcc>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d01b      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd0:	d017      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4a25      	ldr	r2, [pc, #148]	@ (800a06c <TIM_TI1_SetConfig+0xd0>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4a24      	ldr	r2, [pc, #144]	@ (800a070 <TIM_TI1_SetConfig+0xd4>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00f      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4a23      	ldr	r2, [pc, #140]	@ (800a074 <TIM_TI1_SetConfig+0xd8>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00b      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4a22      	ldr	r2, [pc, #136]	@ (800a078 <TIM_TI1_SetConfig+0xdc>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d007      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4a21      	ldr	r2, [pc, #132]	@ (800a07c <TIM_TI1_SetConfig+0xe0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_TI1_SetConfig+0x66>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4a20      	ldr	r2, [pc, #128]	@ (800a080 <TIM_TI1_SetConfig+0xe4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d101      	bne.n	800a006 <TIM_TI1_SetConfig+0x6a>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <TIM_TI1_SetConfig+0x6c>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d008      	beq.n	800a01e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4313      	orrs	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e003      	b.n	800a026 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f043 0301 	orr.w	r3, r3, #1
 800a024:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a02c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	b2db      	uxtb	r3, r3
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f023 030a 	bic.w	r3, r3, #10
 800a040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f003 030a 	and.w	r3, r3, #10
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	621a      	str	r2, [r3, #32]
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	40012c00 	.word	0x40012c00
 800a06c:	40000400 	.word	0x40000400
 800a070:	40000800 	.word	0x40000800
 800a074:	40000c00 	.word	0x40000c00
 800a078:	40013400 	.word	0x40013400
 800a07c:	40014000 	.word	0x40014000
 800a080:	40015000 	.word	0x40015000

0800a084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 030a 	bic.w	r3, r3, #10
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	621a      	str	r2, [r3, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	f023 0210 	bic.w	r2, r3, #16
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a10e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	031b      	lsls	r3, r3, #12
 800a126:	b29b      	uxth	r3, r3
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a134:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	621a      	str	r2, [r3, #32]
}
 800a150:	bf00      	nop
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f023 0210 	bic.w	r2, r3, #16
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	031b      	lsls	r3, r3, #12
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	621a      	str	r2, [r3, #32]
}
 800a1b0:	bf00      	nop
 800a1b2:	371c      	adds	r7, #28
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f023 0303 	bic.w	r3, r3, #3
 800a1e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a20c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4313      	orrs	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	621a      	str	r2, [r3, #32]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a260:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	021b      	lsls	r3, r3, #8
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a272:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	031b      	lsls	r3, r3, #12
 800a278:	b29b      	uxth	r3, r3
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a286:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	031b      	lsls	r3, r3, #12
 800a28c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	621a      	str	r2, [r3, #32]
}
 800a2a2:	bf00      	nop
 800a2a4:	371c      	adds	r7, #28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a2c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	f043 0307 	orr.w	r3, r3, #7
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	609a      	str	r2, [r3, #8]
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	021a      	lsls	r2, r3, #8
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4313      	orrs	r3, r2
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	609a      	str	r2, [r3, #8]
}
 800a31c:	bf00      	nop
 800a31e:	371c      	adds	r7, #28
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f003 031f 	and.w	r3, r3, #31
 800a33a:	2201      	movs	r2, #1
 800a33c:	fa02 f303 	lsl.w	r3, r2, r3
 800a340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1a      	ldr	r2, [r3, #32]
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	43db      	mvns	r3, r3
 800a34a:	401a      	ands	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1a      	ldr	r2, [r3, #32]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f003 031f 	and.w	r3, r3, #31
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	fa01 f303 	lsl.w	r3, r1, r3
 800a360:	431a      	orrs	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	621a      	str	r2, [r3, #32]
}
 800a366:	bf00      	nop
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
	...

0800a374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a384:	2b01      	cmp	r3, #1
 800a386:	d101      	bne.n	800a38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a388:	2302      	movs	r3, #2
 800a38a:	e074      	b.n	800a476 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a34      	ldr	r2, [pc, #208]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d009      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a33      	ldr	r2, [pc, #204]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d004      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a31      	ldr	r2, [pc, #196]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d108      	bne.n	800a3dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a3e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a21      	ldr	r2, [pc, #132]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d022      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40c:	d01d      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1f      	ldr	r2, [pc, #124]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d018      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1d      	ldr	r2, [pc, #116]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d013      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1c      	ldr	r2, [pc, #112]	@ (800a498 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00e      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a15      	ldr	r2, [pc, #84]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d009      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a18      	ldr	r2, [pc, #96]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d004      	beq.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a11      	ldr	r2, [pc, #68]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d10c      	bne.n	800a464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	40012c00 	.word	0x40012c00
 800a488:	40013400 	.word	0x40013400
 800a48c:	40015000 	.word	0x40015000
 800a490:	40000400 	.word	0x40000400
 800a494:	40000800 	.word	0x40000800
 800a498:	40000c00 	.word	0x40000c00
 800a49c:	40014000 	.word	0x40014000

0800a4a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e078      	b.n	800a5ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	041b      	lsls	r3, r3, #16
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1c      	ldr	r2, [pc, #112]	@ (800a5bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d009      	beq.n	800a562 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a1b      	ldr	r2, [pc, #108]	@ (800a5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d004      	beq.n	800a562 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a19      	ldr	r2, [pc, #100]	@ (800a5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d11c      	bne.n	800a59c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56c:	051b      	lsls	r3, r3, #20
 800a56e:	4313      	orrs	r3, r2
 800a570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40012c00 	.word	0x40012c00
 800a5c0:	40013400 	.word	0x40013400
 800a5c4:	40015000 	.word	0x40015000

0800a5c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e042      	b.n	800a6ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d106      	bne.n	800a67e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7f8 fe2d 	bl	80032d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2224      	movs	r2, #36	@ 0x24
 800a682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0201 	bic.w	r2, r2, #1
 800a694:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 ff14 	bl	800b4cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc15 	bl	800aed4 <UART_SetConfig>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d101      	bne.n	800a6b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e01b      	b.n	800a6ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f042 0201 	orr.w	r2, r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 ff93 	bl	800b610 <UART_CheckIdleState>
 800a6ea:	4603      	mov	r3, r0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	@ 0x28
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	603b      	str	r3, [r7, #0]
 800a700:	4613      	mov	r3, r2
 800a702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d17b      	bne.n	800a806 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <HAL_UART_Transmit+0x26>
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e074      	b.n	800a808 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2221      	movs	r2, #33	@ 0x21
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a72e:	f7f8 ff1d 	bl	800356c <HAL_GetTick>
 800a732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	88fa      	ldrh	r2, [r7, #6]
 800a738:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a74c:	d108      	bne.n	800a760 <HAL_UART_Transmit+0x6c>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d104      	bne.n	800a760 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	e003      	b.n	800a768 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a768:	e030      	b.n	800a7cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2200      	movs	r2, #0
 800a772:	2180      	movs	r1, #128	@ 0x80
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fff5 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e03d      	b.n	800a808 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10b      	bne.n	800a7aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	3302      	adds	r3, #2
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	e007      	b.n	800a7ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	781a      	ldrb	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1c8      	bne.n	800a76a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2140      	movs	r1, #64	@ 0x40
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 ffbe 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d005      	beq.n	800a7fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e006      	b.n	800a808 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	e000      	b.n	800a808 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a806:	2302      	movs	r3, #2
  }
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3720      	adds	r7, #32
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b0ba      	sub	sp, #232	@ 0xe8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a836:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a83a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a83e:	4013      	ands	r3, r2
 800a840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d11b      	bne.n	800a884 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a850:	f003 0320 	and.w	r3, r3, #32
 800a854:	2b00      	cmp	r3, #0
 800a856:	d015      	beq.n	800a884 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a85c:	f003 0320 	and.w	r3, r3, #32
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d009      	beq.n	800a884 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8300 	beq.w	800ae7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	4798      	blx	r3
      }
      return;
 800a882:	e2fa      	b.n	800ae7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 8123 	beq.w	800aad4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a88e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a892:	4b8d      	ldr	r3, [pc, #564]	@ (800aac8 <HAL_UART_IRQHandler+0x2b8>)
 800a894:	4013      	ands	r3, r2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a89a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a89e:	4b8b      	ldr	r3, [pc, #556]	@ (800aacc <HAL_UART_IRQHandler+0x2bc>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8116 	beq.w	800aad4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d011      	beq.n	800a8d8 <HAL_UART_IRQHandler+0xc8>
 800a8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00b      	beq.n	800a8d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ce:	f043 0201 	orr.w	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d011      	beq.n	800a908 <HAL_UART_IRQHandler+0xf8>
 800a8e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00b      	beq.n	800a908 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8fe:	f043 0204 	orr.w	r2, r3, #4
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d011      	beq.n	800a938 <HAL_UART_IRQHandler+0x128>
 800a914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2204      	movs	r2, #4
 800a926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a92e:	f043 0202 	orr.w	r2, r3, #2
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b00      	cmp	r3, #0
 800a942:	d017      	beq.n	800a974 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d105      	bne.n	800a95c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a950:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a954:	4b5c      	ldr	r3, [pc, #368]	@ (800aac8 <HAL_UART_IRQHandler+0x2b8>)
 800a956:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a96a:	f043 0208 	orr.w	r2, r3, #8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d012      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x196>
 800a980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a99c:	f043 0220 	orr.w	r2, r3, #32
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8266 	beq.w	800ae7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d013      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9fa:	2b40      	cmp	r3, #64	@ 0x40
 800a9fc:	d005      	beq.n	800aa0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d054      	beq.n	800aab4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 ff17 	bl	800b83e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa1a:	2b40      	cmp	r3, #64	@ 0x40
 800aa1c:	d146      	bne.n	800aaac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aa34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3308      	adds	r3, #8
 800aa46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aa4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aa4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aa56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aa62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1d9      	bne.n	800aa1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d017      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa7a:	4a15      	ldr	r2, [pc, #84]	@ (800aad0 <HAL_UART_IRQHandler+0x2c0>)
 800aa7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fa fca3 	bl	80053d0 <HAL_DMA_Abort_IT>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d019      	beq.n	800aac4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa2:	e00f      	b.n	800aac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f9ff 	bl	800aea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaaa:	e00b      	b.n	800aac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f9fb 	bl	800aea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aab2:	e007      	b.n	800aac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f9f7 	bl	800aea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aac2:	e1dc      	b.n	800ae7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac4:	bf00      	nop
    return;
 800aac6:	e1da      	b.n	800ae7e <HAL_UART_IRQHandler+0x66e>
 800aac8:	10000001 	.word	0x10000001
 800aacc:	04000120 	.word	0x04000120
 800aad0:	0800b90b 	.word	0x0800b90b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aad8:	2b01      	cmp	r3, #1
 800aada:	f040 8170 	bne.w	800adbe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aae2:	f003 0310 	and.w	r3, r3, #16
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 8169 	beq.w	800adbe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aaec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8162 	beq.w	800adbe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2210      	movs	r2, #16
 800ab00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab0c:	2b40      	cmp	r3, #64	@ 0x40
 800ab0e:	f040 80d8 	bne.w	800acc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80af 	beq.w	800ac88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab34:	429a      	cmp	r2, r3
 800ab36:	f080 80a7 	bcs.w	800ac88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 8087 	bne.w	800ac66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab64:	e853 3f00 	ldrex	r3, [r3]
 800ab68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ab6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ab8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1da      	bne.n	800ab58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3308      	adds	r3, #8
 800aba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800abb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3308      	adds	r3, #8
 800abc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800abc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800abca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800abce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800abd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e1      	bne.n	800aba2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800abee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ac02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ac10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e3      	bne.n	800abde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac34:	f023 0310 	bic.w	r3, r3, #16
 800ac38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e4      	bne.n	800ac24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fa fb5c 	bl	800531e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f91b 	bl	800aebc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ac86:	e0fc      	b.n	800ae82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac92:	429a      	cmp	r2, r3
 800ac94:	f040 80f5 	bne.w	800ae82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	f040 80eb 	bne.w	800ae82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f8fe 	bl	800aebc <HAL_UARTEx_RxEventCallback>
      return;
 800acc0:	e0df      	b.n	800ae82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acce:	b29b      	uxth	r3, r3
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80d1 	beq.w	800ae86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ace4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 80cc 	beq.w	800ae86 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e4      	bne.n	800acee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	623b      	str	r3, [r7, #32]
   return(result);
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad3a:	f023 0301 	bic.w	r3, r3, #1
 800ad3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ad4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e1      	bne.n	800ad24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 0310 	bic.w	r3, r3, #16
 800ad88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	69b9      	ldr	r1, [r7, #24]
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	617b      	str	r3, [r7, #20]
   return(result);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e4      	bne.n	800ad74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f880 	bl	800aebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adbc:	e063      	b.n	800ae86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <HAL_UART_IRQHandler+0x5d8>
 800adca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d008      	beq.n	800ade8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800adde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fdcf 	bl	800b984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ade6:	e051      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ade8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d014      	beq.n	800ae1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800adf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d105      	bne.n	800ae0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d03a      	beq.n	800ae8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
    }
    return;
 800ae1c:	e035      	b.n	800ae8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d009      	beq.n	800ae3e <HAL_UART_IRQHandler+0x62e>
 800ae2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fd79 	bl	800b92e <UART_EndTransmit_IT>
    return;
 800ae3c:	e026      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d009      	beq.n	800ae5e <HAL_UART_IRQHandler+0x64e>
 800ae4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fda8 	bl	800b9ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae5c:	e016      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d010      	beq.n	800ae8c <HAL_UART_IRQHandler+0x67c>
 800ae6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	da0c      	bge.n	800ae8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fd90 	bl	800b998 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae78:	e008      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ae7a:	bf00      	nop
 800ae7c:	e006      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ae7e:	bf00      	nop
 800ae80:	e004      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ae82:	bf00      	nop
 800ae84:	e002      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ae86:	bf00      	nop
 800ae88:	e000      	b.n	800ae8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ae8a:	bf00      	nop
  }
}
 800ae8c:	37e8      	adds	r7, #232	@ 0xe8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop

0800ae94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed8:	b08c      	sub	sp, #48	@ 0x30
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4baa      	ldr	r3, [pc, #680]	@ (800b1ac <UART_SetConfig+0x2d8>)
 800af04:	4013      	ands	r3, r2
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	6812      	ldr	r2, [r2, #0]
 800af0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af0c:	430b      	orrs	r3, r1
 800af0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a9f      	ldr	r2, [pc, #636]	@ (800b1b0 <UART_SetConfig+0x2dc>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d004      	beq.n	800af40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af3c:	4313      	orrs	r3, r2
 800af3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800af4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af54:	430b      	orrs	r3, r1
 800af56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5e:	f023 010f 	bic.w	r1, r3, #15
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a90      	ldr	r2, [pc, #576]	@ (800b1b4 <UART_SetConfig+0x2e0>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d125      	bne.n	800afc4 <UART_SetConfig+0xf0>
 800af78:	4b8f      	ldr	r3, [pc, #572]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800af7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	2b03      	cmp	r3, #3
 800af84:	d81a      	bhi.n	800afbc <UART_SetConfig+0xe8>
 800af86:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <UART_SetConfig+0xb8>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800af9d 	.word	0x0800af9d
 800af90:	0800afad 	.word	0x0800afad
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afb5 	.word	0x0800afb5
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa2:	e116      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afa4:	2302      	movs	r3, #2
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afaa:	e112      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afac:	2304      	movs	r3, #4
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb2:	e10e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afb4:	2308      	movs	r3, #8
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afba:	e10a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afbc:	2310      	movs	r3, #16
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc2:	e106      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a7c      	ldr	r2, [pc, #496]	@ (800b1bc <UART_SetConfig+0x2e8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d138      	bne.n	800b040 <UART_SetConfig+0x16c>
 800afce:	4b7a      	ldr	r3, [pc, #488]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800afd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afd4:	f003 030c 	and.w	r3, r3, #12
 800afd8:	2b0c      	cmp	r3, #12
 800afda:	d82d      	bhi.n	800b038 <UART_SetConfig+0x164>
 800afdc:	a201      	add	r2, pc, #4	@ (adr r2, 800afe4 <UART_SetConfig+0x110>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b019 	.word	0x0800b019
 800afe8:	0800b039 	.word	0x0800b039
 800afec:	0800b039 	.word	0x0800b039
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b029 	.word	0x0800b029
 800aff8:	0800b039 	.word	0x0800b039
 800affc:	0800b039 	.word	0x0800b039
 800b000:	0800b039 	.word	0x0800b039
 800b004:	0800b021 	.word	0x0800b021
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b039 	.word	0x0800b039
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b031 	.word	0x0800b031
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01e:	e0d8      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b020:	2302      	movs	r3, #2
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b026:	e0d4      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b028:	2304      	movs	r3, #4
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02e:	e0d0      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b030:	2308      	movs	r3, #8
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b036:	e0cc      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b038:	2310      	movs	r3, #16
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03e:	e0c8      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a5e      	ldr	r2, [pc, #376]	@ (800b1c0 <UART_SetConfig+0x2ec>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d125      	bne.n	800b096 <UART_SetConfig+0x1c2>
 800b04a:	4b5b      	ldr	r3, [pc, #364]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b050:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b054:	2b30      	cmp	r3, #48	@ 0x30
 800b056:	d016      	beq.n	800b086 <UART_SetConfig+0x1b2>
 800b058:	2b30      	cmp	r3, #48	@ 0x30
 800b05a:	d818      	bhi.n	800b08e <UART_SetConfig+0x1ba>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d00a      	beq.n	800b076 <UART_SetConfig+0x1a2>
 800b060:	2b20      	cmp	r3, #32
 800b062:	d814      	bhi.n	800b08e <UART_SetConfig+0x1ba>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <UART_SetConfig+0x19a>
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d008      	beq.n	800b07e <UART_SetConfig+0x1aa>
 800b06c:	e00f      	b.n	800b08e <UART_SetConfig+0x1ba>
 800b06e:	2300      	movs	r3, #0
 800b070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b074:	e0ad      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b076:	2302      	movs	r3, #2
 800b078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07c:	e0a9      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b07e:	2304      	movs	r3, #4
 800b080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b084:	e0a5      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b086:	2308      	movs	r3, #8
 800b088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08c:	e0a1      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b08e:	2310      	movs	r3, #16
 800b090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b094:	e09d      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a4a      	ldr	r2, [pc, #296]	@ (800b1c4 <UART_SetConfig+0x2f0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d125      	bne.n	800b0ec <UART_SetConfig+0x218>
 800b0a0:	4b45      	ldr	r3, [pc, #276]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b0aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0ac:	d016      	beq.n	800b0dc <UART_SetConfig+0x208>
 800b0ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0b0:	d818      	bhi.n	800b0e4 <UART_SetConfig+0x210>
 800b0b2:	2b80      	cmp	r3, #128	@ 0x80
 800b0b4:	d00a      	beq.n	800b0cc <UART_SetConfig+0x1f8>
 800b0b6:	2b80      	cmp	r3, #128	@ 0x80
 800b0b8:	d814      	bhi.n	800b0e4 <UART_SetConfig+0x210>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <UART_SetConfig+0x1f0>
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	d008      	beq.n	800b0d4 <UART_SetConfig+0x200>
 800b0c2:	e00f      	b.n	800b0e4 <UART_SetConfig+0x210>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ca:	e082      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0d2:	e07e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0d4:	2304      	movs	r3, #4
 800b0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0da:	e07a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0dc:	2308      	movs	r3, #8
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e2:	e076      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ea:	e072      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a35      	ldr	r2, [pc, #212]	@ (800b1c8 <UART_SetConfig+0x2f4>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d12a      	bne.n	800b14c <UART_SetConfig+0x278>
 800b0f6:	4b30      	ldr	r3, [pc, #192]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b104:	d01a      	beq.n	800b13c <UART_SetConfig+0x268>
 800b106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b10a:	d81b      	bhi.n	800b144 <UART_SetConfig+0x270>
 800b10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b110:	d00c      	beq.n	800b12c <UART_SetConfig+0x258>
 800b112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b116:	d815      	bhi.n	800b144 <UART_SetConfig+0x270>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <UART_SetConfig+0x250>
 800b11c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b120:	d008      	beq.n	800b134 <UART_SetConfig+0x260>
 800b122:	e00f      	b.n	800b144 <UART_SetConfig+0x270>
 800b124:	2300      	movs	r3, #0
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b12a:	e052      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b12c:	2302      	movs	r3, #2
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b132:	e04e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b134:	2304      	movs	r3, #4
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b13a:	e04a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b13c:	2308      	movs	r3, #8
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b142:	e046      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b144:	2310      	movs	r3, #16
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14a:	e042      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a17      	ldr	r2, [pc, #92]	@ (800b1b0 <UART_SetConfig+0x2dc>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d13a      	bne.n	800b1cc <UART_SetConfig+0x2f8>
 800b156:	4b18      	ldr	r3, [pc, #96]	@ (800b1b8 <UART_SetConfig+0x2e4>)
 800b158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b15c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b164:	d01a      	beq.n	800b19c <UART_SetConfig+0x2c8>
 800b166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b16a:	d81b      	bhi.n	800b1a4 <UART_SetConfig+0x2d0>
 800b16c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b170:	d00c      	beq.n	800b18c <UART_SetConfig+0x2b8>
 800b172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b176:	d815      	bhi.n	800b1a4 <UART_SetConfig+0x2d0>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <UART_SetConfig+0x2b0>
 800b17c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b180:	d008      	beq.n	800b194 <UART_SetConfig+0x2c0>
 800b182:	e00f      	b.n	800b1a4 <UART_SetConfig+0x2d0>
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b18a:	e022      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b18c:	2302      	movs	r3, #2
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b192:	e01e      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b194:	2304      	movs	r3, #4
 800b196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19a:	e01a      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b19c:	2308      	movs	r3, #8
 800b19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a2:	e016      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1aa:	e012      	b.n	800b1d2 <UART_SetConfig+0x2fe>
 800b1ac:	cfff69f3 	.word	0xcfff69f3
 800b1b0:	40008000 	.word	0x40008000
 800b1b4:	40013800 	.word	0x40013800
 800b1b8:	40021000 	.word	0x40021000
 800b1bc:	40004400 	.word	0x40004400
 800b1c0:	40004800 	.word	0x40004800
 800b1c4:	40004c00 	.word	0x40004c00
 800b1c8:	40005000 	.word	0x40005000
 800b1cc:	2310      	movs	r3, #16
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4aae      	ldr	r2, [pc, #696]	@ (800b490 <UART_SetConfig+0x5bc>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	f040 8097 	bne.w	800b30c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d823      	bhi.n	800b22e <UART_SetConfig+0x35a>
 800b1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ec <UART_SetConfig+0x318>)
 800b1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b22f 	.word	0x0800b22f
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b22f 	.word	0x0800b22f
 800b1fc:	0800b21f 	.word	0x0800b21f
 800b200:	0800b22f 	.word	0x0800b22f
 800b204:	0800b22f 	.word	0x0800b22f
 800b208:	0800b22f 	.word	0x0800b22f
 800b20c:	0800b227 	.word	0x0800b227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b210:	f7fd f876 	bl	8008300 <HAL_RCC_GetPCLK1Freq>
 800b214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b216:	e010      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b218:	4b9e      	ldr	r3, [pc, #632]	@ (800b494 <UART_SetConfig+0x5c0>)
 800b21a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b21c:	e00d      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b21e:	f7fd f801 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 800b222:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b224:	e009      	b.n	800b23a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b22a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b22c:	e005      	b.n	800b23a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8130 	beq.w	800b4a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b246:	4a94      	ldr	r2, [pc, #592]	@ (800b498 <UART_SetConfig+0x5c4>)
 800b248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b24c:	461a      	mov	r2, r3
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	fbb3 f3f2 	udiv	r3, r3, r2
 800b254:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	4613      	mov	r3, r2
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4413      	add	r3, r2
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	429a      	cmp	r2, r3
 800b264:	d305      	bcc.n	800b272 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d903      	bls.n	800b27a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b278:	e113      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27c:	2200      	movs	r2, #0
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	60fa      	str	r2, [r7, #12]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b286:	4a84      	ldr	r2, [pc, #528]	@ (800b498 <UART_SetConfig+0x5c4>)
 800b288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	2200      	movs	r2, #0
 800b290:	603b      	str	r3, [r7, #0]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b298:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b29c:	f7f5 fa24 	bl	80006e8 <__aeabi_uldivmod>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f04f 0200 	mov.w	r2, #0
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	020b      	lsls	r3, r1, #8
 800b2b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2b6:	0202      	lsls	r2, r0, #8
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	6849      	ldr	r1, [r1, #4]
 800b2bc:	0849      	lsrs	r1, r1, #1
 800b2be:	2000      	movs	r0, #0
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	eb12 0804 	adds.w	r8, r2, r4
 800b2c8:	eb43 0905 	adc.w	r9, r3, r5
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	469a      	mov	sl, r3
 800b2d4:	4693      	mov	fp, r2
 800b2d6:	4652      	mov	r2, sl
 800b2d8:	465b      	mov	r3, fp
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f5 fa03 	bl	80006e8 <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2f0:	d308      	bcc.n	800b304 <UART_SetConfig+0x430>
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2f8:	d204      	bcs.n	800b304 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6a3a      	ldr	r2, [r7, #32]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	e0ce      	b.n	800b4a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b30a:	e0ca      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b314:	d166      	bne.n	800b3e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b316:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d827      	bhi.n	800b36e <UART_SetConfig+0x49a>
 800b31e:	a201      	add	r2, pc, #4	@ (adr r2, 800b324 <UART_SetConfig+0x450>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	0800b36f 	.word	0x0800b36f
 800b334:	0800b35f 	.word	0x0800b35f
 800b338:	0800b36f 	.word	0x0800b36f
 800b33c:	0800b36f 	.word	0x0800b36f
 800b340:	0800b36f 	.word	0x0800b36f
 800b344:	0800b367 	.word	0x0800b367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b348:	f7fc ffda 	bl	8008300 <HAL_RCC_GetPCLK1Freq>
 800b34c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b34e:	e014      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b350:	f7fc ffec 	bl	800832c <HAL_RCC_GetPCLK2Freq>
 800b354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b356:	e010      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b358:	4b4e      	ldr	r3, [pc, #312]	@ (800b494 <UART_SetConfig+0x5c0>)
 800b35a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b35c:	e00d      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b35e:	f7fc ff61 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 800b362:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b364:	e009      	b.n	800b37a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b36c:	e005      	b.n	800b37a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8090 	beq.w	800b4a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b386:	4a44      	ldr	r2, [pc, #272]	@ (800b498 <UART_SetConfig+0x5c4>)
 800b388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b38c:	461a      	mov	r2, r3
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	fbb3 f3f2 	udiv	r3, r3, r2
 800b394:	005a      	lsls	r2, r3, #1
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	085b      	lsrs	r3, r3, #1
 800b39c:	441a      	add	r2, r3
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	2b0f      	cmp	r3, #15
 800b3ac:	d916      	bls.n	800b3dc <UART_SetConfig+0x508>
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3b4:	d212      	bcs.n	800b3dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	f023 030f 	bic.w	r3, r3, #15
 800b3be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	8bfb      	ldrh	r3, [r7, #30]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	8bfa      	ldrh	r2, [r7, #30]
 800b3d8:	60da      	str	r2, [r3, #12]
 800b3da:	e062      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3e2:	e05e      	b.n	800b4a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d828      	bhi.n	800b43e <UART_SetConfig+0x56a>
 800b3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <UART_SetConfig+0x520>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b419 	.word	0x0800b419
 800b3f8:	0800b421 	.word	0x0800b421
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	0800b43f 	.word	0x0800b43f
 800b404:	0800b42f 	.word	0x0800b42f
 800b408:	0800b43f 	.word	0x0800b43f
 800b40c:	0800b43f 	.word	0x0800b43f
 800b410:	0800b43f 	.word	0x0800b43f
 800b414:	0800b437 	.word	0x0800b437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b418:	f7fc ff72 	bl	8008300 <HAL_RCC_GetPCLK1Freq>
 800b41c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b41e:	e014      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b420:	f7fc ff84 	bl	800832c <HAL_RCC_GetPCLK2Freq>
 800b424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b426:	e010      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b428:	4b1a      	ldr	r3, [pc, #104]	@ (800b494 <UART_SetConfig+0x5c0>)
 800b42a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b42c:	e00d      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b42e:	f7fc fef9 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 800b432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b434:	e009      	b.n	800b44a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b43a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b43c:	e005      	b.n	800b44a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b448:	bf00      	nop
    }

    if (pclk != 0U)
 800b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d028      	beq.n	800b4a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	4a10      	ldr	r2, [pc, #64]	@ (800b498 <UART_SetConfig+0x5c4>)
 800b456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b45a:	461a      	mov	r2, r3
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	441a      	add	r2, r3
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	2b0f      	cmp	r3, #15
 800b478:	d910      	bls.n	800b49c <UART_SetConfig+0x5c8>
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b480:	d20c      	bcs.n	800b49c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	b29a      	uxth	r2, r3
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60da      	str	r2, [r3, #12]
 800b48c:	e009      	b.n	800b4a2 <UART_SetConfig+0x5ce>
 800b48e:	bf00      	nop
 800b490:	40008000 	.word	0x40008000
 800b494:	00f42400 	.word	0x00f42400
 800b498:	0800c578 	.word	0x0800c578
      }
      else
      {
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3730      	adds	r7, #48	@ 0x30
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b4cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	f003 0304 	and.w	r3, r3, #4
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00a      	beq.n	800b57e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	430a      	orrs	r2, r1
 800b59e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01a      	beq.n	800b5e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ca:	d10a      	bne.n	800b5e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
  }
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b098      	sub	sp, #96	@ 0x60
 800b614:	af02      	add	r7, sp, #8
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b620:	f7f7 ffa4 	bl	800356c <HAL_GetTick>
 800b624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b08      	cmp	r3, #8
 800b632:	d12f      	bne.n	800b694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b63c:	2200      	movs	r2, #0
 800b63e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f88e 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d022      	beq.n	800b694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b656:	e853 3f00 	ldrex	r3, [r3]
 800b65a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b662:	653b      	str	r3, [r7, #80]	@ 0x50
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	461a      	mov	r2, r3
 800b66a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b66c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b66e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b674:	e841 2300 	strex	r3, r2, [r1]
 800b678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e6      	bne.n	800b64e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2220      	movs	r2, #32
 800b684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e063      	b.n	800b75c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d149      	bne.n	800b736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f857 	bl	800b764 <UART_WaitOnFlagUntilTimeout>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d03c      	beq.n	800b736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e6      	bne.n	800b6bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f023 0301 	bic.w	r3, r3, #1
 800b704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b70e:	61fa      	str	r2, [r7, #28]
 800b710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	69b9      	ldr	r1, [r7, #24]
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	617b      	str	r3, [r7, #20]
   return(result);
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e5      	bne.n	800b6ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e012      	b.n	800b75c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2220      	movs	r2, #32
 800b73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3758      	adds	r7, #88	@ 0x58
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	4613      	mov	r3, r2
 800b772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b774:	e04f      	b.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77c:	d04b      	beq.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b77e:	f7f7 fef5 	bl	800356c <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d302      	bcc.n	800b794 <UART_WaitOnFlagUntilTimeout+0x30>
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e04e      	b.n	800b836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0304 	and.w	r3, r3, #4
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d037      	beq.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b80      	cmp	r3, #128	@ 0x80
 800b7aa:	d034      	beq.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b40      	cmp	r3, #64	@ 0x40
 800b7b0:	d031      	beq.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	f003 0308 	and.w	r3, r3, #8
 800b7bc:	2b08      	cmp	r3, #8
 800b7be:	d110      	bne.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f838 	bl	800b83e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e029      	b.n	800b836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	69db      	ldr	r3, [r3, #28]
 800b7e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7f0:	d111      	bne.n	800b816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f81e 	bl	800b83e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2220      	movs	r2, #32
 800b806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e00f      	b.n	800b836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	69da      	ldr	r2, [r3, #28]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	4013      	ands	r3, r2
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	429a      	cmp	r2, r3
 800b824:	bf0c      	ite	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	2300      	movne	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	429a      	cmp	r2, r3
 800b832:	d0a0      	beq.n	800b776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b83e:	b480      	push	{r7}
 800b840:	b095      	sub	sp, #84	@ 0x54
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84e:	e853 3f00 	ldrex	r3, [r3]
 800b852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b864:	643b      	str	r3, [r7, #64]	@ 0x40
 800b866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b86a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b86c:	e841 2300 	strex	r3, r2, [r1]
 800b870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1e6      	bne.n	800b846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3308      	adds	r3, #8
 800b87e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	e853 3f00 	ldrex	r3, [r3]
 800b886:	61fb      	str	r3, [r7, #28]
   return(result);
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3308      	adds	r3, #8
 800b89a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b89c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b89e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e3      	bne.n	800b878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d118      	bne.n	800b8ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f023 0310 	bic.w	r3, r3, #16
 800b8cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e6      	bne.n	800b8b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8fe:	bf00      	nop
 800b900:	3754      	adds	r7, #84	@ 0x54
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fac1 	bl	800aea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b926:	bf00      	nop
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b088      	sub	sp, #32
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	e853 3f00 	ldrex	r3, [r3]
 800b942:	60bb      	str	r3, [r7, #8]
   return(result);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b94a:	61fb      	str	r3, [r7, #28]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	461a      	mov	r2, r3
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	61bb      	str	r3, [r7, #24]
 800b956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b958:	6979      	ldr	r1, [r7, #20]
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	e841 2300 	strex	r3, r2, [r1]
 800b960:	613b      	str	r3, [r7, #16]
   return(result);
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e6      	bne.n	800b936 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fa8c 	bl	800ae94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b97c:	bf00      	nop
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e027      	b.n	800ba26 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2224      	movs	r2, #36	@ 0x24
 800b9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0201 	bic.w	r2, r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d101      	bne.n	800ba4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba46:	2302      	movs	r3, #2
 800ba48:	e02d      	b.n	800baa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2224      	movs	r2, #36	@ 0x24
 800ba56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f022 0201 	bic.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	430a      	orrs	r2, r1
 800ba84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f850 	bl	800bb2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d101      	bne.n	800bac6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bac2:	2302      	movs	r3, #2
 800bac4:	e02d      	b.n	800bb22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2224      	movs	r2, #36	@ 0x24
 800bad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f022 0201 	bic.w	r2, r2, #1
 800baec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	430a      	orrs	r2, r1
 800bb00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f812 	bl	800bb2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2220      	movs	r2, #32
 800bb14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d108      	bne.n	800bb4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb4c:	e031      	b.n	800bbb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb4e:	2308      	movs	r3, #8
 800bb50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb52:	2308      	movs	r3, #8
 800bb54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	0e5b      	lsrs	r3, r3, #25
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f003 0307 	and.w	r3, r3, #7
 800bb64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	0f5b      	lsrs	r3, r3, #29
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	7b3a      	ldrb	r2, [r7, #12]
 800bb7a:	4911      	ldr	r1, [pc, #68]	@ (800bbc0 <UARTEx_SetNbDataToProcess+0x94>)
 800bb7c:	5c8a      	ldrb	r2, [r1, r2]
 800bb7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb82:	7b3a      	ldrb	r2, [r7, #12]
 800bb84:	490f      	ldr	r1, [pc, #60]	@ (800bbc4 <UARTEx_SetNbDataToProcess+0x98>)
 800bb86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb88:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	7b7a      	ldrb	r2, [r7, #13]
 800bb98:	4909      	ldr	r1, [pc, #36]	@ (800bbc0 <UARTEx_SetNbDataToProcess+0x94>)
 800bb9a:	5c8a      	ldrb	r2, [r1, r2]
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bba0:	7b7a      	ldrb	r2, [r7, #13]
 800bba2:	4908      	ldr	r1, [pc, #32]	@ (800bbc4 <UARTEx_SetNbDataToProcess+0x98>)
 800bba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bba6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbb2:	bf00      	nop
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	0800c590 	.word	0x0800c590
 800bbc4:	0800c598 	.word	0x0800c598

0800bbc8 <siprintf>:
 800bbc8:	b40e      	push	{r1, r2, r3}
 800bbca:	b500      	push	{lr}
 800bbcc:	b09c      	sub	sp, #112	@ 0x70
 800bbce:	ab1d      	add	r3, sp, #116	@ 0x74
 800bbd0:	9002      	str	r0, [sp, #8]
 800bbd2:	9006      	str	r0, [sp, #24]
 800bbd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbd8:	4809      	ldr	r0, [pc, #36]	@ (800bc00 <siprintf+0x38>)
 800bbda:	9107      	str	r1, [sp, #28]
 800bbdc:	9104      	str	r1, [sp, #16]
 800bbde:	4909      	ldr	r1, [pc, #36]	@ (800bc04 <siprintf+0x3c>)
 800bbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	a902      	add	r1, sp, #8
 800bbec:	f000 f994 	bl	800bf18 <_svfiprintf_r>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	b01c      	add	sp, #112	@ 0x70
 800bbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbfc:	b003      	add	sp, #12
 800bbfe:	4770      	bx	lr
 800bc00:	20000048 	.word	0x20000048
 800bc04:	ffff0208 	.word	0xffff0208

0800bc08 <memset>:
 800bc08:	4402      	add	r2, r0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d100      	bne.n	800bc12 <memset+0xa>
 800bc10:	4770      	bx	lr
 800bc12:	f803 1b01 	strb.w	r1, [r3], #1
 800bc16:	e7f9      	b.n	800bc0c <memset+0x4>

0800bc18 <__errno>:
 800bc18:	4b01      	ldr	r3, [pc, #4]	@ (800bc20 <__errno+0x8>)
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000048 	.word	0x20000048

0800bc24 <__libc_init_array>:
 800bc24:	b570      	push	{r4, r5, r6, lr}
 800bc26:	4d0d      	ldr	r5, [pc, #52]	@ (800bc5c <__libc_init_array+0x38>)
 800bc28:	4c0d      	ldr	r4, [pc, #52]	@ (800bc60 <__libc_init_array+0x3c>)
 800bc2a:	1b64      	subs	r4, r4, r5
 800bc2c:	10a4      	asrs	r4, r4, #2
 800bc2e:	2600      	movs	r6, #0
 800bc30:	42a6      	cmp	r6, r4
 800bc32:	d109      	bne.n	800bc48 <__libc_init_array+0x24>
 800bc34:	4d0b      	ldr	r5, [pc, #44]	@ (800bc64 <__libc_init_array+0x40>)
 800bc36:	4c0c      	ldr	r4, [pc, #48]	@ (800bc68 <__libc_init_array+0x44>)
 800bc38:	f000 fc66 	bl	800c508 <_init>
 800bc3c:	1b64      	subs	r4, r4, r5
 800bc3e:	10a4      	asrs	r4, r4, #2
 800bc40:	2600      	movs	r6, #0
 800bc42:	42a6      	cmp	r6, r4
 800bc44:	d105      	bne.n	800bc52 <__libc_init_array+0x2e>
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc4c:	4798      	blx	r3
 800bc4e:	3601      	adds	r6, #1
 800bc50:	e7ee      	b.n	800bc30 <__libc_init_array+0xc>
 800bc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc56:	4798      	blx	r3
 800bc58:	3601      	adds	r6, #1
 800bc5a:	e7f2      	b.n	800bc42 <__libc_init_array+0x1e>
 800bc5c:	0800c5dc 	.word	0x0800c5dc
 800bc60:	0800c5dc 	.word	0x0800c5dc
 800bc64:	0800c5dc 	.word	0x0800c5dc
 800bc68:	0800c5e0 	.word	0x0800c5e0

0800bc6c <__retarget_lock_acquire_recursive>:
 800bc6c:	4770      	bx	lr

0800bc6e <__retarget_lock_release_recursive>:
 800bc6e:	4770      	bx	lr

0800bc70 <_free_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4605      	mov	r5, r0
 800bc74:	2900      	cmp	r1, #0
 800bc76:	d041      	beq.n	800bcfc <_free_r+0x8c>
 800bc78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7c:	1f0c      	subs	r4, r1, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	bfb8      	it	lt
 800bc82:	18e4      	addlt	r4, r4, r3
 800bc84:	f000 f8e0 	bl	800be48 <__malloc_lock>
 800bc88:	4a1d      	ldr	r2, [pc, #116]	@ (800bd00 <_free_r+0x90>)
 800bc8a:	6813      	ldr	r3, [r2, #0]
 800bc8c:	b933      	cbnz	r3, 800bc9c <_free_r+0x2c>
 800bc8e:	6063      	str	r3, [r4, #4]
 800bc90:	6014      	str	r4, [r2, #0]
 800bc92:	4628      	mov	r0, r5
 800bc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc98:	f000 b8dc 	b.w	800be54 <__malloc_unlock>
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d908      	bls.n	800bcb2 <_free_r+0x42>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	1821      	adds	r1, r4, r0
 800bca4:	428b      	cmp	r3, r1
 800bca6:	bf01      	itttt	eq
 800bca8:	6819      	ldreq	r1, [r3, #0]
 800bcaa:	685b      	ldreq	r3, [r3, #4]
 800bcac:	1809      	addeq	r1, r1, r0
 800bcae:	6021      	streq	r1, [r4, #0]
 800bcb0:	e7ed      	b.n	800bc8e <_free_r+0x1e>
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	b10b      	cbz	r3, 800bcbc <_free_r+0x4c>
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	d9fa      	bls.n	800bcb2 <_free_r+0x42>
 800bcbc:	6811      	ldr	r1, [r2, #0]
 800bcbe:	1850      	adds	r0, r2, r1
 800bcc0:	42a0      	cmp	r0, r4
 800bcc2:	d10b      	bne.n	800bcdc <_free_r+0x6c>
 800bcc4:	6820      	ldr	r0, [r4, #0]
 800bcc6:	4401      	add	r1, r0
 800bcc8:	1850      	adds	r0, r2, r1
 800bcca:	4283      	cmp	r3, r0
 800bccc:	6011      	str	r1, [r2, #0]
 800bcce:	d1e0      	bne.n	800bc92 <_free_r+0x22>
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	6053      	str	r3, [r2, #4]
 800bcd6:	4408      	add	r0, r1
 800bcd8:	6010      	str	r0, [r2, #0]
 800bcda:	e7da      	b.n	800bc92 <_free_r+0x22>
 800bcdc:	d902      	bls.n	800bce4 <_free_r+0x74>
 800bcde:	230c      	movs	r3, #12
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	e7d6      	b.n	800bc92 <_free_r+0x22>
 800bce4:	6820      	ldr	r0, [r4, #0]
 800bce6:	1821      	adds	r1, r4, r0
 800bce8:	428b      	cmp	r3, r1
 800bcea:	bf04      	itt	eq
 800bcec:	6819      	ldreq	r1, [r3, #0]
 800bcee:	685b      	ldreq	r3, [r3, #4]
 800bcf0:	6063      	str	r3, [r4, #4]
 800bcf2:	bf04      	itt	eq
 800bcf4:	1809      	addeq	r1, r1, r0
 800bcf6:	6021      	streq	r1, [r4, #0]
 800bcf8:	6054      	str	r4, [r2, #4]
 800bcfa:	e7ca      	b.n	800bc92 <_free_r+0x22>
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000ad0 	.word	0x20000ad0

0800bd04 <sbrk_aligned>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	4e0f      	ldr	r6, [pc, #60]	@ (800bd44 <sbrk_aligned+0x40>)
 800bd08:	460c      	mov	r4, r1
 800bd0a:	6831      	ldr	r1, [r6, #0]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	b911      	cbnz	r1, 800bd16 <sbrk_aligned+0x12>
 800bd10:	f000 fba6 	bl	800c460 <_sbrk_r>
 800bd14:	6030      	str	r0, [r6, #0]
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f000 fba1 	bl	800c460 <_sbrk_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	d103      	bne.n	800bd2a <sbrk_aligned+0x26>
 800bd22:	f04f 34ff 	mov.w	r4, #4294967295
 800bd26:	4620      	mov	r0, r4
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
 800bd2a:	1cc4      	adds	r4, r0, #3
 800bd2c:	f024 0403 	bic.w	r4, r4, #3
 800bd30:	42a0      	cmp	r0, r4
 800bd32:	d0f8      	beq.n	800bd26 <sbrk_aligned+0x22>
 800bd34:	1a21      	subs	r1, r4, r0
 800bd36:	4628      	mov	r0, r5
 800bd38:	f000 fb92 	bl	800c460 <_sbrk_r>
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	d1f2      	bne.n	800bd26 <sbrk_aligned+0x22>
 800bd40:	e7ef      	b.n	800bd22 <sbrk_aligned+0x1e>
 800bd42:	bf00      	nop
 800bd44:	20000acc 	.word	0x20000acc

0800bd48 <_malloc_r>:
 800bd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd4c:	1ccd      	adds	r5, r1, #3
 800bd4e:	f025 0503 	bic.w	r5, r5, #3
 800bd52:	3508      	adds	r5, #8
 800bd54:	2d0c      	cmp	r5, #12
 800bd56:	bf38      	it	cc
 800bd58:	250c      	movcc	r5, #12
 800bd5a:	2d00      	cmp	r5, #0
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	db01      	blt.n	800bd64 <_malloc_r+0x1c>
 800bd60:	42a9      	cmp	r1, r5
 800bd62:	d904      	bls.n	800bd6e <_malloc_r+0x26>
 800bd64:	230c      	movs	r3, #12
 800bd66:	6033      	str	r3, [r6, #0]
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be44 <_malloc_r+0xfc>
 800bd72:	f000 f869 	bl	800be48 <__malloc_lock>
 800bd76:	f8d8 3000 	ldr.w	r3, [r8]
 800bd7a:	461c      	mov	r4, r3
 800bd7c:	bb44      	cbnz	r4, 800bdd0 <_malloc_r+0x88>
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4630      	mov	r0, r6
 800bd82:	f7ff ffbf 	bl	800bd04 <sbrk_aligned>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	4604      	mov	r4, r0
 800bd8a:	d158      	bne.n	800be3e <_malloc_r+0xf6>
 800bd8c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd90:	4627      	mov	r7, r4
 800bd92:	2f00      	cmp	r7, #0
 800bd94:	d143      	bne.n	800be1e <_malloc_r+0xd6>
 800bd96:	2c00      	cmp	r4, #0
 800bd98:	d04b      	beq.n	800be32 <_malloc_r+0xea>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	4630      	mov	r0, r6
 800bda0:	eb04 0903 	add.w	r9, r4, r3
 800bda4:	f000 fb5c 	bl	800c460 <_sbrk_r>
 800bda8:	4581      	cmp	r9, r0
 800bdaa:	d142      	bne.n	800be32 <_malloc_r+0xea>
 800bdac:	6821      	ldr	r1, [r4, #0]
 800bdae:	1a6d      	subs	r5, r5, r1
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff ffa6 	bl	800bd04 <sbrk_aligned>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d03a      	beq.n	800be32 <_malloc_r+0xea>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	442b      	add	r3, r5
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	bb62      	cbnz	r2, 800be24 <_malloc_r+0xdc>
 800bdca:	f8c8 7000 	str.w	r7, [r8]
 800bdce:	e00f      	b.n	800bdf0 <_malloc_r+0xa8>
 800bdd0:	6822      	ldr	r2, [r4, #0]
 800bdd2:	1b52      	subs	r2, r2, r5
 800bdd4:	d420      	bmi.n	800be18 <_malloc_r+0xd0>
 800bdd6:	2a0b      	cmp	r2, #11
 800bdd8:	d917      	bls.n	800be0a <_malloc_r+0xc2>
 800bdda:	1961      	adds	r1, r4, r5
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	6025      	str	r5, [r4, #0]
 800bde0:	bf18      	it	ne
 800bde2:	6059      	strne	r1, [r3, #4]
 800bde4:	6863      	ldr	r3, [r4, #4]
 800bde6:	bf08      	it	eq
 800bde8:	f8c8 1000 	streq.w	r1, [r8]
 800bdec:	5162      	str	r2, [r4, r5]
 800bdee:	604b      	str	r3, [r1, #4]
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f000 f82f 	bl	800be54 <__malloc_unlock>
 800bdf6:	f104 000b 	add.w	r0, r4, #11
 800bdfa:	1d23      	adds	r3, r4, #4
 800bdfc:	f020 0007 	bic.w	r0, r0, #7
 800be00:	1ac2      	subs	r2, r0, r3
 800be02:	bf1c      	itt	ne
 800be04:	1a1b      	subne	r3, r3, r0
 800be06:	50a3      	strne	r3, [r4, r2]
 800be08:	e7af      	b.n	800bd6a <_malloc_r+0x22>
 800be0a:	6862      	ldr	r2, [r4, #4]
 800be0c:	42a3      	cmp	r3, r4
 800be0e:	bf0c      	ite	eq
 800be10:	f8c8 2000 	streq.w	r2, [r8]
 800be14:	605a      	strne	r2, [r3, #4]
 800be16:	e7eb      	b.n	800bdf0 <_malloc_r+0xa8>
 800be18:	4623      	mov	r3, r4
 800be1a:	6864      	ldr	r4, [r4, #4]
 800be1c:	e7ae      	b.n	800bd7c <_malloc_r+0x34>
 800be1e:	463c      	mov	r4, r7
 800be20:	687f      	ldr	r7, [r7, #4]
 800be22:	e7b6      	b.n	800bd92 <_malloc_r+0x4a>
 800be24:	461a      	mov	r2, r3
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	42a3      	cmp	r3, r4
 800be2a:	d1fb      	bne.n	800be24 <_malloc_r+0xdc>
 800be2c:	2300      	movs	r3, #0
 800be2e:	6053      	str	r3, [r2, #4]
 800be30:	e7de      	b.n	800bdf0 <_malloc_r+0xa8>
 800be32:	230c      	movs	r3, #12
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	4630      	mov	r0, r6
 800be38:	f000 f80c 	bl	800be54 <__malloc_unlock>
 800be3c:	e794      	b.n	800bd68 <_malloc_r+0x20>
 800be3e:	6005      	str	r5, [r0, #0]
 800be40:	e7d6      	b.n	800bdf0 <_malloc_r+0xa8>
 800be42:	bf00      	nop
 800be44:	20000ad0 	.word	0x20000ad0

0800be48 <__malloc_lock>:
 800be48:	4801      	ldr	r0, [pc, #4]	@ (800be50 <__malloc_lock+0x8>)
 800be4a:	f7ff bf0f 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800be4e:	bf00      	nop
 800be50:	20000ac8 	.word	0x20000ac8

0800be54 <__malloc_unlock>:
 800be54:	4801      	ldr	r0, [pc, #4]	@ (800be5c <__malloc_unlock+0x8>)
 800be56:	f7ff bf0a 	b.w	800bc6e <__retarget_lock_release_recursive>
 800be5a:	bf00      	nop
 800be5c:	20000ac8 	.word	0x20000ac8

0800be60 <__ssputs_r>:
 800be60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be64:	688e      	ldr	r6, [r1, #8]
 800be66:	461f      	mov	r7, r3
 800be68:	42be      	cmp	r6, r7
 800be6a:	680b      	ldr	r3, [r1, #0]
 800be6c:	4682      	mov	sl, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	4690      	mov	r8, r2
 800be72:	d82d      	bhi.n	800bed0 <__ssputs_r+0x70>
 800be74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be7c:	d026      	beq.n	800becc <__ssputs_r+0x6c>
 800be7e:	6965      	ldr	r5, [r4, #20]
 800be80:	6909      	ldr	r1, [r1, #16]
 800be82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be86:	eba3 0901 	sub.w	r9, r3, r1
 800be8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be8e:	1c7b      	adds	r3, r7, #1
 800be90:	444b      	add	r3, r9
 800be92:	106d      	asrs	r5, r5, #1
 800be94:	429d      	cmp	r5, r3
 800be96:	bf38      	it	cc
 800be98:	461d      	movcc	r5, r3
 800be9a:	0553      	lsls	r3, r2, #21
 800be9c:	d527      	bpl.n	800beee <__ssputs_r+0x8e>
 800be9e:	4629      	mov	r1, r5
 800bea0:	f7ff ff52 	bl	800bd48 <_malloc_r>
 800bea4:	4606      	mov	r6, r0
 800bea6:	b360      	cbz	r0, 800bf02 <__ssputs_r+0xa2>
 800bea8:	6921      	ldr	r1, [r4, #16]
 800beaa:	464a      	mov	r2, r9
 800beac:	f000 fae8 	bl	800c480 <memcpy>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800beb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	6126      	str	r6, [r4, #16]
 800bebe:	6165      	str	r5, [r4, #20]
 800bec0:	444e      	add	r6, r9
 800bec2:	eba5 0509 	sub.w	r5, r5, r9
 800bec6:	6026      	str	r6, [r4, #0]
 800bec8:	60a5      	str	r5, [r4, #8]
 800beca:	463e      	mov	r6, r7
 800becc:	42be      	cmp	r6, r7
 800bece:	d900      	bls.n	800bed2 <__ssputs_r+0x72>
 800bed0:	463e      	mov	r6, r7
 800bed2:	6820      	ldr	r0, [r4, #0]
 800bed4:	4632      	mov	r2, r6
 800bed6:	4641      	mov	r1, r8
 800bed8:	f000 faa8 	bl	800c42c <memmove>
 800bedc:	68a3      	ldr	r3, [r4, #8]
 800bede:	1b9b      	subs	r3, r3, r6
 800bee0:	60a3      	str	r3, [r4, #8]
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	4433      	add	r3, r6
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	2000      	movs	r0, #0
 800beea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beee:	462a      	mov	r2, r5
 800bef0:	f000 fad4 	bl	800c49c <_realloc_r>
 800bef4:	4606      	mov	r6, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d1e0      	bne.n	800bebc <__ssputs_r+0x5c>
 800befa:	6921      	ldr	r1, [r4, #16]
 800befc:	4650      	mov	r0, sl
 800befe:	f7ff feb7 	bl	800bc70 <_free_r>
 800bf02:	230c      	movs	r3, #12
 800bf04:	f8ca 3000 	str.w	r3, [sl]
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	f04f 30ff 	mov.w	r0, #4294967295
 800bf14:	e7e9      	b.n	800beea <__ssputs_r+0x8a>
	...

0800bf18 <_svfiprintf_r>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4698      	mov	r8, r3
 800bf1e:	898b      	ldrh	r3, [r1, #12]
 800bf20:	061b      	lsls	r3, r3, #24
 800bf22:	b09d      	sub	sp, #116	@ 0x74
 800bf24:	4607      	mov	r7, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	4614      	mov	r4, r2
 800bf2a:	d510      	bpl.n	800bf4e <_svfiprintf_r+0x36>
 800bf2c:	690b      	ldr	r3, [r1, #16]
 800bf2e:	b973      	cbnz	r3, 800bf4e <_svfiprintf_r+0x36>
 800bf30:	2140      	movs	r1, #64	@ 0x40
 800bf32:	f7ff ff09 	bl	800bd48 <_malloc_r>
 800bf36:	6028      	str	r0, [r5, #0]
 800bf38:	6128      	str	r0, [r5, #16]
 800bf3a:	b930      	cbnz	r0, 800bf4a <_svfiprintf_r+0x32>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	b01d      	add	sp, #116	@ 0x74
 800bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4a:	2340      	movs	r3, #64	@ 0x40
 800bf4c:	616b      	str	r3, [r5, #20]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf52:	2320      	movs	r3, #32
 800bf54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf58:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf5c:	2330      	movs	r3, #48	@ 0x30
 800bf5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0fc <_svfiprintf_r+0x1e4>
 800bf62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf66:	f04f 0901 	mov.w	r9, #1
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	469a      	mov	sl, r3
 800bf6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf72:	b10a      	cbz	r2, 800bf78 <_svfiprintf_r+0x60>
 800bf74:	2a25      	cmp	r2, #37	@ 0x25
 800bf76:	d1f9      	bne.n	800bf6c <_svfiprintf_r+0x54>
 800bf78:	ebba 0b04 	subs.w	fp, sl, r4
 800bf7c:	d00b      	beq.n	800bf96 <_svfiprintf_r+0x7e>
 800bf7e:	465b      	mov	r3, fp
 800bf80:	4622      	mov	r2, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	4638      	mov	r0, r7
 800bf86:	f7ff ff6b 	bl	800be60 <__ssputs_r>
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	f000 80a7 	beq.w	800c0de <_svfiprintf_r+0x1c6>
 800bf90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf92:	445a      	add	r2, fp
 800bf94:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf96:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 809f 	beq.w	800c0de <_svfiprintf_r+0x1c6>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfaa:	f10a 0a01 	add.w	sl, sl, #1
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	9307      	str	r3, [sp, #28]
 800bfb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfb8:	4654      	mov	r4, sl
 800bfba:	2205      	movs	r2, #5
 800bfbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc0:	484e      	ldr	r0, [pc, #312]	@ (800c0fc <_svfiprintf_r+0x1e4>)
 800bfc2:	f7f4 f935 	bl	8000230 <memchr>
 800bfc6:	9a04      	ldr	r2, [sp, #16]
 800bfc8:	b9d8      	cbnz	r0, 800c002 <_svfiprintf_r+0xea>
 800bfca:	06d0      	lsls	r0, r2, #27
 800bfcc:	bf44      	itt	mi
 800bfce:	2320      	movmi	r3, #32
 800bfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfd4:	0711      	lsls	r1, r2, #28
 800bfd6:	bf44      	itt	mi
 800bfd8:	232b      	movmi	r3, #43	@ 0x2b
 800bfda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfde:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfe4:	d015      	beq.n	800c012 <_svfiprintf_r+0xfa>
 800bfe6:	9a07      	ldr	r2, [sp, #28]
 800bfe8:	4654      	mov	r4, sl
 800bfea:	2000      	movs	r0, #0
 800bfec:	f04f 0c0a 	mov.w	ip, #10
 800bff0:	4621      	mov	r1, r4
 800bff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bff6:	3b30      	subs	r3, #48	@ 0x30
 800bff8:	2b09      	cmp	r3, #9
 800bffa:	d94b      	bls.n	800c094 <_svfiprintf_r+0x17c>
 800bffc:	b1b0      	cbz	r0, 800c02c <_svfiprintf_r+0x114>
 800bffe:	9207      	str	r2, [sp, #28]
 800c000:	e014      	b.n	800c02c <_svfiprintf_r+0x114>
 800c002:	eba0 0308 	sub.w	r3, r0, r8
 800c006:	fa09 f303 	lsl.w	r3, r9, r3
 800c00a:	4313      	orrs	r3, r2
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	46a2      	mov	sl, r4
 800c010:	e7d2      	b.n	800bfb8 <_svfiprintf_r+0xa0>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	1d19      	adds	r1, r3, #4
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	9103      	str	r1, [sp, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	bfbb      	ittet	lt
 800c01e:	425b      	neglt	r3, r3
 800c020:	f042 0202 	orrlt.w	r2, r2, #2
 800c024:	9307      	strge	r3, [sp, #28]
 800c026:	9307      	strlt	r3, [sp, #28]
 800c028:	bfb8      	it	lt
 800c02a:	9204      	strlt	r2, [sp, #16]
 800c02c:	7823      	ldrb	r3, [r4, #0]
 800c02e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c030:	d10a      	bne.n	800c048 <_svfiprintf_r+0x130>
 800c032:	7863      	ldrb	r3, [r4, #1]
 800c034:	2b2a      	cmp	r3, #42	@ 0x2a
 800c036:	d132      	bne.n	800c09e <_svfiprintf_r+0x186>
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	1d1a      	adds	r2, r3, #4
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	9203      	str	r2, [sp, #12]
 800c040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c044:	3402      	adds	r4, #2
 800c046:	9305      	str	r3, [sp, #20]
 800c048:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c10c <_svfiprintf_r+0x1f4>
 800c04c:	7821      	ldrb	r1, [r4, #0]
 800c04e:	2203      	movs	r2, #3
 800c050:	4650      	mov	r0, sl
 800c052:	f7f4 f8ed 	bl	8000230 <memchr>
 800c056:	b138      	cbz	r0, 800c068 <_svfiprintf_r+0x150>
 800c058:	9b04      	ldr	r3, [sp, #16]
 800c05a:	eba0 000a 	sub.w	r0, r0, sl
 800c05e:	2240      	movs	r2, #64	@ 0x40
 800c060:	4082      	lsls	r2, r0
 800c062:	4313      	orrs	r3, r2
 800c064:	3401      	adds	r4, #1
 800c066:	9304      	str	r3, [sp, #16]
 800c068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c06c:	4824      	ldr	r0, [pc, #144]	@ (800c100 <_svfiprintf_r+0x1e8>)
 800c06e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c072:	2206      	movs	r2, #6
 800c074:	f7f4 f8dc 	bl	8000230 <memchr>
 800c078:	2800      	cmp	r0, #0
 800c07a:	d036      	beq.n	800c0ea <_svfiprintf_r+0x1d2>
 800c07c:	4b21      	ldr	r3, [pc, #132]	@ (800c104 <_svfiprintf_r+0x1ec>)
 800c07e:	bb1b      	cbnz	r3, 800c0c8 <_svfiprintf_r+0x1b0>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	3307      	adds	r3, #7
 800c084:	f023 0307 	bic.w	r3, r3, #7
 800c088:	3308      	adds	r3, #8
 800c08a:	9303      	str	r3, [sp, #12]
 800c08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08e:	4433      	add	r3, r6
 800c090:	9309      	str	r3, [sp, #36]	@ 0x24
 800c092:	e76a      	b.n	800bf6a <_svfiprintf_r+0x52>
 800c094:	fb0c 3202 	mla	r2, ip, r2, r3
 800c098:	460c      	mov	r4, r1
 800c09a:	2001      	movs	r0, #1
 800c09c:	e7a8      	b.n	800bff0 <_svfiprintf_r+0xd8>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	3401      	adds	r4, #1
 800c0a2:	9305      	str	r3, [sp, #20]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f04f 0c0a 	mov.w	ip, #10
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b0:	3a30      	subs	r2, #48	@ 0x30
 800c0b2:	2a09      	cmp	r2, #9
 800c0b4:	d903      	bls.n	800c0be <_svfiprintf_r+0x1a6>
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0c6      	beq.n	800c048 <_svfiprintf_r+0x130>
 800c0ba:	9105      	str	r1, [sp, #20]
 800c0bc:	e7c4      	b.n	800c048 <_svfiprintf_r+0x130>
 800c0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e7f0      	b.n	800c0aa <_svfiprintf_r+0x192>
 800c0c8:	ab03      	add	r3, sp, #12
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c108 <_svfiprintf_r+0x1f0>)
 800c0d0:	a904      	add	r1, sp, #16
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	f3af 8000 	nop.w
 800c0d8:	1c42      	adds	r2, r0, #1
 800c0da:	4606      	mov	r6, r0
 800c0dc:	d1d6      	bne.n	800c08c <_svfiprintf_r+0x174>
 800c0de:	89ab      	ldrh	r3, [r5, #12]
 800c0e0:	065b      	lsls	r3, r3, #25
 800c0e2:	f53f af2d 	bmi.w	800bf40 <_svfiprintf_r+0x28>
 800c0e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0e8:	e72c      	b.n	800bf44 <_svfiprintf_r+0x2c>
 800c0ea:	ab03      	add	r3, sp, #12
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	462a      	mov	r2, r5
 800c0f0:	4b05      	ldr	r3, [pc, #20]	@ (800c108 <_svfiprintf_r+0x1f0>)
 800c0f2:	a904      	add	r1, sp, #16
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f000 f879 	bl	800c1ec <_printf_i>
 800c0fa:	e7ed      	b.n	800c0d8 <_svfiprintf_r+0x1c0>
 800c0fc:	0800c5a0 	.word	0x0800c5a0
 800c100:	0800c5aa 	.word	0x0800c5aa
 800c104:	00000000 	.word	0x00000000
 800c108:	0800be61 	.word	0x0800be61
 800c10c:	0800c5a6 	.word	0x0800c5a6

0800c110 <_printf_common>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	4616      	mov	r6, r2
 800c116:	4698      	mov	r8, r3
 800c118:	688a      	ldr	r2, [r1, #8]
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c120:	4293      	cmp	r3, r2
 800c122:	bfb8      	it	lt
 800c124:	4613      	movlt	r3, r2
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c12c:	4607      	mov	r7, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	b10a      	cbz	r2, 800c136 <_printf_common+0x26>
 800c132:	3301      	adds	r3, #1
 800c134:	6033      	str	r3, [r6, #0]
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	0699      	lsls	r1, r3, #26
 800c13a:	bf42      	ittt	mi
 800c13c:	6833      	ldrmi	r3, [r6, #0]
 800c13e:	3302      	addmi	r3, #2
 800c140:	6033      	strmi	r3, [r6, #0]
 800c142:	6825      	ldr	r5, [r4, #0]
 800c144:	f015 0506 	ands.w	r5, r5, #6
 800c148:	d106      	bne.n	800c158 <_printf_common+0x48>
 800c14a:	f104 0a19 	add.w	sl, r4, #25
 800c14e:	68e3      	ldr	r3, [r4, #12]
 800c150:	6832      	ldr	r2, [r6, #0]
 800c152:	1a9b      	subs	r3, r3, r2
 800c154:	42ab      	cmp	r3, r5
 800c156:	dc26      	bgt.n	800c1a6 <_printf_common+0x96>
 800c158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c15c:	6822      	ldr	r2, [r4, #0]
 800c15e:	3b00      	subs	r3, #0
 800c160:	bf18      	it	ne
 800c162:	2301      	movne	r3, #1
 800c164:	0692      	lsls	r2, r2, #26
 800c166:	d42b      	bmi.n	800c1c0 <_printf_common+0xb0>
 800c168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c16c:	4641      	mov	r1, r8
 800c16e:	4638      	mov	r0, r7
 800c170:	47c8      	blx	r9
 800c172:	3001      	adds	r0, #1
 800c174:	d01e      	beq.n	800c1b4 <_printf_common+0xa4>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	f003 0306 	and.w	r3, r3, #6
 800c17e:	2b04      	cmp	r3, #4
 800c180:	bf02      	ittt	eq
 800c182:	68e5      	ldreq	r5, [r4, #12]
 800c184:	6833      	ldreq	r3, [r6, #0]
 800c186:	1aed      	subeq	r5, r5, r3
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	bf0c      	ite	eq
 800c18c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c190:	2500      	movne	r5, #0
 800c192:	4293      	cmp	r3, r2
 800c194:	bfc4      	itt	gt
 800c196:	1a9b      	subgt	r3, r3, r2
 800c198:	18ed      	addgt	r5, r5, r3
 800c19a:	2600      	movs	r6, #0
 800c19c:	341a      	adds	r4, #26
 800c19e:	42b5      	cmp	r5, r6
 800c1a0:	d11a      	bne.n	800c1d8 <_printf_common+0xc8>
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e008      	b.n	800c1b8 <_printf_common+0xa8>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4652      	mov	r2, sl
 800c1aa:	4641      	mov	r1, r8
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	47c8      	blx	r9
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	d103      	bne.n	800c1bc <_printf_common+0xac>
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1bc:	3501      	adds	r5, #1
 800c1be:	e7c6      	b.n	800c14e <_printf_common+0x3e>
 800c1c0:	18e1      	adds	r1, r4, r3
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	2030      	movs	r0, #48	@ 0x30
 800c1c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1ca:	4422      	add	r2, r4
 800c1cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1d4:	3302      	adds	r3, #2
 800c1d6:	e7c7      	b.n	800c168 <_printf_common+0x58>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	4622      	mov	r2, r4
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c8      	blx	r9
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d0e6      	beq.n	800c1b4 <_printf_common+0xa4>
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7d9      	b.n	800c19e <_printf_common+0x8e>
	...

0800c1ec <_printf_i>:
 800c1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	7e0f      	ldrb	r7, [r1, #24]
 800c1f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1f4:	2f78      	cmp	r7, #120	@ 0x78
 800c1f6:	4691      	mov	r9, r2
 800c1f8:	4680      	mov	r8, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	469a      	mov	sl, r3
 800c1fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c202:	d807      	bhi.n	800c214 <_printf_i+0x28>
 800c204:	2f62      	cmp	r7, #98	@ 0x62
 800c206:	d80a      	bhi.n	800c21e <_printf_i+0x32>
 800c208:	2f00      	cmp	r7, #0
 800c20a:	f000 80d2 	beq.w	800c3b2 <_printf_i+0x1c6>
 800c20e:	2f58      	cmp	r7, #88	@ 0x58
 800c210:	f000 80b9 	beq.w	800c386 <_printf_i+0x19a>
 800c214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c21c:	e03a      	b.n	800c294 <_printf_i+0xa8>
 800c21e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c222:	2b15      	cmp	r3, #21
 800c224:	d8f6      	bhi.n	800c214 <_printf_i+0x28>
 800c226:	a101      	add	r1, pc, #4	@ (adr r1, 800c22c <_printf_i+0x40>)
 800c228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c22c:	0800c285 	.word	0x0800c285
 800c230:	0800c299 	.word	0x0800c299
 800c234:	0800c215 	.word	0x0800c215
 800c238:	0800c215 	.word	0x0800c215
 800c23c:	0800c215 	.word	0x0800c215
 800c240:	0800c215 	.word	0x0800c215
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c215 	.word	0x0800c215
 800c24c:	0800c215 	.word	0x0800c215
 800c250:	0800c215 	.word	0x0800c215
 800c254:	0800c215 	.word	0x0800c215
 800c258:	0800c399 	.word	0x0800c399
 800c25c:	0800c2c3 	.word	0x0800c2c3
 800c260:	0800c353 	.word	0x0800c353
 800c264:	0800c215 	.word	0x0800c215
 800c268:	0800c215 	.word	0x0800c215
 800c26c:	0800c3bb 	.word	0x0800c3bb
 800c270:	0800c215 	.word	0x0800c215
 800c274:	0800c2c3 	.word	0x0800c2c3
 800c278:	0800c215 	.word	0x0800c215
 800c27c:	0800c215 	.word	0x0800c215
 800c280:	0800c35b 	.word	0x0800c35b
 800c284:	6833      	ldr	r3, [r6, #0]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6032      	str	r2, [r6, #0]
 800c28c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c294:	2301      	movs	r3, #1
 800c296:	e09d      	b.n	800c3d4 <_printf_i+0x1e8>
 800c298:	6833      	ldr	r3, [r6, #0]
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	1d19      	adds	r1, r3, #4
 800c29e:	6031      	str	r1, [r6, #0]
 800c2a0:	0606      	lsls	r6, r0, #24
 800c2a2:	d501      	bpl.n	800c2a8 <_printf_i+0xbc>
 800c2a4:	681d      	ldr	r5, [r3, #0]
 800c2a6:	e003      	b.n	800c2b0 <_printf_i+0xc4>
 800c2a8:	0645      	lsls	r5, r0, #25
 800c2aa:	d5fb      	bpl.n	800c2a4 <_printf_i+0xb8>
 800c2ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	da03      	bge.n	800c2bc <_printf_i+0xd0>
 800c2b4:	232d      	movs	r3, #45	@ 0x2d
 800c2b6:	426d      	negs	r5, r5
 800c2b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2bc:	4859      	ldr	r0, [pc, #356]	@ (800c424 <_printf_i+0x238>)
 800c2be:	230a      	movs	r3, #10
 800c2c0:	e011      	b.n	800c2e6 <_printf_i+0xfa>
 800c2c2:	6821      	ldr	r1, [r4, #0]
 800c2c4:	6833      	ldr	r3, [r6, #0]
 800c2c6:	0608      	lsls	r0, r1, #24
 800c2c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2cc:	d402      	bmi.n	800c2d4 <_printf_i+0xe8>
 800c2ce:	0649      	lsls	r1, r1, #25
 800c2d0:	bf48      	it	mi
 800c2d2:	b2ad      	uxthmi	r5, r5
 800c2d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2d6:	4853      	ldr	r0, [pc, #332]	@ (800c424 <_printf_i+0x238>)
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	bf14      	ite	ne
 800c2dc:	230a      	movne	r3, #10
 800c2de:	2308      	moveq	r3, #8
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2e6:	6866      	ldr	r6, [r4, #4]
 800c2e8:	60a6      	str	r6, [r4, #8]
 800c2ea:	2e00      	cmp	r6, #0
 800c2ec:	bfa2      	ittt	ge
 800c2ee:	6821      	ldrge	r1, [r4, #0]
 800c2f0:	f021 0104 	bicge.w	r1, r1, #4
 800c2f4:	6021      	strge	r1, [r4, #0]
 800c2f6:	b90d      	cbnz	r5, 800c2fc <_printf_i+0x110>
 800c2f8:	2e00      	cmp	r6, #0
 800c2fa:	d04b      	beq.n	800c394 <_printf_i+0x1a8>
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c302:	fb03 5711 	mls	r7, r3, r1, r5
 800c306:	5dc7      	ldrb	r7, [r0, r7]
 800c308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c30c:	462f      	mov	r7, r5
 800c30e:	42bb      	cmp	r3, r7
 800c310:	460d      	mov	r5, r1
 800c312:	d9f4      	bls.n	800c2fe <_printf_i+0x112>
 800c314:	2b08      	cmp	r3, #8
 800c316:	d10b      	bne.n	800c330 <_printf_i+0x144>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	07df      	lsls	r7, r3, #31
 800c31c:	d508      	bpl.n	800c330 <_printf_i+0x144>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	6861      	ldr	r1, [r4, #4]
 800c322:	4299      	cmp	r1, r3
 800c324:	bfde      	ittt	le
 800c326:	2330      	movle	r3, #48	@ 0x30
 800c328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c32c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c330:	1b92      	subs	r2, r2, r6
 800c332:	6122      	str	r2, [r4, #16]
 800c334:	f8cd a000 	str.w	sl, [sp]
 800c338:	464b      	mov	r3, r9
 800c33a:	aa03      	add	r2, sp, #12
 800c33c:	4621      	mov	r1, r4
 800c33e:	4640      	mov	r0, r8
 800c340:	f7ff fee6 	bl	800c110 <_printf_common>
 800c344:	3001      	adds	r0, #1
 800c346:	d14a      	bne.n	800c3de <_printf_i+0x1f2>
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	b004      	add	sp, #16
 800c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	f043 0320 	orr.w	r3, r3, #32
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	4833      	ldr	r0, [pc, #204]	@ (800c428 <_printf_i+0x23c>)
 800c35c:	2778      	movs	r7, #120	@ 0x78
 800c35e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	6831      	ldr	r1, [r6, #0]
 800c366:	061f      	lsls	r7, r3, #24
 800c368:	f851 5b04 	ldr.w	r5, [r1], #4
 800c36c:	d402      	bmi.n	800c374 <_printf_i+0x188>
 800c36e:	065f      	lsls	r7, r3, #25
 800c370:	bf48      	it	mi
 800c372:	b2ad      	uxthmi	r5, r5
 800c374:	6031      	str	r1, [r6, #0]
 800c376:	07d9      	lsls	r1, r3, #31
 800c378:	bf44      	itt	mi
 800c37a:	f043 0320 	orrmi.w	r3, r3, #32
 800c37e:	6023      	strmi	r3, [r4, #0]
 800c380:	b11d      	cbz	r5, 800c38a <_printf_i+0x19e>
 800c382:	2310      	movs	r3, #16
 800c384:	e7ac      	b.n	800c2e0 <_printf_i+0xf4>
 800c386:	4827      	ldr	r0, [pc, #156]	@ (800c424 <_printf_i+0x238>)
 800c388:	e7e9      	b.n	800c35e <_printf_i+0x172>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	f023 0320 	bic.w	r3, r3, #32
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	e7f6      	b.n	800c382 <_printf_i+0x196>
 800c394:	4616      	mov	r6, r2
 800c396:	e7bd      	b.n	800c314 <_printf_i+0x128>
 800c398:	6833      	ldr	r3, [r6, #0]
 800c39a:	6825      	ldr	r5, [r4, #0]
 800c39c:	6961      	ldr	r1, [r4, #20]
 800c39e:	1d18      	adds	r0, r3, #4
 800c3a0:	6030      	str	r0, [r6, #0]
 800c3a2:	062e      	lsls	r6, r5, #24
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	d501      	bpl.n	800c3ac <_printf_i+0x1c0>
 800c3a8:	6019      	str	r1, [r3, #0]
 800c3aa:	e002      	b.n	800c3b2 <_printf_i+0x1c6>
 800c3ac:	0668      	lsls	r0, r5, #25
 800c3ae:	d5fb      	bpl.n	800c3a8 <_printf_i+0x1bc>
 800c3b0:	8019      	strh	r1, [r3, #0]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6123      	str	r3, [r4, #16]
 800c3b6:	4616      	mov	r6, r2
 800c3b8:	e7bc      	b.n	800c334 <_printf_i+0x148>
 800c3ba:	6833      	ldr	r3, [r6, #0]
 800c3bc:	1d1a      	adds	r2, r3, #4
 800c3be:	6032      	str	r2, [r6, #0]
 800c3c0:	681e      	ldr	r6, [r3, #0]
 800c3c2:	6862      	ldr	r2, [r4, #4]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f7f3 ff32 	bl	8000230 <memchr>
 800c3cc:	b108      	cbz	r0, 800c3d2 <_printf_i+0x1e6>
 800c3ce:	1b80      	subs	r0, r0, r6
 800c3d0:	6060      	str	r0, [r4, #4]
 800c3d2:	6863      	ldr	r3, [r4, #4]
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3dc:	e7aa      	b.n	800c334 <_printf_i+0x148>
 800c3de:	6923      	ldr	r3, [r4, #16]
 800c3e0:	4632      	mov	r2, r6
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	47d0      	blx	sl
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d0ad      	beq.n	800c348 <_printf_i+0x15c>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	079b      	lsls	r3, r3, #30
 800c3f0:	d413      	bmi.n	800c41a <_printf_i+0x22e>
 800c3f2:	68e0      	ldr	r0, [r4, #12]
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	4298      	cmp	r0, r3
 800c3f8:	bfb8      	it	lt
 800c3fa:	4618      	movlt	r0, r3
 800c3fc:	e7a6      	b.n	800c34c <_printf_i+0x160>
 800c3fe:	2301      	movs	r3, #1
 800c400:	4632      	mov	r2, r6
 800c402:	4649      	mov	r1, r9
 800c404:	4640      	mov	r0, r8
 800c406:	47d0      	blx	sl
 800c408:	3001      	adds	r0, #1
 800c40a:	d09d      	beq.n	800c348 <_printf_i+0x15c>
 800c40c:	3501      	adds	r5, #1
 800c40e:	68e3      	ldr	r3, [r4, #12]
 800c410:	9903      	ldr	r1, [sp, #12]
 800c412:	1a5b      	subs	r3, r3, r1
 800c414:	42ab      	cmp	r3, r5
 800c416:	dcf2      	bgt.n	800c3fe <_printf_i+0x212>
 800c418:	e7eb      	b.n	800c3f2 <_printf_i+0x206>
 800c41a:	2500      	movs	r5, #0
 800c41c:	f104 0619 	add.w	r6, r4, #25
 800c420:	e7f5      	b.n	800c40e <_printf_i+0x222>
 800c422:	bf00      	nop
 800c424:	0800c5b1 	.word	0x0800c5b1
 800c428:	0800c5c2 	.word	0x0800c5c2

0800c42c <memmove>:
 800c42c:	4288      	cmp	r0, r1
 800c42e:	b510      	push	{r4, lr}
 800c430:	eb01 0402 	add.w	r4, r1, r2
 800c434:	d902      	bls.n	800c43c <memmove+0x10>
 800c436:	4284      	cmp	r4, r0
 800c438:	4623      	mov	r3, r4
 800c43a:	d807      	bhi.n	800c44c <memmove+0x20>
 800c43c:	1e43      	subs	r3, r0, #1
 800c43e:	42a1      	cmp	r1, r4
 800c440:	d008      	beq.n	800c454 <memmove+0x28>
 800c442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c44a:	e7f8      	b.n	800c43e <memmove+0x12>
 800c44c:	4402      	add	r2, r0
 800c44e:	4601      	mov	r1, r0
 800c450:	428a      	cmp	r2, r1
 800c452:	d100      	bne.n	800c456 <memmove+0x2a>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c45e:	e7f7      	b.n	800c450 <memmove+0x24>

0800c460 <_sbrk_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d06      	ldr	r5, [pc, #24]	@ (800c47c <_sbrk_r+0x1c>)
 800c464:	2300      	movs	r3, #0
 800c466:	4604      	mov	r4, r0
 800c468:	4608      	mov	r0, r1
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	f7f6 fb3a 	bl	8002ae4 <_sbrk>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_sbrk_r+0x1a>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_sbrk_r+0x1a>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20000ac4 	.word	0x20000ac4

0800c480 <memcpy>:
 800c480:	440a      	add	r2, r1
 800c482:	4291      	cmp	r1, r2
 800c484:	f100 33ff 	add.w	r3, r0, #4294967295
 800c488:	d100      	bne.n	800c48c <memcpy+0xc>
 800c48a:	4770      	bx	lr
 800c48c:	b510      	push	{r4, lr}
 800c48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c496:	4291      	cmp	r1, r2
 800c498:	d1f9      	bne.n	800c48e <memcpy+0xe>
 800c49a:	bd10      	pop	{r4, pc}

0800c49c <_realloc_r>:
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4615      	mov	r5, r2
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	b921      	cbnz	r1, 800c4b2 <_realloc_r+0x16>
 800c4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	f7ff bc4b 	b.w	800bd48 <_malloc_r>
 800c4b2:	b92a      	cbnz	r2, 800c4c0 <_realloc_r+0x24>
 800c4b4:	f7ff fbdc 	bl	800bc70 <_free_r>
 800c4b8:	2400      	movs	r4, #0
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	f000 f81a 	bl	800c4f8 <_malloc_usable_size_r>
 800c4c4:	4285      	cmp	r5, r0
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	d802      	bhi.n	800c4d0 <_realloc_r+0x34>
 800c4ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4ce:	d8f4      	bhi.n	800c4ba <_realloc_r+0x1e>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	f7ff fc38 	bl	800bd48 <_malloc_r>
 800c4d8:	4607      	mov	r7, r0
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d0ec      	beq.n	800c4b8 <_realloc_r+0x1c>
 800c4de:	42b5      	cmp	r5, r6
 800c4e0:	462a      	mov	r2, r5
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	bf28      	it	cs
 800c4e6:	4632      	movcs	r2, r6
 800c4e8:	f7ff ffca 	bl	800c480 <memcpy>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7ff fbbe 	bl	800bc70 <_free_r>
 800c4f4:	463c      	mov	r4, r7
 800c4f6:	e7e0      	b.n	800c4ba <_realloc_r+0x1e>

0800c4f8 <_malloc_usable_size_r>:
 800c4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fc:	1f18      	subs	r0, r3, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bfbc      	itt	lt
 800c502:	580b      	ldrlt	r3, [r1, r0]
 800c504:	18c0      	addlt	r0, r0, r3
 800c506:	4770      	bx	lr

0800c508 <_init>:
 800c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50a:	bf00      	nop
 800c50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50e:	bc08      	pop	{r3}
 800c510:	469e      	mov	lr, r3
 800c512:	4770      	bx	lr

0800c514 <_fini>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr
