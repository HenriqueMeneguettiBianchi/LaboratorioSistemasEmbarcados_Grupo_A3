
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc00  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800cdd8  0800cdd8  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce2c  0800ce2c  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce34  0800ce34  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800ce3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  20000048  0800ce84  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  0800ce84  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ffe  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e3  00000000  00000000  000410b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a80  00000000  00000000  000453a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001498  00000000  00000000  00046e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002abc5  00000000  00000000  000482b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002265b  00000000  00000000  00072e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011639e  00000000  00000000  000954d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007134  00000000  00000000  001ab878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001b29ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cdc0 	.word	0x0800cdc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	0800cdc0 	.word	0x0800cdc0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00b fffd 	bl	800cd68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7e:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d98:	2204      	movs	r2, #4
 8000d9a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df0:	4817      	ldr	r0, [pc, #92]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000df2:	f003 f89f 	bl	8003f34 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000dfc:	f001 fada 	bl	80023b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000e0c:	f004 f9be 	bl	800518c <HAL_ADCEx_MultiModeConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000e16:	f001 facd 	bl	80023b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_ADC1_Init+0x104>)
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e26:	237f      	movs	r3, #127	; 0x7f
 8000e28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_ADC1_Init+0x100>)
 8000e38:	f003 fb2a 	bl	8004490 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000e42:	f001 fab7 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3730      	adds	r7, #48	; 0x30
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000064 	.word	0x20000064
 8000e54:	04300002 	.word	0x04300002

08000e58 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f00b ff7f 	bl	800cd68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e6c:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <MX_ADC2_Init+0xdc>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000eec:	f003 f822 	bl	8003f34 <HAL_ADC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000ef6:	f001 fa5d 	bl	80023b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC2_Init+0xe0>)
 8000efc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efe:	2306      	movs	r3, #6
 8000f00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f06:	237f      	movs	r3, #127	; 0x7f
 8000f08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_ADC2_Init+0xd8>)
 8000f18:	f003 faba 	bl	8004490 <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000f22:	f001 fa47 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000d0 	.word	0x200000d0
 8000f34:	50000100 	.word	0x50000100
 8000f38:	0c900008 	.word	0x0c900008

08000f3c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2220      	movs	r2, #32
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00b ff07 	bl	800cd68 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f5c:	4a37      	ldr	r2, [pc, #220]	; (800103c <MX_ADC3_Init+0x100>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f62:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fda:	4817      	ldr	r0, [pc, #92]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000fdc:	f002 ffaa 	bl	8003f34 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000fe6:	f001 f9e5 	bl	80023b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <MX_ADC3_Init+0xfc>)
 8000ff6:	f004 f8c9 	bl	800518c <HAL_ADCEx_MultiModeConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001000:	f001 f9d8 	bl	80023b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ADC3_Init+0x104>)
 8001006:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001008:	2306      	movs	r3, #6
 800100a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001010:	237f      	movs	r3, #127	; 0x7f
 8001012:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001014:	2304      	movs	r3, #4
 8001016:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_ADC3_Init+0xfc>)
 8001022:	f003 fa35 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 800102c:	f001 f9c2 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000013c 	.word	0x2000013c
 800103c:	50000400 	.word	0x50000400
 8001040:	14f00020 	.word	0x14f00020

08001044 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2220      	movs	r2, #32
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00b fe89 	bl	800cd68 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_ADC4_Init+0xd8>)
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <MX_ADC4_Init+0xdc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <MX_ADC4_Init+0xd8>)
 800105e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001062:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <MX_ADC4_Init+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_ADC4_Init+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_ADC4_Init+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC4_Init+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_ADC4_Init+0xd8>)
 800107e:	2204      	movs	r2, #4
 8001080:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC4_Init+0xd8>)
 8001084:	2200      	movs	r2, #0
 8001086:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_ADC4_Init+0xd8>)
 800108a:	2201      	movs	r2, #1
 800108c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_ADC4_Init+0xd8>)
 8001090:	2201      	movs	r2, #1
 8001092:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC4_Init+0xd8>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC4_Init+0xd8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC4_Init+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC4_Init+0xd8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC4_Init+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC4_Init+0xd8>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC4_Init+0xd8>)
 80010c0:	220c      	movs	r2, #12
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_ADC4_Init+0xd8>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC4_Init+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_ADC4_Init+0xd8>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <MX_ADC4_Init+0xd8>)
 80010d8:	f002 ff2c 	bl	8003f34 <HAL_ADC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 80010e2:	f001 f967 	bl	80023b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_ADC4_Init+0xe0>)
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	; 0x7f
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC4_Init+0xd8>)
 8001104:	f003 f9c4 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 800110e:	f001 f951 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001a8 	.word	0x200001a8
 8001120:	50000500 	.word	0x50000500
 8001124:	14f00020 	.word	0x14f00020

08001128 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b fe17 	bl	800cd68 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <MX_ADC5_Init+0xd8>)
 800113c:	4a31      	ldr	r2, [pc, #196]	; (8001204 <MX_ADC5_Init+0xdc>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001142:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001146:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MX_ADC5_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_ADC5_Init+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001162:	2204      	movs	r2, #4
 8001164:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001168:	2200      	movs	r2, #0
 800116a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <MX_ADC5_Init+0xd8>)
 800116e:	2201      	movs	r2, #1
 8001170:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001174:	2201      	movs	r2, #1
 8001176:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_ADC5_Init+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC5_Init+0xd8>)
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC5_Init+0xd8>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC5_Init+0xd8>)
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011a4:	220c      	movs	r2, #12
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011bc:	f002 feba 	bl	8003f34 <HAL_ADC_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 80011c6:	f001 f8f5 	bl	80023b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC5_Init+0xe0>)
 80011cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ce:	2306      	movs	r3, #6
 80011d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d6:	237f      	movs	r3, #127	; 0x7f
 80011d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011da:	2304      	movs	r3, #4
 80011dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_ADC5_Init+0xd8>)
 80011e8:	f003 f952 	bl	8004490 <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 80011f2:	f001 f8df 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000214 	.word	0x20000214
 8001204:	50000600 	.word	0x50000600
 8001208:	08600004 	.word	0x08600004

0800120c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a6      	sub	sp, #152	; 0x98
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001228:	2254      	movs	r2, #84	; 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00b fd9b 	bl	800cd68 <memset>
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123a:	d16c      	bne.n	8001316 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001242:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	4618      	mov	r0, r3
 800124e:	f007 fb3b 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f001 f8ac 	bl	80023b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125c:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a9f      	ldr	r2, [pc, #636]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 8001264:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001266:	4b9e      	ldr	r3, [pc, #632]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10b      	bne.n	8001286 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800126e:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a9c      	ldr	r2, [pc, #624]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b9a      	ldr	r3, [pc, #616]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b97      	ldr	r3, [pc, #604]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a96      	ldr	r2, [pc, #600]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f004 fcbf 	bl	8005c3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012be:	4b8a      	ldr	r3, [pc, #552]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012c0:	4a8a      	ldr	r2, [pc, #552]	; (80014ec <HAL_ADC_MspInit+0x2e0>)
 80012c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c4:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012c6:	2205      	movs	r2, #5
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ca:	4b87      	ldr	r3, [pc, #540]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d0:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	4b84      	ldr	r3, [pc, #528]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012dc:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e4:	4b80      	ldr	r3, [pc, #512]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ec:	4b7e      	ldr	r3, [pc, #504]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012ee:	2220      	movs	r2, #32
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f8:	487b      	ldr	r0, [pc, #492]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 80012fa:	f004 f95f 	bl	80055bc <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001304:	f001 f856 	bl	80023b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a77      	ldr	r2, [pc, #476]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
 800130e:	4a76      	ldr	r2, [pc, #472]	; (80014e8 <HAL_ADC_MspInit+0x2dc>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001314:	e1e0      	b.n	80016d8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <HAL_ADC_MspInit+0x2e4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d16c      	bne.n	80013fa <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001326:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800132a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001330:	4618      	mov	r0, r3
 8001332:	f007 fac9 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 800133c:	f001 f83a 	bl	80023b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001340:	4b67      	ldr	r3, [pc, #412]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a66      	ldr	r2, [pc, #408]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 8001348:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800134a:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_ADC_MspInit+0x2d4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10b      	bne.n	800136a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001352:	4b64      	ldr	r3, [pc, #400]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a63      	ldr	r2, [pc, #396]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a5d      	ldr	r2, [pc, #372]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f004 fc4d 	bl	8005c3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013a4:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_ADC_MspInit+0x2ec>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c8:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013d0:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013d2:	2220      	movs	r2, #32
 80013d4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013dc:	4845      	ldr	r0, [pc, #276]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013de:	f004 f8ed 	bl	80055bc <HAL_DMA_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80013e8:	f000 ffe4 	bl	80023b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
 80013f2:	4a40      	ldr	r2, [pc, #256]	; (80014f4 <HAL_ADC_MspInit+0x2e8>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013f8:	e16e      	b.n	80016d8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <HAL_ADC_MspInit+0x2f0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	f040 8085 	bne.w	8001510 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800140c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001410:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fa56 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8001422:	f000 ffc7 	bl	80023b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_ADC_MspInit+0x2f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_ADC_MspInit+0x2f4>)
 800142e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_ADC_MspInit+0x2f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800143e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_ADC_MspInit+0x2d8>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001480:	4619      	mov	r1, r3
 8001482:	4820      	ldr	r0, [pc, #128]	; (8001504 <HAL_ADC_MspInit+0x2f8>)
 8001484:	f004 fbda 	bl	8005c3c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_ADC_MspInit+0x300>)
 800148c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 8001490:	2225      	movs	r2, #37	; 0x25
 8001492:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014b8:	2220      	movs	r2, #32
 80014ba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014c4:	f004 f87a 	bl	80055bc <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 80014ce:	f000 ff71 	bl	80023b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_ADC_MspInit+0x2fc>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6293      	str	r3, [r2, #40]	; 0x28
}
 80014de:	e0fb      	b.n	80016d8 <HAL_ADC_MspInit+0x4cc>
 80014e0:	20000460 	.word	0x20000460
 80014e4:	40021000 	.word	0x40021000
 80014e8:	20000280 	.word	0x20000280
 80014ec:	40020008 	.word	0x40020008
 80014f0:	50000100 	.word	0x50000100
 80014f4:	200002e0 	.word	0x200002e0
 80014f8:	4002001c 	.word	0x4002001c
 80014fc:	50000400 	.word	0x50000400
 8001500:	20000464 	.word	0x20000464
 8001504:	48000400 	.word	0x48000400
 8001508:	20000340 	.word	0x20000340
 800150c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a72      	ldr	r2, [pc, #456]	; (80016e0 <HAL_ADC_MspInit+0x4d4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d16c      	bne.n	80015f4 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f9cc 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001536:	f000 ff3d 	bl	80023b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800153a:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 8001542:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001544:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001558:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	4a5f      	ldr	r2, [pc, #380]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 800157c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001594:	4619      	mov	r1, r3
 8001596:	4855      	ldr	r0, [pc, #340]	; (80016ec <HAL_ADC_MspInit+0x4e0>)
 8001598:	f004 fb50 	bl	8005c3c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 800159e:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <HAL_ADC_MspInit+0x4e8>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80015a2:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015a4:	2226      	movs	r2, #38	; 0x26
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015cc:	2220      	movs	r2, #32
 80015ce:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80015d6:	4846      	ldr	r0, [pc, #280]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015d8:	f003 fff0 	bl	80055bc <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80015e2:	f000 fee7 	bl	80023b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
 80015ec:	4a40      	ldr	r2, [pc, #256]	; (80016f0 <HAL_ADC_MspInit+0x4e4>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80015f2:	e071      	b.n	80016d8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_ADC_MspInit+0x4ec>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d16c      	bne.n	80016d8 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001608:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160e:	4618      	mov	r0, r3
 8001610:	f007 f95a 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 800161a:	f000 fecb 	bl	80023b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 8001626:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_ADC_MspInit+0x4d8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_ADC_MspInit+0x4dc>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f004 fadd 	bl	8005c3c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 8001684:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_ADC_MspInit+0x4f4>)
 8001686:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 800168a:	2227      	movs	r2, #39	; 0x27
 800168c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ae:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016b2:	2220      	movs	r2, #32
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016be:	f003 ff7d 	bl	80055bc <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 80016c8:	f000 fe74 	bl	80023b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_ADC_MspInit+0x4f0>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	3798      	adds	r7, #152	; 0x98
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	50000500 	.word	0x50000500
 80016e4:	20000464 	.word	0x20000464
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	200003a0 	.word	0x200003a0
 80016f4:	40020044 	.word	0x40020044
 80016f8:	50000600 	.word	0x50000600
 80016fc:	20000400 	.word	0x20000400
 8001700:	40020058 	.word	0x40020058

08001704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_DMA_Init+0x60>)
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <MX_DMA_Init+0x60>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6493      	str	r3, [r2, #72]	; 0x48
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_DMA_Init+0x60>)
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_DMA_Init+0x60>)
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <MX_DMA_Init+0x60>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6493      	str	r3, [r2, #72]	; 0x48
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_DMA_Init+0x60>)
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2010      	movs	r0, #16
 8001740:	f003 ff07 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001744:	2010      	movs	r0, #16
 8001746:	f003 ff1e 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2011      	movs	r0, #17
 8001750:	f003 feff 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001754:	2011      	movs	r0, #17
 8001756:	f003 ff16 	bl	8005586 <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f007 fd9b 	bl	80092b0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 800177a:	2100      	movs	r1, #0
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f007 fd97 	bl	80092b0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start_IT(timer16);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f007 fb46 	bl	8008e14 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(timer17);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f007 fb43 	bl	8008e14 <HAL_TIM_Base_Start_IT>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <processarCaptura+0xb8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <processarCaptura+0x2c>
    {	overflow1 =0;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <processarCaptura+0xbc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
    	valorCaptura1 = htim->Instance->CCR1;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <processarCaptura+0xc0>)
 80017ba:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <processarCaptura+0xb8>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
        overflow1 =0;
    }
}
 80017c2:	e03e      	b.n	8001842 <processarCaptura+0xaa>
        valorCaptura2 = htim->Instance -> CCR1;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <processarCaptura+0xc4>)
 80017cc:	6013      	str	r3, [r2, #0]
        valorCaptura2 += contadorMaximo*overflow1;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <processarCaptura+0xc8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <processarCaptura+0xbc>)
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <processarCaptura+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <processarCaptura+0xc4>)
 80017e4:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <processarCaptura+0xc4>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <processarCaptura+0xc0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <processarCaptura+0xcc>)
 80017f2:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <processarCaptura+0xd0>)
 80017f6:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <processarCaptura+0xcc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001804:	edd7 6a05 	vldr	s13, [r7, #20]
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001820:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800186c <processarCaptura+0xd4>
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
        flagPrimeiraCaptura = 0;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <processarCaptura+0xb8>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
        overflow1 =0;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <processarCaptura+0xbc>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000047c 	.word	0x2000047c
 8001854:	20000488 	.word	0x20000488
 8001858:	20000468 	.word	0x20000468
 800185c:	2000046c 	.word	0x2000046c
 8001860:	20000000 	.word	0x20000000
 8001864:	20000478 	.word	0x20000478
 8001868:	47c35000 	.word	0x47c35000
 800186c:	41a347ae 	.word	0x41a347ae

08001870 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <processarCaptura2+0xb8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <processarCaptura2+0x2c>
    {	overflow2 =0;
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <processarCaptura2+0xbc>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    	valorCaptura3 = htim->Instance->CCR1;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <processarCaptura2+0xc0>)
 8001892:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <processarCaptura2+0xb8>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
        overflow2 =0;
    }
}
 800189a:	e03e      	b.n	800191a <processarCaptura2+0xaa>
        valorCaptura4 = htim->Instance -> CCR1;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <processarCaptura2+0xc4>)
 80018a4:	6013      	str	r3, [r2, #0]
        valorCaptura4 += contadorMaximo*overflow2;
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <processarCaptura2+0xc8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <processarCaptura2+0xbc>)
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <processarCaptura2+0xc4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <processarCaptura2+0xc4>)
 80018bc:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <processarCaptura2+0xc4>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <processarCaptura2+0xc0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <processarCaptura2+0xcc>)
 80018ca:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <processarCaptura2+0xd0>)
 80018ce:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <processarCaptura2+0xcc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018dc:	edd7 6a05 	vldr	s13, [r7, #20]
 80018e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	ed93 7a00 	vldr	s14, [r3]
 80018f0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001944 <processarCaptura2+0xd4>
 80018fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
        flagPrimeiraCaptura2 = 0;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <processarCaptura2+0xb8>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
        overflow2 =0;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <processarCaptura2+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000484 	.word	0x20000484
 800192c:	2000048c 	.word	0x2000048c
 8001930:	20000470 	.word	0x20000470
 8001934:	20000474 	.word	0x20000474
 8001938:	20000000 	.word	0x20000000
 800193c:	20000480 	.word	0x20000480
 8001940:	47c35000 	.word	0x47c35000
 8001944:	41a347ae 	.word	0x41a347ae

08001948 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_TIM_IC_CaptureCallback+0x34>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d104      	bne.n	8001962 <HAL_TIM_IC_CaptureCallback+0x1a>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_TIM_IC_CaptureCallback+0x38>)
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff1b 	bl	8001798 <processarCaptura>
    }
    if (htim == &htim17) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d104      	bne.n	8001974 <HAL_TIM_IC_CaptureCallback+0x2c>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_TIM_IC_CaptureCallback+0x44>)
 800196c:	4908      	ldr	r1, [pc, #32]	; (8001990 <HAL_TIM_IC_CaptureCallback+0x48>)
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff7e 	bl	8001870 <processarCaptura2>

    }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000974 	.word	0x20000974
 8001980:	20000498 	.word	0x20000498
 8001984:	20000490 	.word	0x20000490
 8001988:	200009c0 	.word	0x200009c0
 800198c:	2000049c 	.word	0x2000049c
 8001990:	20000494 	.word	0x20000494

08001994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a2e      	ldr	r2, [pc, #184]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <MX_GPIO_Init+0x104>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_GPIO_Init+0x104>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001a10:	4822      	ldr	r0, [pc, #136]	; (8001a9c <MX_GPIO_Init+0x108>)
 8001a12:	f004 fa95 	bl	8005f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f004 fa8e 	bl	8005f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <MX_GPIO_Init+0x10c>)
 8001a3c:	f004 f8fe 	bl	8005c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001a40:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4810      	ldr	r0, [pc, #64]	; (8001a9c <MX_GPIO_Init+0x108>)
 8001a5a:	f004 f8ef 	bl	8005c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 8001a5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f004 f8df 	bl	8005c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2028      	movs	r0, #40	; 0x28
 8001a84:	f003 fd65 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a88:	2028      	movs	r0, #40	; 0x28
 8001a8a:	f003 fd7c 	bl	8005586 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	48000800 	.word	0x48000800

08001aa4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <MX_I2C2_Init+0x78>)
 8001aac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <MX_I2C2_Init+0x7c>)
 8001ab2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ade:	480e      	ldr	r0, [pc, #56]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001ae0:	f004 fa69 	bl	8005fb6 <HAL_I2C_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001aea:	f000 fc63 	bl	80023b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4809      	ldr	r0, [pc, #36]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001af2:	f006 f86f 	bl	8007bd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001afc:	f000 fc5a 	bl	80023b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b00:	2100      	movs	r1, #0
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_I2C2_Init+0x74>)
 8001b04:	f006 f8b1 	bl	8007c6a <HAL_I2CEx_ConfigDigitalFilter>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b0e:	f000 fc51 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200004a0 	.word	0x200004a0
 8001b1c:	40005800 	.word	0x40005800
 8001b20:	40b285c2 	.word	0x40b285c2

08001b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0a0      	sub	sp, #128	; 0x80
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	2254      	movs	r2, #84	; 0x54
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00b f90f 	bl	800cd68 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_I2C_MspInit+0x1a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f040 80b6 	bne.w	8001cc2 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f006 feb0 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b6e:	f000 fc21 	bl	80023b4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4845      	ldr	r0, [pc, #276]	; (8001cd4 <HAL_I2C_MspInit+0x1b0>)
 8001bbe:	f004 f83d 	bl	8005c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f004 f82b 	bl	8005c3c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_I2C_MspInit+0x1ac>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c00:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_I2C_MspInit+0x1b8>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c06:	2212      	movs	r2, #18
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001c34:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c36:	f003 fcc1 	bl	80055bc <HAL_DMA_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001c40:	f000 fbb8 	bl	80023b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_I2C_MspInit+0x1b4>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_I2C_MspInit+0x1c0>)
 8001c54:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c58:	2213      	movs	r2, #19
 8001c5a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c5e:	2210      	movs	r2, #16
 8001c60:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c88:	f003 fc98 	bl	80055bc <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001c92:	f000 fb8f 	bl	80023b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c9c:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_I2C_MspInit+0x1bc>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2021      	movs	r0, #33	; 0x21
 8001ca8:	f003 fc53 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cac:	2021      	movs	r0, #33	; 0x21
 8001cae:	f003 fc6a 	bl	8005586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2022      	movs	r0, #34	; 0x22
 8001cb8:	f003 fc4b 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001cbc:	2022      	movs	r0, #34	; 0x22
 8001cbe:	f003 fc62 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3780      	adds	r7, #128	; 0x80
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40005800 	.word	0x40005800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	200004f4 	.word	0x200004f4
 8001cdc:	4002006c 	.word	0x4002006c
 8001ce0:	20000554 	.word	0x20000554
 8001ce4:	40020080 	.word	0x40020080

08001ce8 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	70fb      	strb	r3, [r7, #3]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70bb      	strb	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001d02:	2300      	movs	r3, #0
 8001d04:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <lcdInit+0x16c>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <lcdInit+0x16c>)
 8001d14:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001d16:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <lcdInit+0x16c>)
 8001d18:	78bb      	ldrb	r3, [r7, #2]
 8001d1a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <lcdInit+0x16c>)
 8001d1e:	787b      	ldrb	r3, [r7, #1]
 8001d20:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <lcdInit+0x16c>)
 8001d24:	2208      	movs	r2, #8
 8001d26:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <lcdInit+0x170>)
 8001d2a:	2234      	movs	r2, #52	; 0x34
 8001d2c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <lcdInit+0x170>)
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <lcdInit+0x170>)
 8001d34:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <lcdInit+0x170>)
 8001d38:	2230      	movs	r2, #48	; 0x30
 8001d3a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	737b      	strb	r3, [r7, #13]
 8001d40:	e02f      	b.n	8001da2 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001d42:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <lcdInit+0x16c>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <lcdInit+0x16c>)
 8001d48:	799b      	ldrb	r3, [r3, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	4a42      	ldr	r2, [pc, #264]	; (8001e58 <lcdInit+0x170>)
 8001d50:	f004 f9cc 	bl	80060ec <HAL_I2C_Master_Transmit_DMA>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <lcdInit+0x76>
            return -1;
 8001d5a:	23ff      	movs	r3, #255	; 0xff
 8001d5c:	e076      	b.n	8001e4c <lcdInit+0x164>
        }

        usCont = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001d62:	e009      	b.n	8001d78 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	81fa      	strh	r2, [r7, #14]
 8001d6a:	2bc8      	cmp	r3, #200	; 0xc8
 8001d6c:	d101      	bne.n	8001d72 <lcdInit+0x8a>
        		return -1;
 8001d6e:	23ff      	movs	r3, #255	; 0xff
 8001d70:	e06c      	b.n	8001e4c <lcdInit+0x164>
        	HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f001 fe78 	bl	8003a68 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <lcdInit+0x16c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fba6 	bl	80064ce <HAL_I2C_GetState>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d1ed      	bne.n	8001d64 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001d88:	7b7b      	ldrb	r3, [r7, #13]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f001 fe6a 	bl	8003a68 <HAL_Delay>
 8001d94:	e002      	b.n	8001d9c <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001d96:	2005      	movs	r0, #5
 8001d98:	f001 fe66 	bl	8003a68 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	737b      	strb	r3, [r7, #13]
 8001da2:	7b7b      	ldrb	r3, [r7, #13]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d9cc      	bls.n	8001d42 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <lcdInit+0x170>)
 8001daa:	222c      	movs	r2, #44	; 0x2c
 8001dac:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <lcdInit+0x170>)
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <lcdInit+0x170>)
 8001db4:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <lcdInit+0x170>)
 8001db8:	2228      	movs	r2, #40	; 0x28
 8001dba:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <lcdInit+0x16c>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <lcdInit+0x16c>)
 8001dc2:	799b      	ldrb	r3, [r3, #6]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <lcdInit+0x170>)
 8001dca:	f004 f98f 	bl	80060ec <HAL_I2C_Master_Transmit_DMA>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <lcdInit+0xf0>
        return -1;
 8001dd4:	23ff      	movs	r3, #255	; 0xff
 8001dd6:	e039      	b.n	8001e4c <lcdInit+0x164>
    }

    usCont = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001ddc:	e009      	b.n	8001df2 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	81fa      	strh	r2, [r7, #14]
 8001de4:	2bc8      	cmp	r3, #200	; 0xc8
 8001de6:	d101      	bne.n	8001dec <lcdInit+0x104>
    		return -1;
 8001de8:	23ff      	movs	r3, #255	; 0xff
 8001dea:	e02f      	b.n	8001e4c <lcdInit+0x164>
    	HAL_Delay(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f001 fe3b 	bl	8003a68 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <lcdInit+0x16c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fb69 	bl	80064ce <HAL_I2C_GetState>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d1ed      	bne.n	8001dde <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001e02:	7b3b      	ldrb	r3, [r7, #12]
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <lcdInit+0x16c>)
 8001e0e:	791b      	ldrb	r3, [r3, #4]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d904      	bls.n	8001e1e <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001e14:	7b3b      	ldrb	r3, [r7, #12]
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4619      	mov	r1, r3
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f8fd 	bl	8002024 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f000 f815 	bl	8001e5c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001e32:	2101      	movs	r1, #1
 8001e34:	2007      	movs	r0, #7
 8001e36:	f000 f811 	bl	8001e5c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f000 f80d 	bl	8001e5c <lcdCommand>
    lcdCursorHome();
 8001e42:	2101      	movs	r1, #1
 8001e44:	2005      	movs	r0, #5
 8001e46:	f000 f809 	bl	8001e5c <lcdCommand>

    return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200005bc 	.word	0x200005bc
 8001e58:	200005b4 	.word	0x200005b4

08001e5c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	460a      	mov	r2, r1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d064      	beq.n	8001f40 <lcdCommand+0xe4>
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 80aa 	bne.w	8001fd0 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b07      	cmp	r3, #7
 8001e82:	d85a      	bhi.n	8001f3a <lcdCommand+0xde>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <lcdCommand+0x30>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001ead 	.word	0x08001ead
 8001e90:	08001edd 	.word	0x08001edd
 8001e94:	08001ebd 	.word	0x08001ebd
 8001e98:	08001ecd 	.word	0x08001ecd
 8001e9c:	08001ef7 	.word	0x08001ef7
 8001ea0:	08001f21 	.word	0x08001f21
 8001ea4:	08001f11 	.word	0x08001f11
 8001ea8:	08001f2b 	.word	0x08001f2b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001eac:	4b5c      	ldr	r3, [pc, #368]	; (8002020 <lcdCommand+0x1c4>)
 8001eae:	7a1b      	ldrb	r3, [r3, #8]
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <lcdCommand+0x1c4>)
 8001eb8:	721a      	strb	r2, [r3, #8]
                    break;
 8001eba:	e040      	b.n	8001f3e <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <lcdCommand+0x1c4>)
 8001ebe:	7a1b      	ldrb	r3, [r3, #8]
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <lcdCommand+0x1c4>)
 8001ec8:	721a      	strb	r2, [r3, #8]
                    break;
 8001eca:	e038      	b.n	8001f3e <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001ecc:	4b54      	ldr	r3, [pc, #336]	; (8002020 <lcdCommand+0x1c4>)
 8001ece:	7a1b      	ldrb	r3, [r3, #8]
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b52      	ldr	r3, [pc, #328]	; (8002020 <lcdCommand+0x1c4>)
 8001ed8:	721a      	strb	r2, [r3, #8]
                    break;
 8001eda:	e030      	b.n	8001f3e <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001ee0:	f107 030f 	add.w	r3, r7, #15
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f89c 	bl	8002024 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001eec:	2002      	movs	r0, #2
 8001eee:	f001 fdbb 	bl	8003a68 <HAL_Delay>
                        return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e090      	b.n	8002018 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001efa:	f107 030f 	add.w	r3, r7, #15
 8001efe:	4619      	mov	r1, r3
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f88f 	bl	8002024 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f001 fdae 	bl	8003a68 <HAL_Delay>
                        return 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e083      	b.n	8002018 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <lcdCommand+0x1c4>)
 8001f12:	7a5b      	ldrb	r3, [r3, #9]
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <lcdCommand+0x1c4>)
 8001f1c:	725a      	strb	r2, [r3, #9]
                    break;
 8001f1e:	e00e      	b.n	8001f3e <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <lcdCommand+0x1c4>)
 8001f22:	7a5a      	ldrb	r2, [r3, #9]
 8001f24:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <lcdCommand+0x1c4>)
 8001f26:	725a      	strb	r2, [r3, #9]
                    break;
 8001f28:	e009      	b.n	8001f3e <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <lcdCommand+0x1c4>)
 8001f2c:	7a5b      	ldrb	r3, [r3, #9]
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <lcdCommand+0x1c4>)
 8001f36:	725a      	strb	r2, [r3, #9]
                    break;
 8001f38:	e001      	b.n	8001f3e <lcdCommand+0xe2>

                default:
                    return -1;
 8001f3a:	23ff      	movs	r3, #255	; 0xff
 8001f3c:	e06c      	b.n	8002018 <lcdCommand+0x1bc>
            }

            break;
 8001f3e:	e049      	b.n	8001fd4 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d840      	bhi.n	8001fca <lcdCommand+0x16e>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <lcdCommand+0xf4>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f71 	.word	0x08001f71
 8001f54:	08001fcb 	.word	0x08001fcb
 8001f58:	08001f81 	.word	0x08001f81
 8001f5c:	08001f91 	.word	0x08001f91
 8001f60:	08001fcb 	.word	0x08001fcb
 8001f64:	08001fb1 	.word	0x08001fb1
 8001f68:	08001fa1 	.word	0x08001fa1
 8001f6c:	08001fbb 	.word	0x08001fbb
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <lcdCommand+0x1c4>)
 8001f72:	7a1b      	ldrb	r3, [r3, #8]
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <lcdCommand+0x1c4>)
 8001f7c:	721a      	strb	r2, [r3, #8]
                    break;
 8001f7e:	e026      	b.n	8001fce <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <lcdCommand+0x1c4>)
 8001f82:	7a1b      	ldrb	r3, [r3, #8]
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <lcdCommand+0x1c4>)
 8001f8c:	721a      	strb	r2, [r3, #8]
                    break;
 8001f8e:	e01e      	b.n	8001fce <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <lcdCommand+0x1c4>)
 8001f92:	7a1b      	ldrb	r3, [r3, #8]
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <lcdCommand+0x1c4>)
 8001f9c:	721a      	strb	r2, [r3, #8]
                    break;
 8001f9e:	e016      	b.n	8001fce <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <lcdCommand+0x1c4>)
 8001fa2:	7a5b      	ldrb	r3, [r3, #9]
 8001fa4:	f023 0302 	bic.w	r3, r3, #2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <lcdCommand+0x1c4>)
 8001fac:	725a      	strb	r2, [r3, #9]
                    break;
 8001fae:	e00e      	b.n	8001fce <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <lcdCommand+0x1c4>)
 8001fb2:	7a5a      	ldrb	r2, [r3, #9]
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <lcdCommand+0x1c4>)
 8001fb6:	725a      	strb	r2, [r3, #9]
                    break;
 8001fb8:	e009      	b.n	8001fce <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <lcdCommand+0x1c4>)
 8001fbc:	7a5b      	ldrb	r3, [r3, #9]
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <lcdCommand+0x1c4>)
 8001fc6:	725a      	strb	r2, [r3, #9]
                    break;
 8001fc8:	e001      	b.n	8001fce <lcdCommand+0x172>

                default:
                    return -1;
 8001fca:	23ff      	movs	r3, #255	; 0xff
 8001fcc:	e024      	b.n	8002018 <lcdCommand+0x1bc>
            }

            break;
 8001fce:	e001      	b.n	8001fd4 <lcdCommand+0x178>

        default:
            return -1;
 8001fd0:	23ff      	movs	r3, #255	; 0xff
 8001fd2:	e021      	b.n	8002018 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	dc16      	bgt.n	8002008 <lcdCommand+0x1ac>
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	da0d      	bge.n	8001ffa <lcdCommand+0x19e>
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d004      	beq.n	8001fec <lcdCommand+0x190>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	dd10      	ble.n	8002008 <lcdCommand+0x1ac>
 8001fe6:	3b03      	subs	r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d80d      	bhi.n	8002008 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <lcdCommand+0x1c4>)
 8001fee:	7a1b      	ldrb	r3, [r3, #8]
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	73fb      	strb	r3, [r7, #15]
            break;
 8001ff8:	e007      	b.n	800200a <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <lcdCommand+0x1c4>)
 8001ffc:	7a5b      	ldrb	r3, [r3, #9]
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	b2db      	uxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
            break;
 8002006:	e000      	b.n	800200a <lcdCommand+0x1ae>

        default:
            break;
 8002008:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800200a:	f107 030f 	add.w	r3, r7, #15
 800200e:	4619      	mov	r1, r3
 8002010:	2000      	movs	r0, #0
 8002012:	f000 f807 	bl	8002024 <lcdWriteByte>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200005bc 	.word	0x200005bc

08002024 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <lcdWriteByte+0xf0>)
 8002032:	79da      	ldrb	r2, [r3, #7]
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	4313      	orrs	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f023 030f 	bic.w	r3, r3, #15
 8002042:	b2db      	uxtb	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <lcdWriteByte+0xf4>)
 8002050:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <lcdWriteByte+0xf4>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <lcdWriteByte+0xf4>)
 8002058:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800205a:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <lcdWriteByte+0xf0>)
 800205c:	79da      	ldrb	r2, [r3, #7]
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4313      	orrs	r3, r2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	b25a      	sxtb	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b25b      	sxtb	r3, r3
 800206c:	f023 030f 	bic.w	r3, r3, #15
 8002070:	b25b      	sxtb	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b25b      	sxtb	r3, r3
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <lcdWriteByte+0xf4>)
 800207a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <lcdWriteByte+0xf0>)
 800207e:	79da      	ldrb	r2, [r3, #7]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	4313      	orrs	r3, r2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <lcdWriteByte+0xf4>)
 800209a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <lcdWriteByte+0xf4>)
 800209e:	78da      	ldrb	r2, [r3, #3]
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <lcdWriteByte+0xf4>)
 80020a2:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <lcdWriteByte+0xf0>)
 80020a6:	79da      	ldrb	r2, [r3, #7]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	b25a      	sxtb	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <lcdWriteByte+0xf4>)
 80020c0:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <lcdWriteByte+0xf0>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <lcdWriteByte+0xf0>)
 80020c8:	799b      	ldrb	r3, [r3, #6]
 80020ca:	b299      	uxth	r1, r3
 80020cc:	2306      	movs	r3, #6
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <lcdWriteByte+0xf4>)
 80020d0:	f004 f80c 	bl	80060ec <HAL_I2C_Master_Transmit_DMA>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <lcdWriteByte+0xba>
        return -1;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	e015      	b.n	800210a <lcdWriteByte+0xe6>
    }

    usCont = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80020e2:	e009      	b.n	80020f8 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80020e4:	89fb      	ldrh	r3, [r7, #14]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	81fa      	strh	r2, [r7, #14]
 80020ea:	2bc8      	cmp	r3, #200	; 0xc8
 80020ec:	d101      	bne.n	80020f2 <lcdWriteByte+0xce>
    		return -1;
 80020ee:	23ff      	movs	r3, #255	; 0xff
 80020f0:	e00b      	b.n	800210a <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f001 fcb8 	bl	8003a68 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <lcdWriteByte+0xf0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 f9e6 	bl	80064ce <HAL_I2C_GetState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b20      	cmp	r3, #32
 8002106:	d1ed      	bne.n	80020e4 <lcdWriteByte+0xc0>
    }

    return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200005bc 	.word	0x200005bc
 8002118:	200005b4 	.word	0x200005b4

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f001 fc31 	bl	8003986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f884 	bl	8002230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff fc34 	bl	8001994 <MX_GPIO_Init>
  MX_DMA_Init();
 800212c:	f7ff faea 	bl	8001704 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002130:	f001 faca 	bl	80036c8 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8002134:	f000 ff02 	bl	8002f3c <MX_TIM1_Init>
  MX_I2C2_Init();
 8002138:	f7ff fcb4 	bl	8001aa4 <MX_I2C2_Init>
  MX_ADC3_Init();
 800213c:	f7fe fefe 	bl	8000f3c <MX_ADC3_Init>
  MX_ADC1_Init();
 8002140:	f7fe fe06 	bl	8000d50 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002144:	f7fe fe88 	bl	8000e58 <MX_ADC2_Init>
  MX_ADC4_Init();
 8002148:	f7fe ff7c 	bl	8001044 <MX_ADC4_Init>
  MX_ADC5_Init();
 800214c:	f7fe ffec 	bl	8001128 <MX_ADC5_Init>
  MX_TIM16_Init();
 8002150:	f001 f8d4 	bl	80032fc <MX_TIM16_Init>
  MX_TIM17_Init();
 8002154:	f001 f91e 	bl	8003394 <MX_TIM17_Init>
  MX_TIM6_Init();
 8002158:	f001 f848 	bl	80031ec <MX_TIM6_Init>
  MX_TIM15_Init();
 800215c:	f001 f87c 	bl	8003258 <MX_TIM15_Init>
  MX_TIM2_Init();
 8002160:	f000 ffa8 	bl	80030b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002164:	f000 fff4 	bl	8003150 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002168:	f001 faf8 	bl	800375c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 800216c:	481f      	ldr	r0, [pc, #124]	; (80021ec <main+0xd0>)
 800216e:	f000 f927 	bl	80023c0 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8002172:	491f      	ldr	r1, [pc, #124]	; (80021f0 <main+0xd4>)
 8002174:	481f      	ldr	r0, [pc, #124]	; (80021f4 <main+0xd8>)
 8002176:	f7ff faf7 	bl	8001768 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 800217a:	481f      	ldr	r0, [pc, #124]	; (80021f8 <main+0xdc>)
 800217c:	f000 fbde 	bl	800293c <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8002180:	481e      	ldr	r0, [pc, #120]	; (80021fc <main+0xe0>)
 8002182:	f000 fbf7 	bl	8002974 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <main+0xe4>)
 8002188:	f000 fc10 	bl	80029ac <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 800218c:	481d      	ldr	r0, [pc, #116]	; (8002204 <main+0xe8>)
 800218e:	f000 fc29 	bl	80029e4 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8002192:	481d      	ldr	r0, [pc, #116]	; (8002208 <main+0xec>)
 8002194:	f000 fc42 	bl	8002a1c <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8002198:	2310      	movs	r3, #16
 800219a:	2202      	movs	r2, #2
 800219c:	2127      	movs	r1, #39	; 0x27
 800219e:	481b      	ldr	r0, [pc, #108]	; (800220c <main+0xf0>)
 80021a0:	f7ff fda2 	bl	8001ce8 <lcdInit>
  HAL_TIM_Base_Start_IT(&htim15);
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <main+0xf4>)
 80021a6:	f006 fe35 	bl	8008e14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80021aa:	481a      	ldr	r0, [pc, #104]	; (8002214 <main+0xf8>)
 80021ac:	f006 fe32 	bl	8008e14 <HAL_TIM_Base_Start_IT>
  vPidInit(3.2, 0.22, 0, 1000, 100);
 80021b0:	eddf 1a19 	vldr	s3, [pc, #100]	; 8002218 <main+0xfc>
 80021b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b8:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800221c <main+0x100>
 80021bc:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002220 <main+0x104>
 80021c0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002224 <main+0x108>
 80021c4:	f000 f98a 	bl	80024dc <vPidInit>
  vPidInit2(3.5, 0.5, 0, 1000, 100);
 80021c8:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002218 <main+0xfc>
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800221c <main+0x100>
 80021d4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80021d8:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 80021dc:	f000 fa72 	bl	80026c4 <vPidInit2>

  //Bluetooth
  HAL_UART_Receive_IT(&huart3,&rxData,1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4911      	ldr	r1, [pc, #68]	; (8002228 <main+0x10c>)
 80021e4:	4811      	ldr	r0, [pc, #68]	; (800222c <main+0x110>)
 80021e6:	f008 fd71 	bl	800accc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	//vPrintMotorSpeed(0, 0);
    while (1)
 80021ea:	e7fe      	b.n	80021ea <main+0xce>
 80021ec:	200007f8 	.word	0x200007f8
 80021f0:	200009c0 	.word	0x200009c0
 80021f4:	20000974 	.word	0x20000974
 80021f8:	20000064 	.word	0x20000064
 80021fc:	200000d0 	.word	0x200000d0
 8002200:	2000013c 	.word	0x2000013c
 8002204:	200001a8 	.word	0x200001a8
 8002208:	20000214 	.word	0x20000214
 800220c:	200004a0 	.word	0x200004a0
 8002210:	20000928 	.word	0x20000928
 8002214:	20000890 	.word	0x20000890
 8002218:	42c80000 	.word	0x42c80000
 800221c:	00000000 	.word	0x00000000
 8002220:	3e6147ae 	.word	0x3e6147ae
 8002224:	404ccccd 	.word	0x404ccccd
 8002228:	200005c8 	.word	0x200005c8
 800222c:	20000aa0 	.word	0x20000aa0

08002230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b094      	sub	sp, #80	; 0x50
 8002234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	2238      	movs	r2, #56	; 0x38
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f00a fd92 	bl	800cd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002252:	2000      	movs	r0, #0
 8002254:	f005 fd56 	bl	8007d04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002266:	2302      	movs	r3, #2
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800226e:	2304      	movs	r3, #4
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002272:	2355      	movs	r3, #85	; 0x55
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800227a:	2302      	movs	r3, #2
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fdf0 	bl	8007e6c <HAL_RCC_OscConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002292:	f000 f88f 	bl	80023b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002296:	230f      	movs	r3, #15
 8002298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229a:	2303      	movs	r3, #3
 800229c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2104      	movs	r1, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f006 f8ee 	bl	8008490 <HAL_RCC_ClockConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022ba:	f000 f87b 	bl	80023b4 <Error_Handler>
  }
}
 80022be:	bf00      	nop
 80022c0:	3750      	adds	r7, #80	; 0x50
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 80022d8:	f000 fc60 	bl	8002b9c <vLineSensorPIDControl>
	}
	if (htim == &htim3){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0x20>
		ajustaVelocidadeRodas();
 80022e4:	f000 fae2 	bl	80028ac <ajustaVelocidadeRodas>
		}
	if (htim == &htim16){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10c      	bne.n	800230a <HAL_TIM_PeriodElapsedCallback+0x42>
		overflow1 +=1;
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022f8:	6013      	str	r3, [r2, #0]
		if(overflow1 > 5){
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	dd03      	ble.n	800230a <HAL_TIM_PeriodElapsedCallback+0x42>
			velocidadeRodaEsquerda = 0;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
		}
		}
	if (htim == &htim17){
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10c      	bne.n	800232c <HAL_TIM_PeriodElapsedCallback+0x64>
		overflow2 +=1;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800231a:	6013      	str	r3, [r2, #0]
		if(overflow2 > 5){
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b05      	cmp	r3, #5
 8002322:	dd03      	ble.n	800232c <HAL_TIM_PeriodElapsedCallback+0x64>
			velocidadeRodaDireita = 0;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
		}
		}

}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000928 	.word	0x20000928
 8002338:	20000890 	.word	0x20000890
 800233c:	20000974 	.word	0x20000974
 8002340:	20000488 	.word	0x20000488
 8002344:	20000498 	.word	0x20000498
 8002348:	200009c0 	.word	0x200009c0
 800234c:	2000048c 	.word	0x2000048c
 8002350:	2000049c 	.word	0x2000049c

08002354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_UART_RxCpltCallback+0x54>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d11b      	bne.n	800239e <HAL_UART_RxCpltCallback+0x4a>
  {
    if(rxData=='1') // Acende LED caso envie o sinal
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_UART_RxCpltCallback+0x58>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b31      	cmp	r3, #49	; 0x31
 800236c:	d107      	bne.n	800237e <HAL_UART_RxCpltCallback+0x2a>
    {
    	HAL_GPIO_WritePin(LED_G_PWM_GPIO_Port, LED_G_PWM_Pin, 1);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f003 fde2 	bl	8005f40 <HAL_GPIO_WritePin>
 800237c:	e00a      	b.n	8002394 <HAL_UART_RxCpltCallback+0x40>
    }
    else if (rxData=='2') // Apaga LED caso envie o sinal
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_UART_RxCpltCallback+0x58>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b32      	cmp	r3, #50	; 0x32
 8002384:	d106      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x40>
    {
    	HAL_GPIO_WritePin(LED_G_PWM_GPIO_Port, LED_G_PWM_Pin, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f003 fdd6 	bl	8005f40 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart3,&rxData,1);
 8002394:	2201      	movs	r2, #1
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <HAL_UART_RxCpltCallback+0x58>)
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_UART_RxCpltCallback+0x5c>)
 800239a:	f008 fc97 	bl	800accc <HAL_UART_Receive_IT>
  }
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40004800 	.word	0x40004800
 80023ac:	200005c8 	.word	0x200005c8
 80023b0:	20000aa0 	.word	0x20000aa0

080023b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
}
 80023ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023bc:	e7fe      	b.n	80023bc <Error_Handler+0x8>
	...

080023c0 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80023c8:	4a15      	ldr	r2, [pc, #84]	; (8002420 <vMotorInit+0x60>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <vMotorInit+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f006 fdf7 	bl	8008fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <vMotorInit+0x60>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2104      	movs	r1, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f006 fdf1 	bl	8008fc8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <vMotorInit+0x64>)
 80023ee:	f003 fda7 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 80023f2:	2201      	movs	r2, #1
 80023f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f8:	480a      	ldr	r0, [pc, #40]	; (8002424 <vMotorInit+0x64>)
 80023fa:	f003 fda1 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	4808      	ldr	r0, [pc, #32]	; (8002424 <vMotorInit+0x64>)
 8002404:	f003 fd9c 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f003 fd95 	bl	8005f40 <HAL_GPIO_WritePin>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200005cc 	.word	0x200005cc
 8002424:	48000400 	.word	0x48000400

08002428 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002432:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8002436:	edd7 7a01 	vldr	s15, [r7, #4]
 800243a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80024d4 <vSetRodasDC+0xac>
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <vSetRodasDC+0xb0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002454:	ee17 2a90 	vmov	r2, s15
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80024d4 <vSetRodasDC+0xac>
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800246a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <vSetRodasDC+0xb0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 2a90 	vmov	r2, s15
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 800247e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002482:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024d4 <vSetRodasDC+0xac>
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800248e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <vSetRodasDC+0xb0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249c:	ee17 2a90 	vmov	r2, s15
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 80024a2:	edd7 7a00 	vldr	s15, [r7]
 80024a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80024d4 <vSetRodasDC+0xac>
 80024aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <vSetRodasDC+0xb0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c0:	ee17 2a90 	vmov	r2, s15
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	447a0000 	.word	0x447a0000
 80024d8:	200005cc 	.word	0x200005cc

080024dc <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
void vPidInit(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80024e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80024ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80024ee:	4603      	mov	r3, r0
 80024f0:	edc7 1a01 	vstr	s3, [r7, #4]
 80024f4:	817b      	strh	r3, [r7, #10]
	xPidConfig.fKp = fKp;
 80024f6:	4a15      	ldr	r2, [pc, #84]	; (800254c <vPidInit+0x70>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6013      	str	r3, [r2, #0]
	xPidConfig.fKd = fKd;
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <vPidInit+0x70>)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6093      	str	r3, [r2, #8]
	xPidConfig.fKi = fKi;
 8002502:	4a12      	ldr	r2, [pc, #72]	; (800254c <vPidInit+0x70>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6053      	str	r3, [r2, #4]
	xPidConfig.fError_previous = 0;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <vPidInit+0x70>)
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
	xPidConfig.fError_sum = 0.0;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <vPidInit+0x70>)
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002518:	897b      	ldrh	r3, [r7, #10]
 800251a:	f242 7273 	movw	r2, #10099	; 0x2773
 800251e:	4293      	cmp	r3, r2
 8002520:	d902      	bls.n	8002528 <vPidInit+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8002522:	f242 7310 	movw	r3, #10000	; 0x2710
 8002526:	817b      	strh	r3, [r7, #10]

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002528:	897b      	ldrh	r3, [r7, #10]
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <vPidInit+0x74>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <vPidInit+0x70>)
 8002536:	829a      	strh	r2, [r3, #20]

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <vPidInit+0x70>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6193      	str	r3, [r2, #24]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	200005d0 	.word	0x200005d0
 8002550:	51eb851f 	.word	0x51eb851f
 8002554:	00000000 	.word	0x00000000

08002558 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002562:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 8002566:	ed97 7a00 	vldr	s14, [r7]
 800256a:	edd7 7a01 	vldr	s15, [r7, #4]
 800256e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002572:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <fPidUpdateData+0x160>)
 8002578:	ed93 7a04 	vldr	s14, [r3, #16]
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <fPidUpdateData+0x164>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4a4f      	ldr	r2, [pc, #316]	; (80026c0 <fPidUpdateData+0x168>)
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002596:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <fPidUpdateData+0x160>)
 8002598:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <fPidUpdateData+0x164>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <fPidUpdateData+0x168>)
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig.usIntegratorSize)
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <fPidUpdateData+0x164>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	4b42      	ldr	r3, [pc, #264]	; (80026bc <fPidUpdateData+0x164>)
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <fPidUpdateData+0x164>)
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <fPidUpdateData+0x160>)
 80025bc:	8a9b      	ldrh	r3, [r3, #20]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <fPidUpdateData+0x70>
		usIntegratorCount = 0;
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <fPidUpdateData+0x164>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig.fError_previous);
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <fPidUpdateData+0x160>)
 80025ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80025ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig.fKp * fError
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <fPidUpdateData+0x160>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e8:	ee17 0a90 	vmov	r0, s15
 80025ec:	f7fd ff78 	bl	80004e0 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <fPidUpdateData+0x160>)
 80025f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <fPidUpdateData+0x160>)
 80025fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	ee17 0a90 	vmov	r0, s15
 8002608:	f7fd ff6a 	bl	80004e0 <__aeabi_f2d>
 800260c:	a328      	add	r3, pc, #160	; (adr r3, 80026b0 <fPidUpdateData+0x158>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fd ffbd 	bl	8000590 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fe01 	bl	8000224 <__adddf3>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4614      	mov	r4, r2
 8002628:	461d      	mov	r5, r3
		 + xPidConfig.fKd * fDifference / UPDATE_RATE;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <fPidUpdateData+0x160>)
 800262c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002630:	edd7 7a03 	vldr	s15, [r7, #12]
 8002634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002638:	ee17 0a90 	vmov	r0, s15
 800263c:	f7fd ff50 	bl	80004e0 <__aeabi_f2d>
 8002640:	a31b      	add	r3, pc, #108	; (adr r3, 80026b0 <fPidUpdateData+0x158>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fe f8cd 	bl	80007e4 <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fd fde7 	bl	8000224 <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
	fOut = xPidConfig.fKp * fError
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe f9a9 	bl	80009b4 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	617b      	str	r3, [r7, #20]

	xPidConfig.fError_previous = fError;
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <fPidUpdateData+0x160>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig.fOutputSaturation)
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <fPidUpdateData+0x160>)
 800266e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002672:	ed97 7a05 	vldr	s14, [r7, #20]
 8002676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd03      	ble.n	8002688 <fPidUpdateData+0x130>
		fOut = xPidConfig.fOutputSaturation;
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <fPidUpdateData+0x160>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e009      	b.n	800269c <fPidUpdateData+0x144>
	else 
		if (fOut < 0)
 8002688:	edd7 7a05 	vldr	s15, [r7, #20]
 800268c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d502      	bpl.n	800269c <fPidUpdateData+0x144>
			fOut = 0;
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

	return fOut;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	ee07 3a90 	vmov	s15, r3
}
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	f3af 8000 	nop.w
 80026b0:	9999999a 	.word	0x9999999a
 80026b4:	3fb99999 	.word	0x3fb99999
 80026b8:	200005d0 	.word	0x200005d0
 80026bc:	20000608 	.word	0x20000608
 80026c0:	2000060c 	.word	0x2000060c

080026c4 <vPidInit2>:
void vPidInit2(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80026ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80026d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80026d6:	4603      	mov	r3, r0
 80026d8:	edc7 1a01 	vstr	s3, [r7, #4]
 80026dc:	817b      	strh	r3, [r7, #10]
	xPidConfig1.fKp = fKp;
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <vPidInit2+0x70>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	6013      	str	r3, [r2, #0]
	xPidConfig1.fKd = fKd;
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <vPidInit2+0x70>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6093      	str	r3, [r2, #8]
	xPidConfig1.fKi = fKi;
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <vPidInit2+0x70>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6053      	str	r3, [r2, #4]
	xPidConfig1.fError_previous = 0;
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <vPidInit2+0x70>)
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
	xPidConfig1.fError_sum = 0.0;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <vPidInit2+0x70>)
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	f242 7273 	movw	r2, #10099	; 0x2773
 8002706:	4293      	cmp	r3, r2
 8002708:	d902      	bls.n	8002710 <vPidInit2+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 800270a:	f242 7310 	movw	r3, #10000	; 0x2710
 800270e:	817b      	strh	r3, [r7, #10]

	xPidConfig1.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <vPidInit2+0x74>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <vPidInit2+0x70>)
 800271e:	829a      	strh	r2, [r3, #20]

	xPidConfig1.fOutputSaturation = fOutputSaturation;
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <vPidInit2+0x70>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6193      	str	r3, [r2, #24]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200005ec 	.word	0x200005ec
 8002738:	51eb851f 	.word	0x51eb851f
 800273c:	00000000 	.word	0x00000000

08002740 <fPidUpdateData2>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData2(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	ed87 0a01 	vstr	s0, [r7, #4]
 800274a:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 800274e:	ed97 7a00 	vldr	s14, [r7]
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig1.fError_sum = xPidConfig1.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 800275e:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <fPidUpdateData2+0x160>)
 8002760:	ed93 7a04 	vldr	s14, [r3, #16]
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <fPidUpdateData2+0x164>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <fPidUpdateData2+0x168>)
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <fPidUpdateData2+0x160>)
 8002780:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <fPidUpdateData2+0x164>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <fPidUpdateData2+0x168>)
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig1.usIntegratorSize)
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <fPidUpdateData2+0x164>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <fPidUpdateData2+0x164>)
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <fPidUpdateData2+0x164>)
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <fPidUpdateData2+0x160>)
 80027a4:	8a9b      	ldrh	r3, [r3, #20]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <fPidUpdateData2+0x70>
		usIntegratorCount = 0;
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <fPidUpdateData2+0x164>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig1.fError_previous);
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <fPidUpdateData2+0x160>)
 80027b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig1.fKp * fError
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <fPidUpdateData2+0x160>)
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	ee17 0a90 	vmov	r0, s15
 80027d4:	f7fd fe84 	bl	80004e0 <__aeabi_f2d>
 80027d8:	4604      	mov	r4, r0
 80027da:	460d      	mov	r5, r1
		 + xPidConfig1.fKi * xPidConfig1.fError_sum * UPDATE_RATE
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <fPidUpdateData2+0x160>)
 80027de:	ed93 7a01 	vldr	s14, [r3, #4]
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <fPidUpdateData2+0x160>)
 80027e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	ee17 0a90 	vmov	r0, s15
 80027f0:	f7fd fe76 	bl	80004e0 <__aeabi_f2d>
 80027f4:	a328      	add	r3, pc, #160	; (adr r3, 8002898 <fPidUpdateData2+0x158>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fec9 	bl	8000590 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fd0d 	bl	8000224 <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	461d      	mov	r5, r3
		 + xPidConfig1.fKd * fDifference / UPDATE_RATE;
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <fPidUpdateData2+0x160>)
 8002814:	ed93 7a02 	vldr	s14, [r3, #8]
 8002818:	edd7 7a03 	vldr	s15, [r7, #12]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	ee17 0a90 	vmov	r0, s15
 8002824:	f7fd fe5c 	bl	80004e0 <__aeabi_f2d>
 8002828:	a31b      	add	r3, pc, #108	; (adr r3, 8002898 <fPidUpdateData2+0x158>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd ffd9 	bl	80007e4 <__aeabi_ddiv>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fcf3 	bl	8000224 <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
	fOut = xPidConfig1.fKp * fError
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f8b5 	bl	80009b4 <__aeabi_d2f>
 800284a:	4603      	mov	r3, r0
 800284c:	617b      	str	r3, [r7, #20]

	xPidConfig1.fError_previous = fError;
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <fPidUpdateData2+0x160>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig1.fOutputSaturation)
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <fPidUpdateData2+0x160>)
 8002856:	edd3 7a06 	vldr	s15, [r3, #24]
 800285a:	ed97 7a05 	vldr	s14, [r7, #20]
 800285e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	dd03      	ble.n	8002870 <fPidUpdateData2+0x130>
		fOut = xPidConfig1.fOutputSaturation;
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <fPidUpdateData2+0x160>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e009      	b.n	8002884 <fPidUpdateData2+0x144>
	else
		if (fOut < 0)
 8002870:	edd7 7a05 	vldr	s15, [r7, #20]
 8002874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d502      	bpl.n	8002884 <fPidUpdateData2+0x144>
			fOut = 0;
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

	return fOut;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	ee07 3a90 	vmov	s15, r3
}
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bdb0      	pop	{r4, r5, r7, pc}
 8002894:	f3af 8000 	nop.w
 8002898:	9999999a 	.word	0x9999999a
 800289c:	3fb99999 	.word	0x3fb99999
 80028a0:	200005ec 	.word	0x200005ec
 80028a4:	20000608 	.word	0x20000608
 80028a8:	2000060c 	.word	0x2000060c

080028ac <ajustaVelocidadeRodas>:
void ajustaVelocidadeRodas(){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	EsforcoD = fPidUpdateData(velocidadeRodaDireita,velocidadeDireita)/100;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <ajustaVelocidadeRodas+0x74>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <ajustaVelocidadeRodas+0x78>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	eef0 0a47 	vmov.f32	s1, s14
 80028c0:	eeb0 0a67 	vmov.f32	s0, s15
 80028c4:	f7ff fe48 	bl	8002558 <fPidUpdateData>
 80028c8:	eeb0 7a40 	vmov.f32	s14, s0
 80028cc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002928 <ajustaVelocidadeRodas+0x7c>
 80028d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <ajustaVelocidadeRodas+0x80>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
	EsforcoE = fPidUpdateData2(velocidadeRodaEsquerda,velocidadeEsquerda)/100;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <ajustaVelocidadeRodas+0x84>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <ajustaVelocidadeRodas+0x88>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	eef0 0a47 	vmov.f32	s1, s14
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	f7ff ff27 	bl	8002740 <fPidUpdateData2>
 80028f2:	eeb0 7a40 	vmov.f32	s14, s0
 80028f6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002928 <ajustaVelocidadeRodas+0x7c>
 80028fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <ajustaVelocidadeRodas+0x8c>)
 8002900:	edc3 7a00 	vstr	s15, [r3]
	//	EsforcoD = 0.4;
	//}
	//if(EsforcoE < 0.4) {
	//		EsforcoE = 0.4;
	//	}
	vSetRodasDC(EsforcoE, EsforcoD);
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <ajustaVelocidadeRodas+0x8c>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <ajustaVelocidadeRodas+0x80>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	eef0 0a47 	vmov.f32	s1, s14
 8002914:	eeb0 0a67 	vmov.f32	s0, s15
 8002918:	f7ff fd86 	bl	8002428 <vSetRodasDC>


}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	2000049c 	.word	0x2000049c
 8002924:	200007d8 	.word	0x200007d8
 8002928:	42c80000 	.word	0x42c80000
 800292c:	200007a0 	.word	0x200007a0
 8002930:	20000498 	.word	0x20000498
 8002934:	200007d4 	.word	0x200007d4
 8002938:	2000079c 	.word	0x2000079c

0800293c <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8002944:	4a09      	ldr	r2, [pc, #36]	; (800296c <vLineSensor1Init+0x30>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <vLineSensor1Init+0x30>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	217f      	movs	r1, #127	; 0x7f
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fbb9 	bl	80050c8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <vLineSensor1Init+0x30>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	4904      	ldr	r1, [pc, #16]	; (8002970 <vLineSensor1Init+0x34>)
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fca4 	bl	80042ac <HAL_ADC_Start_DMA>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200007a4 	.word	0x200007a4
 8002970:	200007b8 	.word	0x200007b8

08002974 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 800297c:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <vLineSensor2Init+0x30>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <vLineSensor2Init+0x30>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	217f      	movs	r1, #127	; 0x7f
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fb9d 	bl	80050c8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <vLineSensor2Init+0x30>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <vLineSensor2Init+0x34>)
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fc88 	bl	80042ac <HAL_ADC_Start_DMA>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200007a8 	.word	0x200007a8
 80029a8:	200007bc 	.word	0x200007bc

080029ac <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <vLineSensor3Init+0x30>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <vLineSensor3Init+0x30>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	217f      	movs	r1, #127	; 0x7f
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fb81 	bl	80050c8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <vLineSensor3Init+0x30>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4904      	ldr	r1, [pc, #16]	; (80029e0 <vLineSensor3Init+0x34>)
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 fc6c 	bl	80042ac <HAL_ADC_Start_DMA>
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200007ac 	.word	0x200007ac
 80029e0:	200007c0 	.word	0x200007c0

080029e4 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 80029ec:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <vLineSensor4Init+0x30>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <vLineSensor4Init+0x30>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	217f      	movs	r1, #127	; 0x7f
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fb65 	bl	80050c8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <vLineSensor4Init+0x30>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4904      	ldr	r1, [pc, #16]	; (8002a18 <vLineSensor4Init+0x34>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fc50 	bl	80042ac <HAL_ADC_Start_DMA>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200007b0 	.word	0x200007b0
 8002a18:	200007c4 	.word	0x200007c4

08002a1c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8002a24:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <vLineSensor5Init+0x30>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <vLineSensor5Init+0x30>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	217f      	movs	r1, #127	; 0x7f
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fb49 	bl	80050c8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <vLineSensor5Init+0x30>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4904      	ldr	r1, [pc, #16]	; (8002a50 <vLineSensor5Init+0x34>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fc34 	bl	80042ac <HAL_ADC_Start_DMA>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200007b4 	.word	0x200007b4
 8002a50:	200007c8 	.word	0x200007c8

08002a54 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8002a54:	b4b0      	push	{r4, r5, r7}
 8002a56:	b091      	sub	sp, #68	; 0x44
 8002a58:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <fLineSensorCalculatePosition+0x120>)
 8002a5c:	f107 0418 	add.w	r4, r7, #24
 8002a60:	461d      	mov	r5, r3
 8002a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    float totalWeight = 0.0f;
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <fLineSensorCalculatePosition+0x124>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <fLineSensorCalculatePosition+0x128>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <fLineSensorCalculatePosition+0x12c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <fLineSensorCalculatePosition+0x130>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <fLineSensorCalculatePosition+0x134>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
 8002a98:	e04c      	b.n	8002b34 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	3340      	adds	r3, #64	; 0x40
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002aa6:	4939      	ldr	r1, [pc, #228]	; (8002b8c <fLineSensorCalculatePosition+0x138>)
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d33d      	bcc.n	8002b2e <fLineSensorCalculatePosition+0xda>
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	3340      	adds	r3, #64	; 0x40
 8002ab8:	443b      	add	r3, r7
 8002aba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002abe:	4934      	ldr	r1, [pc, #208]	; (8002b90 <fLineSensorCalculatePosition+0x13c>)
 8002ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d831      	bhi.n	8002b2e <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	3340      	adds	r3, #64	; 0x40
 8002ad0:	443b      	add	r3, r7
 8002ad2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ad6:	492d      	ldr	r1, [pc, #180]	; (8002b8c <fLineSensorCalculatePosition+0x138>)
 8002ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ada:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002af2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	3340      	adds	r3, #64	; 0x40
 8002afc:	443b      	add	r3, r7
 8002afe:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            totalWeight += weight;
 8002b1e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    for (int i = 0; i < 5; i++) {
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	3301      	adds	r3, #1
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	ddaf      	ble.n	8002a9a <fLineSensorCalculatePosition+0x46>
        }
    }


    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8002b3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b46:	d101      	bne.n	8002b4c <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <fLineSensorCalculatePosition+0x140>)
 8002b4a:	e00b      	b.n	8002b64 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8002b4c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002b50:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b58:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    posicao3 = posicao;
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <fLineSensorCalculatePosition+0x144>)
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6013      	str	r3, [r2, #0]
    return posicao;
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6c:	3744      	adds	r7, #68	; 0x44
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bcb0      	pop	{r4, r5, r7}
 8002b72:	4770      	bx	lr
 8002b74:	0800cdd8 	.word	0x0800cdd8
 8002b78:	200007b8 	.word	0x200007b8
 8002b7c:	200007bc 	.word	0x200007bc
 8002b80:	200007c0 	.word	0x200007c0
 8002b84:	200007c4 	.word	0x200007c4
 8002b88:	200007c8 	.word	0x200007c8
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	20000018 	.word	0x20000018
 8002b94:	42c60000 	.word	0x42c60000
 8002b98:	200007d0 	.word	0x200007d0

08002b9c <vLineSensorPIDControl>:
// Definição das constantes do PID


// Função para ajustar a velocidade das rodas com base na saída do PID
// Função para ajustar a velocidade das rodas com base na saída do PID
void vLineSensorPIDControl(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 8002ba2:	f000 ff55 	bl	8003a50 <HAL_GetTick>
 8002ba6:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8002ba8:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <vLineSensorPIDControl+0x1a8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb8:	eddf 6a63 	vldr	s13, [pc, #396]	; 8002d48 <vLineSensorPIDControl+0x1ac>
 8002bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc0:	4b62      	ldr	r3, [pc, #392]	; (8002d4c <vLineSensorPIDControl+0x1b0>)
 8002bc2:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8002bc6:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <vLineSensorPIDControl+0x1b0>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	d802      	bhi.n	8002bdc <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <vLineSensorPIDControl+0x1b0>)
 8002bd8:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <vLineSensorPIDControl+0x1b4>)
 8002bda:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 8002bdc:	f7ff ff3a 	bl	8002a54 <fLineSensorCalculatePosition>
 8002be0:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8002be4:	edd7 7a00 	vldr	s15, [r7]
 8002be8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002d54 <vLineSensorPIDControl+0x1b8>
 8002bec:	eef4 7a47 	vcmp.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d106      	bne.n	8002c04 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        // Aqui, vamos continuar em frente com velocidade base
        vSetRodasDC(0, 0);
 8002bf6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8002d58 <vLineSensorPIDControl+0x1bc>
 8002bfa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8002d58 <vLineSensorPIDControl+0x1bc>
 8002bfe:	f7ff fc13 	bl	8002428 <vSetRodasDC>
    	//vSetRodaDireitaDC(0.5);
    	   // vSetRodaEsquerdaDC(0.5);
        return;
 8002c02:	e09c      	b.n	8002d3e <vLineSensorPIDControl+0x1a2>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0-position; // Inverte o sinal para correção na direção oposta
 8002c04:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002d58 <vLineSensorPIDControl+0x1bc>
 8002c08:	edd7 7a00 	vldr	s15, [r7]
 8002c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c10:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <vLineSensorPIDControl+0x1c0>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <vLineSensorPIDControl+0x1c0>)
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <vLineSensorPIDControl+0x1b0>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <vLineSensorPIDControl+0x1c4>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <vLineSensorPIDControl+0x1c4>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <vLineSensorPIDControl+0x1c0>)
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <vLineSensorPIDControl+0x1c8>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <vLineSensorPIDControl+0x1b0>)
 8002c48:	ed93 7a00 	vldr	s14, [r3]
 8002c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <vLineSensorPIDControl+0x1cc>)
 8002c52:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(kp * error + ki * integral_error + kd * derivative_error);
 8002c56:	4b45      	ldr	r3, [pc, #276]	; (8002d6c <vLineSensorPIDControl+0x1d0>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <vLineSensorPIDControl+0x1c0>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <vLineSensorPIDControl+0x1d4>)
 8002c68:	edd3 6a00 	vldr	s13, [r3]
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <vLineSensorPIDControl+0x1c4>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <vLineSensorPIDControl+0x1d8>)
 8002c7c:	edd3 6a00 	vldr	s13, [r3]
 8002c80:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <vLineSensorPIDControl+0x1cc>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	eef1 7a67 	vneg.f32	s15, s15
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <vLineSensorPIDControl+0x1dc>)
 8002c94:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha=control_output;
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <vLineSensorPIDControl+0x1dc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <vLineSensorPIDControl+0x1e0>)
 8002c9e:	6013      	str	r3, [r2, #0]
    if (control_output == 0) {
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <vLineSensorPIDControl+0x1dc>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cae:	d112      	bne.n	8002cd6 <vLineSensorPIDControl+0x13a>
            velocidadeEsquerda = velocidadeBase;
 8002cb0:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <vLineSensorPIDControl+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <vLineSensorPIDControl+0x1e8>)
 8002cbe:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase;
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <vLineSensorPIDControl+0x1e4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cce:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <vLineSensorPIDControl+0x1ec>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
 8002cd4:	e033      	b.n	8002d3e <vLineSensorPIDControl+0x1a2>
        } else {
            // Caso contrário, ajusta a velocidade de cada roda com base no output do PID
            // Se o erro for positivo, roda esquerda acelera e a direita desacelera e vice-versa
            velocidadeEsquerda = velocidadeBase + control_output;
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <vLineSensorPIDControl+0x1e4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <vLineSensorPIDControl+0x1dc>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <vLineSensorPIDControl+0x1e8>)
 8002cee:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase - control_output;
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <vLineSensorPIDControl+0x1e4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <vLineSensorPIDControl+0x1dc>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <vLineSensorPIDControl+0x1ec>)
 8002d0a:	edc3 7a00 	vstr	s15, [r3]

            // Limitar a velocidade mínima para 0 (evita valores negativos nas rodas)
            if (velocidadeEsquerda < 0) {
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <vLineSensorPIDControl+0x1e8>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1c:	d503      	bpl.n	8002d26 <vLineSensorPIDControl+0x18a>
                velocidadeEsquerda = 0;
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <vLineSensorPIDControl+0x1e8>)
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
            }
            if (velocidadeDireita < 0) {
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <vLineSensorPIDControl+0x1ec>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	d503      	bpl.n	8002d3e <vLineSensorPIDControl+0x1a2>
                velocidadeDireita = 0;
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <vLineSensorPIDControl+0x1ec>)
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
            }
        }
}
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200007f4 	.word	0x200007f4
 8002d48:	447a0000 	.word	0x447a0000
 8002d4c:	20000038 	.word	0x20000038
 8002d50:	3c23d70a 	.word	0x3c23d70a
 8002d54:	42c60000 	.word	0x42c60000
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	200007e0 	.word	0x200007e0
 8002d60:	200007e8 	.word	0x200007e8
 8002d64:	200007e4 	.word	0x200007e4
 8002d68:	200007ec 	.word	0x200007ec
 8002d6c:	2000002c 	.word	0x2000002c
 8002d70:	200007dc 	.word	0x200007dc
 8002d74:	20000030 	.word	0x20000030
 8002d78:	200007f0 	.word	0x200007f0
 8002d7c:	200007cc 	.word	0x200007cc
 8002d80:	20000034 	.word	0x20000034
 8002d84:	200007d4 	.word	0x200007d4
 8002d88:	200007d8 	.word	0x200007d8

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_MspInit+0x44>)
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_MspInit+0x44>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_MspInit+0x44>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_MspInit+0x44>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_MspInit+0x44>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_MspInit+0x44>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dc2:	f005 f843 	bl	8007e4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <NMI_Handler+0x4>

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e20:	f000 fe04 	bl	8003a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA1_Channel6_IRQHandler+0x10>)
 8002e2e:	f002 fda8 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200004f4 	.word	0x200004f4

08002e3c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA1_Channel7_IRQHandler+0x10>)
 8002e42:	f002 fd9e 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000554 	.word	0x20000554

08002e50 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002e56:	f006 fb7b 	bl	8009550 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002e5a:	4803      	ldr	r0, [pc, #12]	; (8002e68 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002e5c:	f006 fb78 	bl	8009550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200007f8 	.word	0x200007f8
 8002e68:	20000928 	.word	0x20000928

08002e6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002e72:	f006 fb6d 	bl	8009550 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002e76:	4803      	ldr	r0, [pc, #12]	; (8002e84 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002e78:	f006 fb6a 	bl	8009550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200007f8 	.word	0x200007f8
 8002e84:	20000974 	.word	0x20000974

08002e88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002e8e:	f006 fb5f 	bl	8009550 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002e94:	f006 fb5c 	bl	8009550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200007f8 	.word	0x200007f8
 8002ea0:	200009c0 	.word	0x200009c0

08002ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM2_IRQHandler+0x10>)
 8002eaa:	f006 fb51 	bl	8009550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000844 	.word	0x20000844

08002eb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM3_IRQHandler+0x10>)
 8002ebe:	f006 fb47 	bl	8009550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000890 	.word	0x20000890

08002ecc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <I2C2_EV_IRQHandler+0x10>)
 8002ed2:	f003 fa1f 	bl	8006314 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200004a0 	.word	0x200004a0

08002ee0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <I2C2_ER_IRQHandler+0x10>)
 8002ee6:	f003 fa2f 	bl	8006348 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200004a0 	.word	0x200004a0

08002ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USART3_IRQHandler+0x10>)
 8002efa:	f007 ff33 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000aa0 	.word	0x20000aa0

08002f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f10:	f003 f82e 	bl	8005f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <SystemInit+0x20>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <SystemInit+0x20>)
 8002f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b09c      	sub	sp, #112	; 0x70
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	615a      	str	r2, [r3, #20]
 8002f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2234      	movs	r2, #52	; 0x34
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f009 fef6 	bl	800cd68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f7e:	4a4c      	ldr	r2, [pc, #304]	; (80030b0 <MX_TIM1_Init+0x174>)
 8002f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f84:	22a9      	movs	r2, #169	; 0xa9
 8002f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f9c:	4b43      	ldr	r3, [pc, #268]	; (80030ac <MX_TIM1_Init+0x170>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa2:	4b42      	ldr	r3, [pc, #264]	; (80030ac <MX_TIM1_Init+0x170>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fa8:	4840      	ldr	r0, [pc, #256]	; (80030ac <MX_TIM1_Init+0x170>)
 8002faa:	f005 fedb 	bl	8008d64 <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fb4:	f7ff f9fe 	bl	80023b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fbe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4839      	ldr	r0, [pc, #228]	; (80030ac <MX_TIM1_Init+0x170>)
 8002fc6:	f006 fdc3 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002fd0:	f7ff f9f0 	bl	80023b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fd4:	4835      	ldr	r0, [pc, #212]	; (80030ac <MX_TIM1_Init+0x170>)
 8002fd6:	f005 ff95 	bl	8008f04 <HAL_TIM_PWM_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002fe0:	f7ff f9e8 	bl	80023b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482d      	ldr	r0, [pc, #180]	; (80030ac <MX_TIM1_Init+0x170>)
 8002ff8:	f007 fca8 	bl	800a94c <HAL_TIMEx_MasterConfigSynchronization>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003002:	f7ff f9d7 	bl	80023b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003006:	2360      	movs	r3, #96	; 0x60
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800300e:	2300      	movs	r3, #0
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003012:	2300      	movs	r3, #0
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	4820      	ldr	r0, [pc, #128]	; (80030ac <MX_TIM1_Init+0x170>)
 800302c:	f006 fc7c 	bl	8009928 <HAL_TIM_PWM_ConfigChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003036:	f7ff f9bd 	bl	80023b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800303e:	2204      	movs	r2, #4
 8003040:	4619      	mov	r1, r3
 8003042:	481a      	ldr	r0, [pc, #104]	; (80030ac <MX_TIM1_Init+0x170>)
 8003044:	f006 fc70 	bl	8009928 <HAL_TIM_PWM_ConfigChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800304e:	f7ff f9b1 	bl	80023b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800306a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003082:	2300      	movs	r3, #0
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <MX_TIM1_Init+0x170>)
 8003090:	f007 fcf2 	bl	800aa78 <HAL_TIMEx_ConfigBreakDeadTime>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800309a:	f7ff f98b 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <MX_TIM1_Init+0x170>)
 80030a0:	f000 fada 	bl	8003658 <HAL_TIM_MspPostInit>

}
 80030a4:	bf00      	nop
 80030a6:	3770      	adds	r7, #112	; 0x70
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200007f8 	.word	0x200007f8
 80030b0:	40012c00 	.word	0x40012c00

080030b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <MX_TIM2_Init+0x98>)
 80030d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <MX_TIM2_Init+0x98>)
 80030dc:	f244 2267 	movw	r2, #16999	; 0x4267
 80030e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <MX_TIM2_Init+0x98>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <MX_TIM2_Init+0x98>)
 80030ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80030ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <MX_TIM2_Init+0x98>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <MX_TIM2_Init+0x98>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030fc:	4813      	ldr	r0, [pc, #76]	; (800314c <MX_TIM2_Init+0x98>)
 80030fe:	f005 fe31 	bl	8008d64 <HAL_TIM_Base_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003108:	f7ff f954 	bl	80023b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	4619      	mov	r1, r3
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <MX_TIM2_Init+0x98>)
 800311a:	f006 fd19 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003124:	f7ff f946 	bl	80023b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4805      	ldr	r0, [pc, #20]	; (800314c <MX_TIM2_Init+0x98>)
 8003136:	f007 fc09 	bl	800a94c <HAL_TIMEx_MasterConfigSynchronization>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003140:	f7ff f938 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003144:	bf00      	nop
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000844 	.word	0x20000844

08003150 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003156:	f107 0310 	add.w	r3, r7, #16
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <MX_TIM3_Init+0x94>)
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <MX_TIM3_Init+0x98>)
 8003172:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17000-1;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <MX_TIM3_Init+0x94>)
 8003176:	f244 2267 	movw	r2, #16999	; 0x4267
 800317a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <MX_TIM3_Init+0x94>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <MX_TIM3_Init+0x94>)
 8003184:	2263      	movs	r2, #99	; 0x63
 8003186:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <MX_TIM3_Init+0x94>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <MX_TIM3_Init+0x94>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003194:	4813      	ldr	r0, [pc, #76]	; (80031e4 <MX_TIM3_Init+0x94>)
 8003196:	f005 fde5 	bl	8008d64 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80031a0:	f7ff f908 	bl	80023b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031aa:	f107 0310 	add.w	r3, r7, #16
 80031ae:	4619      	mov	r1, r3
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <MX_TIM3_Init+0x94>)
 80031b2:	f006 fccd 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80031bc:	f7ff f8fa 	bl	80023b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_TIM3_Init+0x94>)
 80031ce:	f007 fbbd 	bl	800a94c <HAL_TIMEx_MasterConfigSynchronization>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80031d8:	f7ff f8ec 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000890 	.word	0x20000890
 80031e8:	40000400 	.word	0x40000400

080031ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <MX_TIM6_Init+0x64>)
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <MX_TIM6_Init+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <MX_TIM6_Init+0x64>)
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_TIM6_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <MX_TIM6_Init+0x64>)
 8003210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003214:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_TIM6_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <MX_TIM6_Init+0x64>)
 800321e:	f005 fda1 	bl	8008d64 <HAL_TIM_Base_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003228:	f7ff f8c4 	bl	80023b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_TIM6_Init+0x64>)
 800323a:	f007 fb87 	bl	800a94c <HAL_TIMEx_MasterConfigSynchronization>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003244:	f7ff f8b6 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200008dc 	.word	0x200008dc
 8003254:	40001000 	.word	0x40001000

08003258 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <MX_TIM15_Init+0x9c>)
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <MX_TIM15_Init+0xa0>)
 800327a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_TIM15_Init+0x9c>)
 800327e:	f244 2267 	movw	r2, #16999	; 0x4267
 8003282:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <MX_TIM15_Init+0x9c>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_TIM15_Init+0x9c>)
 800328c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003290:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <MX_TIM15_Init+0x9c>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <MX_TIM15_Init+0x9c>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_TIM15_Init+0x9c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80032a4:	4813      	ldr	r0, [pc, #76]	; (80032f4 <MX_TIM15_Init+0x9c>)
 80032a6:	f005 fd5d 	bl	8008d64 <HAL_TIM_Base_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80032b0:	f7ff f880 	bl	80023b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4619      	mov	r1, r3
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <MX_TIM15_Init+0x9c>)
 80032c2:	f006 fc45 	bl	8009b50 <HAL_TIM_ConfigClockSource>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80032cc:	f7ff f872 	bl	80023b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_TIM15_Init+0x9c>)
 80032de:	f007 fb35 	bl	800a94c <HAL_TIMEx_MasterConfigSynchronization>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80032e8:	f7ff f864 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000928 	.word	0x20000928
 80032f8:	40014000 	.word	0x40014000

080032fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003302:	463b      	mov	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <MX_TIM16_Init+0x90>)
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <MX_TIM16_Init+0x94>)
 8003312:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_TIM16_Init+0x90>)
 8003316:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800331a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_TIM16_Init+0x90>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_TIM16_Init+0x90>)
 8003324:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003328:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_TIM16_Init+0x90>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_TIM16_Init+0x90>)
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_TIM16_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800333c:	4813      	ldr	r0, [pc, #76]	; (800338c <MX_TIM16_Init+0x90>)
 800333e:	f005 fd11 	bl	8008d64 <HAL_TIM_Base_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8003348:	f7ff f834 	bl	80023b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800334c:	480f      	ldr	r0, [pc, #60]	; (800338c <MX_TIM16_Init+0x90>)
 800334e:	f005 ff4d 	bl	80091ec <HAL_TIM_IC_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8003358:	f7ff f82c 	bl	80023b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800335c:	2300      	movs	r3, #0
 800335e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003360:	2301      	movs	r3, #1
 8003362:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003368:	230f      	movs	r3, #15
 800336a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800336c:	463b      	mov	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	4619      	mov	r1, r3
 8003372:	4806      	ldr	r0, [pc, #24]	; (800338c <MX_TIM16_Init+0x90>)
 8003374:	f006 fa3b 	bl	80097ee <HAL_TIM_IC_ConfigChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 800337e:	f7ff f819 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000974 	.word	0x20000974
 8003390:	40014400 	.word	0x40014400

08003394 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800339a:	463b      	mov	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <MX_TIM17_Init+0x90>)
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <MX_TIM17_Init+0x94>)
 80033aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <MX_TIM17_Init+0x90>)
 80033ae:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80033b2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <MX_TIM17_Init+0x90>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49999;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <MX_TIM17_Init+0x90>)
 80033bc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80033c0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <MX_TIM17_Init+0x90>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <MX_TIM17_Init+0x90>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <MX_TIM17_Init+0x90>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80033d4:	4813      	ldr	r0, [pc, #76]	; (8003424 <MX_TIM17_Init+0x90>)
 80033d6:	f005 fcc5 	bl	8008d64 <HAL_TIM_Base_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 80033e0:	f7fe ffe8 	bl	80023b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80033e4:	480f      	ldr	r0, [pc, #60]	; (8003424 <MX_TIM17_Init+0x90>)
 80033e6:	f005 ff01 	bl	80091ec <HAL_TIM_IC_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80033f0:	f7fe ffe0 	bl	80023b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033f4:	2300      	movs	r3, #0
 80033f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033f8:	2301      	movs	r3, #1
 80033fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003400:	230f      	movs	r3, #15
 8003402:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003404:	463b      	mov	r3, r7
 8003406:	2200      	movs	r2, #0
 8003408:	4619      	mov	r1, r3
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <MX_TIM17_Init+0x90>)
 800340c:	f006 f9ef 	bl	80097ee <HAL_TIM_IC_ConfigChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8003416:	f7fe ffcd 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200009c0 	.word	0x200009c0
 8003428:	40014800 	.word	0x40014800

0800342c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b090      	sub	sp, #64	; 0x40
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a7b      	ldr	r2, [pc, #492]	; (8003638 <HAL_TIM_Base_MspInit+0x20c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d124      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800344e:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	4a7a      	ldr	r2, [pc, #488]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003458:	6613      	str	r3, [r2, #96]	; 0x60
 800345a:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 800345c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2018      	movs	r0, #24
 800346c:	f002 f871 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003470:	2018      	movs	r0, #24
 8003472:	f002 f888 	bl	8005586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	2104      	movs	r1, #4
 800347a:	2019      	movs	r0, #25
 800347c:	f002 f869 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003480:	2019      	movs	r0, #25
 8003482:	f002 f880 	bl	8005586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2104      	movs	r1, #4
 800348a:	201a      	movs	r0, #26
 800348c:	f002 f861 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003490:	201a      	movs	r0, #26
 8003492:	f002 f878 	bl	8005586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003496:	e0ca      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d114      	bne.n	80034cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a2:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6593      	str	r3, [r2, #88]	; 0x58
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	201c      	movs	r0, #28
 80034c0:	f002 f847 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c4:	201c      	movs	r0, #28
 80034c6:	f002 f85e 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 80034ca:	e0b0      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <HAL_TIM_Base_MspInit+0x214>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d114      	bne.n	8003500 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	4a58      	ldr	r2, [pc, #352]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6593      	str	r3, [r2, #88]	; 0x58
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2101      	movs	r1, #1
 80034f2:	201d      	movs	r0, #29
 80034f4:	f002 f82d 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034f8:	201d      	movs	r0, #29
 80034fa:	f002 f844 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 80034fe:	e096      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM6)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <HAL_TIM_Base_MspInit+0x218>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800350a:	4b4c      	ldr	r3, [pc, #304]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	4a4b      	ldr	r2, [pc, #300]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	6593      	str	r3, [r2, #88]	; 0x58
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
}
 8003522:	e084      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM15)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a47      	ldr	r2, [pc, #284]	; (8003648 <HAL_TIM_Base_MspInit+0x21c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d114      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	4a42      	ldr	r2, [pc, #264]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6613      	str	r3, [r2, #96]	; 0x60
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	2018      	movs	r0, #24
 800354c:	f002 f801 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003550:	2018      	movs	r0, #24
 8003552:	f002 f818 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 8003556:	e06a      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM16)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3b      	ldr	r2, [pc, #236]	; (800364c <HAL_TIM_Base_MspInit+0x220>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d130      	bne.n	80035c4 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	4a35      	ldr	r2, [pc, #212]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	6613      	str	r3, [r2, #96]	; 0x60
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 8003592:	2310      	movs	r3, #16
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	2300      	movs	r3, #0
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80035a2:	2301      	movs	r3, #1
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 80035a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035aa:	4619      	mov	r1, r3
 80035ac:	4828      	ldr	r0, [pc, #160]	; (8003650 <HAL_TIM_Base_MspInit+0x224>)
 80035ae:	f002 fb45 	bl	8005c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2104      	movs	r1, #4
 80035b6:	2019      	movs	r0, #25
 80035b8:	f001 ffcb 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035bc:	2019      	movs	r0, #25
 80035be:	f001 ffe2 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 80035c2:	e034      	b.n	800362e <HAL_TIM_Base_MspInit+0x202>
  else if(tim_baseHandle->Instance==TIM17)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a22      	ldr	r2, [pc, #136]	; (8003654 <HAL_TIM_Base_MspInit+0x228>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d12f      	bne.n	800362e <HAL_TIM_Base_MspInit+0x202>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6613      	str	r3, [r2, #96]	; 0x60
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	4a14      	ldr	r2, [pc, #80]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_TIM_Base_MspInit+0x210>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 80035fe:	2320      	movs	r3, #32
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800360e:	230a      	movs	r3, #10
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 8003612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003616:	4619      	mov	r1, r3
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <HAL_TIM_Base_MspInit+0x224>)
 800361a:	f002 fb0f 	bl	8005c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2104      	movs	r1, #4
 8003622:	201a      	movs	r0, #26
 8003624:	f001 ff95 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003628:	201a      	movs	r0, #26
 800362a:	f001 ffac 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3740      	adds	r7, #64	; 0x40
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40021000 	.word	0x40021000
 8003640:	40000400 	.word	0x40000400
 8003644:	40001000 	.word	0x40001000
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	48000400 	.word	0x48000400
 8003654:	40014800 	.word	0x40014800

08003658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_TIM_MspPostInit+0x64>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d11b      	bne.n	80036b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_TIM_MspPostInit+0x68>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <HAL_TIM_MspPostInit+0x68>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_TIM_MspPostInit+0x68>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8003692:	2303      	movs	r3, #3
 8003694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <HAL_TIM_MspPostInit+0x6c>)
 80036ae:	f002 fac5 	bl	8005c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	48000800 	.word	0x48000800

080036c8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <MX_LPUART1_UART_Init+0x90>)
 80036d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036ee:	220c      	movs	r2, #12
 80036f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 8003700:	2200      	movs	r2, #0
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800370a:	4812      	ldr	r0, [pc, #72]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 800370c:	f007 fa8e 	bl	800ac2c <HAL_UART_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003716:	f7fe fe4d 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800371a:	2100      	movs	r1, #0
 800371c:	480d      	ldr	r0, [pc, #52]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 800371e:	f009 fa58 	bl	800cbd2 <HAL_UARTEx_SetTxFifoThreshold>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003728:	f7fe fe44 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800372c:	2100      	movs	r1, #0
 800372e:	4809      	ldr	r0, [pc, #36]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 8003730:	f009 fa8d 	bl	800cc4e <HAL_UARTEx_SetRxFifoThreshold>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800373a:	f7fe fe3b 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800373e:	4805      	ldr	r0, [pc, #20]	; (8003754 <MX_LPUART1_UART_Init+0x8c>)
 8003740:	f009 fa0e 	bl	800cb60 <HAL_UARTEx_DisableFifoMode>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800374a:	f7fe fe33 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000a0c 	.word	0x20000a0c
 8003758:	40008000 	.word	0x40008000

0800375c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003762:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <MX_USART3_UART_Init+0x94>)
 8003764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003768:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800376c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <MX_USART3_UART_Init+0x90>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003782:	220c      	movs	r2, #12
 8003784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <MX_USART3_UART_Init+0x90>)
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <MX_USART3_UART_Init+0x90>)
 8003794:	2200      	movs	r2, #0
 8003796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <MX_USART3_UART_Init+0x90>)
 800379a:	2200      	movs	r2, #0
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <MX_USART3_UART_Init+0x90>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037a4:	4811      	ldr	r0, [pc, #68]	; (80037ec <MX_USART3_UART_Init+0x90>)
 80037a6:	f007 fa41 	bl	800ac2c <HAL_UART_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80037b0:	f7fe fe00 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b4:	2100      	movs	r1, #0
 80037b6:	480d      	ldr	r0, [pc, #52]	; (80037ec <MX_USART3_UART_Init+0x90>)
 80037b8:	f009 fa0b 	bl	800cbd2 <HAL_UARTEx_SetTxFifoThreshold>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80037c2:	f7fe fdf7 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037c6:	2100      	movs	r1, #0
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <MX_USART3_UART_Init+0x90>)
 80037ca:	f009 fa40 	bl	800cc4e <HAL_UARTEx_SetRxFifoThreshold>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80037d4:	f7fe fdee 	bl	80023b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80037d8:	4804      	ldr	r0, [pc, #16]	; (80037ec <MX_USART3_UART_Init+0x90>)
 80037da:	f009 f9c1 	bl	800cb60 <HAL_UARTEx_DisableFifoMode>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80037e4:	f7fe fde6 	bl	80023b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000aa0 	.word	0x20000aa0
 80037f0:	40004800 	.word	0x40004800

080037f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0a0      	sub	sp, #128	; 0x80
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	2254      	movs	r2, #84	; 0x54
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f009 faa7 	bl	800cd68 <memset>
  if(uartHandle->Instance==LPUART1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a41      	ldr	r2, [pc, #260]	; (8003924 <HAL_UART_MspInit+0x130>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d137      	bne.n	8003894 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003824:	2320      	movs	r3, #32
 8003826:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003828:	2300      	movs	r3, #0
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	4618      	mov	r0, r3
 8003832:	f005 f849 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800383c:	f7fe fdba 	bl	80023b4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_UART_MspInit+0x134>)
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_UART_MspInit+0x134>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_UART_MspInit+0x134>)
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003858:	4b33      	ldr	r3, [pc, #204]	; (8003928 <HAL_UART_MspInit+0x134>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_UART_MspInit+0x134>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_UART_MspInit+0x134>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003870:	230c      	movs	r3, #12
 8003872:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003880:	230c      	movs	r3, #12
 8003882:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003888:	4619      	mov	r1, r3
 800388a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388e:	f002 f9d5 	bl	8005c3c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003892:	e043      	b.n	800391c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <HAL_UART_MspInit+0x138>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d13e      	bne.n	800391c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800389e:	2304      	movs	r3, #4
 80038a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038a6:	f107 0318 	add.w	r3, r7, #24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 f80c 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80038b6:	f7fe fd7d 	bl	80023b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c4:	6593      	str	r3, [r2, #88]	; 0x58
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4a14      	ldr	r2, [pc, #80]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_UART_MspInit+0x134>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038fc:	2307      	movs	r3, #7
 80038fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003904:	4619      	mov	r1, r3
 8003906:	480a      	ldr	r0, [pc, #40]	; (8003930 <HAL_UART_MspInit+0x13c>)
 8003908:	f002 f998 	bl	8005c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	2027      	movs	r0, #39	; 0x27
 8003912:	f001 fe1e 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003916:	2027      	movs	r0, #39	; 0x27
 8003918:	f001 fe35 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 800391c:	bf00      	nop
 800391e:	3780      	adds	r7, #128	; 0x80
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40008000 	.word	0x40008000
 8003928:	40021000 	.word	0x40021000
 800392c:	40004800 	.word	0x40004800
 8003930:	48000400 	.word	0x48000400

08003934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003934:	480d      	ldr	r0, [pc, #52]	; (800396c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003936:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003938:	f7ff faee 	bl	8002f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800393c:	480c      	ldr	r0, [pc, #48]	; (8003970 <LoopForever+0x6>)
  ldr r1, =_edata
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <LoopForever+0xe>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003954:	4c0a      	ldr	r4, [pc, #40]	; (8003980 <LoopForever+0x16>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003962:	f009 fa09 	bl	800cd78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003966:	f7fe fbd9 	bl	800211c <main>

0800396a <LoopForever>:

LoopForever:
    b LoopForever
 800396a:	e7fe      	b.n	800396a <LoopForever>
  ldr   r0, =_estack
 800396c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003974:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8003978:	0800ce3c 	.word	0x0800ce3c
  ldr r2, =_sbss
 800397c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8003980:	20000b38 	.word	0x20000b38

08003984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003984:	e7fe      	b.n	8003984 <ADC1_2_IRQHandler>

08003986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003990:	2003      	movs	r0, #3
 8003992:	f001 fdd3 	bl	800553c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003996:	2000      	movs	r0, #0
 8003998:	f000 f80e 	bl	80039b8 <HAL_InitTick>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	71fb      	strb	r3, [r7, #7]
 80039a6:	e001      	b.n	80039ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039a8:	f7ff f9f0 	bl	8002d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039ac:	79fb      	ldrb	r3, [r7, #7]

}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_InitTick+0x68>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d022      	beq.n	8003a12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_InitTick+0x6c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_InitTick+0x68>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fdde 	bl	80055a2 <HAL_SYSTICK_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d809      	bhi.n	8003a06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039f2:	2200      	movs	r2, #0
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	f001 fdaa 	bl	8005552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_InitTick+0x70>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e007      	b.n	8003a16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e004      	b.n	8003a16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e001      	b.n	8003a16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000044 	.word	0x20000044
 8003a24:	2000003c 	.word	0x2000003c
 8003a28:	20000040 	.word	0x20000040

08003a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_IncTick+0x1c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_IncTick+0x20>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <HAL_IncTick+0x1c>)
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000b34 	.word	0x20000b34
 8003a4c:	20000044 	.word	0x20000044

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000b34 	.word	0x20000b34

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d004      	beq.n	8003a8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_Delay+0x40>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8c:	bf00      	nop
 8003a8e:	f7ff ffdf 	bl	8003a50 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d8f7      	bhi.n	8003a8e <HAL_Delay+0x26>
  {
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000044 	.word	0x20000044

08003aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	461a      	mov	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <LL_ADC_SetOffset+0x44>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	03fff000 	.word	0x03fff000

08003b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3360      	adds	r3, #96	; 0x60
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3360      	adds	r3, #96	; 0x60
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3360      	adds	r3, #96	; 0x60
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	615a      	str	r2, [r3, #20]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3330      	adds	r3, #48	; 0x30
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	211f      	movs	r1, #31
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	401a      	ands	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	f003 011f 	and.w	r1, r3, #31
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b087      	sub	sp, #28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	0e5b      	lsrs	r3, r3, #25
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0d1b      	lsrs	r3, r3, #20
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2107      	movs	r1, #7
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	401a      	ands	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	0d1b      	lsrs	r3, r3, #20
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	431a      	orrs	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0318 	and.w	r3, r3, #24
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d48:	40d9      	lsrs	r1, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	0007ffff 	.word	0x0007ffff

08003d6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 031f 	and.w	r3, r3, #31
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6093      	str	r3, [r2, #8]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e10:	d101      	bne.n	8003e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e60:	f043 0202 	orr.w	r2, r3, #2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <LL_ADC_IsEnabled+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_ADC_IsEnabled+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d101      	bne.n	8003eb2 <LL_ADC_IsDisableOngoing+0x18>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <LL_ADC_IsDisableOngoing+0x1a>
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d101      	bne.n	8003f00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e1a9      	b.n	80042a2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd f955 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff19 	bl	8003dac <LL_ADC_IsDeepPowerDownEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff feff 	bl	8003d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff34 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff18 	bl	8003dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa4:	4b9c      	ldr	r3, [pc, #624]	; (8004218 <HAL_ADC_Init+0x2e4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	4a9c      	ldr	r2, [pc, #624]	; (800421c <HAL_ADC_Init+0x2e8>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fb8:	e002      	b.n	8003fc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f9      	bne.n	8003fba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff16 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	f043 0210 	orr.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff76 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 8142 	bne.w	8004290 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 813e 	bne.w	8004290 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800401c:	f043 0202 	orr.w	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff23 	bl	8003e74 <LL_ADC_IsEnabled>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d141      	bne.n	80040b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800403c:	d004      	beq.n	8004048 <HAL_ADC_Init+0x114>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_ADC_Init+0x2ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10f      	bne.n	8004068 <HAL_ADC_Init+0x134>
 8004048:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800404c:	f7ff ff12 	bl	8003e74 <LL_ADC_IsEnabled>
 8004050:	4604      	mov	r4, r0
 8004052:	4873      	ldr	r0, [pc, #460]	; (8004220 <HAL_ADC_Init+0x2ec>)
 8004054:	f7ff ff0e 	bl	8003e74 <LL_ADC_IsEnabled>
 8004058:	4603      	mov	r3, r0
 800405a:	4323      	orrs	r3, r4
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e012      	b.n	800408e <HAL_ADC_Init+0x15a>
 8004068:	486e      	ldr	r0, [pc, #440]	; (8004224 <HAL_ADC_Init+0x2f0>)
 800406a:	f7ff ff03 	bl	8003e74 <LL_ADC_IsEnabled>
 800406e:	4604      	mov	r4, r0
 8004070:	486d      	ldr	r0, [pc, #436]	; (8004228 <HAL_ADC_Init+0x2f4>)
 8004072:	f7ff feff 	bl	8003e74 <LL_ADC_IsEnabled>
 8004076:	4603      	mov	r3, r0
 8004078:	431c      	orrs	r4, r3
 800407a:	486c      	ldr	r0, [pc, #432]	; (800422c <HAL_ADC_Init+0x2f8>)
 800407c:	f7ff fefa 	bl	8003e74 <LL_ADC_IsEnabled>
 8004080:	4603      	mov	r3, r0
 8004082:	4323      	orrs	r3, r4
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409a:	d004      	beq.n	80040a6 <HAL_ADC_Init+0x172>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a5f      	ldr	r2, [pc, #380]	; (8004220 <HAL_ADC_Init+0x2ec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_Init+0x176>
 80040a6:	4a62      	ldr	r2, [pc, #392]	; (8004230 <HAL_ADC_Init+0x2fc>)
 80040a8:	e000      	b.n	80040ac <HAL_ADC_Init+0x178>
 80040aa:	4a62      	ldr	r2, [pc, #392]	; (8004234 <HAL_ADC_Init+0x300>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f7ff fcfa 	bl	8003aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7f5b      	ldrb	r3, [r3, #29]
 80040bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80040c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80040ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	045b      	lsls	r3, r3, #17
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d009      	beq.n	8004110 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_ADC_Init+0x304>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	430b      	orrs	r3, r1
 8004122:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fee5 	bl	8003f0e <LL_ADC_INJ_IsConversionOngoing>
 8004144:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d17f      	bne.n	800424c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d17c      	bne.n	800424c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004156:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800415e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416e:	f023 0302 	bic.w	r3, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	430b      	orrs	r3, r1
 800417a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004192:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800419c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6911      	ldr	r1, [r2, #16]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80041b2:	e013      	b.n	80041dc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d12a      	bne.n	800423c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004208:	430a      	orrs	r2, r1
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e019      	b.n	800424c <HAL_ADC_Init+0x318>
 8004218:	2000003c 	.word	0x2000003c
 800421c:	053e2d63 	.word	0x053e2d63
 8004220:	50000100 	.word	0x50000100
 8004224:	50000400 	.word	0x50000400
 8004228:	50000500 	.word	0x50000500
 800422c:	50000600 	.word	0x50000600
 8004230:	50000300 	.word	0x50000300
 8004234:	50000700 	.word	0x50000700
 8004238:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10c      	bne.n	800426e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f023 010f 	bic.w	r1, r3, #15
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
 800426c:	e007      	b.n	800427e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 020f 	bic.w	r2, r2, #15
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	65da      	str	r2, [r3, #92]	; 0x5c
 800428e:	e007      	b.n	80042a0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f043 0210 	orr.w	r2, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	bf00      	nop

080042ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c0:	d004      	beq.n	80042cc <HAL_ADC_Start_DMA+0x20>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5a      	ldr	r2, [pc, #360]	; (8004430 <HAL_ADC_Start_DMA+0x184>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_Start_DMA+0x24>
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_ADC_Start_DMA+0x188>)
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_Start_DMA+0x26>
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_ADC_Start_DMA+0x18c>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd4a 	bl	8003d6c <LL_ADC_GetMultimode>
 80042d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fe02 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 809b 	bne.w	8004422 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Start_DMA+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e096      	b.n	8004428 <HAL_ADC_Start_DMA+0x17c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_ADC_Start_DMA+0x190>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d008      	beq.n	800431e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d002      	beq.n	800431e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b09      	cmp	r3, #9
 800431c:	d17a      	bne.n	8004414 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fcf6 	bl	8004d10 <ADC_Enable>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d16d      	bne.n	800440a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_ADC_Start_DMA+0x184>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_ADC_Start_DMA+0xb4>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_ADC_Start_DMA+0x194>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d002      	beq.n	800435c <HAL_ADC_Start_DMA+0xb0>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e003      	b.n	8004364 <HAL_ADC_Start_DMA+0xb8>
 800435c:	4b39      	ldr	r3, [pc, #228]	; (8004444 <HAL_ADC_Start_DMA+0x198>)
 800435e:	e001      	b.n	8004364 <HAL_ADC_Start_DMA+0xb8>
 8004360:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	4293      	cmp	r3, r2
 800436a:	d002      	beq.n	8004372 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	f023 0206 	bic.w	r2, r3, #6
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	661a      	str	r2, [r3, #96]	; 0x60
 8004396:	e002      	b.n	800439e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	4a29      	ldr	r2, [pc, #164]	; (8004448 <HAL_ADC_Start_DMA+0x19c>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	4a28      	ldr	r2, [pc, #160]	; (800444c <HAL_ADC_Start_DMA+0x1a0>)
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	4a27      	ldr	r2, [pc, #156]	; (8004450 <HAL_ADC_Start_DMA+0x1a4>)
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	221c      	movs	r2, #28
 80043bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0210 	orr.w	r2, r2, #16
 80043d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3340      	adds	r3, #64	; 0x40
 80043f0:	4619      	mov	r1, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f001 f989 	bl	800570c <HAL_DMA_Start_IT>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fd5c 	bl	8003ec0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004408:	e00d      	b.n	8004426 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004412:	e008      	b.n	8004426 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004420:	e001      	b.n	8004426 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004422:	2302      	movs	r3, #2
 8004424:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	50000100 	.word	0x50000100
 8004434:	50000300 	.word	0x50000300
 8004438:	50000700 	.word	0x50000700
 800443c:	50000600 	.word	0x50000600
 8004440:	50000500 	.word	0x50000500
 8004444:	50000400 	.word	0x50000400
 8004448:	08004efb 	.word	0x08004efb
 800444c:	08004fd3 	.word	0x08004fd3
 8004450:	08004fef 	.word	0x08004fef

08004454 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0b6      	sub	sp, #216	; 0xd8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d102      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x24>
 80044ae:	2302      	movs	r3, #2
 80044b0:	f000 bc13 	b.w	8004cda <HAL_ADC_ConfigChannel+0x84a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fd11 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 83f3 	bne.w	8004cb4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7ff fbcb 	bl	8003c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fcff 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 80044ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fd0b 	bl	8003f0e <LL_ADC_INJ_IsConversionOngoing>
 80044f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 81d9 	bne.w	80048b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 81d4 	bne.w	80048b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004518:	d10f      	bne.n	800453a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	4619      	mov	r1, r3
 8004526:	f7ff fbd2 	bl	8003cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fb79 	bl	8003c2a <LL_ADC_SetSamplingTimeCommonConfig>
 8004538:	e00e      	b.n	8004558 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	461a      	mov	r2, r3
 8004548:	f7ff fbc1 	bl	8003cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fb69 	bl	8003c2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d022      	beq.n	80045c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800458a:	f7ff fac3 	bl	8003b14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6919      	ldr	r1, [r3, #16]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	461a      	mov	r2, r3
 800459c:	f7ff fb0f 	bl	8003bbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x126>
 80045b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b4:	e000      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x128>
 80045b6:	2300      	movs	r3, #0
 80045b8:	461a      	mov	r2, r3
 80045ba:	f7ff fb1b 	bl	8003bf4 <LL_ADC_SetOffsetSaturation>
 80045be:	e17b      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fac8 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x15c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fabd 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 80045e2:	4603      	mov	r3, r0
 80045e4:	0e9b      	lsrs	r3, r3, #26
 80045e6:	f003 021f 	and.w	r2, r3, #31
 80045ea:	e01e      	b.n	800462a <HAL_ADC_ConfigChannel+0x19a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fab2 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800460a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800460e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800461a:	2320      	movs	r3, #32
 800461c:	e004      	b.n	8004628 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800461e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x1b2>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	e018      	b.n	8004674 <HAL_ADC_ConfigChannel+0x1e4>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800465a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800465e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004666:	2320      	movs	r3, #32
 8004668:	e004      	b.n	8004674 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800466a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004674:	429a      	cmp	r2, r3
 8004676:	d106      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fa81 	bl	8003b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fa65 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x222>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fa5a 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 80046a8:	4603      	mov	r3, r0
 80046aa:	0e9b      	lsrs	r3, r3, #26
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	e01e      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x260>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fa4f 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80046d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80046d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e004      	b.n	80046ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80046e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x278>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	e018      	b.n	800473a <HAL_ADC_ConfigChannel+0x2aa>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800471c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800472c:	2320      	movs	r3, #32
 800472e:	e004      	b.n	800473a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800473a:	429a      	cmp	r2, r3
 800473c:	d106      	bne.n	800474c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fa1e 	bl	8003b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2102      	movs	r1, #2
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fa02 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 8004758:	4603      	mov	r3, r0
 800475a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x2e8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f9f7 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 800476e:	4603      	mov	r3, r0
 8004770:	0e9b      	lsrs	r3, r3, #26
 8004772:	f003 021f 	and.w	r2, r3, #31
 8004776:	e01e      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x326>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff f9ec 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 8004784:	4603      	mov	r3, r0
 8004786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800479e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e004      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80047aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x33e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0e9b      	lsrs	r3, r3, #26
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	e016      	b.n	80047fc <HAL_ADC_ConfigChannel+0x36c>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80047e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80047e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80047ee:	2320      	movs	r3, #32
 80047f0:	e004      	b.n	80047fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80047f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d106      	bne.n	800480e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2200      	movs	r2, #0
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff f9bd 	bl	8003b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2103      	movs	r1, #3
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff f9a1 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 800481a:	4603      	mov	r3, r0
 800481c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <HAL_ADC_ConfigChannel+0x3aa>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2103      	movs	r1, #3
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f996 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	0e9b      	lsrs	r3, r3, #26
 8004834:	f003 021f 	and.w	r2, r3, #31
 8004838:	e017      	b.n	800486a <HAL_ADC_ConfigChannel+0x3da>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2103      	movs	r1, #3
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff f98b 	bl	8003b5c <LL_ADC_GetOffsetChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004854:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800485c:	2320      	movs	r3, #32
 800485e:	e003      	b.n	8004868 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x3f2>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	0e9b      	lsrs	r3, r3, #26
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	e011      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x416>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004892:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800489a:	2320      	movs	r3, #32
 800489c:	e003      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d106      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2103      	movs	r1, #3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f968 	bl	8003b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fad9 	bl	8003e74 <LL_ADC_IsEnabled>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 813d 	bne.w	8004b44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7ff fa24 	bl	8003d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4aa2      	ldr	r2, [pc, #648]	; (8004b6c <HAL_ADC_ConfigChannel+0x6dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f040 812e 	bne.w	8004b44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x480>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0e9b      	lsrs	r3, r3, #26
 80048fe:	3301      	adds	r3, #1
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2b09      	cmp	r3, #9
 8004906:	bf94      	ite	ls
 8004908:	2301      	movls	r3, #1
 800490a:	2300      	movhi	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e019      	b.n	8004944 <HAL_ADC_ConfigChannel+0x4b4>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800492c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2b09      	cmp	r3, #9
 800493c:	bf94      	ite	ls
 800493e:	2301      	movls	r3, #1
 8004940:	2300      	movhi	r3, #0
 8004942:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004944:	2b00      	cmp	r3, #0
 8004946:	d079      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x4d4>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	069b      	lsls	r3, r3, #26
 800495e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004962:	e015      	b.n	8004990 <HAL_ADC_ConfigChannel+0x500>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800497c:	2320      	movs	r3, #32
 800497e:	e003      	b.n	8004988 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	3301      	adds	r3, #1
 800498a:	069b      	lsls	r3, r3, #26
 800498c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x520>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	3301      	adds	r3, #1
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	e017      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x550>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80049be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80049c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80049cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x576>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0e9b      	lsrs	r3, r3, #26
 80049f6:	3301      	adds	r3, #1
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	051b      	lsls	r3, r3, #20
 8004a04:	e018      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x5a8>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004a1e:	2320      	movs	r3, #32
 8004a20:	e003      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4613      	mov	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	4413      	add	r3, r2
 8004a36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	e07e      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x5c8>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	3301      	adds	r3, #1
 8004a50:	069b      	lsls	r3, r3, #26
 8004a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a56:	e015      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x5f4>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	069b      	lsls	r3, r3, #26
 8004a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x614>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e9b      	lsrs	r3, r3, #26
 8004a96:	3301      	adds	r3, #1
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	e017      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x644>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	61fb      	str	r3, [r7, #28]
  return result;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004abc:	2320      	movs	r3, #32
 8004abe:	e003      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	ea42 0103 	orr.w	r1, r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x670>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	3301      	adds	r3, #1
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4613      	mov	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4413      	add	r3, r2
 8004af6:	3b1e      	subs	r3, #30
 8004af8:	051b      	lsls	r3, r3, #20
 8004afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004afe:	e01b      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x6a8>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	613b      	str	r3, [r7, #16]
  return result;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e003      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f003 021f 	and.w	r2, r3, #31
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	3b1e      	subs	r3, #30
 8004b32:	051b      	lsls	r3, r3, #20
 8004b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f7ff f8c5 	bl	8003cce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_ADC_ConfigChannel+0x6e0>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80be 	beq.w	8004cce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b5a:	d004      	beq.n	8004b66 <HAL_ADC_ConfigChannel+0x6d6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_ADC_ConfigChannel+0x6e4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10a      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x6ec>
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_ADC_ConfigChannel+0x6e8>)
 8004b68:	e009      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x6ee>
 8004b6a:	bf00      	nop
 8004b6c:	407f0000 	.word	0x407f0000
 8004b70:	80080000 	.word	0x80080000
 8004b74:	50000100 	.word	0x50000100
 8004b78:	50000300 	.word	0x50000300
 8004b7c:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_ADC_ConfigChannel+0x854>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe ffba 	bl	8003af8 <LL_ADC_GetCommonPathInternalCh>
 8004b84:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a56      	ldr	r2, [pc, #344]	; (8004ce8 <HAL_ADC_ConfigChannel+0x858>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x70c>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a55      	ldr	r2, [pc, #340]	; (8004cec <HAL_ADC_ConfigChannel+0x85c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d13a      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d134      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bb0:	d005      	beq.n	8004bbe <HAL_ADC_ConfigChannel+0x72e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a4e      	ldr	r2, [pc, #312]	; (8004cf0 <HAL_ADC_ConfigChannel+0x860>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	f040 8085 	bne.w	8004cc8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bc6:	d004      	beq.n	8004bd2 <HAL_ADC_ConfigChannel+0x742>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <HAL_ADC_ConfigChannel+0x864>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x746>
 8004bd2:	4a49      	ldr	r2, [pc, #292]	; (8004cf8 <HAL_ADC_ConfigChannel+0x868>)
 8004bd4:	e000      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x748>
 8004bd6:	4a43      	ldr	r2, [pc, #268]	; (8004ce4 <HAL_ADC_ConfigChannel+0x854>)
 8004bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7fe ff75 	bl	8003ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be8:	4b44      	ldr	r3, [pc, #272]	; (8004cfc <HAL_ADC_ConfigChannel+0x86c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	4a44      	ldr	r2, [pc, #272]	; (8004d00 <HAL_ADC_ConfigChannel+0x870>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c02:	e002      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c10:	e05a      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3b      	ldr	r2, [pc, #236]	; (8004d04 <HAL_ADC_ConfigChannel+0x874>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d125      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11f      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <HAL_ADC_ConfigChannel+0x864>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d104      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x7ac>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a34      	ldr	r2, [pc, #208]	; (8004d08 <HAL_ADC_ConfigChannel+0x878>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d047      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_ConfigChannel+0x7c0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <HAL_ADC_ConfigChannel+0x864>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x7c4>
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <HAL_ADC_ConfigChannel+0x868>)
 8004c52:	e000      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x7c6>
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_ADC_ConfigChannel+0x854>)
 8004c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe ff36 	bl	8003ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c66:	e031      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <HAL_ADC_ConfigChannel+0x87c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d12d      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d127      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <HAL_ADC_ConfigChannel+0x864>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c90:	d004      	beq.n	8004c9c <HAL_ADC_ConfigChannel+0x80c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_ADC_ConfigChannel+0x864>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x810>
 8004c9c:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <HAL_ADC_ConfigChannel+0x868>)
 8004c9e:	e000      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x812>
 8004ca0:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <HAL_ADC_ConfigChannel+0x854>)
 8004ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fe ff10 	bl	8003ad2 <LL_ADC_SetCommonPathInternalCh>
 8004cb2:	e00c      	b.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004cc6:	e002      	b.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ccc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	37d8      	adds	r7, #216	; 0xd8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	50000700 	.word	0x50000700
 8004ce8:	c3210000 	.word	0xc3210000
 8004cec:	90c00010 	.word	0x90c00010
 8004cf0:	50000600 	.word	0x50000600
 8004cf4:	50000100 	.word	0x50000100
 8004cf8:	50000300 	.word	0x50000300
 8004cfc:	2000003c 	.word	0x2000003c
 8004d00:	053e2d63 	.word	0x053e2d63
 8004d04:	c7520000 	.word	0xc7520000
 8004d08:	50000500 	.word	0x50000500
 8004d0c:	cb840000 	.word	0xcb840000

08004d10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff f8a7 	bl	8003e74 <LL_ADC_IsEnabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d176      	bne.n	8004e1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <ADC_Enable+0x114>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	f043 0210 	orr.w	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e062      	b.n	8004e1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f862 	bl	8003e24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d68:	d004      	beq.n	8004d74 <ADC_Enable+0x64>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2e      	ldr	r2, [pc, #184]	; (8004e28 <ADC_Enable+0x118>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <ADC_Enable+0x68>
 8004d74:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <ADC_Enable+0x11c>)
 8004d76:	e000      	b.n	8004d7a <ADC_Enable+0x6a>
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <ADC_Enable+0x120>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe febc 	bl	8003af8 <LL_ADC_GetCommonPathInternalCh>
 8004d80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d013      	beq.n	8004db2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <ADC_Enable+0x124>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <ADC_Enable+0x128>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004da4:	e002      	b.n	8004dac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f9      	bne.n	8004da6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004db2:	f7fe fe4d 	bl	8003a50 <HAL_GetTick>
 8004db6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004db8:	e028      	b.n	8004e0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff f858 	bl	8003e74 <LL_ADC_IsEnabled>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff f828 	bl	8003e24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dd4:	f7fe fe3c 	bl	8003a50 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d914      	bls.n	8004e0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00d      	beq.n	8004e0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	f043 0210 	orr.w	r2, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e007      	b.n	8004e1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d1cf      	bne.n	8004dba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	8000003f 	.word	0x8000003f
 8004e28:	50000100 	.word	0x50000100
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	50000700 	.word	0x50000700
 8004e34:	2000003c 	.word	0x2000003c
 8004e38:	053e2d63 	.word	0x053e2d63

08004e3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f826 	bl	8003e9a <LL_ADC_IsDisableOngoing>
 8004e4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff f80d 	bl	8003e74 <LL_ADC_IsEnabled>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d047      	beq.n	8004ef0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d144      	bne.n	8004ef0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030d 	and.w	r3, r3, #13
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10c      	bne.n	8004e8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe ffe7 	bl	8003e4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2203      	movs	r2, #3
 8004e84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e86:	f7fe fde3 	bl	8003a50 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e8c:	e029      	b.n	8004ee2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	f043 0210 	orr.w	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e023      	b.n	8004ef2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004eaa:	f7fe fdd1 	bl	8003a50 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d914      	bls.n	8004ee2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	f043 0210 	orr.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e007      	b.n	8004ef2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1dc      	bne.n	8004eaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d14b      	bne.n	8004fac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d021      	beq.n	8004f72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fe8c 	bl	8003c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d032      	beq.n	8004fa4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d12b      	bne.n	8004fa4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11f      	bne.n	8004fa4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f70:	e018      	b.n	8004fa4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d111      	bne.n	8004fa4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fa55 	bl	8004454 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004faa:	e00e      	b.n	8004fca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fa5f 	bl	800447c <HAL_ADC_ErrorCallback>
}
 8004fbe:	e004      	b.n	8004fca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fa41 	bl	8004468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500c:	f043 0204 	orr.w	r2, r3, #4
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff fa31 	bl	800447c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <LL_ADC_IsEnabled>:
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <LL_ADC_IsEnabled+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_ADC_IsEnabled+0x1a>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_StartCalibration>:
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800505a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005064:	4313      	orrs	r3, r2
 8005066:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_ADC_IsCalibrationOnGoing>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508e:	d101      	bne.n	8005094 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d101      	bne.n	80050ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_ADCEx_Calibration_Start+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e04d      	b.n	8005180 <HAL_ADCEx_Calibration_Start+0xb8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fea5 	bl	8004e3c <ADC_Disable>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d136      	bne.n	800516a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005104:	f023 0302 	bic.w	r3, r3, #2
 8005108:	f043 0202 	orr.w	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff96 	bl	8005048 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800511c:	e014      	b.n	8005148 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	3301      	adds	r3, #1
 8005122:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d90d      	bls.n	8005148 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005130:	f023 0312 	bic.w	r3, r3, #18
 8005134:	f043 0210 	orr.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e01b      	b.n	8005180 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff94 	bl	800507a <LL_ADC_IsCalibrationOnGoing>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e2      	bne.n	800511e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	f023 0303 	bic.w	r3, r3, #3
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c
 8005168:	e005      	b.n	8005176 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	f043 0210 	orr.w	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	0004de01 	.word	0x0004de01

0800518c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b0a1      	sub	sp, #132	; 0x84
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e0e7      	b.n	800537a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80051b2:	2300      	movs	r3, #0
 80051b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80051b6:	2300      	movs	r3, #0
 80051b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c2:	d102      	bne.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051c4:	4b6f      	ldr	r3, [pc, #444]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	e009      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a6e      	ldr	r2, [pc, #440]	; (8005388 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d102      	bne.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80051d4:	4b6d      	ldr	r3, [pc, #436]	; (800538c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	e001      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0be      	b.n	800537a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff4f 	bl	80050a2 <LL_ADC_REG_IsConversionOngoing>
 8005204:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff49 	bl	80050a2 <LL_ADC_REG_IsConversionOngoing>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 80a0 	bne.w	8005358 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 809c 	bne.w	8005358 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005228:	d004      	beq.n	8005234 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a55      	ldr	r2, [pc, #340]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005234:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005236:	e000      	b.n	800523a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005238:	4b56      	ldr	r3, [pc, #344]	; (8005394 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800523a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d04b      	beq.n	80052dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005256:	035b      	lsls	r3, r3, #13
 8005258:	430b      	orrs	r3, r1
 800525a:	431a      	orrs	r2, r3
 800525c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005268:	d004      	beq.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a45      	ldr	r2, [pc, #276]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10f      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005274:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005278:	f7ff fed3 	bl	8005022 <LL_ADC_IsEnabled>
 800527c:	4604      	mov	r4, r0
 800527e:	4841      	ldr	r0, [pc, #260]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005280:	f7ff fecf 	bl	8005022 <LL_ADC_IsEnabled>
 8005284:	4603      	mov	r3, r0
 8005286:	4323      	orrs	r3, r4
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e012      	b.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005294:	483c      	ldr	r0, [pc, #240]	; (8005388 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005296:	f7ff fec4 	bl	8005022 <LL_ADC_IsEnabled>
 800529a:	4604      	mov	r4, r0
 800529c:	483b      	ldr	r0, [pc, #236]	; (800538c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800529e:	f7ff fec0 	bl	8005022 <LL_ADC_IsEnabled>
 80052a2:	4603      	mov	r3, r0
 80052a4:	431c      	orrs	r4, r3
 80052a6:	483c      	ldr	r0, [pc, #240]	; (8005398 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80052a8:	f7ff febb 	bl	8005022 <LL_ADC_IsEnabled>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4323      	orrs	r3, r4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d056      	beq.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052c6:	f023 030f 	bic.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	431a      	orrs	r2, r3
 80052d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052da:	e047      	b.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80052dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052f0:	d004      	beq.n	80052fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a23      	ldr	r2, [pc, #140]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10f      	bne.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80052fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005300:	f7ff fe8f 	bl	8005022 <LL_ADC_IsEnabled>
 8005304:	4604      	mov	r4, r0
 8005306:	481f      	ldr	r0, [pc, #124]	; (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005308:	f7ff fe8b 	bl	8005022 <LL_ADC_IsEnabled>
 800530c:	4603      	mov	r3, r0
 800530e:	4323      	orrs	r3, r4
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e012      	b.n	8005342 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800531c:	481a      	ldr	r0, [pc, #104]	; (8005388 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800531e:	f7ff fe80 	bl	8005022 <LL_ADC_IsEnabled>
 8005322:	4604      	mov	r4, r0
 8005324:	4819      	ldr	r0, [pc, #100]	; (800538c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005326:	f7ff fe7c 	bl	8005022 <LL_ADC_IsEnabled>
 800532a:	4603      	mov	r3, r0
 800532c:	431c      	orrs	r4, r3
 800532e:	481a      	ldr	r0, [pc, #104]	; (8005398 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005330:	f7ff fe77 	bl	8005022 <LL_ADC_IsEnabled>
 8005334:	4603      	mov	r3, r0
 8005336:	4323      	orrs	r3, r4
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d012      	beq.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800534e:	f023 030f 	bic.w	r3, r3, #15
 8005352:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005354:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005356:	e009      	b.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800536a:	e000      	b.n	800536e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800536c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005376:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800537a:	4618      	mov	r0, r3
 800537c:	3784      	adds	r7, #132	; 0x84
 800537e:	46bd      	mov	sp, r7
 8005380:	bd90      	pop	{r4, r7, pc}
 8005382:	bf00      	nop
 8005384:	50000100 	.word	0x50000100
 8005388:	50000400 	.word	0x50000400
 800538c:	50000500 	.word	0x50000500
 8005390:	50000300 	.word	0x50000300
 8005394:	50000700 	.word	0x50000700
 8005398:	50000600 	.word	0x50000600

0800539c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053b8:	4013      	ands	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	60d3      	str	r3, [r2, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000ed00 	.word	0xe000ed00

080053e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <__NVIC_GetPriorityGrouping+0x18>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	f003 0307 	and.w	r3, r3, #7
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	db0b      	blt.n	800542a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	f003 021f 	and.w	r2, r3, #31
 8005418:	4907      	ldr	r1, [pc, #28]	; (8005438 <__NVIC_EnableIRQ+0x38>)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2001      	movs	r0, #1
 8005422:	fa00 f202 	lsl.w	r2, r0, r2
 8005426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544c:	2b00      	cmp	r3, #0
 800544e:	db0a      	blt.n	8005466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	490c      	ldr	r1, [pc, #48]	; (8005488 <__NVIC_SetPriority+0x4c>)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	440b      	add	r3, r1
 8005460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005464:	e00a      	b.n	800547c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4908      	ldr	r1, [pc, #32]	; (800548c <__NVIC_SetPriority+0x50>)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3b04      	subs	r3, #4
 8005474:	0112      	lsls	r2, r2, #4
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	440b      	add	r3, r1
 800547a:	761a      	strb	r2, [r3, #24]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000e100 	.word	0xe000e100
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f1c3 0307 	rsb	r3, r3, #7
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf28      	it	cs
 80054ae:	2304      	movcs	r3, #4
 80054b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d902      	bls.n	80054c0 <NVIC_EncodePriority+0x30>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3b03      	subs	r3, #3
 80054be:	e000      	b.n	80054c2 <NVIC_EncodePriority+0x32>
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	401a      	ands	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	43d9      	mvns	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	4313      	orrs	r3, r2
         );
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005508:	d301      	bcc.n	800550e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800550a:	2301      	movs	r3, #1
 800550c:	e00f      	b.n	800552e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <SysTick_Config+0x40>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005516:	210f      	movs	r1, #15
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f7ff ff8e 	bl	800543c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <SysTick_Config+0x40>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <SysTick_Config+0x40>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000e010 	.word	0xe000e010

0800553c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff29 	bl	800539c <__NVIC_SetPriorityGrouping>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005560:	f7ff ff40 	bl	80053e4 <__NVIC_GetPriorityGrouping>
 8005564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7ff ff90 	bl	8005490 <NVIC_EncodePriority>
 8005570:	4602      	mov	r2, r0
 8005572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff5f 	bl	800543c <__NVIC_SetPriority>
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff33 	bl	8005400 <__NVIC_EnableIRQ>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ffa4 	bl	80054f8 <SysTick_Config>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e08d      	b.n	80056ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_DMA_Init+0x138>)
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d80f      	bhi.n	80055fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <HAL_DMA_Init+0x13c>)
 80055e2:	4413      	add	r3, r2
 80055e4:	4a45      	ldr	r2, [pc, #276]	; (80056fc <HAL_DMA_Init+0x140>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	009a      	lsls	r2, r3, #2
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a42      	ldr	r2, [pc, #264]	; (8005700 <HAL_DMA_Init+0x144>)
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
 80055f8:	e00e      	b.n	8005618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	4b40      	ldr	r3, [pc, #256]	; (8005704 <HAL_DMA_Init+0x148>)
 8005602:	4413      	add	r3, r2
 8005604:	4a3d      	ldr	r2, [pc, #244]	; (80056fc <HAL_DMA_Init+0x140>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	009a      	lsls	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a3c      	ldr	r2, [pc, #240]	; (8005708 <HAL_DMA_Init+0x14c>)
 8005616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa84 	bl	8005b78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005678:	d102      	bne.n	8005680 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005694:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <HAL_DMA_Init+0x104>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d80c      	bhi.n	80056c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 faa4 	bl	8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e008      	b.n	80056d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40020407 	.word	0x40020407
 80056f8:	bffdfff8 	.word	0xbffdfff8
 80056fc:	cccccccd 	.word	0xcccccccd
 8005700:	40020000 	.word	0x40020000
 8005704:	bffdfbf8 	.word	0xbffdfbf8
 8005708:	40020400 	.word	0x40020400

0800570c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_DMA_Start_IT+0x20>
 8005728:	2302      	movs	r3, #2
 800572a:	e066      	b.n	80057fa <HAL_DMA_Start_IT+0xee>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d155      	bne.n	80057ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f9c9 	bl	8005afc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 020e 	orr.w	r2, r2, #14
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e00f      	b.n	80057a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 020a 	orr.w	r2, r2, #10
 80057a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e005      	b.n	80057f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
 80057f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d005      	beq.n	8005826 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2204      	movs	r2, #4
 800581e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e037      	b.n	8005896 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 020e 	bic.w	r2, r2, #14
 8005834:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005844:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f003 021f 	and.w	r2, r3, #31
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2101      	movs	r1, #1
 8005864:	fa01 f202 	lsl.w	r2, r1, r2
 8005868:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005872:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800588a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005894:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d00d      	beq.n	80058e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2204      	movs	r2, #4
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e047      	b.n	8005978 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 020e 	bic.w	r2, r2, #14
 80058f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591c:	f003 021f 	and.w	r2, r3, #31
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2101      	movs	r1, #1
 8005926:	fa01 f202 	lsl.w	r2, r1, r2
 800592a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005934:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800594c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005956:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
    }
  }
  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2204      	movs	r2, #4
 80059a4:	409a      	lsls	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d026      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7a>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d021      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0204 	bic.w	r2, r2, #4
 80059d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	f003 021f 	and.w	r2, r3, #31
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2104      	movs	r1, #4
 80059e4:	fa01 f202 	lsl.w	r2, r1, r2
 80059e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d071      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059fa:	e06c      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2202      	movs	r2, #2
 8005a06:	409a      	lsls	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02e      	beq.n	8005a6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d029      	beq.n	8005a6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 020a 	bic.w	r2, r2, #10
 8005a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	f003 021f 	and.w	r2, r3, #31
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d038      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a6c:	e033      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2208      	movs	r2, #8
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02a      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d025      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020e 	bic.w	r2, r2, #14
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
}
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005aee:	b2db      	uxtb	r3, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f003 021f 	and.w	r2, r3, #31
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f202 	lsl.w	r2, r1, r2
 8005b38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d108      	bne.n	8005b5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b5a:	e007      	b.n	8005b6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d802      	bhi.n	8005b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b8c:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e001      	b.n	8005b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b94:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	3b08      	subs	r3, #8
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	009a      	lsls	r2, r3, #2
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2201      	movs	r2, #1
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40020407 	.word	0x40020407
 8005be4:	40020800 	.word	0x40020800
 8005be8:	40020820 	.word	0x40020820
 8005bec:	cccccccd 	.word	0xcccccccd
 8005bf0:	40020880 	.word	0x40020880

08005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	1000823f 	.word	0x1000823f
 8005c38:	40020940 	.word	0x40020940

08005c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c4a:	e15a      	b.n	8005f02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 814c 	beq.w	8005efc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d005      	beq.n	8005c7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d130      	bne.n	8005cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4013      	ands	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	f003 0201 	and.w	r2, r3, #1
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d017      	beq.n	8005d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d123      	bne.n	8005d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	08da      	lsrs	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3208      	adds	r2, #8
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	08da      	lsrs	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3208      	adds	r2, #8
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2203      	movs	r2, #3
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80a6 	beq.w	8005efc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db0:	4b5b      	ldr	r3, [pc, #364]	; (8005f20 <HAL_GPIO_Init+0x2e4>)
 8005db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db4:	4a5a      	ldr	r2, [pc, #360]	; (8005f20 <HAL_GPIO_Init+0x2e4>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6613      	str	r3, [r2, #96]	; 0x60
 8005dbc:	4b58      	ldr	r3, [pc, #352]	; (8005f20 <HAL_GPIO_Init+0x2e4>)
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc8:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <HAL_GPIO_Init+0x2e8>)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	3302      	adds	r3, #2
 8005dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	220f      	movs	r2, #15
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005df2:	d01f      	beq.n	8005e34 <HAL_GPIO_Init+0x1f8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a4c      	ldr	r2, [pc, #304]	; (8005f28 <HAL_GPIO_Init+0x2ec>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d019      	beq.n	8005e30 <HAL_GPIO_Init+0x1f4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a4b      	ldr	r2, [pc, #300]	; (8005f2c <HAL_GPIO_Init+0x2f0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_GPIO_Init+0x1f0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_GPIO_Init+0x2f4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00d      	beq.n	8005e28 <HAL_GPIO_Init+0x1ec>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a49      	ldr	r2, [pc, #292]	; (8005f34 <HAL_GPIO_Init+0x2f8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <HAL_GPIO_Init+0x1e8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a48      	ldr	r2, [pc, #288]	; (8005f38 <HAL_GPIO_Init+0x2fc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d101      	bne.n	8005e20 <HAL_GPIO_Init+0x1e4>
 8005e1c:	2305      	movs	r3, #5
 8005e1e:	e00a      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e20:	2306      	movs	r3, #6
 8005e22:	e008      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e24:	2304      	movs	r3, #4
 8005e26:	e006      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e004      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e002      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_GPIO_Init+0x1fa>
 8005e34:	2300      	movs	r3, #0
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	f002 0203 	and.w	r2, r2, #3
 8005e3c:	0092      	lsls	r2, r2, #2
 8005e3e:	4093      	lsls	r3, r2
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e46:	4937      	ldr	r1, [pc, #220]	; (8005f24 <HAL_GPIO_Init+0x2e8>)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e54:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4013      	ands	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e78:	4a30      	ldr	r2, [pc, #192]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ea2:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ef6:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <HAL_GPIO_Init+0x300>)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3301      	adds	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f47f ae9d 	bne.w	8005c4c <HAL_GPIO_Init+0x10>
  }
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40010000 	.word	0x40010000
 8005f28:	48000400 	.word	0x48000400
 8005f2c:	48000800 	.word	0x48000800
 8005f30:	48000c00 	.word	0x48000c00
 8005f34:	48001000 	.word	0x48001000
 8005f38:	48001400 	.word	0x48001400
 8005f3c:	40010400 	.word	0x40010400

08005f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	807b      	strh	r3, [r7, #2]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f50:	787b      	ldrb	r3, [r7, #1]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f56:	887a      	ldrh	r2, [r7, #2]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f5c:	e002      	b.n	8005f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f5e:	887a      	ldrh	r2, [r7, #2]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f86:	4a05      	ldr	r2, [pc, #20]	; (8005f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f806 	bl	8005fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e08d      	b.n	80060e4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fb fda1 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2224      	movs	r2, #36	; 0x24
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006006:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006016:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800602c:	609a      	str	r2, [r3, #8]
 800602e:	e006      	b.n	800603e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800603c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d108      	bne.n	8006058 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e007      	b.n	8006068 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006066:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800608a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69d9      	ldr	r1, [r3, #28]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	461a      	mov	r2, r3
 80060f8:	460b      	mov	r3, r1
 80060fa:	817b      	strh	r3, [r7, #10]
 80060fc:	4613      	mov	r3, r2
 80060fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b20      	cmp	r3, #32
 800610e:	f040 80ef 	bne.w	80062f0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800611c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006120:	d101      	bne.n	8006126 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006122:	2302      	movs	r3, #2
 8006124:	e0e5      	b.n	80062f2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006130:	2302      	movs	r3, #2
 8006132:	e0de      	b.n	80062f2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2221      	movs	r2, #33	; 0x21
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2210      	movs	r2, #16
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	893a      	ldrh	r2, [r7, #8]
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a66      	ldr	r2, [pc, #408]	; (80062fc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a66      	ldr	r2, [pc, #408]	; (8006300 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006168:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	2bff      	cmp	r3, #255	; 0xff
 8006172:	d906      	bls.n	8006182 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	22ff      	movs	r2, #255	; 0xff
 8006178:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800617a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e007      	b.n	8006192 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800618c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006190:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01a      	beq.n	80061d0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d074      	beq.n	80062c2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d022      	beq.n	8006226 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	4a47      	ldr	r2, [pc, #284]	; (8006304 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	4a46      	ldr	r2, [pc, #280]	; (8006308 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2200      	movs	r2, #0
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006210:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006216:	f7ff fa79 	bl	800570c <HAL_DMA_Start_IT>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d13a      	bne.n	800629a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8006224:	e013      	b.n	800624e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e051      	b.n	80062f2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006252:	b2db      	uxtb	r3, r3
 8006254:	3301      	adds	r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	8979      	ldrh	r1, [r7, #10]
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 fba3 	bl	80079ac <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006280:	2110      	movs	r1, #16
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f001 fbc4 	bl	8007a10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e028      	b.n	80062ec <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f043 0210 	orr.w	r2, r3, #16
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e017      	b.n	80062f2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a12      	ldr	r2, [pc, #72]	; (8006310 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80062c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	8979      	ldrh	r1, [r7, #10]
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f001 fb68 	bl	80079ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062e4:	2101      	movs	r1, #1
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f001 fb92 	bl	8007a10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	ffff0000 	.word	0xffff0000
 8006300:	0800692b 	.word	0x0800692b
 8006304:	080078ab 	.word	0x080078ab
 8006308:	08007941 	.word	0x08007941
 800630c:	80002000 	.word	0x80002000
 8006310:	080064eb 	.word	0x080064eb

08006314 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
  }
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00f      	beq.n	800638a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006388:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00f      	beq.n	80063b4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	f043 0208 	orr.w	r2, r3, #8
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	f043 0202 	orr.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 030b 	and.w	r3, r3, #11
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f91f 	bl	8007634 <I2C_ITError>
  }
}
 80063f6:	bf00      	nop
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
 800645a:	4613      	mov	r3, r2
 800645c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064dc:	b2db      	uxtb	r3, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af02      	add	r7, sp, #8
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <I2C_Master_ISR_IT+0x1e>
 8006504:	2302      	movs	r3, #2
 8006506:	e113      	b.n	8006730 <I2C_Master_ISR_IT+0x246>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2210      	movs	r2, #16
 800652a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006530:	f043 0204 	orr.w	r2, r3, #4
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 f992 	bl	8007862 <I2C_Flush_TXDR>
 800653e:	e0e4      	b.n	800670a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d022      	beq.n	8006590 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01d      	beq.n	8006590 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0304 	bic.w	r3, r3, #4
 800655a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800658e:	e0bc      	b.n	800670a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d128      	bne.n	80065ec <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d023      	beq.n	80065ec <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01e      	beq.n	80065ec <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a8 	beq.w	800670a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80065ea:	e08e      	b.n	800670a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d05c      	beq.n	80066b0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d057      	beq.n	80066b0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d040      	beq.n	800668c <I2C_Master_ISR_IT+0x1a2>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d13c      	bne.n	800668c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2bff      	cmp	r3, #255	; 0xff
 8006628:	d90e      	bls.n	8006648 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	22ff      	movs	r2, #255	; 0xff
 800662e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	b2da      	uxtb	r2, r3
 8006636:	8a79      	ldrh	r1, [r7, #18]
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 f9b3 	bl	80079ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006646:	e032      	b.n	80066ae <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800665a:	d00b      	beq.n	8006674 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006666:	8a79      	ldrh	r1, [r7, #18]
 8006668:	2000      	movs	r0, #0
 800666a:	9000      	str	r0, [sp, #0]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 f99d 	bl	80079ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006672:	e01c      	b.n	80066ae <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006678:	b2da      	uxtb	r2, r3
 800667a:	8a79      	ldrh	r1, [r7, #18]
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f001 f991 	bl	80079ac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800668a:	e010      	b.n	80066ae <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800669a:	d003      	beq.n	80066a4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fcb0 	bl	8007002 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066a2:	e032      	b.n	800670a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 ffc4 	bl	8007634 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066ac:	e02d      	b.n	800670a <I2C_Master_ISR_IT+0x220>
 80066ae:	e02c      	b.n	800670a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d027      	beq.n	800670a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d022      	beq.n	800670a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066dc:	d015      	beq.n	800670a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066e6:	d108      	bne.n	80066fa <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	e007      	b.n	800670a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fc81 	bl	8007002 <I2C_ITMasterSeqCplt>
 8006700:	e003      	b.n	800670a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 ff95 	bl	8007634 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fd07 	bl	8007134 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <I2C_Slave_ISR_IT+0x24>
 8006758:	2302      	movs	r3, #2
 800675a:	e0e2      	b.n	8006922 <I2C_Slave_ISR_IT+0x1ea>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006778:	6939      	ldr	r1, [r7, #16]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fda2 	bl	80072c4 <I2C_ITSlaveCplt>
 8006780:	e0ca      	b.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d04b      	beq.n	8006824 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006792:	2b00      	cmp	r3, #0
 8006794:	d046      	beq.n	8006824 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d128      	bne.n	80067f2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b28      	cmp	r3, #40	; 0x28
 80067aa:	d108      	bne.n	80067be <I2C_Slave_ISR_IT+0x86>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b2:	d104      	bne.n	80067be <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067b4:	6939      	ldr	r1, [r7, #16]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fee8 	bl	800758c <I2C_ITListenCplt>
 80067bc:	e031      	b.n	8006822 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b29      	cmp	r3, #41	; 0x29
 80067c8:	d10e      	bne.n	80067e8 <I2C_Slave_ISR_IT+0xb0>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067d0:	d00a      	beq.n	80067e8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2210      	movs	r2, #16
 80067d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f001 f841 	bl	8007862 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc4b 	bl	800707c <I2C_ITSlaveSeqCplt>
 80067e6:	e01c      	b.n	8006822 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2210      	movs	r2, #16
 80067ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067f0:	e08f      	b.n	8006912 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2210      	movs	r2, #16
 80067f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <I2C_Slave_ISR_IT+0xdc>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006812:	d17e      	bne.n	8006912 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	4619      	mov	r1, r3
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 ff0a 	bl	8007634 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006820:	e077      	b.n	8006912 <I2C_Slave_ISR_IT+0x1da>
 8006822:	e076      	b.n	8006912 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02f      	beq.n	800688e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006834:	2b00      	cmp	r3, #0
 8006836:	d02a      	beq.n	800688e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d14b      	bne.n	8006916 <I2C_Slave_ISR_IT+0x1de>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006884:	d047      	beq.n	8006916 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fbf8 	bl	800707c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800688c:	e043      	b.n	8006916 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80068a2:	6939      	ldr	r1, [r7, #16]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fb28 	bl	8006efa <I2C_ITAddrCplt>
 80068aa:	e035      	b.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d030      	beq.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02b      	beq.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80068fa:	e00d      	b.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006902:	d002      	beq.n	800690a <I2C_Slave_ISR_IT+0x1d2>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fbb6 	bl	800707c <I2C_ITSlaveSeqCplt>
 8006910:	e002      	b.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006916:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b088      	sub	sp, #32
 800692e:	af02      	add	r7, sp, #8
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <I2C_Master_ISR_DMA+0x1a>
 8006940:	2302      	movs	r3, #2
 8006942:	e0d9      	b.n	8006af8 <I2C_Master_ISR_DMA+0x1ce>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800695c:	2b00      	cmp	r3, #0
 800695e:	d011      	beq.n	8006984 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2210      	movs	r2, #16
 8006966:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	f043 0204 	orr.w	r2, r3, #4
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006974:	2120      	movs	r1, #32
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f001 f84a 	bl	8007a10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 ff70 	bl	8007862 <I2C_Flush_TXDR>
 8006982:	e0b4      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d071      	beq.n	8006a72 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006994:	2b00      	cmp	r3, #0
 8006996:	d06c      	beq.n	8006a72 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04e      	beq.n	8006a50 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069be:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2bff      	cmp	r3, #255	; 0xff
 80069c8:	d906      	bls.n	80069d8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80069d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	e010      	b.n	80069fa <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069ea:	d003      	beq.n	80069f4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e002      	b.n	80069fa <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069f8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	8a79      	ldrh	r1, [r7, #18]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 ffcf 	bl	80079ac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b22      	cmp	r3, #34	; 0x22
 8006a2a:	d108      	bne.n	8006a3e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a3a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a3c:	e057      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a4e:	e04e      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a5e:	d003      	beq.n	8006a68 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 face 	bl	8007002 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a66:	e042      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fde2 	bl	8007634 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a70:	e03d      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d028      	beq.n	8006ace <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d023      	beq.n	8006ace <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d119      	bne.n	8006ac4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a9e:	d025      	beq.n	8006aec <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aa8:	d108      	bne.n	8006abc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006aba:	e017      	b.n	8006aec <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 faa0 	bl	8007002 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006ac2:	e013      	b.n	8006aec <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ac4:	2140      	movs	r1, #64	; 0x40
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fdb4 	bl	8007634 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006acc:	e00e      	b.n	8006aec <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fb25 	bl	8007134 <I2C_ITMasterCplt>
 8006aea:	e000      	b.n	8006aee <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006aec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006b0c:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <I2C_Mem_ISR_DMA+0x244>)
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <I2C_Mem_ISR_DMA+0x1e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e10e      	b.n	8006d3c <I2C_Mem_ISR_DMA+0x23c>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d016      	beq.n	8006b5e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d011      	beq.n	8006b5e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b46:	f043 0204 	orr.w	r2, r3, #4
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b4e:	2120      	movs	r1, #32
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 ff5d 	bl	8007a10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fe83 	bl	8007862 <I2C_Flush_TXDR>
 8006b5c:	e0e9      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00e      	beq.n	8006b86 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50
 8006b84:	e0d5      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d05f      	beq.n	8006c50 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d05a      	beq.n	8006c50 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 ffbb 	bl	8007b18 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006ba2:	2110      	movs	r1, #16
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 ff33 	bl	8007a10 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d048      	beq.n	8006c46 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2bff      	cmp	r3, #255	; 0xff
 8006bbc:	d910      	bls.n	8006be0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	22ff      	movs	r2, #255	; 0xff
 8006bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc8:	b299      	uxth	r1, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fee7 	bl	80079ac <I2C_TransferConfig>
 8006bde:	e011      	b.n	8006c04 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bee:	b299      	uxth	r1, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fed4 	bl	80079ac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b22      	cmp	r3, #34	; 0x22
 8006c20:	d108      	bne.n	8006c34 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c30:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c32:	e07e      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c44:	e075      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c46:	2140      	movs	r1, #64	; 0x40
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fcf3 	bl	8007634 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c4e:	e070      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d05d      	beq.n	8006d16 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d058      	beq.n	8006d16 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c64:	2101      	movs	r1, #1
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 ff56 	bl	8007b18 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c6c:	2110      	movs	r1, #16
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fece 	bl	8007a10 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b22      	cmp	r3, #34	; 0x22
 8006c7e:	d101      	bne.n	8006c84 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006c80:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <I2C_Mem_ISR_DMA+0x248>)
 8006c82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d910      	bls.n	8006cb0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	22ff      	movs	r2, #255	; 0xff
 8006c92:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c98:	b299      	uxth	r1, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fe7f 	bl	80079ac <I2C_TransferConfig>
 8006cae:	e011      	b.n	8006cd4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	b299      	uxth	r1, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fe6c 	bl	80079ac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b22      	cmp	r3, #34	; 0x22
 8006cf0:	d108      	bne.n	8006d04 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d00:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d02:	e016      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d12:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d14:	e00d      	b.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fa01 	bl	8007134 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	80002000 	.word	0x80002000
 8006d48:	80002400 	.word	0x80002400

08006d4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <I2C_Slave_ISR_DMA+0x24>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e0c0      	b.n	8006ef2 <I2C_Slave_ISR_DMA+0x1a6>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fa98 	bl	80072c4 <I2C_ITSlaveCplt>
 8006d94:	e0a8      	b.n	8006ee8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8095 	beq.w	8006ecc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 808f 	beq.w	8006ecc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d07d      	beq.n	8006ebe <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006de0:	2301      	movs	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00c      	beq.n	8006e06 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d128      	bne.n	8006e5e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b28      	cmp	r3, #40	; 0x28
 8006e16:	d108      	bne.n	8006e2a <I2C_Slave_ISR_DMA+0xde>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1e:	d104      	bne.n	8006e2a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fbb2 	bl	800758c <I2C_ITListenCplt>
 8006e28:	e048      	b.n	8006ebc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b29      	cmp	r3, #41	; 0x29
 8006e34:	d10e      	bne.n	8006e54 <I2C_Slave_ISR_DMA+0x108>
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e3c:	d00a      	beq.n	8006e54 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2210      	movs	r2, #16
 8006e44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fd0b 	bl	8007862 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f915 	bl	800707c <I2C_ITSlaveSeqCplt>
 8006e52:	e033      	b.n	8006ebc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e5c:	e034      	b.n	8006ec8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2210      	movs	r2, #16
 8006e64:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0204 	orr.w	r2, r3, #4
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e78:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <I2C_Slave_ISR_DMA+0x13c>
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e86:	d11f      	bne.n	8006ec8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b21      	cmp	r3, #33	; 0x21
 8006e8c:	d002      	beq.n	8006e94 <I2C_Slave_ISR_DMA+0x148>
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	2b29      	cmp	r3, #41	; 0x29
 8006e92:	d103      	bne.n	8006e9c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2221      	movs	r2, #33	; 0x21
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
 8006e9a:	e008      	b.n	8006eae <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b22      	cmp	r3, #34	; 0x22
 8006ea0:	d002      	beq.n	8006ea8 <I2C_Slave_ISR_DMA+0x15c>
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea6:	d102      	bne.n	8006eae <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2222      	movs	r2, #34	; 0x22
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fbbd 	bl	8007634 <I2C_ITError>
      if (treatdmanack == 1U)
 8006eba:	e005      	b.n	8006ec8 <I2C_Slave_ISR_DMA+0x17c>
 8006ebc:	e004      	b.n	8006ec8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ec6:	e00f      	b.n	8006ee8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006ec8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eca:	e00d      	b.n	8006ee8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f809 	bl	8006efa <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f10:	2b28      	cmp	r3, #40	; 0x28
 8006f12:	d16a      	bne.n	8006fea <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	0c1b      	lsrs	r3, r3, #16
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	0c1b      	lsrs	r3, r3, #16
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006f32:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f40:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006f4e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d138      	bne.n	8006fca <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f58:	897b      	ldrh	r3, [r7, #10]
 8006f5a:	09db      	lsrs	r3, r3, #7
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	89bb      	ldrh	r3, [r7, #12]
 8006f60:	4053      	eors	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f003 0306 	and.w	r3, r3, #6
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d11c      	bne.n	8006fa6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f6c:	897b      	ldrh	r3, [r7, #10]
 8006f6e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d13b      	bne.n	8006ffa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f98:	89ba      	ldrh	r2, [r7, #12]
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fa55 	bl	800644e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006fa4:	e029      	b.n	8006ffa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006fa6:	893b      	ldrh	r3, [r7, #8]
 8006fa8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fdb2 	bl	8007b18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fbc:	89ba      	ldrh	r2, [r7, #12]
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fa43 	bl	800644e <HAL_I2C_AddrCallback>
}
 8006fc8:	e017      	b.n	8006ffa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fda2 	bl	8007b18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fdc:	89ba      	ldrh	r2, [r7, #12]
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fa33 	bl	800644e <HAL_I2C_AddrCallback>
}
 8006fe8:	e007      	b.n	8006ffa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2208      	movs	r2, #8
 8006ff0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b21      	cmp	r3, #33	; 0x21
 800701c:	d115      	bne.n	800704a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2211      	movs	r2, #17
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007032:	2101      	movs	r1, #1
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fd6f 	bl	8007b18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff f9db 	bl	80063fe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007048:	e014      	b.n	8007074 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2212      	movs	r2, #18
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800705e:	2102      	movs	r1, #2
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fd59 	bl	8007b18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff f9cf 	bl	8006412 <HAL_I2C_MasterRxCpltCallback>
}
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e00c      	b.n	80070ca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b29      	cmp	r3, #41	; 0x29
 80070d4:	d112      	bne.n	80070fc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2228      	movs	r2, #40	; 0x28
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2221      	movs	r2, #33	; 0x21
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fd16 	bl	8007b18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff f996 	bl	8006426 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070fa:	e017      	b.n	800712c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d111      	bne.n	800712c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2228      	movs	r2, #40	; 0x28
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2222      	movs	r2, #34	; 0x22
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007116:	2102      	movs	r1, #2
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fcfd 	bl	8007b18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff f987 	bl	800643a <HAL_I2C_SlaveRxCpltCallback>
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2220      	movs	r2, #32
 8007148:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b21      	cmp	r3, #33	; 0x21
 8007154:	d107      	bne.n	8007166 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007156:	2101      	movs	r1, #1
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fcdd 	bl	8007b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2211      	movs	r2, #17
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
 8007164:	e00c      	b.n	8007180 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b22      	cmp	r3, #34	; 0x22
 8007170:	d106      	bne.n	8007180 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007172:	2102      	movs	r1, #2
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fccf 	bl	8007b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2212      	movs	r2, #18
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6859      	ldr	r1, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	4b4c      	ldr	r3, [pc, #304]	; (80072bc <I2C_ITMasterCplt+0x188>)
 800718c:	400b      	ands	r3, r1
 800718e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a49      	ldr	r2, [pc, #292]	; (80072c0 <I2C_ITMasterCplt+0x18c>)
 800719a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2210      	movs	r2, #16
 80071ac:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f043 0204 	orr.w	r2, r3, #4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b60      	cmp	r3, #96	; 0x60
 80071c4:	d10a      	bne.n	80071dc <I2C_ITMasterCplt+0xa8>
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80071da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb40 	bl	8007862 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b60      	cmp	r3, #96	; 0x60
 80071f2:	d002      	beq.n	80071fa <I2C_ITMasterCplt+0xc6>
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d006      	beq.n	8007208 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa17 	bl	8007634 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007206:	e054      	b.n	80072b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b21      	cmp	r3, #33	; 0x21
 8007212:	d124      	bne.n	800725e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d10b      	bne.n	8007246 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff f91d 	bl	800647e <HAL_I2C_MemTxCpltCallback>
}
 8007244:	e035      	b.n	80072b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff f8d1 	bl	80063fe <HAL_I2C_MasterTxCpltCallback>
}
 800725c:	e029      	b.n	80072b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b22      	cmp	r3, #34	; 0x22
 8007268:	d123      	bne.n	80072b2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d10b      	bne.n	800729c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f8fc 	bl	8006492 <HAL_I2C_MemRxCpltCallback>
}
 800729a:	e00a      	b.n	80072b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff f8b0 	bl	8006412 <HAL_I2C_MasterRxCpltCallback>
}
 80072b2:	bf00      	nop
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	fe00e800 	.word	0xfe00e800
 80072c0:	ffff0000 	.word	0xffff0000

080072c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2220      	movs	r2, #32
 80072ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	2b21      	cmp	r3, #33	; 0x21
 80072f4:	d002      	beq.n	80072fc <I2C_ITSlaveCplt+0x38>
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	2b29      	cmp	r3, #41	; 0x29
 80072fa:	d108      	bne.n	800730e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80072fc:	f248 0101 	movw	r1, #32769	; 0x8001
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc09 	bl	8007b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2221      	movs	r2, #33	; 0x21
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
 800730c:	e019      	b.n	8007342 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	2b22      	cmp	r3, #34	; 0x22
 8007312:	d002      	beq.n	800731a <I2C_ITSlaveCplt+0x56>
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	2b2a      	cmp	r3, #42	; 0x2a
 8007318:	d108      	bne.n	800732c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800731a:	f248 0102 	movw	r1, #32770	; 0x8002
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fbfa 	bl	8007b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2222      	movs	r2, #34	; 0x22
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
 800732a:	e00a      	b.n	8007342 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	2b28      	cmp	r3, #40	; 0x28
 8007330:	d107      	bne.n	8007342 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007332:	f248 0103 	movw	r1, #32771	; 0x8003
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fbee 	bl	8007b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007350:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6859      	ldr	r1, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b89      	ldr	r3, [pc, #548]	; (8007584 <I2C_ITSlaveCplt+0x2c0>)
 800735e:	400b      	ands	r3, r1
 8007360:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa7d 	bl	8007862 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007380:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01f      	beq.n	80073ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007398:	e017      	b.n	80073ca <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d012      	beq.n	80073ca <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0304 	bic.w	r3, r3, #4
 80073da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	f043 0204 	orr.w	r2, r3, #4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	2b00      	cmp	r3, #0
 8007434:	d049      	beq.n	80074ca <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800743c:	2b00      	cmp	r3, #0
 800743e:	d044      	beq.n	80074ca <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d128      	bne.n	800749c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b28      	cmp	r3, #40	; 0x28
 8007454:	d108      	bne.n	8007468 <I2C_ITSlaveCplt+0x1a4>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800745c:	d104      	bne.n	8007468 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800745e:	6979      	ldr	r1, [r7, #20]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f893 	bl	800758c <I2C_ITListenCplt>
 8007466:	e030      	b.n	80074ca <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b29      	cmp	r3, #41	; 0x29
 8007472:	d10e      	bne.n	8007492 <I2C_ITSlaveCplt+0x1ce>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800747a:	d00a      	beq.n	8007492 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2210      	movs	r2, #16
 8007482:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9ec 	bl	8007862 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fdf6 	bl	800707c <I2C_ITSlaveSeqCplt>
 8007490:	e01b      	b.n	80074ca <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2210      	movs	r2, #16
 8007498:	61da      	str	r2, [r3, #28]
 800749a:	e016      	b.n	80074ca <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2210      	movs	r2, #16
 80074a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	f043 0204 	orr.w	r2, r3, #4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <I2C_ITSlaveCplt+0x1fa>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074bc:	d105      	bne.n	80074ca <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8b5 	bl	8007634 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d010      	beq.n	8007502 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8a4 	bl	8007634 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b28      	cmp	r3, #40	; 0x28
 80074f6:	d141      	bne.n	800757c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80074f8:	6979      	ldr	r1, [r7, #20]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f846 	bl	800758c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007500:	e03c      	b.n	800757c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800750a:	d014      	beq.n	8007536 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fdb5 	bl	800707c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <I2C_ITSlaveCplt+0x2c4>)
 8007516:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fe ff9b 	bl	800646a <HAL_I2C_ListenCpltCallback>
}
 8007534:	e022      	b.n	800757c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b22      	cmp	r3, #34	; 0x22
 8007540:	d10e      	bne.n	8007560 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fe ff6e 	bl	800643a <HAL_I2C_SlaveRxCpltCallback>
}
 800755e:	e00d      	b.n	800757c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fe ff55 	bl	8006426 <HAL_I2C_SlaveTxCpltCallback>
}
 800757c:	bf00      	nop
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	fe00e800 	.word	0xfe00e800
 8007588:	ffff0000 	.word	0xffff0000

0800758c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <I2C_ITListenCplt+0xa4>)
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d022      	beq.n	8007608 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d012      	beq.n	8007608 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007600:	f043 0204 	orr.w	r2, r3, #4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007608:	f248 0103 	movw	r1, #32771	; 0x8003
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa83 	bl	8007b18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2210      	movs	r2, #16
 8007618:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fe ff21 	bl	800646a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	ffff0000 	.word	0xffff0000

08007634 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007644:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a6d      	ldr	r2, [pc, #436]	; (8007808 <I2C_ITError+0x1d4>)
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b28      	cmp	r3, #40	; 0x28
 800766a:	d005      	beq.n	8007678 <I2C_ITError+0x44>
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b29      	cmp	r3, #41	; 0x29
 8007670:	d002      	beq.n	8007678 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b2a      	cmp	r3, #42	; 0x2a
 8007676:	d10b      	bne.n	8007690 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007678:	2103      	movs	r1, #3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa4c 	bl	8007b18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2228      	movs	r2, #40	; 0x28
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a60      	ldr	r2, [pc, #384]	; (800780c <I2C_ITError+0x1d8>)
 800768c:	635a      	str	r2, [r3, #52]	; 0x34
 800768e:	e030      	b.n	80076f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007690:	f248 0103 	movw	r1, #32771	; 0x8003
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa3f 	bl	8007b18 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8e1 	bl	8007862 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b60      	cmp	r3, #96	; 0x60
 80076aa:	d01f      	beq.n	80076ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d114      	bne.n	80076ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d109      	bne.n	80076e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2210      	movs	r2, #16
 80076d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076dc:	f043 0204 	orr.w	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2220      	movs	r2, #32
 80076ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d039      	beq.n	8007774 <I2C_ITError+0x140>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b11      	cmp	r3, #17
 8007704:	d002      	beq.n	800770c <I2C_ITError+0xd8>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b21      	cmp	r3, #33	; 0x21
 800770a:	d133      	bne.n	8007774 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771a:	d107      	bne.n	800772c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800772a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe f9d5 	bl	8005ae0 <HAL_DMA_GetState>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d017      	beq.n	800776c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	4a33      	ldr	r2, [pc, #204]	; (8007810 <I2C_ITError+0x1dc>)
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f8af 	bl	80058b4 <HAL_DMA_Abort_IT>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d04d      	beq.n	80077f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007766:	4610      	mov	r0, r2
 8007768:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800776a:	e045      	b.n	80077f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f851 	bl	8007814 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007772:	e041      	b.n	80077f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d039      	beq.n	80077f0 <I2C_ITError+0x1bc>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b12      	cmp	r3, #18
 8007780:	d002      	beq.n	8007788 <I2C_ITError+0x154>
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b22      	cmp	r3, #34	; 0x22
 8007786:	d133      	bne.n	80077f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007796:	d107      	bne.n	80077a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe f997 	bl	8005ae0 <HAL_DMA_GetState>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d017      	beq.n	80077e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	4a14      	ldr	r2, [pc, #80]	; (8007810 <I2C_ITError+0x1dc>)
 80077be:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe f871 	bl	80058b4 <HAL_DMA_Abort_IT>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077e6:	e009      	b.n	80077fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f813 	bl	8007814 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077ee:	e005      	b.n	80077fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f80f 	bl	8007814 <I2C_TreatErrorCallback>
  }
}
 80077f6:	e002      	b.n	80077fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077fc:	bf00      	nop
}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	ffff0000 	.word	0xffff0000
 800780c:	08006739 	.word	0x08006739
 8007810:	0800796f 	.word	0x0800796f

08007814 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b60      	cmp	r3, #96	; 0x60
 8007826:	d10e      	bne.n	8007846 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fe fe3b 	bl	80064ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007844:	e009      	b.n	800785a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7fe fe26 	bl	80064a6 <HAL_I2C_ErrorCallback>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d103      	bne.n	8007880 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b01      	cmp	r3, #1
 800788c:	d007      	beq.n	800789e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0201 	orr.w	r2, r2, #1
 800789c:	619a      	str	r2, [r3, #24]
  }
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078c6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80078d2:	2120      	movs	r1, #32
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f89b 	bl	8007a10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80078da:	e02d      	b.n	8007938 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2bff      	cmp	r3, #255	; 0xff
 80078f2:	d903      	bls.n	80078fc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	22ff      	movs	r2, #255	; 0xff
 80078f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80078fa:	e004      	b.n	8007906 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	4619      	mov	r1, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3328      	adds	r3, #40	; 0x28
 8007916:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800791c:	f7fd fef6 	bl	800570c <HAL_DMA_Start_IT>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007926:	2110      	movs	r1, #16
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff fe83 	bl	8007634 <I2C_ITError>
}
 800792e:	e003      	b.n	8007938 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007930:	2140      	movs	r1, #64	; 0x40
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f86c 	bl	8007a10 <I2C_Enable_IRQ>
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800795c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800795e:	2110      	movs	r1, #16
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fe67 	bl	8007634 <I2C_ITError>
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	2200      	movs	r2, #0
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007998:	2200      	movs	r2, #0
 800799a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff ff39 	bl	8007814 <I2C_TreatErrorCallback>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	817b      	strh	r3, [r7, #10]
 80079ba:	4613      	mov	r3, r2
 80079bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079c4:	7a7b      	ldrb	r3, [r7, #9]
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	0d5b      	lsrs	r3, r3, #21
 80079e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <I2C_TransferConfig+0x60>)
 80079ec:	430b      	orrs	r3, r1
 80079ee:	43db      	mvns	r3, r3
 80079f0:	ea02 0103 	and.w	r1, r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	03ff63ff 	.word	0x03ff63ff

08007a10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	4a39      	ldr	r2, [pc, #228]	; (8007b0c <I2C_Enable_IRQ+0xfc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d032      	beq.n	8007a90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007a2e:	4a38      	ldr	r2, [pc, #224]	; (8007b10 <I2C_Enable_IRQ+0x100>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d02d      	beq.n	8007a90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007a38:	4a36      	ldr	r2, [pc, #216]	; (8007b14 <I2C_Enable_IRQ+0x104>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d028      	beq.n	8007a90 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da03      	bge.n	8007a4e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007a5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007a70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a72:	887b      	ldrh	r3, [r7, #2]
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d103      	bne.n	8007a80 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007a7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a80:	887b      	ldrh	r3, [r7, #2]
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d133      	bne.n	8007aee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f043 0320 	orr.w	r3, r3, #32
 8007a8c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a8e:	e02e      	b.n	8007aee <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da03      	bge.n	8007aa0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007aa0:	887b      	ldrh	r3, [r7, #2]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007ab0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007ac2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d103      	bne.n	8007ad2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007ad0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d103      	bne.n	8007ae0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ade:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ae0:	887b      	ldrh	r3, [r7, #2]
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d103      	bne.n	8007aee <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	0800692b 	.word	0x0800692b
 8007b10:	08006d4d 	.word	0x08006d4d
 8007b14:	08006b01 	.word	0x08006b01

08007b18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b28:	887b      	ldrh	r3, [r7, #2]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007b38:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b46:	2b28      	cmp	r3, #40	; 0x28
 8007b48:	d003      	beq.n	8007b52 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b52:	887b      	ldrh	r3, [r7, #2]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007b62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b70:	2b28      	cmp	r3, #40	; 0x28
 8007b72:	d003      	beq.n	8007b7c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da03      	bge.n	8007b8c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	2b10      	cmp	r3, #16
 8007b90:	d103      	bne.n	8007b9a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007b98:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b9a:	887b      	ldrh	r3, [r7, #2]
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d103      	bne.n	8007ba8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d103      	bne.n	8007bb6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6819      	ldr	r1, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]
}
 8007bc8:	bf00      	nop
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d138      	bne.n	8007c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e032      	b.n	8007c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2224      	movs	r2, #36	; 0x24
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d139      	bne.n	8007cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e033      	b.n	8007cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2224      	movs	r2, #36	; 0x24
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e000      	b.n	8007cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
  }
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d141      	bne.n	8007d96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d12:	4b4b      	ldr	r3, [pc, #300]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d1e:	d131      	bne.n	8007d84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d20:	4b47      	ldr	r3, [pc, #284]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d26:	4a46      	ldr	r2, [pc, #280]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d30:	4b43      	ldr	r3, [pc, #268]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d38:	4a41      	ldr	r2, [pc, #260]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d40:	4b40      	ldr	r3, [pc, #256]	; (8007e44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2232      	movs	r2, #50	; 0x32
 8007d46:	fb02 f303 	mul.w	r3, r2, r3
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	; (8007e48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	0c9b      	lsrs	r3, r3, #18
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d56:	e002      	b.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d5e:	4b38      	ldr	r3, [pc, #224]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6a:	d102      	bne.n	8007d72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f2      	bne.n	8007d58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d72:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7e:	d158      	bne.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e057      	b.n	8007e34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d84:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d8a:	4a2d      	ldr	r2, [pc, #180]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d94:	e04d      	b.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d141      	bne.n	8007e22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d9e:	4b28      	ldr	r3, [pc, #160]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007daa:	d131      	bne.n	8007e10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dac:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db2:	4a23      	ldr	r2, [pc, #140]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007dc4:	4a1e      	ldr	r2, [pc, #120]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007dcc:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2232      	movs	r2, #50	; 0x32
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ddc:	0c9b      	lsrs	r3, r3, #18
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007de2:	e002      	b.n	8007dea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df6:	d102      	bne.n	8007dfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f2      	bne.n	8007de4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0a:	d112      	bne.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e011      	b.n	8007e34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e20:	e007      	b.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e22:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e2a:	4a05      	ldr	r2, [pc, #20]	; (8007e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40007000 	.word	0x40007000
 8007e44:	2000003c 	.word	0x2000003c
 8007e48:	431bde83 	.word	0x431bde83

08007e4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e5a:	6093      	str	r3, [r2, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40007000 	.word	0x40007000

08007e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e2fe      	b.n	800847c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d075      	beq.n	8007f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e8a:	4b97      	ldr	r3, [pc, #604]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 030c 	and.w	r3, r3, #12
 8007e92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e94:	4b94      	ldr	r3, [pc, #592]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	d102      	bne.n	8007eaa <HAL_RCC_OscConfig+0x3e>
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d002      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x44>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d10b      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eb0:	4b8d      	ldr	r3, [pc, #564]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05b      	beq.n	8007f74 <HAL_RCC_OscConfig+0x108>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d157      	bne.n	8007f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e2d9      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed0:	d106      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x74>
 8007ed2:	4b85      	ldr	r3, [pc, #532]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a84      	ldr	r2, [pc, #528]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e01d      	b.n	8007f1c <HAL_RCC_OscConfig+0xb0>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ee8:	d10c      	bne.n	8007f04 <HAL_RCC_OscConfig+0x98>
 8007eea:	4b7f      	ldr	r3, [pc, #508]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a7e      	ldr	r2, [pc, #504]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	4b7c      	ldr	r3, [pc, #496]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a7b      	ldr	r2, [pc, #492]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	e00b      	b.n	8007f1c <HAL_RCC_OscConfig+0xb0>
 8007f04:	4b78      	ldr	r3, [pc, #480]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a77      	ldr	r2, [pc, #476]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	4b75      	ldr	r3, [pc, #468]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a74      	ldr	r2, [pc, #464]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d013      	beq.n	8007f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fb fd94 	bl	8003a50 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f2c:	f7fb fd90 	bl	8003a50 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b64      	cmp	r3, #100	; 0x64
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e29e      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f3e:	4b6a      	ldr	r3, [pc, #424]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f0      	beq.n	8007f2c <HAL_RCC_OscConfig+0xc0>
 8007f4a:	e014      	b.n	8007f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fb fd80 	bl	8003a50 <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f54:	f7fb fd7c 	bl	8003a50 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	; 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e28a      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f66:	4b60      	ldr	r3, [pc, #384]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f0      	bne.n	8007f54 <HAL_RCC_OscConfig+0xe8>
 8007f72:	e000      	b.n	8007f76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d075      	beq.n	800806e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f82:	4b59      	ldr	r3, [pc, #356]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 030c 	and.w	r3, r3, #12
 8007f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f8c:	4b56      	ldr	r3, [pc, #344]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b0c      	cmp	r3, #12
 8007f9a:	d102      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x136>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d002      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x13c>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d11f      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa8:	4b4f      	ldr	r3, [pc, #316]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x154>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e25d      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc0:	4b49      	ldr	r3, [pc, #292]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	4946      	ldr	r1, [pc, #280]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fd4:	4b45      	ldr	r3, [pc, #276]	; (80080ec <HAL_RCC_OscConfig+0x280>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fb fced 	bl	80039b8 <HAL_InitTick>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d043      	beq.n	800806c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e249      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d023      	beq.n	8008038 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ff0:	4b3d      	ldr	r3, [pc, #244]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a3c      	ldr	r2, [pc, #240]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8007ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fb fd28 	bl	8003a50 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008004:	f7fb fd24 	bl	8003a50 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e232      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008016:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008022:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	492d      	ldr	r1, [pc, #180]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	604b      	str	r3, [r1, #4]
 8008036:	e01a      	b.n	800806e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008038:	4b2b      	ldr	r3, [pc, #172]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 800803e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008044:	f7fb fd04 	bl	8003a50 <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800804c:	f7fb fd00 	bl	8003a50 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e20e      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800805e:	4b22      	ldr	r3, [pc, #136]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f0      	bne.n	800804c <HAL_RCC_OscConfig+0x1e0>
 800806a:	e000      	b.n	800806e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800806c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d041      	beq.n	80080fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01c      	beq.n	80080bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008082:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 8008084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008088:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008092:	f7fb fcdd 	bl	8003a50 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809a:	f7fb fcd9 	bl	8003a50 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e1e7      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080ac:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 80080ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0ef      	beq.n	800809a <HAL_RCC_OscConfig+0x22e>
 80080ba:	e020      	b.n	80080fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 80080be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <HAL_RCC_OscConfig+0x27c>)
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080cc:	f7fb fcc0 	bl	8003a50 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080d2:	e00d      	b.n	80080f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d4:	f7fb fcbc 	bl	8003a50 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d906      	bls.n	80080f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e1ca      	b.n	800847c <HAL_RCC_OscConfig+0x610>
 80080e6:	bf00      	nop
 80080e8:	40021000 	.word	0x40021000
 80080ec:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080f0:	4b8c      	ldr	r3, [pc, #560]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80080f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1ea      	bne.n	80080d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a6 	beq.w	8008258 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800810c:	2300      	movs	r3, #0
 800810e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008110:	4b84      	ldr	r3, [pc, #528]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_RCC_OscConfig+0x2b4>
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <HAL_RCC_OscConfig+0x2b6>
 8008120:	2300      	movs	r3, #0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008126:	4b7f      	ldr	r3, [pc, #508]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	4a7e      	ldr	r2, [pc, #504]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800812c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008130:	6593      	str	r3, [r2, #88]	; 0x58
 8008132:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800813e:	2301      	movs	r3, #1
 8008140:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008142:	4b79      	ldr	r3, [pc, #484]	; (8008328 <HAL_RCC_OscConfig+0x4bc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d118      	bne.n	8008180 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800814e:	4b76      	ldr	r3, [pc, #472]	; (8008328 <HAL_RCC_OscConfig+0x4bc>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a75      	ldr	r2, [pc, #468]	; (8008328 <HAL_RCC_OscConfig+0x4bc>)
 8008154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800815a:	f7fb fc79 	bl	8003a50 <HAL_GetTick>
 800815e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008162:	f7fb fc75 	bl	8003a50 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e183      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008174:	4b6c      	ldr	r3, [pc, #432]	; (8008328 <HAL_RCC_OscConfig+0x4bc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d108      	bne.n	800819a <HAL_RCC_OscConfig+0x32e>
 8008188:	4b66      	ldr	r3, [pc, #408]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	4a65      	ldr	r2, [pc, #404]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008198:	e024      	b.n	80081e4 <HAL_RCC_OscConfig+0x378>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2b05      	cmp	r3, #5
 80081a0:	d110      	bne.n	80081c4 <HAL_RCC_OscConfig+0x358>
 80081a2:	4b60      	ldr	r3, [pc, #384]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a8:	4a5e      	ldr	r2, [pc, #376]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081aa:	f043 0304 	orr.w	r3, r3, #4
 80081ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081b2:	4b5c      	ldr	r3, [pc, #368]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b8:	4a5a      	ldr	r2, [pc, #360]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081c2:	e00f      	b.n	80081e4 <HAL_RCC_OscConfig+0x378>
 80081c4:	4b57      	ldr	r3, [pc, #348]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ca:	4a56      	ldr	r2, [pc, #344]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081d4:	4b53      	ldr	r3, [pc, #332]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081da:	4a52      	ldr	r2, [pc, #328]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80081dc:	f023 0304 	bic.w	r3, r3, #4
 80081e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d016      	beq.n	800821a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ec:	f7fb fc30 	bl	8003a50 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081f2:	e00a      	b.n	800820a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081f4:	f7fb fc2c 	bl	8003a50 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008202:	4293      	cmp	r3, r2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e138      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800820a:	4b46      	ldr	r3, [pc, #280]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0ed      	beq.n	80081f4 <HAL_RCC_OscConfig+0x388>
 8008218:	e015      	b.n	8008246 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821a:	f7fb fc19 	bl	8003a50 <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008220:	e00a      	b.n	8008238 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008222:	f7fb fc15 	bl	8003a50 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008230:	4293      	cmp	r3, r2
 8008232:	d901      	bls.n	8008238 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e121      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008238:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1ed      	bne.n	8008222 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008246:	7ffb      	ldrb	r3, [r7, #31]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d105      	bne.n	8008258 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800824c:	4b35      	ldr	r3, [pc, #212]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	4a34      	ldr	r2, [pc, #208]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008256:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d03c      	beq.n	80082de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01c      	beq.n	80082a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800826c:	4b2d      	ldr	r3, [pc, #180]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 800826e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008272:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827c:	f7fb fbe8 	bl	8003a50 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008284:	f7fb fbe4 	bl	8003a50 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e0f2      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008296:	4b23      	ldr	r3, [pc, #140]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0ef      	beq.n	8008284 <HAL_RCC_OscConfig+0x418>
 80082a4:	e01b      	b.n	80082de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082a6:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80082a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082ac:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b6:	f7fb fbcb 	bl	8003a50 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082be:	f7fb fbc7 	bl	8003a50 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e0d5      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80082d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1ef      	bne.n	80082be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80c9 	beq.w	800847a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082e8:	4b0e      	ldr	r3, [pc, #56]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 030c 	and.w	r3, r3, #12
 80082f0:	2b0c      	cmp	r3, #12
 80082f2:	f000 8083 	beq.w	80083fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d15e      	bne.n	80083bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a08      	ldr	r2, [pc, #32]	; (8008324 <HAL_RCC_OscConfig+0x4b8>)
 8008304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830a:	f7fb fba1 	bl	8003a50 <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008310:	e00c      	b.n	800832c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008312:	f7fb fb9d 	bl	8003a50 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d905      	bls.n	800832c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e0ab      	b.n	800847c <HAL_RCC_OscConfig+0x610>
 8008324:	40021000 	.word	0x40021000
 8008328:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800832c:	4b55      	ldr	r3, [pc, #340]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1ec      	bne.n	8008312 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008338:	4b52      	ldr	r3, [pc, #328]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	4b52      	ldr	r3, [pc, #328]	; (8008488 <HAL_RCC_OscConfig+0x61c>)
 800833e:	4013      	ands	r3, r2
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6a11      	ldr	r1, [r2, #32]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008348:	3a01      	subs	r2, #1
 800834a:	0112      	lsls	r2, r2, #4
 800834c:	4311      	orrs	r1, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008352:	0212      	lsls	r2, r2, #8
 8008354:	4311      	orrs	r1, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800835a:	0852      	lsrs	r2, r2, #1
 800835c:	3a01      	subs	r2, #1
 800835e:	0552      	lsls	r2, r2, #21
 8008360:	4311      	orrs	r1, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008366:	0852      	lsrs	r2, r2, #1
 8008368:	3a01      	subs	r2, #1
 800836a:	0652      	lsls	r2, r2, #25
 800836c:	4311      	orrs	r1, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008372:	06d2      	lsls	r2, r2, #27
 8008374:	430a      	orrs	r2, r1
 8008376:	4943      	ldr	r1, [pc, #268]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 8008378:	4313      	orrs	r3, r2
 800837a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800837c:	4b41      	ldr	r3, [pc, #260]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a40      	ldr	r2, [pc, #256]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 8008382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008386:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008388:	4b3e      	ldr	r3, [pc, #248]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	4a3d      	ldr	r2, [pc, #244]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800838e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008392:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fb fb5c 	bl	8003a50 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800839c:	f7fb fb58 	bl	8003a50 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e066      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x530>
 80083ba:	e05e      	b.n	800847a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083bc:	4b31      	ldr	r3, [pc, #196]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a30      	ldr	r2, [pc, #192]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fb fb42 	bl	8003a50 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083d0:	f7fb fb3e 	bl	8003a50 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e04c      	b.n	800847c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083e2:	4b28      	ldr	r3, [pc, #160]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083ee:	4b25      	ldr	r3, [pc, #148]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	4924      	ldr	r1, [pc, #144]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <HAL_RCC_OscConfig+0x620>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	60cb      	str	r3, [r1, #12]
 80083fa:	e03e      	b.n	800847a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e039      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008408:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <HAL_RCC_OscConfig+0x618>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f003 0203 	and.w	r2, r3, #3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	429a      	cmp	r2, r3
 800841a:	d12c      	bne.n	8008476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	3b01      	subs	r3, #1
 8008428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d123      	bne.n	8008476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d11b      	bne.n	8008476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800844a:	429a      	cmp	r2, r3
 800844c:	d113      	bne.n	8008476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	3b01      	subs	r3, #1
 800845c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800845e:	429a      	cmp	r2, r3
 8008460:	d109      	bne.n	8008476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	3b01      	subs	r3, #1
 8008470:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008472:	429a      	cmp	r2, r3
 8008474:	d001      	beq.n	800847a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40021000 	.word	0x40021000
 8008488:	019f800c 	.word	0x019f800c
 800848c:	feeefffc 	.word	0xfeeefffc

08008490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e11e      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084a8:	4b91      	ldr	r3, [pc, #580]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d910      	bls.n	80084d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b6:	4b8e      	ldr	r3, [pc, #568]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 020f 	bic.w	r2, r3, #15
 80084be:	498c      	ldr	r1, [pc, #560]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084c6:	4b8a      	ldr	r3, [pc, #552]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e106      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d073      	beq.n	80085cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d129      	bne.n	8008540 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ec:	4b81      	ldr	r3, [pc, #516]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0f4      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084fc:	f000 f99e 	bl	800883c <RCC_GetSysClockFreqFromPLLSource>
 8008500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	4a7c      	ldr	r2, [pc, #496]	; (80086f8 <HAL_RCC_ClockConfig+0x268>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d93f      	bls.n	800858a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800850a:	4b7a      	ldr	r3, [pc, #488]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800851e:	2b00      	cmp	r3, #0
 8008520:	d033      	beq.n	800858a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008526:	2b00      	cmp	r3, #0
 8008528:	d12f      	bne.n	800858a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800852a:	4b72      	ldr	r3, [pc, #456]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008532:	4a70      	ldr	r2, [pc, #448]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e024      	b.n	800858a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d107      	bne.n	8008558 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008548:	4b6a      	ldr	r3, [pc, #424]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e0c6      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008558:	4b66      	ldr	r3, [pc, #408]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e0be      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008568:	f000 f8ce 	bl	8008708 <HAL_RCC_GetSysClockFreq>
 800856c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	4a61      	ldr	r2, [pc, #388]	; (80086f8 <HAL_RCC_ClockConfig+0x268>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d909      	bls.n	800858a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008576:	4b5f      	ldr	r3, [pc, #380]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800857e:	4a5d      	ldr	r2, [pc, #372]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008584:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800858a:	4b5a      	ldr	r3, [pc, #360]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f023 0203 	bic.w	r2, r3, #3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4957      	ldr	r1, [pc, #348]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008598:	4313      	orrs	r3, r2
 800859a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800859c:	f7fb fa58 	bl	8003a50 <HAL_GetTick>
 80085a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085a2:	e00a      	b.n	80085ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a4:	f7fb fa54 	bl	8003a50 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e095      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ba:	4b4e      	ldr	r3, [pc, #312]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 020c 	and.w	r2, r3, #12
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d1eb      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d023      	beq.n	8008620 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e4:	4b43      	ldr	r3, [pc, #268]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a42      	ldr	r2, [pc, #264]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80085ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085fc:	4b3d      	ldr	r3, [pc, #244]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008604:	4a3b      	ldr	r2, [pc, #236]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800860a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800860c:	4b39      	ldr	r3, [pc, #228]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	4936      	ldr	r1, [pc, #216]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800861a:	4313      	orrs	r3, r2
 800861c:	608b      	str	r3, [r1, #8]
 800861e:	e008      	b.n	8008632 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d105      	bne.n	8008632 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008626:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	4a32      	ldr	r2, [pc, #200]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800862c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008630:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008632:	4b2f      	ldr	r3, [pc, #188]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d21d      	bcs.n	800867c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008640:	4b2b      	ldr	r3, [pc, #172]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f023 020f 	bic.w	r2, r3, #15
 8008648:	4929      	ldr	r1, [pc, #164]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	4313      	orrs	r3, r2
 800864e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008650:	f7fb f9fe 	bl	8003a50 <HAL_GetTick>
 8008654:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008656:	e00a      	b.n	800866e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008658:	f7fb f9fa 	bl	8003a50 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	f241 3288 	movw	r2, #5000	; 0x1388
 8008666:	4293      	cmp	r3, r2
 8008668:	d901      	bls.n	800866e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e03b      	b.n	80086e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800866e:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <HAL_RCC_ClockConfig+0x260>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	429a      	cmp	r2, r3
 800867a:	d1ed      	bne.n	8008658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4917      	ldr	r1, [pc, #92]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 8008696:	4313      	orrs	r3, r2
 8008698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086a6:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	490f      	ldr	r1, [pc, #60]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086ba:	f000 f825 	bl	8008708 <HAL_RCC_GetSysClockFreq>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <HAL_RCC_ClockConfig+0x264>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	091b      	lsrs	r3, r3, #4
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	490c      	ldr	r1, [pc, #48]	; (80086fc <HAL_RCC_ClockConfig+0x26c>)
 80086cc:	5ccb      	ldrb	r3, [r1, r3]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <HAL_RCC_ClockConfig+0x270>)
 80086d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <HAL_RCC_ClockConfig+0x274>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fb f96a 	bl	80039b8 <HAL_InitTick>
 80086e4:	4603      	mov	r3, r0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40022000 	.word	0x40022000
 80086f4:	40021000 	.word	0x40021000
 80086f8:	04c4b400 	.word	0x04c4b400
 80086fc:	0800cdec 	.word	0x0800cdec
 8008700:	2000003c 	.word	0x2000003c
 8008704:	20000040 	.word	0x20000040

08008708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800870e:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	2b04      	cmp	r3, #4
 8008718:	d102      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800871a:	4b2a      	ldr	r3, [pc, #168]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e047      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 030c 	and.w	r3, r3, #12
 8008728:	2b08      	cmp	r3, #8
 800872a:	d102      	bne.n	8008732 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800872c:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800872e:	613b      	str	r3, [r7, #16]
 8008730:	e03e      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	2b0c      	cmp	r3, #12
 800873c:	d136      	bne.n	80087ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	3301      	adds	r3, #1
 8008754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d10c      	bne.n	8008776 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008766:	68d2      	ldr	r2, [r2, #12]
 8008768:	0a12      	lsrs	r2, r2, #8
 800876a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800876e:	fb02 f303 	mul.w	r3, r2, r3
 8008772:	617b      	str	r3, [r7, #20]
      break;
 8008774:	e00c      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008776:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	fbb2 f3f3 	udiv	r3, r2, r3
 800877e:	4a10      	ldr	r2, [pc, #64]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008780:	68d2      	ldr	r2, [r2, #12]
 8008782:	0a12      	lsrs	r2, r2, #8
 8008784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008788:	fb02 f303 	mul.w	r3, r2, r3
 800878c:	617b      	str	r3, [r7, #20]
      break;
 800878e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	0e5b      	lsrs	r3, r3, #25
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	3301      	adds	r3, #1
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	e001      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087b0:	693b      	ldr	r3, [r7, #16]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40021000 	.word	0x40021000
 80087c4:	00f42400 	.word	0x00f42400
 80087c8:	016e3600 	.word	0x016e3600

080087cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087d0:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80087d2:	681b      	ldr	r3, [r3, #0]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	2000003c 	.word	0x2000003c

080087e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80087e8:	f7ff fff0 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 80087ec:	4602      	mov	r2, r0
 80087ee:	4b06      	ldr	r3, [pc, #24]	; (8008808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	4904      	ldr	r1, [pc, #16]	; (800880c <HAL_RCC_GetPCLK1Freq+0x28>)
 80087fa:	5ccb      	ldrb	r3, [r1, r3]
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	40021000 	.word	0x40021000
 800880c:	0800cdfc 	.word	0x0800cdfc

08008810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008814:	f7ff ffda 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 8008818:	4602      	mov	r2, r0
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	0adb      	lsrs	r3, r3, #11
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	4904      	ldr	r1, [pc, #16]	; (8008838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008826:	5ccb      	ldrb	r3, [r1, r3]
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008830:	4618      	mov	r0, r3
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40021000 	.word	0x40021000
 8008838:	0800cdfc 	.word	0x0800cdfc

0800883c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008842:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800884c:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	091b      	lsrs	r3, r3, #4
 8008852:	f003 030f 	and.w	r3, r3, #15
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d10c      	bne.n	800887a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008860:	4a17      	ldr	r2, [pc, #92]	; (80088c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	4a14      	ldr	r2, [pc, #80]	; (80088bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800886a:	68d2      	ldr	r2, [r2, #12]
 800886c:	0a12      	lsrs	r2, r2, #8
 800886e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	617b      	str	r3, [r7, #20]
    break;
 8008878:	e00c      	b.n	8008894 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008882:	4a0e      	ldr	r2, [pc, #56]	; (80088bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008884:	68d2      	ldr	r2, [r2, #12]
 8008886:	0a12      	lsrs	r2, r2, #8
 8008888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800888c:	fb02 f303 	mul.w	r3, r2, r3
 8008890:	617b      	str	r3, [r7, #20]
    break;
 8008892:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	0e5b      	lsrs	r3, r3, #25
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	3301      	adds	r3, #1
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80088ae:	687b      	ldr	r3, [r7, #4]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	371c      	adds	r7, #28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40021000 	.word	0x40021000
 80088c0:	016e3600 	.word	0x016e3600
 80088c4:	00f42400 	.word	0x00f42400

080088c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088d0:	2300      	movs	r3, #0
 80088d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088d4:	2300      	movs	r3, #0
 80088d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8098 	beq.w	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088e6:	2300      	movs	r3, #0
 80088e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ea:	4b43      	ldr	r3, [pc, #268]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10d      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088f6:	4b40      	ldr	r3, [pc, #256]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fa:	4a3f      	ldr	r2, [pc, #252]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008900:	6593      	str	r3, [r2, #88]	; 0x58
 8008902:	4b3d      	ldr	r3, [pc, #244]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890a:	60bb      	str	r3, [r7, #8]
 800890c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800890e:	2301      	movs	r3, #1
 8008910:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008912:	4b3a      	ldr	r3, [pc, #232]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a39      	ldr	r2, [pc, #228]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800891e:	f7fb f897 	bl	8003a50 <HAL_GetTick>
 8008922:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008924:	e009      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008926:	f7fb f893 	bl	8003a50 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d902      	bls.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	74fb      	strb	r3, [r7, #19]
        break;
 8008938:	e005      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893a:	4b30      	ldr	r3, [pc, #192]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008946:	7cfb      	ldrb	r3, [r7, #19]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d159      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800894c:	4b2a      	ldr	r3, [pc, #168]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800894e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008956:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01e      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d019      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008968:	4b23      	ldr	r3, [pc, #140]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008974:	4b20      	ldr	r3, [pc, #128]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897a:	4a1f      	ldr	r2, [pc, #124]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800897c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800898c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008994:	4a18      	ldr	r2, [pc, #96]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a6:	f7fb f853 	bl	8003a50 <HAL_GetTick>
 80089aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ac:	e00b      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ae:	f7fb f84f 	bl	8003a50 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089bc:	4293      	cmp	r3, r2
 80089be:	d902      	bls.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	74fb      	strb	r3, [r7, #19]
            break;
 80089c4:	e006      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089c6:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0ec      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089d4:	7cfb      	ldrb	r3, [r7, #19]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089da:	4b07      	ldr	r3, [pc, #28]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e8:	4903      	ldr	r1, [pc, #12]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80089f0:	e008      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80089f2:	7cfb      	ldrb	r3, [r7, #19]
 80089f4:	74bb      	strb	r3, [r7, #18]
 80089f6:	e005      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80089f8:	40021000 	.word	0x40021000
 80089fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	7cfb      	ldrb	r3, [r7, #19]
 8008a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a04:	7c7b      	ldrb	r3, [r7, #17]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d105      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a0a:	4ba7      	ldr	r3, [pc, #668]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	4aa6      	ldr	r2, [pc, #664]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a22:	4ba1      	ldr	r3, [pc, #644]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a28:	f023 0203 	bic.w	r2, r3, #3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	499d      	ldr	r1, [pc, #628]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00a      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a44:	4b98      	ldr	r3, [pc, #608]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	f023 020c 	bic.w	r2, r3, #12
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	4995      	ldr	r1, [pc, #596]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a66:	4b90      	ldr	r3, [pc, #576]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	498c      	ldr	r1, [pc, #560]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a88:	4b87      	ldr	r3, [pc, #540]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	4984      	ldr	r1, [pc, #528]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008aaa:	4b7f      	ldr	r3, [pc, #508]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	497b      	ldr	r1, [pc, #492]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00a      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008acc:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	4973      	ldr	r1, [pc, #460]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008aee:	4b6e      	ldr	r3, [pc, #440]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	496a      	ldr	r1, [pc, #424]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b10:	4b65      	ldr	r3, [pc, #404]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	4962      	ldr	r1, [pc, #392]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b32:	4b5d      	ldr	r3, [pc, #372]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	4959      	ldr	r1, [pc, #356]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b54:	4b54      	ldr	r3, [pc, #336]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b5a:	f023 0203 	bic.w	r2, r3, #3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	4951      	ldr	r1, [pc, #324]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b76:	4b4c      	ldr	r3, [pc, #304]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4948      	ldr	r1, [pc, #288]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d015      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b98:	4b43      	ldr	r3, [pc, #268]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	4940      	ldr	r1, [pc, #256]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb6:	d105      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb8:	4b3b      	ldr	r3, [pc, #236]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4a3a      	ldr	r2, [pc, #232]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d015      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bde:	4932      	ldr	r1, [pc, #200]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bee:	d105      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a2c      	ldr	r2, [pc, #176]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d015      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c08:	4b27      	ldr	r3, [pc, #156]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	4924      	ldr	r1, [pc, #144]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c26:	d105      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c28:	4b1f      	ldr	r3, [pc, #124]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d015      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4e:	4916      	ldr	r1, [pc, #88]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c5e:	d105      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c60:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4a10      	ldr	r2, [pc, #64]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d019      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	4908      	ldr	r1, [pc, #32]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c96:	d109      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c98:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4a02      	ldr	r2, [pc, #8]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca2:	60d3      	str	r3, [r2, #12]
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008ca6:	bf00      	nop
 8008ca8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008cb8:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc6:	4926      	ldr	r1, [pc, #152]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cd6:	d105      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	4a20      	ldr	r2, [pc, #128]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ce2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d015      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfe:	4918      	ldr	r1, [pc, #96]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0e:	d105      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d015      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d36:	490a      	ldr	r1, [pc, #40]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d46:	d105      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40021000 	.word	0x40021000

08008d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e049      	b.n	8008e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fa fb4e 	bl	800342c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f001 f808 	bl	8009db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d001      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e054      	b.n	8008ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a26      	ldr	r2, [pc, #152]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d022      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e56:	d01d      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a22      	ldr	r2, [pc, #136]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d018      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a21      	ldr	r2, [pc, #132]	; (8008eec <HAL_TIM_Base_Start_IT+0xd8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x80>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <HAL_TIM_Base_Start_IT+0xe8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d115      	bne.n	8008ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <HAL_TIM_Base_Start_IT+0xec>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b06      	cmp	r3, #6
 8008ea4:	d015      	beq.n	8008ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eac:	d011      	beq.n	8008ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0201 	orr.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebe:	e008      	b.n	8008ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e000      	b.n	8008ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40012c00 	.word	0x40012c00
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40000c00 	.word	0x40000c00
 8008ef4:	40013400 	.word	0x40013400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40015000 	.word	0x40015000
 8008f00:	00010007 	.word	0x00010007

08008f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e049      	b.n	8008faa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f841 	bl	8008fb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f000 ff38 	bl	8009db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <HAL_TIM_PWM_Start+0x24>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	bf14      	ite	ne
 8008fe4:	2301      	movne	r3, #1
 8008fe6:	2300      	moveq	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	e03c      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d109      	bne.n	8009006 <HAL_TIM_PWM_Start+0x3e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	bf14      	ite	ne
 8008ffe:	2301      	movne	r3, #1
 8009000:	2300      	moveq	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	e02f      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b08      	cmp	r3, #8
 800900a:	d109      	bne.n	8009020 <HAL_TIM_PWM_Start+0x58>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b01      	cmp	r3, #1
 8009016:	bf14      	ite	ne
 8009018:	2301      	movne	r3, #1
 800901a:	2300      	moveq	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e022      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b0c      	cmp	r3, #12
 8009024:	d109      	bne.n	800903a <HAL_TIM_PWM_Start+0x72>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b01      	cmp	r3, #1
 8009030:	bf14      	ite	ne
 8009032:	2301      	movne	r3, #1
 8009034:	2300      	moveq	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	e015      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b10      	cmp	r3, #16
 800903e:	d109      	bne.n	8009054 <HAL_TIM_PWM_Start+0x8c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	bf14      	ite	ne
 800904c:	2301      	movne	r3, #1
 800904e:	2300      	moveq	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	e008      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	bf14      	ite	ne
 8009060:	2301      	movne	r3, #1
 8009062:	2300      	moveq	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e0a6      	b.n	80091bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <HAL_TIM_PWM_Start+0xb6>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800907c:	e023      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b04      	cmp	r3, #4
 8009082:	d104      	bne.n	800908e <HAL_TIM_PWM_Start+0xc6>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800908c:	e01b      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b08      	cmp	r3, #8
 8009092:	d104      	bne.n	800909e <HAL_TIM_PWM_Start+0xd6>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800909c:	e013      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b0c      	cmp	r3, #12
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_PWM_Start+0xe6>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090ac:	e00b      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d104      	bne.n	80090be <HAL_TIM_PWM_Start+0xf6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090bc:	e003      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2201      	movs	r2, #1
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fc16 	bl	800a900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a3a      	ldr	r2, [pc, #232]	; (80091c4 <HAL_TIM_PWM_Start+0x1fc>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d018      	beq.n	8009110 <HAL_TIM_PWM_Start+0x148>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a39      	ldr	r2, [pc, #228]	; (80091c8 <HAL_TIM_PWM_Start+0x200>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <HAL_TIM_PWM_Start+0x148>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a37      	ldr	r2, [pc, #220]	; (80091cc <HAL_TIM_PWM_Start+0x204>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00e      	beq.n	8009110 <HAL_TIM_PWM_Start+0x148>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a36      	ldr	r2, [pc, #216]	; (80091d0 <HAL_TIM_PWM_Start+0x208>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d009      	beq.n	8009110 <HAL_TIM_PWM_Start+0x148>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a34      	ldr	r2, [pc, #208]	; (80091d4 <HAL_TIM_PWM_Start+0x20c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d004      	beq.n	8009110 <HAL_TIM_PWM_Start+0x148>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a33      	ldr	r2, [pc, #204]	; (80091d8 <HAL_TIM_PWM_Start+0x210>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d101      	bne.n	8009114 <HAL_TIM_PWM_Start+0x14c>
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <HAL_TIM_PWM_Start+0x14e>
 8009114:	2300      	movs	r3, #0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a25      	ldr	r2, [pc, #148]	; (80091c4 <HAL_TIM_PWM_Start+0x1fc>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d022      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913c:	d01d      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a26      	ldr	r2, [pc, #152]	; (80091dc <HAL_TIM_PWM_Start+0x214>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d018      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a24      	ldr	r2, [pc, #144]	; (80091e0 <HAL_TIM_PWM_Start+0x218>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a23      	ldr	r2, [pc, #140]	; (80091e4 <HAL_TIM_PWM_Start+0x21c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00e      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <HAL_TIM_PWM_Start+0x200>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a18      	ldr	r2, [pc, #96]	; (80091cc <HAL_TIM_PWM_Start+0x204>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d004      	beq.n	800917a <HAL_TIM_PWM_Start+0x1b2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_TIM_PWM_Start+0x210>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d115      	bne.n	80091a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_TIM_PWM_Start+0x220>)
 8009182:	4013      	ands	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b06      	cmp	r3, #6
 800918a:	d015      	beq.n	80091b8 <HAL_TIM_PWM_Start+0x1f0>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d011      	beq.n	80091b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a4:	e008      	b.n	80091b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	e000      	b.n	80091ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40013400 	.word	0x40013400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40014400 	.word	0x40014400
 80091d4:	40014800 	.word	0x40014800
 80091d8:	40015000 	.word	0x40015000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	00010007 	.word	0x00010007

080091ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e049      	b.n	8009292 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f841 	bl	800929a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f000 fdc4 	bl	8009db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <HAL_TIM_IC_Start_IT+0x1e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	e023      	b.n	8009316 <HAL_TIM_IC_Start_IT+0x66>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d104      	bne.n	80092de <HAL_TIM_IC_Start_IT+0x2e>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	e01b      	b.n	8009316 <HAL_TIM_IC_Start_IT+0x66>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d104      	bne.n	80092ee <HAL_TIM_IC_Start_IT+0x3e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	e013      	b.n	8009316 <HAL_TIM_IC_Start_IT+0x66>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b0c      	cmp	r3, #12
 80092f2:	d104      	bne.n	80092fe <HAL_TIM_IC_Start_IT+0x4e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	e00b      	b.n	8009316 <HAL_TIM_IC_Start_IT+0x66>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b10      	cmp	r3, #16
 8009302:	d104      	bne.n	800930e <HAL_TIM_IC_Start_IT+0x5e>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800930a:	b2db      	uxtb	r3, r3
 800930c:	e003      	b.n	8009316 <HAL_TIM_IC_Start_IT+0x66>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009314:	b2db      	uxtb	r3, r3
 8009316:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <HAL_TIM_IC_Start_IT+0x78>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009324:	b2db      	uxtb	r3, r3
 8009326:	e013      	b.n	8009350 <HAL_TIM_IC_Start_IT+0xa0>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d104      	bne.n	8009338 <HAL_TIM_IC_Start_IT+0x88>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009334:	b2db      	uxtb	r3, r3
 8009336:	e00b      	b.n	8009350 <HAL_TIM_IC_Start_IT+0xa0>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b08      	cmp	r3, #8
 800933c:	d104      	bne.n	8009348 <HAL_TIM_IC_Start_IT+0x98>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009344:	b2db      	uxtb	r3, r3
 8009346:	e003      	b.n	8009350 <HAL_TIM_IC_Start_IT+0xa0>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800934e:	b2db      	uxtb	r3, r3
 8009350:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d102      	bne.n	800935e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009358:	7b7b      	ldrb	r3, [r7, #13]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d001      	beq.n	8009362 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e0e2      	b.n	8009528 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <HAL_TIM_IC_Start_IT+0xc2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009370:	e023      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x10a>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d104      	bne.n	8009382 <HAL_TIM_IC_Start_IT+0xd2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009380:	e01b      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x10a>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d104      	bne.n	8009392 <HAL_TIM_IC_Start_IT+0xe2>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009390:	e013      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x10a>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b0c      	cmp	r3, #12
 8009396:	d104      	bne.n	80093a2 <HAL_TIM_IC_Start_IT+0xf2>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093a0:	e00b      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x10a>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d104      	bne.n	80093b2 <HAL_TIM_IC_Start_IT+0x102>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093b0:	e003      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x10a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <HAL_TIM_IC_Start_IT+0x11a>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c8:	e013      	b.n	80093f2 <HAL_TIM_IC_Start_IT+0x142>
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d104      	bne.n	80093da <HAL_TIM_IC_Start_IT+0x12a>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d8:	e00b      	b.n	80093f2 <HAL_TIM_IC_Start_IT+0x142>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d104      	bne.n	80093ea <HAL_TIM_IC_Start_IT+0x13a>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093e8:	e003      	b.n	80093f2 <HAL_TIM_IC_Start_IT+0x142>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b0c      	cmp	r3, #12
 80093f6:	d841      	bhi.n	800947c <HAL_TIM_IC_Start_IT+0x1cc>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <HAL_TIM_IC_Start_IT+0x150>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009435 	.word	0x08009435
 8009404:	0800947d 	.word	0x0800947d
 8009408:	0800947d 	.word	0x0800947d
 800940c:	0800947d 	.word	0x0800947d
 8009410:	08009447 	.word	0x08009447
 8009414:	0800947d 	.word	0x0800947d
 8009418:	0800947d 	.word	0x0800947d
 800941c:	0800947d 	.word	0x0800947d
 8009420:	08009459 	.word	0x08009459
 8009424:	0800947d 	.word	0x0800947d
 8009428:	0800947d 	.word	0x0800947d
 800942c:	0800947d 	.word	0x0800947d
 8009430:	0800946b 	.word	0x0800946b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0202 	orr.w	r2, r2, #2
 8009442:	60da      	str	r2, [r3, #12]
      break;
 8009444:	e01d      	b.n	8009482 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0204 	orr.w	r2, r2, #4
 8009454:	60da      	str	r2, [r3, #12]
      break;
 8009456:	e014      	b.n	8009482 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0208 	orr.w	r2, r2, #8
 8009466:	60da      	str	r2, [r3, #12]
      break;
 8009468:	e00b      	b.n	8009482 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0210 	orr.w	r2, r2, #16
 8009478:	60da      	str	r2, [r3, #12]
      break;
 800947a:	e002      	b.n	8009482 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
      break;
 8009480:	bf00      	nop
  }

  if (status == HAL_OK)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d14e      	bne.n	8009526 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2201      	movs	r2, #1
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f001 fa35 	bl	800a900 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a25      	ldr	r2, [pc, #148]	; (8009530 <HAL_TIM_IC_Start_IT+0x280>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d022      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d01d      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a21      	ldr	r2, [pc, #132]	; (8009534 <HAL_TIM_IC_Start_IT+0x284>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d018      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <HAL_TIM_IC_Start_IT+0x288>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1e      	ldr	r2, [pc, #120]	; (800953c <HAL_TIM_IC_Start_IT+0x28c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00e      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1c      	ldr	r2, [pc, #112]	; (8009540 <HAL_TIM_IC_Start_IT+0x290>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d009      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <HAL_TIM_IC_Start_IT+0x294>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x236>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a19      	ldr	r2, [pc, #100]	; (8009548 <HAL_TIM_IC_Start_IT+0x298>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d115      	bne.n	8009512 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	4b17      	ldr	r3, [pc, #92]	; (800954c <HAL_TIM_IC_Start_IT+0x29c>)
 80094ee:	4013      	ands	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	d015      	beq.n	8009524 <HAL_TIM_IC_Start_IT+0x274>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fe:	d011      	beq.n	8009524 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009510:	e008      	b.n	8009524 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0201 	orr.w	r2, r2, #1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e000      	b.n	8009526 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009524:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40013400 	.word	0x40013400
 8009544:	40014000 	.word	0x40014000
 8009548:	40015000 	.word	0x40015000
 800954c:	00010007 	.word	0x00010007

08009550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d020      	beq.n	80095b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01b      	beq.n	80095b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0202 	mvn.w	r2, #2
 8009584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7f8 f9d4 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80095a0:	e005      	b.n	80095ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fbea 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fbf1 	bl	8009d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d020      	beq.n	8009600 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01b      	beq.n	8009600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0204 	mvn.w	r2, #4
 80095d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f8 f9ae 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80095ec:	e005      	b.n	80095fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fbc4 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fbcb 	bl	8009d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d020      	beq.n	800964c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d01b      	beq.n	800964c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f06f 0208 	mvn.w	r2, #8
 800961c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2204      	movs	r2, #4
 8009622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7f8 f988 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8009638:	e005      	b.n	8009646 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fb9e 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fba5 	bl	8009d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d020      	beq.n	8009698 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01b      	beq.n	8009698 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0210 	mvn.w	r2, #16
 8009668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2208      	movs	r2, #8
 800966e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7f8 f962 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8009684:	e005      	b.n	8009692 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb78 	bl	8009d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fb7f 	bl	8009d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00c      	beq.n	80096bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f06f 0201 	mvn.w	r2, #1
 80096b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7f8 fe06 	bl	80022c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00c      	beq.n	80096ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80096e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 fa65 	bl	800abb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00c      	beq.n	800970e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 fa5d 	bl	800abc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00c      	beq.n	8009732 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	d007      	beq.n	8009732 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800972a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fb39 	bl	8009da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00c      	beq.n	8009756 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f06f 0220 	mvn.w	r2, #32
 800974e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fa25 	bl	800aba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 fa31 	bl	800abdc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00c      	beq.n	800979e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fa29 	bl	800abf0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00c      	beq.n	80097c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80097ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fa21 	bl	800ac04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d007      	beq.n	80097e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80097de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 fa19 	bl	800ac18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009808:	2302      	movs	r3, #2
 800980a:	e088      	b.n	800991e <HAL_TIM_IC_ConfigChannel+0x130>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d11b      	bne.n	8009852 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800982a:	f000 fea3 	bl	800a574 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 020c 	bic.w	r2, r2, #12
 800983c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6999      	ldr	r1, [r3, #24]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	619a      	str	r2, [r3, #24]
 8009850:	e060      	b.n	8009914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b04      	cmp	r3, #4
 8009856:	d11c      	bne.n	8009892 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009868:	f000 ff27 	bl	800a6ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800987a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	619a      	str	r2, [r3, #24]
 8009890:	e040      	b.n	8009914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b08      	cmp	r3, #8
 8009896:	d11b      	bne.n	80098d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80098a8:	f000 ff74 	bl	800a794 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69da      	ldr	r2, [r3, #28]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 020c 	bic.w	r2, r2, #12
 80098ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69d9      	ldr	r1, [r3, #28]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	61da      	str	r2, [r3, #28]
 80098ce:	e021      	b.n	8009914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b0c      	cmp	r3, #12
 80098d4:	d11c      	bne.n	8009910 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80098e6:	f000 ff91 	bl	800a80c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80098f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69d9      	ldr	r1, [r3, #28]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	021a      	lsls	r2, r3, #8
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	61da      	str	r2, [r3, #28]
 800990e:	e001      	b.n	8009914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009942:	2302      	movs	r3, #2
 8009944:	e0ff      	b.n	8009b46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b14      	cmp	r3, #20
 8009952:	f200 80f0 	bhi.w	8009b36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	080099b1 	.word	0x080099b1
 8009960:	08009b37 	.word	0x08009b37
 8009964:	08009b37 	.word	0x08009b37
 8009968:	08009b37 	.word	0x08009b37
 800996c:	080099f1 	.word	0x080099f1
 8009970:	08009b37 	.word	0x08009b37
 8009974:	08009b37 	.word	0x08009b37
 8009978:	08009b37 	.word	0x08009b37
 800997c:	08009a33 	.word	0x08009a33
 8009980:	08009b37 	.word	0x08009b37
 8009984:	08009b37 	.word	0x08009b37
 8009988:	08009b37 	.word	0x08009b37
 800998c:	08009a73 	.word	0x08009a73
 8009990:	08009b37 	.word	0x08009b37
 8009994:	08009b37 	.word	0x08009b37
 8009998:	08009b37 	.word	0x08009b37
 800999c:	08009ab5 	.word	0x08009ab5
 80099a0:	08009b37 	.word	0x08009b37
 80099a4:	08009b37 	.word	0x08009b37
 80099a8:	08009b37 	.word	0x08009b37
 80099ac:	08009af5 	.word	0x08009af5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fab2 	bl	8009f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0208 	orr.w	r2, r2, #8
 80099ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0204 	bic.w	r2, r2, #4
 80099da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6999      	ldr	r1, [r3, #24]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	619a      	str	r2, [r3, #24]
      break;
 80099ee:	e0a5      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fb2c 	bl	800a054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699a      	ldr	r2, [r3, #24]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6999      	ldr	r1, [r3, #24]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	021a      	lsls	r2, r3, #8
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	619a      	str	r2, [r3, #24]
      break;
 8009a30:	e084      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fb9f 	bl	800a17c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0208 	orr.w	r2, r2, #8
 8009a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69da      	ldr	r2, [r3, #28]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0204 	bic.w	r2, r2, #4
 8009a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69d9      	ldr	r1, [r3, #28]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	61da      	str	r2, [r3, #28]
      break;
 8009a70:	e064      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fc11 	bl	800a2a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69da      	ldr	r2, [r3, #28]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69d9      	ldr	r1, [r3, #28]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	021a      	lsls	r2, r3, #8
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	61da      	str	r2, [r3, #28]
      break;
 8009ab2:	e043      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68b9      	ldr	r1, [r7, #8]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fc84 	bl	800a3c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0208 	orr.w	r2, r2, #8
 8009ace:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0204 	bic.w	r2, r2, #4
 8009ade:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009af2:	e023      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fcce 	bl	800a49c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	021a      	lsls	r2, r3, #8
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009b34:	e002      	b.n	8009b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop

08009b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e0f6      	b.n	8009d5a <HAL_TIM_ConfigClockSource+0x20a>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a6f      	ldr	r2, [pc, #444]	; (8009d64 <HAL_TIM_ConfigClockSource+0x214>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	f000 80c1 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bac:	4a6d      	ldr	r2, [pc, #436]	; (8009d64 <HAL_TIM_ConfigClockSource+0x214>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	f200 80c6 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bb4:	4a6c      	ldr	r2, [pc, #432]	; (8009d68 <HAL_TIM_ConfigClockSource+0x218>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	f000 80b9 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bbc:	4a6a      	ldr	r2, [pc, #424]	; (8009d68 <HAL_TIM_ConfigClockSource+0x218>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	f200 80be 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bc4:	4a69      	ldr	r2, [pc, #420]	; (8009d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	f000 80b1 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bcc:	4a67      	ldr	r2, [pc, #412]	; (8009d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	f200 80b6 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bd4:	4a66      	ldr	r2, [pc, #408]	; (8009d70 <HAL_TIM_ConfigClockSource+0x220>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	f000 80a9 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bdc:	4a64      	ldr	r2, [pc, #400]	; (8009d70 <HAL_TIM_ConfigClockSource+0x220>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	f200 80ae 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009be4:	4a63      	ldr	r2, [pc, #396]	; (8009d74 <HAL_TIM_ConfigClockSource+0x224>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f000 80a1 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bec:	4a61      	ldr	r2, [pc, #388]	; (8009d74 <HAL_TIM_ConfigClockSource+0x224>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	f200 80a6 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bf4:	4a60      	ldr	r2, [pc, #384]	; (8009d78 <HAL_TIM_ConfigClockSource+0x228>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f000 8099 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009bfc:	4a5e      	ldr	r2, [pc, #376]	; (8009d78 <HAL_TIM_ConfigClockSource+0x228>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	f200 809e 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c08:	f000 8091 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c10:	f200 8096 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c18:	f000 8089 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c20:	f200 808e 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c28:	d03e      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x158>
 8009c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c2e:	f200 8087 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c36:	f000 8086 	beq.w	8009d46 <HAL_TIM_ConfigClockSource+0x1f6>
 8009c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3e:	d87f      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c40:	2b70      	cmp	r3, #112	; 0x70
 8009c42:	d01a      	beq.n	8009c7a <HAL_TIM_ConfigClockSource+0x12a>
 8009c44:	2b70      	cmp	r3, #112	; 0x70
 8009c46:	d87b      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c48:	2b60      	cmp	r3, #96	; 0x60
 8009c4a:	d050      	beq.n	8009cee <HAL_TIM_ConfigClockSource+0x19e>
 8009c4c:	2b60      	cmp	r3, #96	; 0x60
 8009c4e:	d877      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c50:	2b50      	cmp	r3, #80	; 0x50
 8009c52:	d03c      	beq.n	8009cce <HAL_TIM_ConfigClockSource+0x17e>
 8009c54:	2b50      	cmp	r3, #80	; 0x50
 8009c56:	d873      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d058      	beq.n	8009d0e <HAL_TIM_ConfigClockSource+0x1be>
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d86f      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c60:	2b30      	cmp	r3, #48	; 0x30
 8009c62:	d064      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d86b      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d060      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d867      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d05c      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c74:	2b10      	cmp	r3, #16
 8009c76:	d05a      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1de>
 8009c78:	e062      	b.n	8009d40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c8a:	f000 fe19 	bl	800a8c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	609a      	str	r2, [r3, #8]
      break;
 8009ca6:	e04f      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cb8:	f000 fe02 	bl	800a8c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cca:	609a      	str	r2, [r3, #8]
      break;
 8009ccc:	e03c      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f000 fcbe 	bl	800a65c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2150      	movs	r1, #80	; 0x50
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 fdcd 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 8009cec:	e02c      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f000 fd1a 	bl	800a734 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2160      	movs	r1, #96	; 0x60
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fdbd 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 8009d0c:	e01c      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f000 fc9e 	bl	800a65c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2140      	movs	r1, #64	; 0x40
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fdad 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 8009d2c:	e00c      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f000 fda4 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 8009d3e:	e003      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
      break;
 8009d44:	e000      	b.n	8009d48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	00100070 	.word	0x00100070
 8009d68:	00100060 	.word	0x00100060
 8009d6c:	00100050 	.word	0x00100050
 8009d70:	00100040 	.word	0x00100040
 8009d74:	00100030 	.word	0x00100030
 8009d78:	00100020 	.word	0x00100020

08009d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a4c      	ldr	r2, [pc, #304]	; (8009efc <TIM_Base_SetConfig+0x144>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d017      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd6:	d013      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a49      	ldr	r2, [pc, #292]	; (8009f00 <TIM_Base_SetConfig+0x148>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00f      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a48      	ldr	r2, [pc, #288]	; (8009f04 <TIM_Base_SetConfig+0x14c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00b      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a47      	ldr	r2, [pc, #284]	; (8009f08 <TIM_Base_SetConfig+0x150>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d007      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a46      	ldr	r2, [pc, #280]	; (8009f0c <TIM_Base_SetConfig+0x154>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_Base_SetConfig+0x48>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a45      	ldr	r2, [pc, #276]	; (8009f10 <TIM_Base_SetConfig+0x158>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d108      	bne.n	8009e12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a39      	ldr	r2, [pc, #228]	; (8009efc <TIM_Base_SetConfig+0x144>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d023      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e20:	d01f      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a36      	ldr	r2, [pc, #216]	; (8009f00 <TIM_Base_SetConfig+0x148>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d01b      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a35      	ldr	r2, [pc, #212]	; (8009f04 <TIM_Base_SetConfig+0x14c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d017      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a34      	ldr	r2, [pc, #208]	; (8009f08 <TIM_Base_SetConfig+0x150>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d013      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a33      	ldr	r2, [pc, #204]	; (8009f0c <TIM_Base_SetConfig+0x154>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00f      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a33      	ldr	r2, [pc, #204]	; (8009f14 <TIM_Base_SetConfig+0x15c>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00b      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a32      	ldr	r2, [pc, #200]	; (8009f18 <TIM_Base_SetConfig+0x160>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d007      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a31      	ldr	r2, [pc, #196]	; (8009f1c <TIM_Base_SetConfig+0x164>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d003      	beq.n	8009e62 <TIM_Base_SetConfig+0xaa>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a2c      	ldr	r2, [pc, #176]	; (8009f10 <TIM_Base_SetConfig+0x158>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d108      	bne.n	8009e74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	689a      	ldr	r2, [r3, #8]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a18      	ldr	r2, [pc, #96]	; (8009efc <TIM_Base_SetConfig+0x144>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d013      	beq.n	8009ec8 <TIM_Base_SetConfig+0x110>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a1a      	ldr	r2, [pc, #104]	; (8009f0c <TIM_Base_SetConfig+0x154>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00f      	beq.n	8009ec8 <TIM_Base_SetConfig+0x110>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <TIM_Base_SetConfig+0x15c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00b      	beq.n	8009ec8 <TIM_Base_SetConfig+0x110>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a19      	ldr	r2, [pc, #100]	; (8009f18 <TIM_Base_SetConfig+0x160>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d007      	beq.n	8009ec8 <TIM_Base_SetConfig+0x110>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a18      	ldr	r2, [pc, #96]	; (8009f1c <TIM_Base_SetConfig+0x164>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_Base_SetConfig+0x110>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <TIM_Base_SetConfig+0x158>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d103      	bne.n	8009ed0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d105      	bne.n	8009eee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f023 0201 	bic.w	r2, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	611a      	str	r2, [r3, #16]
  }
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40012c00 	.word	0x40012c00
 8009f00:	40000400 	.word	0x40000400
 8009f04:	40000800 	.word	0x40000800
 8009f08:	40000c00 	.word	0x40000c00
 8009f0c:	40013400 	.word	0x40013400
 8009f10:	40015000 	.word	0x40015000
 8009f14:	40014000 	.word	0x40014000
 8009f18:	40014400 	.word	0x40014400
 8009f1c:	40014800 	.word	0x40014800

08009f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f023 0201 	bic.w	r2, r3, #1
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f023 0302 	bic.w	r3, r3, #2
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a30      	ldr	r2, [pc, #192]	; (800a03c <TIM_OC1_SetConfig+0x11c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <TIM_OC1_SetConfig+0x88>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a2f      	ldr	r2, [pc, #188]	; (800a040 <TIM_OC1_SetConfig+0x120>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00f      	beq.n	8009fa8 <TIM_OC1_SetConfig+0x88>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a2e      	ldr	r2, [pc, #184]	; (800a044 <TIM_OC1_SetConfig+0x124>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00b      	beq.n	8009fa8 <TIM_OC1_SetConfig+0x88>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a2d      	ldr	r2, [pc, #180]	; (800a048 <TIM_OC1_SetConfig+0x128>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d007      	beq.n	8009fa8 <TIM_OC1_SetConfig+0x88>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a2c      	ldr	r2, [pc, #176]	; (800a04c <TIM_OC1_SetConfig+0x12c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_OC1_SetConfig+0x88>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a2b      	ldr	r2, [pc, #172]	; (800a050 <TIM_OC1_SetConfig+0x130>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d10c      	bne.n	8009fc2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f023 0308 	bic.w	r3, r3, #8
 8009fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f023 0304 	bic.w	r3, r3, #4
 8009fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	; (800a03c <TIM_OC1_SetConfig+0x11c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d013      	beq.n	8009ff2 <TIM_OC1_SetConfig+0xd2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a1c      	ldr	r2, [pc, #112]	; (800a040 <TIM_OC1_SetConfig+0x120>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00f      	beq.n	8009ff2 <TIM_OC1_SetConfig+0xd2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a1b      	ldr	r2, [pc, #108]	; (800a044 <TIM_OC1_SetConfig+0x124>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00b      	beq.n	8009ff2 <TIM_OC1_SetConfig+0xd2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a1a      	ldr	r2, [pc, #104]	; (800a048 <TIM_OC1_SetConfig+0x128>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d007      	beq.n	8009ff2 <TIM_OC1_SetConfig+0xd2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a19      	ldr	r2, [pc, #100]	; (800a04c <TIM_OC1_SetConfig+0x12c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <TIM_OC1_SetConfig+0xd2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a18      	ldr	r2, [pc, #96]	; (800a050 <TIM_OC1_SetConfig+0x130>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d111      	bne.n	800a016 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	621a      	str	r2, [r3, #32]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	40012c00 	.word	0x40012c00
 800a040:	40013400 	.word	0x40013400
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800
 800a050:	40015000 	.word	0x40015000

0800a054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	f023 0210 	bic.w	r2, r3, #16
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4313      	orrs	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f023 0320 	bic.w	r3, r3, #32
 800a0a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	011b      	lsls	r3, r3, #4
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a2c      	ldr	r2, [pc, #176]	; (800a164 <TIM_OC2_SetConfig+0x110>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d007      	beq.n	800a0c8 <TIM_OC2_SetConfig+0x74>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a2b      	ldr	r2, [pc, #172]	; (800a168 <TIM_OC2_SetConfig+0x114>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d003      	beq.n	800a0c8 <TIM_OC2_SetConfig+0x74>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a2a      	ldr	r2, [pc, #168]	; (800a16c <TIM_OC2_SetConfig+0x118>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d10d      	bne.n	800a0e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <TIM_OC2_SetConfig+0x110>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d013      	beq.n	800a114 <TIM_OC2_SetConfig+0xc0>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <TIM_OC2_SetConfig+0x114>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00f      	beq.n	800a114 <TIM_OC2_SetConfig+0xc0>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a1e      	ldr	r2, [pc, #120]	; (800a170 <TIM_OC2_SetConfig+0x11c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00b      	beq.n	800a114 <TIM_OC2_SetConfig+0xc0>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <TIM_OC2_SetConfig+0x120>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d007      	beq.n	800a114 <TIM_OC2_SetConfig+0xc0>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a1c      	ldr	r2, [pc, #112]	; (800a178 <TIM_OC2_SetConfig+0x124>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d003      	beq.n	800a114 <TIM_OC2_SetConfig+0xc0>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a17      	ldr	r2, [pc, #92]	; (800a16c <TIM_OC2_SetConfig+0x118>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d113      	bne.n	800a13c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a11a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	40012c00 	.word	0x40012c00
 800a168:	40013400 	.word	0x40013400
 800a16c:	40015000 	.word	0x40015000
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0303 	bic.w	r3, r3, #3
 800a1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2b      	ldr	r2, [pc, #172]	; (800a288 <TIM_OC3_SetConfig+0x10c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_OC3_SetConfig+0x72>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a2a      	ldr	r2, [pc, #168]	; (800a28c <TIM_OC3_SetConfig+0x110>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_OC3_SetConfig+0x72>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a29      	ldr	r2, [pc, #164]	; (800a290 <TIM_OC3_SetConfig+0x114>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d10d      	bne.n	800a20a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a1e      	ldr	r2, [pc, #120]	; (800a288 <TIM_OC3_SetConfig+0x10c>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <TIM_OC3_SetConfig+0xbe>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <TIM_OC3_SetConfig+0x110>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00f      	beq.n	800a23a <TIM_OC3_SetConfig+0xbe>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <TIM_OC3_SetConfig+0x118>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00b      	beq.n	800a23a <TIM_OC3_SetConfig+0xbe>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <TIM_OC3_SetConfig+0x11c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <TIM_OC3_SetConfig+0xbe>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <TIM_OC3_SetConfig+0x120>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d003      	beq.n	800a23a <TIM_OC3_SetConfig+0xbe>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a16      	ldr	r2, [pc, #88]	; (800a290 <TIM_OC3_SetConfig+0x114>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d113      	bne.n	800a262 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	621a      	str	r2, [r3, #32]
}
 800a27c:	bf00      	nop
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40012c00 	.word	0x40012c00
 800a28c:	40013400 	.word	0x40013400
 800a290:	40015000 	.word	0x40015000
 800a294:	40014000 	.word	0x40014000
 800a298:	40014400 	.word	0x40014400
 800a29c:	40014800 	.word	0x40014800

0800a2a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	031b      	lsls	r3, r3, #12
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a2c      	ldr	r2, [pc, #176]	; (800a3b0 <TIM_OC4_SetConfig+0x110>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d007      	beq.n	800a314 <TIM_OC4_SetConfig+0x74>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a2b      	ldr	r2, [pc, #172]	; (800a3b4 <TIM_OC4_SetConfig+0x114>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d003      	beq.n	800a314 <TIM_OC4_SetConfig+0x74>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a2a      	ldr	r2, [pc, #168]	; (800a3b8 <TIM_OC4_SetConfig+0x118>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d10d      	bne.n	800a330 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	031b      	lsls	r3, r3, #12
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a32e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <TIM_OC4_SetConfig+0x110>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d013      	beq.n	800a360 <TIM_OC4_SetConfig+0xc0>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a1e      	ldr	r2, [pc, #120]	; (800a3b4 <TIM_OC4_SetConfig+0x114>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d00f      	beq.n	800a360 <TIM_OC4_SetConfig+0xc0>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a1e      	ldr	r2, [pc, #120]	; (800a3bc <TIM_OC4_SetConfig+0x11c>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d00b      	beq.n	800a360 <TIM_OC4_SetConfig+0xc0>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <TIM_OC4_SetConfig+0x120>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d007      	beq.n	800a360 <TIM_OC4_SetConfig+0xc0>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a1c      	ldr	r2, [pc, #112]	; (800a3c4 <TIM_OC4_SetConfig+0x124>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d003      	beq.n	800a360 <TIM_OC4_SetConfig+0xc0>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <TIM_OC4_SetConfig+0x118>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d113      	bne.n	800a388 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a366:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a36e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	019b      	lsls	r3, r3, #6
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4313      	orrs	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	019b      	lsls	r3, r3, #6
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	621a      	str	r2, [r3, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	371c      	adds	r7, #28
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	40012c00 	.word	0x40012c00
 800a3b4:	40013400 	.word	0x40013400
 800a3b8:	40015000 	.word	0x40015000
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40014400 	.word	0x40014400
 800a3c4:	40014800 	.word	0x40014800

0800a3c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a40c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a19      	ldr	r2, [pc, #100]	; (800a484 <TIM_OC5_SetConfig+0xbc>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d013      	beq.n	800a44a <TIM_OC5_SetConfig+0x82>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a18      	ldr	r2, [pc, #96]	; (800a488 <TIM_OC5_SetConfig+0xc0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00f      	beq.n	800a44a <TIM_OC5_SetConfig+0x82>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a17      	ldr	r2, [pc, #92]	; (800a48c <TIM_OC5_SetConfig+0xc4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00b      	beq.n	800a44a <TIM_OC5_SetConfig+0x82>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a16      	ldr	r2, [pc, #88]	; (800a490 <TIM_OC5_SetConfig+0xc8>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d007      	beq.n	800a44a <TIM_OC5_SetConfig+0x82>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a15      	ldr	r2, [pc, #84]	; (800a494 <TIM_OC5_SetConfig+0xcc>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d003      	beq.n	800a44a <TIM_OC5_SetConfig+0x82>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a14      	ldr	r2, [pc, #80]	; (800a498 <TIM_OC5_SetConfig+0xd0>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d109      	bne.n	800a45e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	621a      	str	r2, [r3, #32]
}
 800a478:	bf00      	nop
 800a47a:	371c      	adds	r7, #28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	40012c00 	.word	0x40012c00
 800a488:	40013400 	.word	0x40013400
 800a48c:	40014000 	.word	0x40014000
 800a490:	40014400 	.word	0x40014400
 800a494:	40014800 	.word	0x40014800
 800a498:	40015000 	.word	0x40015000

0800a49c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	051b      	lsls	r3, r3, #20
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a1a      	ldr	r2, [pc, #104]	; (800a55c <TIM_OC6_SetConfig+0xc0>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d013      	beq.n	800a520 <TIM_OC6_SetConfig+0x84>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a19      	ldr	r2, [pc, #100]	; (800a560 <TIM_OC6_SetConfig+0xc4>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00f      	beq.n	800a520 <TIM_OC6_SetConfig+0x84>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a18      	ldr	r2, [pc, #96]	; (800a564 <TIM_OC6_SetConfig+0xc8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d00b      	beq.n	800a520 <TIM_OC6_SetConfig+0x84>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a17      	ldr	r2, [pc, #92]	; (800a568 <TIM_OC6_SetConfig+0xcc>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d007      	beq.n	800a520 <TIM_OC6_SetConfig+0x84>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a16      	ldr	r2, [pc, #88]	; (800a56c <TIM_OC6_SetConfig+0xd0>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_OC6_SetConfig+0x84>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <TIM_OC6_SetConfig+0xd4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d109      	bne.n	800a534 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	029b      	lsls	r3, r3, #10
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4313      	orrs	r3, r2
 800a532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	621a      	str	r2, [r3, #32]
}
 800a54e:	bf00      	nop
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	40012c00 	.word	0x40012c00
 800a560:	40013400 	.word	0x40013400
 800a564:	40014000 	.word	0x40014000
 800a568:	40014400 	.word	0x40014400
 800a56c:	40014800 	.word	0x40014800
 800a570:	40015000 	.word	0x40015000

0800a574 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	f023 0201 	bic.w	r2, r3, #1
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4a28      	ldr	r2, [pc, #160]	; (800a640 <TIM_TI1_SetConfig+0xcc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01b      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a8:	d017      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4a25      	ldr	r2, [pc, #148]	; (800a644 <TIM_TI1_SetConfig+0xd0>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d013      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4a24      	ldr	r2, [pc, #144]	; (800a648 <TIM_TI1_SetConfig+0xd4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00f      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4a23      	ldr	r2, [pc, #140]	; (800a64c <TIM_TI1_SetConfig+0xd8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00b      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4a22      	ldr	r2, [pc, #136]	; (800a650 <TIM_TI1_SetConfig+0xdc>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d007      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	4a21      	ldr	r2, [pc, #132]	; (800a654 <TIM_TI1_SetConfig+0xe0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_TI1_SetConfig+0x66>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4a20      	ldr	r2, [pc, #128]	; (800a658 <TIM_TI1_SetConfig+0xe4>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d101      	bne.n	800a5de <TIM_TI1_SetConfig+0x6a>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <TIM_TI1_SetConfig+0x6c>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f023 0303 	bic.w	r3, r3, #3
 800a5ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e003      	b.n	800a5fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f043 0301 	orr.w	r3, r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	4313      	orrs	r3, r2
 800a610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f023 030a 	bic.w	r3, r3, #10
 800a618:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f003 030a 	and.w	r3, r3, #10
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4313      	orrs	r3, r2
 800a624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	621a      	str	r2, [r3, #32]
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	40013400 	.word	0x40013400
 800a654:	40014000 	.word	0x40014000
 800a658:	40015000 	.word	0x40015000

0800a65c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f023 0201 	bic.w	r2, r3, #1
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f023 030a 	bic.w	r3, r3, #10
 800a698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	621a      	str	r2, [r3, #32]
}
 800a6ae:	bf00      	nop
 800a6b0:	371c      	adds	r7, #28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b087      	sub	sp, #28
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	f023 0210 	bic.w	r2, r3, #16
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	031b      	lsls	r3, r3, #12
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a70c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	011b      	lsls	r3, r3, #4
 800a712:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	621a      	str	r2, [r3, #32]
}
 800a728:	bf00      	nop
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	f023 0210 	bic.w	r2, r3, #16
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a75e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	031b      	lsls	r3, r3, #12
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a770:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	621a      	str	r2, [r3, #32]
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a7e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	621a      	str	r2, [r3, #32]
}
 800a800:	bf00      	nop
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a838:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a84a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	031b      	lsls	r3, r3, #12
 800a850:	b29b      	uxth	r3, r3
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	4313      	orrs	r3, r2
 800a856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a85e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	031b      	lsls	r3, r3, #12
 800a864:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	621a      	str	r2, [r3, #32]
}
 800a87a:	bf00      	nop
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a89c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	f043 0307 	orr.w	r3, r3, #7
 800a8ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	609a      	str	r2, [r3, #8]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	021a      	lsls	r2, r3, #8
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	609a      	str	r2, [r3, #8]
}
 800a8f4:	bf00      	nop
 800a8f6:	371c      	adds	r7, #28
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f003 031f 	and.w	r3, r3, #31
 800a912:	2201      	movs	r2, #1
 800a914:	fa02 f303 	lsl.w	r3, r2, r3
 800a918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6a1a      	ldr	r2, [r3, #32]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	43db      	mvns	r3, r3
 800a922:	401a      	ands	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a1a      	ldr	r2, [r3, #32]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f003 031f 	and.w	r3, r3, #31
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	fa01 f303 	lsl.w	r3, r1, r3
 800a938:	431a      	orrs	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	621a      	str	r2, [r3, #32]
}
 800a93e:	bf00      	nop
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
	...

0800a94c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d101      	bne.n	800a964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a960:	2302      	movs	r3, #2
 800a962:	e074      	b.n	800aa4e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2202      	movs	r2, #2
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a34      	ldr	r2, [pc, #208]	; (800aa5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d009      	beq.n	800a9a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a33      	ldr	r2, [pc, #204]	; (800aa60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d004      	beq.n	800a9a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a31      	ldr	r2, [pc, #196]	; (800aa64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d108      	bne.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a21      	ldr	r2, [pc, #132]	; (800aa5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d022      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e4:	d01d      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a1f      	ldr	r2, [pc, #124]	; (800aa68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d018      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d013      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a1c      	ldr	r2, [pc, #112]	; (800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00e      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a15      	ldr	r2, [pc, #84]	; (800aa60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d009      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a18      	ldr	r2, [pc, #96]	; (800aa74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d004      	beq.n	800aa22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a11      	ldr	r2, [pc, #68]	; (800aa64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d10c      	bne.n	800aa3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40012c00 	.word	0x40012c00
 800aa60:	40013400 	.word	0x40013400
 800aa64:	40015000 	.word	0x40015000
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40000800 	.word	0x40000800
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	40014000 	.word	0x40014000

0800aa78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e078      	b.n	800ab86 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	4313      	orrs	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafa:	4313      	orrs	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	041b      	lsls	r3, r3, #16
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1c      	ldr	r2, [pc, #112]	; (800ab94 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d009      	beq.n	800ab3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1b      	ldr	r2, [pc, #108]	; (800ab98 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d004      	beq.n	800ab3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a19      	ldr	r2, [pc, #100]	; (800ab9c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d11c      	bne.n	800ab74 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	051b      	lsls	r3, r3, #20
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40012c00 	.word	0x40012c00
 800ab98:	40013400 	.word	0x40013400
 800ab9c:	40015000 	.word	0x40015000

0800aba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e042      	b.n	800acc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d106      	bne.n	800ac56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7f8 fdcf 	bl	80037f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2224      	movs	r2, #36	; 0x24
 800ac5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f022 0201 	bic.w	r2, r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 feb4 	bl	800b9e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fbb5 	bl	800b3ec <UART_SetConfig>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d101      	bne.n	800ac8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e01b      	b.n	800acc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0201 	orr.w	r2, r2, #1
 800acba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 ff33 	bl	800bb28 <UART_CheckIdleState>
 800acc2:	4603      	mov	r3, r0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	; 0x28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d137      	bne.n	800ad54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <HAL_UART_Receive_IT+0x24>
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e030      	b.n	800ad56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <HAL_UART_Receive_IT+0x94>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d01f      	beq.n	800ad44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	623b      	str	r3, [r7, #32]
 800ad32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	69f9      	ldr	r1, [r7, #28]
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e6      	bne.n	800ad12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	461a      	mov	r2, r3
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f001 f804 	bl	800bd58 <UART_Start_Receive_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	e000      	b.n	800ad56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad54:	2302      	movs	r3, #2
  }
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3728      	adds	r7, #40	; 0x28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	40008000 	.word	0x40008000

0800ad64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad92:	4013      	ands	r3, r2
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d11b      	bne.n	800add8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d015      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 82e3 	beq.w	800b394 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      }
      return;
 800add6:	e2dd      	b.n	800b394 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8123 	beq.w	800b028 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ade2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ade6:	4b8d      	ldr	r3, [pc, #564]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800ade8:	4013      	ands	r3, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800adf2:	4b8b      	ldr	r3, [pc, #556]	; (800b020 <HAL_UART_IRQHandler+0x2bc>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8116 	beq.w	800b028 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d011      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
 800ae38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae52:	f043 0204 	orr.w	r2, r3, #4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae82:	f043 0202 	orr.w	r2, r3, #2
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d017      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aea8:	4b5c      	ldr	r3, [pc, #368]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800aeaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aebe:	f043 0208 	orr.w	r2, r3, #8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d012      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef0:	f043 0220 	orr.w	r2, r3, #32
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8249 	beq.w	800b398 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d005      	beq.n	800af5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d054      	beq.n	800b008 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f81c 	bl	800bf9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b40      	cmp	r3, #64	; 0x40
 800af70:	d146      	bne.n	800b000 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1d9      	bne.n	800af72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d017      	beq.n	800aff8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afce:	4a15      	ldr	r2, [pc, #84]	; (800b024 <HAL_UART_IRQHandler+0x2c0>)
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fa fc6b 	bl	80058b4 <HAL_DMA_Abort_IT>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d019      	beq.n	800b018 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800aff2:	4610      	mov	r0, r2
 800aff4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff6:	e00f      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f9e1 	bl	800b3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affe:	e00b      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f9dd 	bl	800b3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b006:	e007      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9d9 	bl	800b3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b016:	e1bf      	b.n	800b398 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b018:	bf00      	nop
    return;
 800b01a:	e1bd      	b.n	800b398 <HAL_UART_IRQHandler+0x634>
 800b01c:	10000001 	.word	0x10000001
 800b020:	04000120 	.word	0x04000120
 800b024:	0800c069 	.word	0x0800c069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	f040 8153 	bne.w	800b2d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b036:	f003 0310 	and.w	r3, r3, #16
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 814c 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 8145 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2210      	movs	r2, #16
 800b054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b060:	2b40      	cmp	r3, #64	; 0x40
 800b062:	f040 80bb 	bne.w	800b1dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 818f 	beq.w	800b39c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b088:	429a      	cmp	r2, r3
 800b08a:	f080 8187 	bcs.w	800b39c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f040 8087 	bne.w	800b1ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1da      	bne.n	800b0ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3308      	adds	r3, #8
 800b116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b11a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b11e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b12c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e1      	bne.n	800b0f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3308      	adds	r3, #8
 800b152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b156:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b15c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e3      	bne.n	800b132 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b188:	f023 0310 	bic.w	r3, r3, #16
 800b18c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b19a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b19c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e4      	bne.n	800b178 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fa fb24 	bl	8005802 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f8fd 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1da:	e0df      	b.n	800b39c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80d1 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 80cc 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b21c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b22a:	647b      	str	r3, [r7, #68]	; 0x44
 800b22c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e4      	bne.n	800b208 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3308      	adds	r3, #8
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	623b      	str	r3, [r7, #32]
   return(result);
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3308      	adds	r3, #8
 800b262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b266:	633a      	str	r2, [r7, #48]	; 0x30
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e1      	bne.n	800b23e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2220      	movs	r2, #32
 800b27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0310 	bic.w	r3, r3, #16
 800b2a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2b0:	61fb      	str	r3, [r7, #28]
 800b2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	69b9      	ldr	r1, [r7, #24]
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e4      	bne.n	800b28e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f87f 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2d6:	e063      	b.n	800b3a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00e      	beq.n	800b302 <HAL_UART_IRQHandler+0x59e>
 800b2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d008      	beq.n	800b302 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 fc12 	bl	800cb24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b300:	e051      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d014      	beq.n	800b338 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b31e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d008      	beq.n	800b338 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d03a      	beq.n	800b3a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	4798      	blx	r3
    }
    return;
 800b336:	e035      	b.n	800b3a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d009      	beq.n	800b358 <HAL_UART_IRQHandler+0x5f4>
 800b344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fe9f 	bl	800c094 <UART_EndTransmit_IT>
    return;
 800b356:	e026      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d009      	beq.n	800b378 <HAL_UART_IRQHandler+0x614>
 800b364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 fbeb 	bl	800cb4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b376:	e016      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d010      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x642>
 800b384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da0c      	bge.n	800b3a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 fbd3 	bl	800cb38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b392:	e008      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b394:	bf00      	nop
 800b396:	e006      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
    return;
 800b398:	bf00      	nop
 800b39a:	e004      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b39c:	bf00      	nop
 800b39e:	e002      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3a0:	bf00      	nop
 800b3a2:	e000      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3a4:	bf00      	nop
  }
}
 800b3a6:	37e8      	adds	r7, #232	; 0xe8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f0:	b08c      	sub	sp, #48	; 0x30
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	431a      	orrs	r2, r3
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	4313      	orrs	r3, r2
 800b412:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	4baa      	ldr	r3, [pc, #680]	; (800b6c4 <UART_SetConfig+0x2d8>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	6812      	ldr	r2, [r2, #0]
 800b422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b424:	430b      	orrs	r3, r1
 800b426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a9f      	ldr	r2, [pc, #636]	; (800b6c8 <UART_SetConfig+0x2dc>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d004      	beq.n	800b458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b454:	4313      	orrs	r3, r2
 800b456:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b462:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b46c:	430b      	orrs	r3, r1
 800b46e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	f023 010f 	bic.w	r1, r3, #15
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a90      	ldr	r2, [pc, #576]	; (800b6cc <UART_SetConfig+0x2e0>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d125      	bne.n	800b4dc <UART_SetConfig+0xf0>
 800b490:	4b8f      	ldr	r3, [pc, #572]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d81a      	bhi.n	800b4d4 <UART_SetConfig+0xe8>
 800b49e:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <UART_SetConfig+0xb8>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4b5 	.word	0x0800b4b5
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ba:	e116      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e112      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e10e      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e10a      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e106      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a7c      	ldr	r2, [pc, #496]	; (800b6d4 <UART_SetConfig+0x2e8>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d138      	bne.n	800b558 <UART_SetConfig+0x16c>
 800b4e6:	4b7a      	ldr	r3, [pc, #488]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ec:	f003 030c 	and.w	r3, r3, #12
 800b4f0:	2b0c      	cmp	r3, #12
 800b4f2:	d82d      	bhi.n	800b550 <UART_SetConfig+0x164>
 800b4f4:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <UART_SetConfig+0x110>)
 800b4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fa:	bf00      	nop
 800b4fc:	0800b531 	.word	0x0800b531
 800b500:	0800b551 	.word	0x0800b551
 800b504:	0800b551 	.word	0x0800b551
 800b508:	0800b551 	.word	0x0800b551
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b551 	.word	0x0800b551
 800b514:	0800b551 	.word	0x0800b551
 800b518:	0800b551 	.word	0x0800b551
 800b51c:	0800b539 	.word	0x0800b539
 800b520:	0800b551 	.word	0x0800b551
 800b524:	0800b551 	.word	0x0800b551
 800b528:	0800b551 	.word	0x0800b551
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	2300      	movs	r3, #0
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b536:	e0d8      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b538:	2302      	movs	r3, #2
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b53e:	e0d4      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b546:	e0d0      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54e:	e0cc      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b556:	e0c8      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a5e      	ldr	r2, [pc, #376]	; (800b6d8 <UART_SetConfig+0x2ec>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d125      	bne.n	800b5ae <UART_SetConfig+0x1c2>
 800b562:	4b5b      	ldr	r3, [pc, #364]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b568:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b56c:	2b30      	cmp	r3, #48	; 0x30
 800b56e:	d016      	beq.n	800b59e <UART_SetConfig+0x1b2>
 800b570:	2b30      	cmp	r3, #48	; 0x30
 800b572:	d818      	bhi.n	800b5a6 <UART_SetConfig+0x1ba>
 800b574:	2b20      	cmp	r3, #32
 800b576:	d00a      	beq.n	800b58e <UART_SetConfig+0x1a2>
 800b578:	2b20      	cmp	r3, #32
 800b57a:	d814      	bhi.n	800b5a6 <UART_SetConfig+0x1ba>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <UART_SetConfig+0x19a>
 800b580:	2b10      	cmp	r3, #16
 800b582:	d008      	beq.n	800b596 <UART_SetConfig+0x1aa>
 800b584:	e00f      	b.n	800b5a6 <UART_SetConfig+0x1ba>
 800b586:	2300      	movs	r3, #0
 800b588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58c:	e0ad      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b58e:	2302      	movs	r3, #2
 800b590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b594:	e0a9      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b596:	2304      	movs	r3, #4
 800b598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b59c:	e0a5      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b59e:	2308      	movs	r3, #8
 800b5a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a4:	e0a1      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ac:	e09d      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a4a      	ldr	r2, [pc, #296]	; (800b6dc <UART_SetConfig+0x2f0>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d125      	bne.n	800b604 <UART_SetConfig+0x218>
 800b5b8:	4b45      	ldr	r3, [pc, #276]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5c2:	2bc0      	cmp	r3, #192	; 0xc0
 800b5c4:	d016      	beq.n	800b5f4 <UART_SetConfig+0x208>
 800b5c6:	2bc0      	cmp	r3, #192	; 0xc0
 800b5c8:	d818      	bhi.n	800b5fc <UART_SetConfig+0x210>
 800b5ca:	2b80      	cmp	r3, #128	; 0x80
 800b5cc:	d00a      	beq.n	800b5e4 <UART_SetConfig+0x1f8>
 800b5ce:	2b80      	cmp	r3, #128	; 0x80
 800b5d0:	d814      	bhi.n	800b5fc <UART_SetConfig+0x210>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <UART_SetConfig+0x1f0>
 800b5d6:	2b40      	cmp	r3, #64	; 0x40
 800b5d8:	d008      	beq.n	800b5ec <UART_SetConfig+0x200>
 800b5da:	e00f      	b.n	800b5fc <UART_SetConfig+0x210>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5e2:	e082      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ea:	e07e      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5f2:	e07a      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5fa:	e076      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b602:	e072      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a35      	ldr	r2, [pc, #212]	; (800b6e0 <UART_SetConfig+0x2f4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d12a      	bne.n	800b664 <UART_SetConfig+0x278>
 800b60e:	4b30      	ldr	r3, [pc, #192]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b61c:	d01a      	beq.n	800b654 <UART_SetConfig+0x268>
 800b61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b622:	d81b      	bhi.n	800b65c <UART_SetConfig+0x270>
 800b624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b628:	d00c      	beq.n	800b644 <UART_SetConfig+0x258>
 800b62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62e:	d815      	bhi.n	800b65c <UART_SetConfig+0x270>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <UART_SetConfig+0x250>
 800b634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b638:	d008      	beq.n	800b64c <UART_SetConfig+0x260>
 800b63a:	e00f      	b.n	800b65c <UART_SetConfig+0x270>
 800b63c:	2300      	movs	r3, #0
 800b63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b642:	e052      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b644:	2302      	movs	r3, #2
 800b646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b64a:	e04e      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b64c:	2304      	movs	r3, #4
 800b64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b652:	e04a      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b654:	2308      	movs	r3, #8
 800b656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b65a:	e046      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b65c:	2310      	movs	r3, #16
 800b65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b662:	e042      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a17      	ldr	r2, [pc, #92]	; (800b6c8 <UART_SetConfig+0x2dc>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d13a      	bne.n	800b6e4 <UART_SetConfig+0x2f8>
 800b66e:	4b18      	ldr	r3, [pc, #96]	; (800b6d0 <UART_SetConfig+0x2e4>)
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b67c:	d01a      	beq.n	800b6b4 <UART_SetConfig+0x2c8>
 800b67e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b682:	d81b      	bhi.n	800b6bc <UART_SetConfig+0x2d0>
 800b684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b688:	d00c      	beq.n	800b6a4 <UART_SetConfig+0x2b8>
 800b68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b68e:	d815      	bhi.n	800b6bc <UART_SetConfig+0x2d0>
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <UART_SetConfig+0x2b0>
 800b694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b698:	d008      	beq.n	800b6ac <UART_SetConfig+0x2c0>
 800b69a:	e00f      	b.n	800b6bc <UART_SetConfig+0x2d0>
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6a2:	e022      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6aa:	e01e      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b6ac:	2304      	movs	r3, #4
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6b2:	e01a      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ba:	e016      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6c2:	e012      	b.n	800b6ea <UART_SetConfig+0x2fe>
 800b6c4:	cfff69f3 	.word	0xcfff69f3
 800b6c8:	40008000 	.word	0x40008000
 800b6cc:	40013800 	.word	0x40013800
 800b6d0:	40021000 	.word	0x40021000
 800b6d4:	40004400 	.word	0x40004400
 800b6d8:	40004800 	.word	0x40004800
 800b6dc:	40004c00 	.word	0x40004c00
 800b6e0:	40005000 	.word	0x40005000
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4aae      	ldr	r2, [pc, #696]	; (800b9a8 <UART_SetConfig+0x5bc>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	f040 8097 	bne.w	800b824 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6fa:	2b08      	cmp	r3, #8
 800b6fc:	d823      	bhi.n	800b746 <UART_SetConfig+0x35a>
 800b6fe:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <UART_SetConfig+0x318>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b747 	.word	0x0800b747
 800b70c:	0800b731 	.word	0x0800b731
 800b710:	0800b747 	.word	0x0800b747
 800b714:	0800b737 	.word	0x0800b737
 800b718:	0800b747 	.word	0x0800b747
 800b71c:	0800b747 	.word	0x0800b747
 800b720:	0800b747 	.word	0x0800b747
 800b724:	0800b73f 	.word	0x0800b73f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b728:	f7fd f85c 	bl	80087e4 <HAL_RCC_GetPCLK1Freq>
 800b72c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b72e:	e010      	b.n	800b752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b730:	4b9e      	ldr	r3, [pc, #632]	; (800b9ac <UART_SetConfig+0x5c0>)
 800b732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b734:	e00d      	b.n	800b752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b736:	f7fc ffe7 	bl	8008708 <HAL_RCC_GetSysClockFreq>
 800b73a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b73c:	e009      	b.n	800b752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b73e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b744:	e005      	b.n	800b752 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 8130 	beq.w	800b9ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	4a94      	ldr	r2, [pc, #592]	; (800b9b0 <UART_SetConfig+0x5c4>)
 800b760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b764:	461a      	mov	r2, r3
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	fbb3 f3f2 	udiv	r3, r3, r2
 800b76c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	4613      	mov	r3, r2
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4413      	add	r3, r2
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d305      	bcc.n	800b78a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b784:	69ba      	ldr	r2, [r7, #24]
 800b786:	429a      	cmp	r2, r3
 800b788:	d903      	bls.n	800b792 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b790:	e113      	b.n	800b9ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2200      	movs	r2, #0
 800b796:	60bb      	str	r3, [r7, #8]
 800b798:	60fa      	str	r2, [r7, #12]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	4a84      	ldr	r2, [pc, #528]	; (800b9b0 <UART_SetConfig+0x5c4>)
 800b7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	603b      	str	r3, [r7, #0]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7b4:	f7f5 f94e 	bl	8000a54 <__aeabi_uldivmod>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	f04f 0200 	mov.w	r2, #0
 800b7c4:	f04f 0300 	mov.w	r3, #0
 800b7c8:	020b      	lsls	r3, r1, #8
 800b7ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7ce:	0202      	lsls	r2, r0, #8
 800b7d0:	6979      	ldr	r1, [r7, #20]
 800b7d2:	6849      	ldr	r1, [r1, #4]
 800b7d4:	0849      	lsrs	r1, r1, #1
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	460c      	mov	r4, r1
 800b7da:	4605      	mov	r5, r0
 800b7dc:	eb12 0804 	adds.w	r8, r2, r4
 800b7e0:	eb43 0905 	adc.w	r9, r3, r5
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	469a      	mov	sl, r3
 800b7ec:	4693      	mov	fp, r2
 800b7ee:	4652      	mov	r2, sl
 800b7f0:	465b      	mov	r3, fp
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f5 f92d 	bl	8000a54 <__aeabi_uldivmod>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4613      	mov	r3, r2
 800b800:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b808:	d308      	bcc.n	800b81c <UART_SetConfig+0x430>
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b810:	d204      	bcs.n	800b81c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6a3a      	ldr	r2, [r7, #32]
 800b818:	60da      	str	r2, [r3, #12]
 800b81a:	e0ce      	b.n	800b9ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b822:	e0ca      	b.n	800b9ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	69db      	ldr	r3, [r3, #28]
 800b828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b82c:	d166      	bne.n	800b8fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b82e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b832:	2b08      	cmp	r3, #8
 800b834:	d827      	bhi.n	800b886 <UART_SetConfig+0x49a>
 800b836:	a201      	add	r2, pc, #4	; (adr r2, 800b83c <UART_SetConfig+0x450>)
 800b838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83c:	0800b861 	.word	0x0800b861
 800b840:	0800b869 	.word	0x0800b869
 800b844:	0800b871 	.word	0x0800b871
 800b848:	0800b887 	.word	0x0800b887
 800b84c:	0800b877 	.word	0x0800b877
 800b850:	0800b887 	.word	0x0800b887
 800b854:	0800b887 	.word	0x0800b887
 800b858:	0800b887 	.word	0x0800b887
 800b85c:	0800b87f 	.word	0x0800b87f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b860:	f7fc ffc0 	bl	80087e4 <HAL_RCC_GetPCLK1Freq>
 800b864:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b866:	e014      	b.n	800b892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b868:	f7fc ffd2 	bl	8008810 <HAL_RCC_GetPCLK2Freq>
 800b86c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b86e:	e010      	b.n	800b892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b870:	4b4e      	ldr	r3, [pc, #312]	; (800b9ac <UART_SetConfig+0x5c0>)
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b874:	e00d      	b.n	800b892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b876:	f7fc ff47 	bl	8008708 <HAL_RCC_GetSysClockFreq>
 800b87a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b87c:	e009      	b.n	800b892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b87e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b884:	e005      	b.n	800b892 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8090 	beq.w	800b9ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89e:	4a44      	ldr	r2, [pc, #272]	; (800b9b0 <UART_SetConfig+0x5c4>)
 800b8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ac:	005a      	lsls	r2, r3, #1
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	441a      	add	r2, r3
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	2b0f      	cmp	r3, #15
 800b8c4:	d916      	bls.n	800b8f4 <UART_SetConfig+0x508>
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8cc:	d212      	bcs.n	800b8f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f023 030f 	bic.w	r3, r3, #15
 800b8d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	085b      	lsrs	r3, r3, #1
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f003 0307 	and.w	r3, r3, #7
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	8bfb      	ldrh	r3, [r7, #30]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	8bfa      	ldrh	r2, [r7, #30]
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	e062      	b.n	800b9ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b8fa:	e05e      	b.n	800b9ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b900:	2b08      	cmp	r3, #8
 800b902:	d828      	bhi.n	800b956 <UART_SetConfig+0x56a>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <UART_SetConfig+0x520>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b931 	.word	0x0800b931
 800b910:	0800b939 	.word	0x0800b939
 800b914:	0800b941 	.word	0x0800b941
 800b918:	0800b957 	.word	0x0800b957
 800b91c:	0800b947 	.word	0x0800b947
 800b920:	0800b957 	.word	0x0800b957
 800b924:	0800b957 	.word	0x0800b957
 800b928:	0800b957 	.word	0x0800b957
 800b92c:	0800b94f 	.word	0x0800b94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b930:	f7fc ff58 	bl	80087e4 <HAL_RCC_GetPCLK1Freq>
 800b934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b936:	e014      	b.n	800b962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b938:	f7fc ff6a 	bl	8008810 <HAL_RCC_GetPCLK2Freq>
 800b93c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b93e:	e010      	b.n	800b962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b940:	4b1a      	ldr	r3, [pc, #104]	; (800b9ac <UART_SetConfig+0x5c0>)
 800b942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b944:	e00d      	b.n	800b962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b946:	f7fc fedf 	bl	8008708 <HAL_RCC_GetSysClockFreq>
 800b94a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b94c:	e009      	b.n	800b962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b954:	e005      	b.n	800b962 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b960:	bf00      	nop
    }

    if (pclk != 0U)
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	d028      	beq.n	800b9ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <UART_SetConfig+0x5c4>)
 800b96e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b972:	461a      	mov	r2, r3
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	fbb3 f2f2 	udiv	r2, r3, r2
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	085b      	lsrs	r3, r3, #1
 800b980:	441a      	add	r2, r3
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	2b0f      	cmp	r3, #15
 800b990:	d910      	bls.n	800b9b4 <UART_SetConfig+0x5c8>
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b998:	d20c      	bcs.n	800b9b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60da      	str	r2, [r3, #12]
 800b9a4:	e009      	b.n	800b9ba <UART_SetConfig+0x5ce>
 800b9a6:	bf00      	nop
 800b9a8:	40008000 	.word	0x40008000
 800b9ac:	00f42400 	.word	0x00f42400
 800b9b0:	0800ce04 	.word	0x0800ce04
      }
      else
      {
        ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b9d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3730      	adds	r7, #48	; 0x30
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	f003 0308 	and.w	r3, r3, #8
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00a      	beq.n	800ba0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba56:	f003 0304 	and.w	r3, r3, #4
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	f003 0310 	and.w	r3, r3, #16
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	f003 0320 	and.w	r3, r3, #32
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	430a      	orrs	r2, r1
 800bab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d01a      	beq.n	800bafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	430a      	orrs	r2, r1
 800bad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bae2:	d10a      	bne.n	800bafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	605a      	str	r2, [r3, #4]
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b098      	sub	sp, #96	; 0x60
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb38:	f7f7 ff8a 	bl	8003a50 <HAL_GetTick>
 800bb3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	2b08      	cmp	r3, #8
 800bb4a:	d12f      	bne.n	800bbac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb54:	2200      	movs	r2, #0
 800bb56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f88e 	bl	800bc7c <UART_WaitOnFlagUntilTimeout>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d022      	beq.n	800bbac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	e853 3f00 	ldrex	r3, [r3]
 800bb72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb7a:	653b      	str	r3, [r7, #80]	; 0x50
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb84:	647b      	str	r3, [r7, #68]	; 0x44
 800bb86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e6      	bne.n	800bb66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e063      	b.n	800bc74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	2b04      	cmp	r3, #4
 800bbb8:	d149      	bne.n	800bc4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f857 	bl	800bc7c <UART_WaitOnFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d03c      	beq.n	800bc4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	e853 3f00 	ldrex	r3, [r3]
 800bbe0:	623b      	str	r3, [r7, #32]
   return(result);
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e6      	bne.n	800bbd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f023 0301 	bic.w	r3, r3, #1
 800bc1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3308      	adds	r3, #8
 800bc24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc26:	61fa      	str	r2, [r7, #28]
 800bc28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	69b9      	ldr	r1, [r7, #24]
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	617b      	str	r3, [r7, #20]
   return(result);
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e5      	bne.n	800bc06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e012      	b.n	800bc74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2220      	movs	r2, #32
 800bc52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2220      	movs	r2, #32
 800bc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3758      	adds	r7, #88	; 0x58
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc8c:	e04f      	b.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d04b      	beq.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc96:	f7f7 fedb 	bl	8003a50 <HAL_GetTick>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d302      	bcc.n	800bcac <UART_WaitOnFlagUntilTimeout+0x30>
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e04e      	b.n	800bd4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0304 	and.w	r3, r3, #4
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d037      	beq.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2b80      	cmp	r3, #128	; 0x80
 800bcc2:	d034      	beq.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	d031      	beq.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	2b08      	cmp	r3, #8
 800bcd6:	d110      	bne.n	800bcfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2208      	movs	r2, #8
 800bcde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f95b 	bl	800bf9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2208      	movs	r2, #8
 800bcea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e029      	b.n	800bd4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd08:	d111      	bne.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 f941 	bl	800bf9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e00f      	b.n	800bd4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	69da      	ldr	r2, [r3, #28]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	4013      	ands	r3, r2
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	bf0c      	ite	eq
 800bd3e:	2301      	moveq	r3, #1
 800bd40:	2300      	movne	r3, #0
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	461a      	mov	r2, r3
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d0a0      	beq.n	800bc8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b0a3      	sub	sp, #140	; 0x8c
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	88fa      	ldrh	r2, [r7, #6]
 800bd70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	88fa      	ldrh	r2, [r7, #6]
 800bd78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd8a:	d10e      	bne.n	800bdaa <UART_Start_Receive_IT+0x52>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <UART_Start_Receive_IT+0x48>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd9e:	e02d      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	22ff      	movs	r2, #255	; 0xff
 800bda4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bda8:	e028      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10d      	bne.n	800bdce <UART_Start_Receive_IT+0x76>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d104      	bne.n	800bdc4 <UART_Start_Receive_IT+0x6c>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	22ff      	movs	r2, #255	; 0xff
 800bdbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdc2:	e01b      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	227f      	movs	r2, #127	; 0x7f
 800bdc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdcc:	e016      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd6:	d10d      	bne.n	800bdf4 <UART_Start_Receive_IT+0x9c>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d104      	bne.n	800bdea <UART_Start_Receive_IT+0x92>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	227f      	movs	r2, #127	; 0x7f
 800bde4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bde8:	e008      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	223f      	movs	r2, #63	; 0x3f
 800bdee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdf2:	e003      	b.n	800bdfc <UART_Start_Receive_IT+0xa4>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2222      	movs	r2, #34	; 0x22
 800be08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800be1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be1e:	f043 0301 	orr.w	r3, r3, #1
 800be22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800be30:	673a      	str	r2, [r7, #112]	; 0x70
 800be32:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800be36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be38:	e841 2300 	strex	r3, r2, [r1]
 800be3c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800be3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e3      	bne.n	800be0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4c:	d14f      	bne.n	800beee <UART_Start_Receive_IT+0x196>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be54:	88fa      	ldrh	r2, [r7, #6]
 800be56:	429a      	cmp	r2, r3
 800be58:	d349      	bcc.n	800beee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be62:	d107      	bne.n	800be74 <UART_Start_Receive_IT+0x11c>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d103      	bne.n	800be74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4a47      	ldr	r2, [pc, #284]	; (800bf8c <UART_Start_Receive_IT+0x234>)
 800be70:	675a      	str	r2, [r3, #116]	; 0x74
 800be72:	e002      	b.n	800be7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	4a46      	ldr	r2, [pc, #280]	; (800bf90 <UART_Start_Receive_IT+0x238>)
 800be78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d01a      	beq.n	800beb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bea6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800beaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800beb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e4      	bne.n	800be82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3308      	adds	r3, #8
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	e853 3f00 	ldrex	r3, [r3]
 800bec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bece:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3308      	adds	r3, #8
 800bed6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bed8:	64ba      	str	r2, [r7, #72]	; 0x48
 800beda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bedc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bee0:	e841 2300 	strex	r3, r2, [r1]
 800bee4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e5      	bne.n	800beb8 <UART_Start_Receive_IT+0x160>
 800beec:	e046      	b.n	800bf7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef6:	d107      	bne.n	800bf08 <UART_Start_Receive_IT+0x1b0>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d103      	bne.n	800bf08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4a24      	ldr	r2, [pc, #144]	; (800bf94 <UART_Start_Receive_IT+0x23c>)
 800bf04:	675a      	str	r2, [r3, #116]	; 0x74
 800bf06:	e002      	b.n	800bf0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4a23      	ldr	r2, [pc, #140]	; (800bf98 <UART_Start_Receive_IT+0x240>)
 800bf0c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d019      	beq.n	800bf4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bf2a:	677b      	str	r3, [r7, #116]	; 0x74
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
 800bf36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e6      	bne.n	800bf16 <UART_Start_Receive_IT+0x1be>
 800bf48:	e018      	b.n	800bf7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	e853 3f00 	ldrex	r3, [r3]
 800bf56:	613b      	str	r3, [r7, #16]
   return(result);
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f043 0320 	orr.w	r3, r3, #32
 800bf5e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf68:	623b      	str	r3, [r7, #32]
 800bf6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	69f9      	ldr	r1, [r7, #28]
 800bf6e:	6a3a      	ldr	r2, [r7, #32]
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	378c      	adds	r7, #140	; 0x8c
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	0800c7bd 	.word	0x0800c7bd
 800bf90:	0800c45d 	.word	0x0800c45d
 800bf94:	0800c2a5 	.word	0x0800c2a5
 800bf98:	0800c0ed 	.word	0x0800c0ed

0800bf9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b095      	sub	sp, #84	; 0x54
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfac:	e853 3f00 	ldrex	r3, [r3]
 800bfb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc2:	643b      	str	r3, [r7, #64]	; 0x40
 800bfc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfca:	e841 2300 	strex	r3, r2, [r1]
 800bfce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e6      	bne.n	800bfa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfec:	f023 0301 	bic.w	r3, r3, #1
 800bff0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3308      	adds	r3, #8
 800bff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c002:	e841 2300 	strex	r3, r2, [r1]
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1e3      	bne.n	800bfd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c012:	2b01      	cmp	r3, #1
 800c014:	d118      	bne.n	800c048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	60bb      	str	r3, [r7, #8]
   return(result);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f023 0310 	bic.w	r3, r3, #16
 800c02a:	647b      	str	r3, [r7, #68]	; 0x44
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	461a      	mov	r2, r3
 800c032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c034:	61bb      	str	r3, [r7, #24]
 800c036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	6979      	ldr	r1, [r7, #20]
 800c03a:	69ba      	ldr	r2, [r7, #24]
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	613b      	str	r3, [r7, #16]
   return(result);
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e6      	bne.n	800c016 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2220      	movs	r2, #32
 800c04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c05c:	bf00      	nop
 800c05e:	3754      	adds	r7, #84	; 0x54
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff f99a 	bl	800b3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c08c:	bf00      	nop
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b088      	sub	sp, #32
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	61bb      	str	r3, [r7, #24]
 800c0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6979      	ldr	r1, [r7, #20]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e6      	bne.n	800c09c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7ff f965 	bl	800b3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0e2:	bf00      	nop
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b09c      	sub	sp, #112	; 0x70
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c104:	2b22      	cmp	r3, #34	; 0x22
 800c106:	f040 80be 	bne.w	800c286 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c114:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c118:	b2d9      	uxtb	r1, r3
 800c11a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c124:	400a      	ands	r2, r1
 800c126:	b2d2      	uxtb	r2, r2
 800c128:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	3b01      	subs	r3, #1
 800c13e:	b29a      	uxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f040 80a1 	bne.w	800c296 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c168:	66bb      	str	r3, [r7, #104]	; 0x68
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c172:	65bb      	str	r3, [r7, #88]	; 0x58
 800c174:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c176:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c17a:	e841 2300 	strex	r3, r2, [r1]
 800c17e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e6      	bne.n	800c154 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3308      	adds	r3, #8
 800c18c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	e853 3f00 	ldrex	r3, [r3]
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c198:	f023 0301 	bic.w	r3, r3, #1
 800c19c:	667b      	str	r3, [r7, #100]	; 0x64
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3308      	adds	r3, #8
 800c1a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1a6:	647a      	str	r2, [r7, #68]	; 0x44
 800c1a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1ae:	e841 2300 	strex	r3, r2, [r1]
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1e5      	bne.n	800c186 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a33      	ldr	r2, [pc, #204]	; (800c2a0 <UART_RxISR_8BIT+0x1b4>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d01f      	beq.n	800c218 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d018      	beq.n	800c218 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	623b      	str	r3, [r7, #32]
   return(result);
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	461a      	mov	r2, r3
 800c202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c204:	633b      	str	r3, [r7, #48]	; 0x30
 800c206:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e6      	bne.n	800c1e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d12e      	bne.n	800c27e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	60fb      	str	r3, [r7, #12]
   return(result);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0310 	bic.w	r3, r3, #16
 800c23a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	461a      	mov	r2, r3
 800c242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	69b9      	ldr	r1, [r7, #24]
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	617b      	str	r3, [r7, #20]
   return(result);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e6      	bne.n	800c226 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b10      	cmp	r3, #16
 800c264:	d103      	bne.n	800c26e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2210      	movs	r2, #16
 800c26c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7ff f8ac 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c27c:	e00b      	b.n	800c296 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7f6 f868 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 800c284:	e007      	b.n	800c296 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699a      	ldr	r2, [r3, #24]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f042 0208 	orr.w	r2, r2, #8
 800c294:	619a      	str	r2, [r3, #24]
}
 800c296:	bf00      	nop
 800c298:	3770      	adds	r7, #112	; 0x70
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	40008000 	.word	0x40008000

0800c2a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b09c      	sub	sp, #112	; 0x70
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2bc:	2b22      	cmp	r3, #34	; 0x22
 800c2be:	f040 80be 	bne.w	800c43e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c2d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c2da:	4013      	ands	r3, r2
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e6:	1c9a      	adds	r2, r3, #2
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c304:	b29b      	uxth	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 80a1 	bne.w	800c44e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c320:	667b      	str	r3, [r7, #100]	; 0x64
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c32a:	657b      	str	r3, [r7, #84]	; 0x54
 800c32c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e6      	bne.n	800c30c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3308      	adds	r3, #8
 800c344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	e853 3f00 	ldrex	r3, [r3]
 800c34c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f023 0301 	bic.w	r3, r3, #1
 800c354:	663b      	str	r3, [r7, #96]	; 0x60
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3308      	adds	r3, #8
 800c35c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c35e:	643a      	str	r2, [r7, #64]	; 0x40
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c366:	e841 2300 	strex	r3, r2, [r1]
 800c36a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e5      	bne.n	800c33e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2220      	movs	r2, #32
 800c376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a33      	ldr	r2, [pc, #204]	; (800c458 <UART_RxISR_16BIT+0x1b4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d01f      	beq.n	800c3d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	e853 3f00 	ldrex	r3, [r3]
 800c3aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e6      	bne.n	800c39e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d12e      	bne.n	800c436 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f023 0310 	bic.w	r3, r3, #16
 800c3f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3fc:	61bb      	str	r3, [r7, #24]
 800c3fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	6979      	ldr	r1, [r7, #20]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	613b      	str	r3, [r7, #16]
   return(result);
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e6      	bne.n	800c3de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	f003 0310 	and.w	r3, r3, #16
 800c41a:	2b10      	cmp	r3, #16
 800c41c:	d103      	bne.n	800c426 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2210      	movs	r2, #16
 800c424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7fe ffd0 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c434:	e00b      	b.n	800c44e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7f5 ff8c 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 800c43c:	e007      	b.n	800c44e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	699a      	ldr	r2, [r3, #24]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f042 0208 	orr.w	r2, r2, #8
 800c44c:	619a      	str	r2, [r3, #24]
}
 800c44e:	bf00      	nop
 800c450:	3770      	adds	r7, #112	; 0x70
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	40008000 	.word	0x40008000

0800c45c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b0ac      	sub	sp, #176	; 0xb0
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c46a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c492:	2b22      	cmp	r3, #34	; 0x22
 800c494:	f040 8182 	bne.w	800c79c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c49e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4a2:	e125      	b.n	800c6f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c4b2:	b2d9      	uxtb	r1, r3
 800c4b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4be:	400a      	ands	r2, r1
 800c4c0:	b2d2      	uxtb	r2, r2
 800c4c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c4ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d053      	beq.n	800c59e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d011      	beq.n	800c526 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2201      	movs	r2, #1
 800c514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51c:	f043 0201 	orr.w	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d011      	beq.n	800c556 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00b      	beq.n	800c556 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2202      	movs	r2, #2
 800c544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c54c:	f043 0204 	orr.w	r2, r3, #4
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d011      	beq.n	800c586 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00b      	beq.n	800c586 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2204      	movs	r2, #4
 800c574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c57c:	f043 0202 	orr.w	r2, r3, #2
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7fe ff15 	bl	800b3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f040 80a2 	bne.w	800c6f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c5d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e4      	bne.n	800c5ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c5f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3308      	adds	r3, #8
 800c606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c60a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c60c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e1      	bne.n	800c5e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a5f      	ldr	r2, [pc, #380]	; (800c7b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d021      	beq.n	800c680 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01a      	beq.n	800c680 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c65e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c66c:	657b      	str	r3, [r7, #84]	; 0x54
 800c66e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e4      	bne.n	800c64a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c684:	2b01      	cmp	r3, #1
 800c686:	d130      	bne.n	800c6ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	f023 0310 	bic.w	r3, r3, #16
 800c6a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e4      	bne.n	800c68e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	f003 0310 	and.w	r3, r3, #16
 800c6ce:	2b10      	cmp	r3, #16
 800c6d0:	d103      	bne.n	800c6da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2210      	movs	r2, #16
 800c6d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fe fe76 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
 800c6e8:	e002      	b.n	800c6f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7f5 fe32 	bl	8002354 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d006      	beq.n	800c706 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c6f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6fc:	f003 0320 	and.w	r3, r3, #32
 800c700:	2b00      	cmp	r3, #0
 800c702:	f47f aecf 	bne.w	800c4a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c70c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c710:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c714:	2b00      	cmp	r3, #0
 800c716:	d049      	beq.n	800c7ac <UART_RxISR_8BIT_FIFOEN+0x350>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c71e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c722:	429a      	cmp	r2, r3
 800c724:	d242      	bcs.n	800c7ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	e853 3f00 	ldrex	r3, [r3]
 800c734:	61fb      	str	r3, [r7, #28]
   return(result);
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c73c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3308      	adds	r3, #8
 800c746:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c74a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c74c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c752:	e841 2300 	strex	r3, r2, [r1]
 800c756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e3      	bne.n	800c726 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a15      	ldr	r2, [pc, #84]	; (800c7b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c762:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	60bb      	str	r3, [r7, #8]
   return(result);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f043 0320 	orr.w	r3, r3, #32
 800c778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	461a      	mov	r2, r3
 800c782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c786:	61bb      	str	r3, [r7, #24]
 800c788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	6979      	ldr	r1, [r7, #20]
 800c78c:	69ba      	ldr	r2, [r7, #24]
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	613b      	str	r3, [r7, #16]
   return(result);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e4      	bne.n	800c764 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c79a:	e007      	b.n	800c7ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	699a      	ldr	r2, [r3, #24]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f042 0208 	orr.w	r2, r2, #8
 800c7aa:	619a      	str	r2, [r3, #24]
}
 800c7ac:	bf00      	nop
 800c7ae:	37b0      	adds	r7, #176	; 0xb0
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	40008000 	.word	0x40008000
 800c7b8:	0800c0ed 	.word	0x0800c0ed

0800c7bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b0ae      	sub	sp, #184	; 0xb8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f2:	2b22      	cmp	r3, #34	; 0x22
 800c7f4:	f040 8186 	bne.w	800cb04 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c802:	e129      	b.n	800ca58 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c816:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c81a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c81e:	4013      	ands	r3, r2
 800c820:	b29a      	uxth	r2, r3
 800c822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c826:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c82c:	1c9a      	adds	r2, r3, #2
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c838:	b29b      	uxth	r3, r3
 800c83a:	3b01      	subs	r3, #1
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69db      	ldr	r3, [r3, #28]
 800c84a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c84e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d053      	beq.n	800c902 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c85a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d011      	beq.n	800c88a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00b      	beq.n	800c88a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2201      	movs	r2, #1
 800c878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c880:	f043 0201 	orr.w	r2, r3, #1
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c88a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b00      	cmp	r3, #0
 800c894:	d011      	beq.n	800c8ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00b      	beq.n	800c8ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8b0:	f043 0204 	orr.w	r2, r3, #4
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8be:	f003 0304 	and.w	r3, r3, #4
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d011      	beq.n	800c8ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c8c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00b      	beq.n	800c8ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e0:	f043 0202 	orr.w	r2, r3, #2
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d006      	beq.n	800c902 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7fe fd63 	bl	800b3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c908:	b29b      	uxth	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f040 80a4 	bne.w	800ca58 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c91e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	461a      	mov	r2, r3
 800c92e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c936:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c93a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e2      	bne.n	800c910 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3308      	adds	r3, #8
 800c950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c954:	e853 3f00 	ldrex	r3, [r3]
 800c958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c95a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c95c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c960:	f023 0301 	bic.w	r3, r3, #1
 800c964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3308      	adds	r3, #8
 800c96e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c972:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c976:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c97a:	e841 2300 	strex	r3, r2, [r1]
 800c97e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e1      	bne.n	800c94a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a5f      	ldr	r2, [pc, #380]	; (800cb1c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d021      	beq.n	800c9e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01a      	beq.n	800c9e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ba:	e853 3f00 	ldrex	r3, [r3]
 800c9be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9dc:	e841 2300 	strex	r3, r2, [r1]
 800c9e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e4      	bne.n	800c9b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d130      	bne.n	800ca52 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca06:	f023 0310 	bic.w	r3, r3, #16
 800ca0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca18:	647b      	str	r3, [r7, #68]	; 0x44
 800ca1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca20:	e841 2300 	strex	r3, r2, [r1]
 800ca24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e4      	bne.n	800c9f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	69db      	ldr	r3, [r3, #28]
 800ca32:	f003 0310 	and.w	r3, r3, #16
 800ca36:	2b10      	cmp	r3, #16
 800ca38:	d103      	bne.n	800ca42 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2210      	movs	r2, #16
 800ca40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7fe fcc2 	bl	800b3d4 <HAL_UARTEx_RxEventCallback>
 800ca50:	e002      	b.n	800ca58 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7f5 fc7e 	bl	8002354 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d006      	beq.n	800ca6e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ca60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca64:	f003 0320 	and.w	r3, r3, #32
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f47f aecb 	bne.w	800c804 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca74:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ca78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d049      	beq.n	800cb14 <UART_RxISR_16BIT_FIFOEN+0x358>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca86:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d242      	bcs.n	800cb14 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3308      	adds	r3, #8
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	e853 3f00 	ldrex	r3, [r3]
 800ca9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800caa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3308      	adds	r3, #8
 800caae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cab2:	633a      	str	r2, [r7, #48]	; 0x30
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e3      	bne.n	800ca8e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a15      	ldr	r2, [pc, #84]	; (800cb20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800caca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	e853 3f00 	ldrex	r3, [r3]
 800cad8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f043 0320 	orr.w	r3, r3, #32
 800cae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf2:	69b9      	ldr	r1, [r7, #24]
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	e841 2300 	strex	r3, r2, [r1]
 800cafa:	617b      	str	r3, [r7, #20]
   return(result);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1e4      	bne.n	800cacc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb02:	e007      	b.n	800cb14 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	699a      	ldr	r2, [r3, #24]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0208 	orr.w	r2, r2, #8
 800cb12:	619a      	str	r2, [r3, #24]
}
 800cb14:	bf00      	nop
 800cb16:	37b8      	adds	r7, #184	; 0xb8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	40008000 	.word	0x40008000
 800cb20:	0800c2a5 	.word	0x0800c2a5

0800cb24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d101      	bne.n	800cb76 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb72:	2302      	movs	r3, #2
 800cb74:	e027      	b.n	800cbc6 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2224      	movs	r2, #36	; 0x24
 800cb82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 0201 	bic.w	r2, r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b084      	sub	sp, #16
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d101      	bne.n	800cbea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e02d      	b.n	800cc46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2201      	movs	r2, #1
 800cbee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2224      	movs	r2, #36	; 0x24
 800cbf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f022 0201 	bic.w	r2, r2, #1
 800cc10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	430a      	orrs	r2, r1
 800cc24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f850 	bl	800cccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2220      	movs	r2, #32
 800cc38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d101      	bne.n	800cc66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc62:	2302      	movs	r3, #2
 800cc64:	e02d      	b.n	800ccc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2224      	movs	r2, #36	; 0x24
 800cc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f022 0201 	bic.w	r2, r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f812 	bl	800cccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
	...

0800cccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d108      	bne.n	800ccee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccec:	e031      	b.n	800cd52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccee:	2308      	movs	r3, #8
 800ccf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccf2:	2308      	movs	r3, #8
 800ccf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	0e5b      	lsrs	r3, r3, #25
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	f003 0307 	and.w	r3, r3, #7
 800cd04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	0f5b      	lsrs	r3, r3, #29
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	f003 0307 	and.w	r3, r3, #7
 800cd14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	7b3a      	ldrb	r2, [r7, #12]
 800cd1a:	4911      	ldr	r1, [pc, #68]	; (800cd60 <UARTEx_SetNbDataToProcess+0x94>)
 800cd1c:	5c8a      	ldrb	r2, [r1, r2]
 800cd1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd22:	7b3a      	ldrb	r2, [r7, #12]
 800cd24:	490f      	ldr	r1, [pc, #60]	; (800cd64 <UARTEx_SetNbDataToProcess+0x98>)
 800cd26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd28:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	7b7a      	ldrb	r2, [r7, #13]
 800cd38:	4909      	ldr	r1, [pc, #36]	; (800cd60 <UARTEx_SetNbDataToProcess+0x94>)
 800cd3a:	5c8a      	ldrb	r2, [r1, r2]
 800cd3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd40:	7b7a      	ldrb	r2, [r7, #13]
 800cd42:	4908      	ldr	r1, [pc, #32]	; (800cd64 <UARTEx_SetNbDataToProcess+0x98>)
 800cd44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd46:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	0800ce1c 	.word	0x0800ce1c
 800cd64:	0800ce24 	.word	0x0800ce24

0800cd68 <memset>:
 800cd68:	4402      	add	r2, r0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d100      	bne.n	800cd72 <memset+0xa>
 800cd70:	4770      	bx	lr
 800cd72:	f803 1b01 	strb.w	r1, [r3], #1
 800cd76:	e7f9      	b.n	800cd6c <memset+0x4>

0800cd78 <__libc_init_array>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	4d0d      	ldr	r5, [pc, #52]	; (800cdb0 <__libc_init_array+0x38>)
 800cd7c:	4c0d      	ldr	r4, [pc, #52]	; (800cdb4 <__libc_init_array+0x3c>)
 800cd7e:	1b64      	subs	r4, r4, r5
 800cd80:	10a4      	asrs	r4, r4, #2
 800cd82:	2600      	movs	r6, #0
 800cd84:	42a6      	cmp	r6, r4
 800cd86:	d109      	bne.n	800cd9c <__libc_init_array+0x24>
 800cd88:	4d0b      	ldr	r5, [pc, #44]	; (800cdb8 <__libc_init_array+0x40>)
 800cd8a:	4c0c      	ldr	r4, [pc, #48]	; (800cdbc <__libc_init_array+0x44>)
 800cd8c:	f000 f818 	bl	800cdc0 <_init>
 800cd90:	1b64      	subs	r4, r4, r5
 800cd92:	10a4      	asrs	r4, r4, #2
 800cd94:	2600      	movs	r6, #0
 800cd96:	42a6      	cmp	r6, r4
 800cd98:	d105      	bne.n	800cda6 <__libc_init_array+0x2e>
 800cd9a:	bd70      	pop	{r4, r5, r6, pc}
 800cd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda0:	4798      	blx	r3
 800cda2:	3601      	adds	r6, #1
 800cda4:	e7ee      	b.n	800cd84 <__libc_init_array+0xc>
 800cda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdaa:	4798      	blx	r3
 800cdac:	3601      	adds	r6, #1
 800cdae:	e7f2      	b.n	800cd96 <__libc_init_array+0x1e>
 800cdb0:	0800ce34 	.word	0x0800ce34
 800cdb4:	0800ce34 	.word	0x0800ce34
 800cdb8:	0800ce34 	.word	0x0800ce34
 800cdbc:	0800ce38 	.word	0x0800ce38

0800cdc0 <_init>:
 800cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc2:	bf00      	nop
 800cdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc6:	bc08      	pop	{r3}
 800cdc8:	469e      	mov	lr, r3
 800cdca:	4770      	bx	lr

0800cdcc <_fini>:
 800cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdce:	bf00      	nop
 800cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd2:	bc08      	pop	{r3}
 800cdd4:	469e      	mov	lr, r3
 800cdd6:	4770      	bx	lr
