
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba40  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800bc20  0800bc20  0000cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc4  0800bcc4  0000d05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bccc  0800bccc  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bccc  0800bccc  0000cccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800bcd4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  2000005c  0800bd30  0000d05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  0800bd30  0000dab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c18  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004198  00000000  00000000  0002dca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001440  00000000  00000000  00033850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b02c  00000000  00000000  00034c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225c7  00000000  00000000  0005fcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117013  00000000  00000000  00082283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00199296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007348  00000000  00000000  001992dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001a0624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc08 	.word	0x0800bc08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800bc08 	.word	0x0800bc08

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00a fe95 	bl	800b308 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e6:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000608:	2204      	movs	r2, #4
 800060a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800060e:	2200      	movs	r2, #0
 8000610:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000614:	2201      	movs	r2, #1
 8000616:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800061a:	2201      	movs	r2, #1
 800061c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000642:	2201      	movs	r2, #1
 8000644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800064a:	220c      	movs	r2, #12
 800064c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800065c:	2201      	movs	r2, #1
 800065e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000662:	f002 fd6b 	bl	800313c <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800066c:	f001 fb47 	bl	8001cfe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800067c:	f003 fe8a 	bl	8004394 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000686:	f001 fb3a 	bl	8001cfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_ADC1_Init+0x104>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80006a8:	f002 fff6 	bl	8003698 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006b2:	f001 fb24 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000078 	.word	0x20000078
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fe17 	bl	800b308 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006dc:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <MX_ADC2_Init+0xdc>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000702:	2204      	movs	r2, #4
 8000704:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800070e:	2201      	movs	r2, #1
 8000710:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000714:	2201      	movs	r2, #1
 8000716:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000744:	220c      	movs	r2, #12
 8000746:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000756:	2201      	movs	r2, #1
 8000758:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800075c:	f002 fcee 	bl	800313c <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000766:	f001 faca 	bl	8001cfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC2_Init+0xe0>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000788:	f002 ff86 	bl	8003698 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000792:	f001 fab4 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000e4 	.word	0x200000e4
 80007a4:	50000100 	.word	0x50000100
 80007a8:	0c900008 	.word	0x0c900008

080007ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00a fd9f 	bl	800b308 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007cc:	4a37      	ldr	r2, [pc, #220]	@ (80008ac <MX_ADC3_Init+0x100>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007d0:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007d2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80007d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d8:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800082c:	2201      	movs	r2, #1
 800082e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000834:	220c      	movs	r2, #12
 8000836:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000846:	2201      	movs	r2, #1
 8000848:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800084a:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800084c:	f002 fc76 	bl	800313c <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000856:	f001 fa52 	bl	8001cfe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000866:	f003 fd95 	bl	8004394 <HAL_ADCEx_MultiModeConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000870:	f001 fa45 	bl	8001cfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_ADC3_Init+0x104>)
 8000876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000878:	2306      	movs	r3, #6
 800087a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000880:	237f      	movs	r3, #127	@ 0x7f
 8000882:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000884:	2304      	movs	r3, #4
 8000886:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000892:	f002 ff01 	bl	8003698 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 800089c:	f001 fa2f 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	@ 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000150 	.word	0x20000150
 80008ac:	50000400 	.word	0x50000400
 80008b0:	14f00020 	.word	0x14f00020

080008b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2220      	movs	r2, #32
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a fd21 	bl	800b308 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008c6:	4b31      	ldr	r3, [pc, #196]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008c8:	4a31      	ldr	r2, [pc, #196]	@ (8000990 <MX_ADC4_Init+0xdc>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ce:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000900:	2201      	movs	r2, #1
 8000902:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ADC4_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_ADC4_Init+0xd8>)
 800091a:	2201      	movs	r2, #1
 800091c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000930:	220c      	movs	r2, #12
 8000932:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_ADC4_Init+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000942:	2201      	movs	r2, #1
 8000944:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000948:	f002 fbf8 	bl	800313c <HAL_ADC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000952:	f001 f9d4 	bl	8001cfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_ADC4_Init+0xe0>)
 8000958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000962:	237f      	movs	r3, #127	@ 0x7f
 8000964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000966:	2304      	movs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000974:	f002 fe90 	bl	8003698 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 800097e:	f001 f9be 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001bc 	.word	0x200001bc
 8000990:	50000500 	.word	0x50000500
 8000994:	14f00020 	.word	0x14f00020

08000998 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a fcaf 	bl	800b308 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ac:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_ADC5_Init+0xdc>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009b2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a14:	220c      	movs	r2, #12
 8000a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a2a:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a2c:	f002 fb86 	bl	800313c <HAL_ADC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000a36:	f001 f962 	bl	8001cfe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_ADC5_Init+0xe0>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	@ 0x7f
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a58:	f002 fe1e 	bl	8003698 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000a62:	f001 f94c 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000228 	.word	0x20000228
 8000a74:	50000600 	.word	0x50000600
 8000a78:	08600004 	.word	0x08600004

08000a7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a6      	sub	sp, #152	@ 0x98
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a98:	2254      	movs	r2, #84	@ 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00a fc33 	bl	800b308 <memset>
  if(adcHandle->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aaa:	d16c      	bne.n	8000b86 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ab2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ab6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f807 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ac8:	f001 f919 	bl	8001cfe <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000acc:	4ba0      	ldr	r3, [pc, #640]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10b      	bne.n	8000af6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ade:	4b9d      	ldr	r3, [pc, #628]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a9c      	ldr	r2, [pc, #624]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b9a      	ldr	r3, [pc, #616]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b97      	ldr	r3, [pc, #604]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a96      	ldr	r2, [pc, #600]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b94      	ldr	r3, [pc, #592]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f004 f98b 	bl	8004e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b30:	4a8a      	ldr	r2, [pc, #552]	@ (8000d5c <HAL_ADC_MspInit+0x2e0>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b34:	4b88      	ldr	r3, [pc, #544]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b87      	ldr	r3, [pc, #540]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b84      	ldr	r3, [pc, #528]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4c:	4b82      	ldr	r3, [pc, #520]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b54:	4b80      	ldr	r3, [pc, #512]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b7d      	ldr	r3, [pc, #500]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b68:	487b      	ldr	r0, [pc, #492]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b6a:	f003 fe2b 	bl	80047c4 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b74:	f001 f8c3 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b7e:	4a76      	ldr	r2, [pc, #472]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b84:	e1e0      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a75      	ldr	r2, [pc, #468]	@ (8000d60 <HAL_ADC_MspInit+0x2e4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d16c      	bne.n	8000c6a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b9a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f006 ff95 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000bac:	f001 f8a7 	bl	8001cfe <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bb0:	4b67      	ldr	r3, [pc, #412]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a66      	ldr	r2, [pc, #408]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bba:	4b65      	ldr	r3, [pc, #404]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10b      	bne.n	8000bda <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bc2:	4b64      	ldr	r3, [pc, #400]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a63      	ldr	r2, [pc, #396]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b61      	ldr	r3, [pc, #388]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b5e      	ldr	r3, [pc, #376]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a5d      	ldr	r2, [pc, #372]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0e:	f004 f919 	bl	8004e44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c12:	4b54      	ldr	r3, [pc, #336]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c14:	4a54      	ldr	r2, [pc, #336]	@ (8000d68 <HAL_ADC_MspInit+0x2ec>)
 8000c16:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c18:	4b52      	ldr	r3, [pc, #328]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c1a:	2224      	movs	r2, #36	@ 0x24
 8000c1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1e:	4b51      	ldr	r3, [pc, #324]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c24:	4b4f      	ldr	r3, [pc, #316]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c30:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c40:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c4c:	4845      	ldr	r0, [pc, #276]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c4e:	f003 fdb9 	bl	80047c4 <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000c58:	f001 f851 	bl	8001cfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a41      	ldr	r2, [pc, #260]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c68:	e16e      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <HAL_ADC_MspInit+0x2f0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f040 8085 	bne.w	8000d80 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 ff22 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c92:	f001 f834 	bl	8001cfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c96:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a34      	ldr	r2, [pc, #208]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ca0:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cac:	4a29      	ldr	r2, [pc, #164]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a23      	ldr	r2, [pc, #140]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <HAL_ADC_MspInit+0x2f8>)
 8000cf4:	f004 f8a6 	bl	8004e44 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <HAL_ADC_MspInit+0x300>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d00:	2225      	movs	r2, #37	@ 0x25
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d28:	2220      	movs	r2, #32
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d34:	f003 fd46 	bl	80047c4 <HAL_DMA_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d3e:	f000 ffde 	bl	8001cfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d48:	4a0b      	ldr	r2, [pc, #44]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d4e:	e0fb      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
 8000d50:	20000474 	.word	0x20000474
 8000d54:	40021000 	.word	0x40021000
 8000d58:	20000294 	.word	0x20000294
 8000d5c:	40020008 	.word	0x40020008
 8000d60:	50000100 	.word	0x50000100
 8000d64:	200002f4 	.word	0x200002f4
 8000d68:	4002001c 	.word	0x4002001c
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	20000478 	.word	0x20000478
 8000d74:	48000400 	.word	0x48000400
 8000d78:	20000354 	.word	0x20000354
 8000d7c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a72      	ldr	r2, [pc, #456]	@ (8000f50 <HAL_ADC_MspInit+0x4d4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d16c      	bne.n	8000e64 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d94:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fe98 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000da6:	f000 ffaa 	bl	8001cfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000daa:	4b6a      	ldr	r3, [pc, #424]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000db4:	4b67      	ldr	r3, [pc, #412]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10b      	bne.n	8000dd4 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000dbc:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a65      	ldr	r2, [pc, #404]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e04:	4619      	mov	r1, r3
 8000e06:	4855      	ldr	r0, [pc, #340]	@ (8000f5c <HAL_ADC_MspInit+0x4e0>)
 8000e08:	f004 f81c 	bl	8004e44 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e0c:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e0e:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <HAL_ADC_MspInit+0x4e8>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e12:	4b53      	ldr	r3, [pc, #332]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e14:	2226      	movs	r2, #38	@ 0x26
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e18:	4b51      	ldr	r3, [pc, #324]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1e:	4b50      	ldr	r3, [pc, #320]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e24:	4b4e      	ldr	r3, [pc, #312]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e32:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e3a:	4b49      	ldr	r3, [pc, #292]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e40:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e46:	4846      	ldr	r0, [pc, #280]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e48:	f003 fcbc 	bl	80047c4 <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000e52:	f000 ff54 	bl	8001cfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a41      	ldr	r2, [pc, #260]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e5c:	4a40      	ldr	r2, [pc, #256]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e62:	e071      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <HAL_ADC_MspInit+0x4ec>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d16c      	bne.n	8000f48 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e78:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 fe26 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e8a:	f000 ff38 	bl	8001cfe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f003 ffa9 	bl	8004e44 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_ADC_MspInit+0x4f4>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000efa:	2227      	movs	r2, #39	@ 0x27
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f2c:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f2e:	f003 fc49 	bl	80047c4 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f38:	f000 fee1 	bl	8001cfe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f40:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	3798      	adds	r7, #152	@ 0x98
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	50000500 	.word	0x50000500
 8000f54:	20000478 	.word	0x20000478
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	200003b4 	.word	0x200003b4
 8000f64:	40020044 	.word	0x40020044
 8000f68:	50000600 	.word	0x50000600
 8000f6c:	20000414 	.word	0x20000414
 8000f70:	40020058 	.word	0x40020058

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <MX_DMA_Init+0x98>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <MX_DMA_Init+0x98>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_DMA_Init+0x98>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <MX_DMA_Init+0x98>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f96:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <MX_DMA_Init+0x98>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_DMA_Init+0x98>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_DMA_Init+0x98>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <MX_DMA_Init+0x98>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_DMA_Init+0x98>)
 8000fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f003 fbc7 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fcc:	2010      	movs	r0, #16
 8000fce:	f003 fbde 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2011      	movs	r0, #17
 8000fd8:	f003 fbbf 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f003 fbd6 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2038      	movs	r0, #56	@ 0x38
 8000fe8:	f003 fbb7 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000fec:	2038      	movs	r0, #56	@ 0x38
 8000fee:	f003 fbce 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2039      	movs	r0, #57	@ 0x39
 8000ff8:	f003 fbaf 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000ffc:	2039      	movs	r0, #57	@ 0x39
 8000ffe:	f003 fbc6 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f007 f9d1 	bl	80083c4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f007 f9cd 	bl	80083c4 <HAL_TIM_IC_Start_IT>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <processarCaptura+0x94>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104e:	4a1f      	ldr	r2, [pc, #124]	@ (80010cc <processarCaptura+0x98>)
 8001050:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <processarCaptura+0x94>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001058:	e02f      	b.n	80010ba <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <processarCaptura+0x9c>)
 8001062:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <processarCaptura+0x9c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <processarCaptura+0x98>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a19      	ldr	r2, [pc, #100]	@ (80010d4 <processarCaptura+0xa0>)
 8001070:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <processarCaptura+0xa4>)
 8001074:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <processarCaptura+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001082:	edd7 6a05 	vldr	s13, [r7, #20]
 8001086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010dc <processarCaptura+0xa8>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <processarCaptura+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000490 	.word	0x20000490
 80010cc:	2000047c 	.word	0x2000047c
 80010d0:	20000480 	.word	0x20000480
 80010d4:	2000048c 	.word	0x2000048c
 80010d8:	49742400 	.word	0x49742400
 80010dc:	41a347ae 	.word	0x41a347ae

080010e0 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <processarCaptura2+0x94>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d108      	bne.n	8001106 <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <processarCaptura2+0x98>)
 80010fc:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <processarCaptura2+0x94>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 8001104:	e02f      	b.n	8001166 <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <processarCaptura2+0x9c>)
 800110e:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <processarCaptura2+0x9c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <processarCaptura2+0x98>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <processarCaptura2+0xa0>)
 800111c:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <processarCaptura2+0xa4>)
 8001120:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <processarCaptura2+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001188 <processarCaptura2+0xa8>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <processarCaptura2+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000498 	.word	0x20000498
 8001178:	20000484 	.word	0x20000484
 800117c:	20000488 	.word	0x20000488
 8001180:	20000494 	.word	0x20000494
 8001184:	49742400 	.word	0x49742400
 8001188:	41a347ae 	.word	0x41a347ae

0800118c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    if (htim == &htim16)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d104      	bne.n	80011a6 <HAL_TIM_IC_CaptureCallback+0x1a>
    {
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 800119c:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <HAL_TIM_IC_CaptureCallback+0x38>)
 800119e:	490a      	ldr	r1, [pc, #40]	@ (80011c8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <processarCaptura>
    }
    if (htim == &htim17)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_TIM_IC_CaptureCallback+0x40>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d104      	bne.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80011ae:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80011b0:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff94 	bl	80010e0 <processarCaptura2>
    }

}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000780 	.word	0x20000780
 80011c4:	200004a4 	.word	0x200004a4
 80011c8:	2000049c 	.word	0x2000049c
 80011cc:	200007cc 	.word	0x200007cc
 80011d0:	200004a8 	.word	0x200004a8
 80011d4:	200004a0 	.word	0x200004a0

080011d8 <fGetVelocidadeRodaEsquerda>:

float fGetVelocidadeRodaEsquerda(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    return velocidadeRodaEsquerda;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <fGetVelocidadeRodaEsquerda+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	ee07 3a90 	vmov	s15, r3
}
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200004a4 	.word	0x200004a4

080011f4 <fGetVelocidadeRodaDireita>:

float fGetVelocidadeRodaDireita(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
    return velocidadeRodaDireita;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <fGetVelocidadeRodaDireita+0x18>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	ee07 3a90 	vmov	s15, r3
}
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	200004a8 	.word	0x200004a8

08001210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b4b      	ldr	r3, [pc, #300]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a4a      	ldr	r2, [pc, #296]	@ (8001354 <MX_GPIO_Init+0x144>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b45      	ldr	r3, [pc, #276]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a44      	ldr	r2, [pc, #272]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <MX_GPIO_Init+0x144>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a3e      	ldr	r2, [pc, #248]	@ (8001354 <MX_GPIO_Init+0x144>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b36      	ldr	r3, [pc, #216]	@ (8001354 <MX_GPIO_Init+0x144>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a32      	ldr	r2, [pc, #200]	@ (8001354 <MX_GPIO_Init+0x144>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <MX_GPIO_Init+0x144>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80012a4:	482c      	ldr	r0, [pc, #176]	@ (8001358 <MX_GPIO_Init+0x148>)
 80012a6:	f003 ff4f 	bl	8005148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b4:	f003 ff48 	bl	8005148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4823      	ldr	r0, [pc, #140]	@ (800135c <MX_GPIO_Init+0x14c>)
 80012d0:	f003 fdb8 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 80012d4:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	481a      	ldr	r0, [pc, #104]	@ (8001358 <MX_GPIO_Init+0x148>)
 80012ee:	f003 fda9 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80012f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 fd99 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Fr_Pin;
 8001312:	2304      	movs	r3, #4
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001316:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch_Fr_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480e      	ldr	r0, [pc, #56]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001328:	f003 fd8c 	bl	8004e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2008      	movs	r0, #8
 8001332:	f003 fa12 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001336:	2008      	movs	r0, #8
 8001338:	f003 fa29 	bl	800478e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2028      	movs	r0, #40	@ 0x28
 8001342:	f003 fa0a 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001346:	2028      	movs	r0, #40	@ 0x28
 8001348:	f003 fa21 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800
 8001360:	48000c00 	.word	0x48000c00

08001364 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_I2C2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <MX_I2C2_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013a0:	f003 ff0d 	bl	80051be <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 fca8 	bl	8001cfe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013b2:	f005 fd13 	bl	8006ddc <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 fc9f 	bl	8001cfe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013c4:	f005 fd55 	bl	8006e72 <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fc96 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200004ac 	.word	0x200004ac
 80013dc:	40005800 	.word	0x40005800
 80013e0:	40b285c2 	.word	0x40b285c2

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a0      	sub	sp, #128	@ 0x80
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	2254      	movs	r2, #84	@ 0x54
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f009 ff7f 	bl	800b308 <memset>
  if(i2cHandle->Instance==I2C2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5f      	ldr	r2, [pc, #380]	@ (800158c <HAL_I2C_MspInit+0x1a8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	f040 80b6 	bne.w	8001582 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4618      	mov	r0, r3
 8001424:	f006 fb54 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800142e:	f000 fc66 	bl	8001cfe <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b57      	ldr	r3, [pc, #348]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a56      	ldr	r2, [pc, #344]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a50      	ldr	r2, [pc, #320]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001462:	2310      	movs	r3, #16
 8001464:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001466:	2312      	movs	r3, #18
 8001468:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001472:	2304      	movs	r3, #4
 8001474:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800147a:	4619      	mov	r1, r3
 800147c:	4845      	ldr	r0, [pc, #276]	@ (8001594 <HAL_I2C_MspInit+0x1b0>)
 800147e:	f003 fce1 	bl	8004e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001494:	2304      	movs	r3, #4
 8001496:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f003 fccf 	bl	8004e44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	4a39      	ldr	r2, [pc, #228]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 80014ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_I2C_MspInit+0x1ac>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014c0:	4a36      	ldr	r2, [pc, #216]	@ (800159c <HAL_I2C_MspInit+0x1b8>)
 80014c2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014c6:	2212      	movs	r2, #18
 80014c8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b30      	ldr	r3, [pc, #192]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80014f4:	4828      	ldr	r0, [pc, #160]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 80014f6:	f003 f965 	bl	80047c4 <HAL_DMA_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001500:	f000 fbfd 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a24      	ldr	r2, [pc, #144]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 8001508:	63da      	str	r2, [r3, #60]	@ 0x3c
 800150a:	4a23      	ldr	r2, [pc, #140]	@ (8001598 <HAL_I2C_MspInit+0x1b4>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001512:	4a24      	ldr	r2, [pc, #144]	@ (80015a4 <HAL_I2C_MspInit+0x1c0>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001518:	2213      	movs	r2, #19
 800151a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 800151e:	2210      	movs	r2, #16
 8001520:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001546:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 8001548:	f003 f93c 	bl	80047c4 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001552:	f000 fbd4 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 800155a:	639a      	str	r2, [r3, #56]	@ 0x38
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_I2C_MspInit+0x1bc>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2021      	movs	r0, #33	@ 0x21
 8001568:	f003 f8f7 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800156c:	2021      	movs	r0, #33	@ 0x21
 800156e:	f003 f90e 	bl	800478e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2022      	movs	r0, #34	@ 0x22
 8001578:	f003 f8ef 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800157c:	2022      	movs	r0, #34	@ 0x22
 800157e:	f003 f906 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3780      	adds	r7, #128	@ 0x80
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005800 	.word	0x40005800
 8001590:	40021000 	.word	0x40021000
 8001594:	48000800 	.word	0x48000800
 8001598:	20000500 	.word	0x20000500
 800159c:	4002006c 	.word	0x4002006c
 80015a0:	20000560 	.word	0x20000560
 80015a4:	40020080 	.word	0x40020080

080015a8 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	70fb      	strb	r3, [r7, #3]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70bb      	strb	r3, [r7, #2]
 80015be:	4613      	mov	r3, r2
 80015c0:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 80015c2:	2300      	movs	r3, #0
 80015c4:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 80015c6:	4a53      	ldr	r2, [pc, #332]	@ (8001714 <lcdInit+0x16c>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <lcdInit+0x16c>)
 80015d4:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 80015d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001714 <lcdInit+0x16c>)
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80015dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001714 <lcdInit+0x16c>)
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80015e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <lcdInit+0x16c>)
 80015e4:	2208      	movs	r2, #8
 80015e6:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80015e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001718 <lcdInit+0x170>)
 80015ea:	2234      	movs	r2, #52	@ 0x34
 80015ec:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80015ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <lcdInit+0x170>)
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <lcdInit+0x170>)
 80015f4:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80015f6:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <lcdInit+0x170>)
 80015f8:	2230      	movs	r2, #48	@ 0x30
 80015fa:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	737b      	strb	r3, [r7, #13]
 8001600:	e02f      	b.n	8001662 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001602:	4b44      	ldr	r3, [pc, #272]	@ (8001714 <lcdInit+0x16c>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <lcdInit+0x16c>)
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	4619      	mov	r1, r3
 800160c:	2303      	movs	r3, #3
 800160e:	4a42      	ldr	r2, [pc, #264]	@ (8001718 <lcdInit+0x170>)
 8001610:	f003 fe70 	bl	80052f4 <HAL_I2C_Master_Transmit_DMA>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <lcdInit+0x76>
            return -1;
 800161a:	23ff      	movs	r3, #255	@ 0xff
 800161c:	e076      	b.n	800170c <lcdInit+0x164>
        }

        usCont = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001622:	e009      	b.n	8001638 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	81fa      	strh	r2, [r7, #14]
 800162a:	2bc8      	cmp	r3, #200	@ 0xc8
 800162c:	d101      	bne.n	8001632 <lcdInit+0x8a>
        		return -1;
 800162e:	23ff      	movs	r3, #255	@ 0xff
 8001630:	e06c      	b.n	800170c <lcdInit+0x164>
        	HAL_Delay(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f001 fb1c 	bl	8002c70 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001638:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <lcdInit+0x16c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f84a 	bl	80056d6 <HAL_I2C_GetState>
 8001642:	4603      	mov	r3, r0
 8001644:	2b20      	cmp	r3, #32
 8001646:	d1ed      	bne.n	8001624 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001648:	7b7b      	ldrb	r3, [r7, #13]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d103      	bne.n	8001656 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 800164e:	2001      	movs	r0, #1
 8001650:	f001 fb0e 	bl	8002c70 <HAL_Delay>
 8001654:	e002      	b.n	800165c <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001656:	2005      	movs	r0, #5
 8001658:	f001 fb0a 	bl	8002c70 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	3301      	adds	r3, #1
 8001660:	737b      	strb	r3, [r7, #13]
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d9cc      	bls.n	8001602 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001668:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <lcdInit+0x170>)
 800166a:	222c      	movs	r2, #44	@ 0x2c
 800166c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <lcdInit+0x170>)
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <lcdInit+0x170>)
 8001674:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001676:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <lcdInit+0x170>)
 8001678:	2228      	movs	r2, #40	@ 0x28
 800167a:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <lcdInit+0x16c>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <lcdInit+0x16c>)
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	4619      	mov	r1, r3
 8001686:	2303      	movs	r3, #3
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <lcdInit+0x170>)
 800168a:	f003 fe33 	bl	80052f4 <HAL_I2C_Master_Transmit_DMA>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <lcdInit+0xf0>
        return -1;
 8001694:	23ff      	movs	r3, #255	@ 0xff
 8001696:	e039      	b.n	800170c <lcdInit+0x164>
    }

    usCont = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800169c:	e009      	b.n	80016b2 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	81fa      	strh	r2, [r7, #14]
 80016a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80016a6:	d101      	bne.n	80016ac <lcdInit+0x104>
    		return -1;
 80016a8:	23ff      	movs	r3, #255	@ 0xff
 80016aa:	e02f      	b.n	800170c <lcdInit+0x164>
    	HAL_Delay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 fadf 	bl	8002c70 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <lcdInit+0x16c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 f80d 	bl	80056d6 <HAL_I2C_GetState>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d1ed      	bne.n	800169e <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <lcdInit+0x16c>)
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d904      	bls.n	80016de <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 80016d4:	7b3b      	ldrb	r3, [r7, #12]
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f945 	bl	8001974 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 80016ea:	2101      	movs	r1, #1
 80016ec:	2001      	movs	r0, #1
 80016ee:	f000 f815 	bl	800171c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 80016f2:	2101      	movs	r1, #1
 80016f4:	2007      	movs	r0, #7
 80016f6:	f000 f811 	bl	800171c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 80016fa:	2101      	movs	r1, #1
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 f80d 	bl	800171c <lcdCommand>
    lcdCursorHome();
 8001702:	2101      	movs	r1, #1
 8001704:	2005      	movs	r0, #5
 8001706:	f000 f809 	bl	800171c <lcdCommand>

    return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200005c8 	.word	0x200005c8
 8001718:	200005c0 	.word	0x200005c0

0800171c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	4613      	mov	r3, r2
 800172a:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d064      	beq.n	8001800 <lcdCommand+0xe4>
 8001736:	2b01      	cmp	r3, #1
 8001738:	f040 80aa 	bne.w	8001890 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3b01      	subs	r3, #1
 8001740:	2b07      	cmp	r3, #7
 8001742:	d85a      	bhi.n	80017fa <lcdCommand+0xde>
 8001744:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <lcdCommand+0x30>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	0800176d 	.word	0x0800176d
 8001750:	0800179d 	.word	0x0800179d
 8001754:	0800177d 	.word	0x0800177d
 8001758:	0800178d 	.word	0x0800178d
 800175c:	080017b7 	.word	0x080017b7
 8001760:	080017e1 	.word	0x080017e1
 8001764:	080017d1 	.word	0x080017d1
 8001768:	080017eb 	.word	0x080017eb
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 800176c:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <lcdCommand+0x1c4>)
 800176e:	7a1b      	ldrb	r3, [r3, #8]
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <lcdCommand+0x1c4>)
 8001778:	721a      	strb	r2, [r3, #8]
                    break;
 800177a:	e040      	b.n	80017fe <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <lcdCommand+0x1c4>)
 800177e:	7a1b      	ldrb	r3, [r3, #8]
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b56      	ldr	r3, [pc, #344]	@ (80018e0 <lcdCommand+0x1c4>)
 8001788:	721a      	strb	r2, [r3, #8]
                    break;
 800178a:	e038      	b.n	80017fe <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800178c:	4b54      	ldr	r3, [pc, #336]	@ (80018e0 <lcdCommand+0x1c4>)
 800178e:	7a1b      	ldrb	r3, [r3, #8]
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b52      	ldr	r3, [pc, #328]	@ (80018e0 <lcdCommand+0x1c4>)
 8001798:	721a      	strb	r2, [r3, #8]
                    break;
 800179a:	e030      	b.n	80017fe <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80017a0:	f107 030f 	add.w	r3, r7, #15
 80017a4:	4619      	mov	r1, r3
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 f8e4 	bl	8001974 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f001 fa5f 	bl	8002c70 <HAL_Delay>
                        return 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e090      	b.n	80018d8 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80017b6:	2302      	movs	r3, #2
 80017b8:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80017ba:	f107 030f 	add.w	r3, r7, #15
 80017be:	4619      	mov	r1, r3
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 f8d7 	bl	8001974 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f001 fa52 	bl	8002c70 <HAL_Delay>
                        return 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e083      	b.n	80018d8 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 80017d0:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <lcdCommand+0x1c4>)
 80017d2:	7a5b      	ldrb	r3, [r3, #9]
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <lcdCommand+0x1c4>)
 80017dc:	725a      	strb	r2, [r3, #9]
                    break;
 80017de:	e00e      	b.n	80017fe <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 80017e0:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <lcdCommand+0x1c4>)
 80017e2:	7a5a      	ldrb	r2, [r3, #9]
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <lcdCommand+0x1c4>)
 80017e6:	725a      	strb	r2, [r3, #9]
                    break;
 80017e8:	e009      	b.n	80017fe <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <lcdCommand+0x1c4>)
 80017ec:	7a5b      	ldrb	r3, [r3, #9]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <lcdCommand+0x1c4>)
 80017f6:	725a      	strb	r2, [r3, #9]
                    break;
 80017f8:	e001      	b.n	80017fe <lcdCommand+0xe2>

                default:
                    return -1;
 80017fa:	23ff      	movs	r3, #255	@ 0xff
 80017fc:	e06c      	b.n	80018d8 <lcdCommand+0x1bc>
            }

            break;
 80017fe:	e049      	b.n	8001894 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	3b01      	subs	r3, #1
 8001804:	2b07      	cmp	r3, #7
 8001806:	d840      	bhi.n	800188a <lcdCommand+0x16e>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <lcdCommand+0xf4>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001831 	.word	0x08001831
 8001814:	0800188b 	.word	0x0800188b
 8001818:	08001841 	.word	0x08001841
 800181c:	08001851 	.word	0x08001851
 8001820:	0800188b 	.word	0x0800188b
 8001824:	08001871 	.word	0x08001871
 8001828:	08001861 	.word	0x08001861
 800182c:	0800187b 	.word	0x0800187b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <lcdCommand+0x1c4>)
 8001832:	7a1b      	ldrb	r3, [r3, #8]
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <lcdCommand+0x1c4>)
 800183c:	721a      	strb	r2, [r3, #8]
                    break;
 800183e:	e026      	b.n	800188e <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <lcdCommand+0x1c4>)
 8001842:	7a1b      	ldrb	r3, [r3, #8]
 8001844:	f023 0302 	bic.w	r3, r3, #2
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <lcdCommand+0x1c4>)
 800184c:	721a      	strb	r2, [r3, #8]
                    break;
 800184e:	e01e      	b.n	800188e <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <lcdCommand+0x1c4>)
 8001852:	7a1b      	ldrb	r3, [r3, #8]
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <lcdCommand+0x1c4>)
 800185c:	721a      	strb	r2, [r3, #8]
                    break;
 800185e:	e016      	b.n	800188e <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <lcdCommand+0x1c4>)
 8001862:	7a5b      	ldrb	r3, [r3, #9]
 8001864:	f023 0302 	bic.w	r3, r3, #2
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <lcdCommand+0x1c4>)
 800186c:	725a      	strb	r2, [r3, #9]
                    break;
 800186e:	e00e      	b.n	800188e <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <lcdCommand+0x1c4>)
 8001872:	7a5a      	ldrb	r2, [r3, #9]
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <lcdCommand+0x1c4>)
 8001876:	725a      	strb	r2, [r3, #9]
                    break;
 8001878:	e009      	b.n	800188e <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <lcdCommand+0x1c4>)
 800187c:	7a5b      	ldrb	r3, [r3, #9]
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <lcdCommand+0x1c4>)
 8001886:	725a      	strb	r2, [r3, #9]
                    break;
 8001888:	e001      	b.n	800188e <lcdCommand+0x172>

                default:
                    return -1;
 800188a:	23ff      	movs	r3, #255	@ 0xff
 800188c:	e024      	b.n	80018d8 <lcdCommand+0x1bc>
            }

            break;
 800188e:	e001      	b.n	8001894 <lcdCommand+0x178>

        default:
            return -1;
 8001890:	23ff      	movs	r3, #255	@ 0xff
 8001892:	e021      	b.n	80018d8 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b08      	cmp	r3, #8
 8001898:	dc16      	bgt.n	80018c8 <lcdCommand+0x1ac>
 800189a:	2b06      	cmp	r3, #6
 800189c:	da0d      	bge.n	80018ba <lcdCommand+0x19e>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d004      	beq.n	80018ac <lcdCommand+0x190>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dd10      	ble.n	80018c8 <lcdCommand+0x1ac>
 80018a6:	3b03      	subs	r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d80d      	bhi.n	80018c8 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <lcdCommand+0x1c4>)
 80018ae:	7a1b      	ldrb	r3, [r3, #8]
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]
            break;
 80018b8:	e007      	b.n	80018ca <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <lcdCommand+0x1c4>)
 80018bc:	7a5b      	ldrb	r3, [r3, #9]
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	73fb      	strb	r3, [r7, #15]
            break;
 80018c6:	e000      	b.n	80018ca <lcdCommand+0x1ae>

        default:
            break;
 80018c8:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80018ca:	f107 030f 	add.w	r3, r7, #15
 80018ce:	4619      	mov	r1, r3
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 f84f 	bl	8001974 <lcdWriteByte>
 80018d6:	4603      	mov	r3, r0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200005c8 	.word	0x200005c8

080018e4 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	460a      	mov	r2, r1
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <lcdSetCursorPosition+0x50>)
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	79ba      	ldrb	r2, [r7, #6]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d303      	bcc.n	8001906 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <lcdSetCursorPosition+0x50>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <lcdSetCursorPosition+0x54>)
 800190a:	5cd2      	ldrb	r2, [r2, r3]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4413      	add	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800191e:	f107 030f 	add.w	r3, r7, #15
 8001922:	4619      	mov	r1, r3
 8001924:	2000      	movs	r0, #0
 8001926:	f000 f825 	bl	8001974 <lcdWriteByte>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200005c8 	.word	0x200005c8
 8001938:	0800bc4c 	.word	0x0800bc4c

0800193c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e009      	b.n	8001962 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	4619      	mov	r1, r3
 8001956:	2001      	movs	r0, #1
 8001958:	f000 f80c 	bl	8001974 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	3301      	adds	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3f1      	bcc.n	800194e <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001980:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <lcdWriteByte+0xf0>)
 8001982:	79da      	ldrb	r2, [r3, #7]
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4313      	orrs	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f023 030f 	bic.w	r3, r3, #15
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019a0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019a8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80019aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <lcdWriteByte+0xf0>)
 80019ac:	79da      	ldrb	r2, [r3, #7]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	f023 030f 	bic.w	r3, r3, #15
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019ca:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <lcdWriteByte+0xf0>)
 80019ce:	79da      	ldrb	r2, [r3, #7]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019ea:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019ee:	78da      	ldrb	r2, [r3, #3]
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <lcdWriteByte+0xf4>)
 80019f2:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <lcdWriteByte+0xf0>)
 80019f6:	79da      	ldrb	r2, [r3, #7]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <lcdWriteByte+0xf4>)
 8001a10:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <lcdWriteByte+0xf0>)
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <lcdWriteByte+0xf0>)
 8001a18:	799b      	ldrb	r3, [r3, #6]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <lcdWriteByte+0xf4>)
 8001a20:	f003 fc68 	bl	80052f4 <HAL_I2C_Master_Transmit_DMA>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <lcdWriteByte+0xba>
        return -1;
 8001a2a:	23ff      	movs	r3, #255	@ 0xff
 8001a2c:	e015      	b.n	8001a5a <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a32:	e009      	b.n	8001a48 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	81fa      	strh	r2, [r7, #14]
 8001a3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a3c:	d101      	bne.n	8001a42 <lcdWriteByte+0xce>
    		return -1;
 8001a3e:	23ff      	movs	r3, #255	@ 0xff
 8001a40:	e00b      	b.n	8001a5a <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f001 f914 	bl	8002c70 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <lcdWriteByte+0xf0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 fe42 	bl	80056d6 <HAL_I2C_GetState>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d1ed      	bne.n	8001a34 <lcdWriteByte+0xc0>
    }

    return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200005c8 	.word	0x200005c8
 8001a68:	200005c0 	.word	0x200005c0

08001a6c <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	@ 0x40
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a76:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 8001a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a82:	ee17 3a90 	vmov	r3, s15
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 8001a88:	edd7 7a00 	vldr	s15, [r7]
 8001a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a90:	ee17 3a90 	vmov	r3, s15
 8001a94:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 8001a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001b48 <vPrintMotorSpeed+0xdc>
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab4:	ee17 3a90 	vmov	r3, s15
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8001aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac4:	ed97 7a00 	vldr	s14, [r7]
 8001ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001acc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001b48 <vPrintMotorSpeed+0xdc>
 8001ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad8:	ee17 3a90 	vmov	r3, s15
 8001adc:	633b      	str	r3, [r7, #48]	@ 0x30

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L: %d,%d", iVEInteiro, iVEdec);
 8001ade:	f107 001c 	add.w	r0, r7, #28
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ae6:	4919      	ldr	r1, [pc, #100]	@ (8001b4c <vPrintMotorSpeed+0xe0>)
 8001ae8:	f009 fbee 	bl	800b2c8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fef8 	bl	80018e4 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fb91 	bl	8000220 <strlen>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff17 	bl	800193c <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R: %d,%d", iVDInteiro, iVDdec);
 8001b0e:	f107 0008 	add.w	r0, r7, #8
 8001b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b16:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <vPrintMotorSpeed+0xe4>)
 8001b18:	f009 fbd6 	bl	800b2c8 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fee0 	bl	80018e4 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb79 	bl	8000220 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff feff 	bl	800193c <lcdPrintStr>
}
 8001b3e:	bf00      	nop
 8001b40:	3740      	adds	r7, #64	@ 0x40
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	42c80000 	.word	0x42c80000
 8001b4c:	0800bc20 	.word	0x0800bc20
 8001b50:	0800bc30 	.word	0x0800bc30

08001b54 <vPrintUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vPrintUART(unsigned char *ucBuffer)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, ucBuffer, strlen(ucBuffer), 100);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7fe fb5f 	bl	8000220 <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	2364      	movs	r3, #100	@ 0x64
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <vPrintUART+0x24>)
 8001b6c:	f008 f942 	bl	8009df4 <HAL_UART_Transmit>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000818 	.word	0x20000818

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	ed2d 8b02 	vpush	{d8}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b86:	f001 f802 	bl	8002b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8a:	f000 f86d 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8e:	f7ff fb3f 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b92:	f7ff f9ef 	bl	8000f74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001b96:	f000 fecb 	bl	8002930 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001b9a:	f000 fa9b 	bl	80020d4 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001b9e:	f7ff fbe1 	bl	8001364 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001ba2:	f7fe fe03 	bl	80007ac <MX_ADC3_Init>
  MX_ADC1_Init();
 8001ba6:	f7fe fd0b 	bl	80005c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001baa:	f7fe fd8d 	bl	80006c8 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001bae:	f7fe fe81 	bl	80008b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001bb2:	f7fe fef1 	bl	8000998 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001bb6:	f000 fcb9 	bl	800252c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001bba:	f000 fd01 	bl	80025c0 <MX_TIM17_Init>
  MX_TIM6_Init();
 8001bbe:	f000 fb45 	bl	800224c <MX_TIM6_Init>
  MX_TIM15_Init();
 8001bc2:	f000 fc61 	bl	8002488 <MX_TIM15_Init>
  MX_TIM7_Init();
 8001bc6:	f000 fb77 	bl	80022b8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001bca:	f000 fbad 	bl	8002328 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8001bce:	481b      	ldr	r0, [pc, #108]	@ (8001c3c <main+0xc0>)
 8001bd0:	f000 f89c 	bl	8001d0c <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8001bd4:	491a      	ldr	r1, [pc, #104]	@ (8001c40 <main+0xc4>)
 8001bd6:	481b      	ldr	r0, [pc, #108]	@ (8001c44 <main+0xc8>)
 8001bd8:	f7ff fa1a 	bl	8001010 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8001bdc:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <main+0xcc>)
 8001bde:	f000 f8c9 	bl	8001d74 <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8001be2:	481a      	ldr	r0, [pc, #104]	@ (8001c4c <main+0xd0>)
 8001be4:	f000 f8e2 	bl	8001dac <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8001be8:	4819      	ldr	r0, [pc, #100]	@ (8001c50 <main+0xd4>)
 8001bea:	f000 f8fb 	bl	8001de4 <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8001bee:	4819      	ldr	r0, [pc, #100]	@ (8001c54 <main+0xd8>)
 8001bf0:	f000 f914 	bl	8001e1c <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8001bf4:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <main+0xdc>)
 8001bf6:	f000 f92d 	bl	8001e54 <vLineSensor5Init>

  // Initialize the LCD
  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	2127      	movs	r1, #39	@ 0x27
 8001c00:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <main+0xe0>)
 8001c02:	f7ff fcd1 	bl	80015a8 <lcdInit>
  vPrintUART("TESTADO\n");
 8001c06:	4816      	ldr	r0, [pc, #88]	@ (8001c60 <main+0xe4>)
 8001c08:	f7ff ffa4 	bl	8001b54 <vPrintUART>
  // sprintf((char *)ucLCD1Msg, "TESTE LINHA 2");
  // // Set cursor at zero position of line 0
  // lcdSetCursorPosition(0, 1);
  // // Print text at cursor position
  // lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4815      	ldr	r0, [pc, #84]	@ (8001c64 <main+0xe8>)
 8001c10:	f006 fa64 	bl	80080dc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 100);
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <main+0xe8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2264      	movs	r2, #100	@ 0x64
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34
  vPrintMotorSpeed(fGetVelocidadeRodaEsquerda(), fGetVelocidadeRodaDireita());
 8001c1c:	f7ff fadc 	bl	80011d8 <fGetVelocidadeRodaEsquerda>
 8001c20:	eeb0 8a40 	vmov.f32	s16, s0
 8001c24:	f7ff fae6 	bl	80011f4 <fGetVelocidadeRodaDireita>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	eef0 0a67 	vmov.f32	s1, s15
 8001c30:	eeb0 0a48 	vmov.f32	s0, s16
 8001c34:	f7ff ff1a 	bl	8001a6c <vPrintMotorSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <main+0xbc>
 8001c3c:	20000604 	.word	0x20000604
 8001c40:	200007cc 	.word	0x200007cc
 8001c44:	20000780 	.word	0x20000780
 8001c48:	20000078 	.word	0x20000078
 8001c4c:	200000e4 	.word	0x200000e4
 8001c50:	20000150 	.word	0x20000150
 8001c54:	200001bc 	.word	0x200001bc
 8001c58:	20000228 	.word	0x20000228
 8001c5c:	200004ac 	.word	0x200004ac
 8001c60:	0800bc40 	.word	0x0800bc40
 8001c64:	200006e8 	.word	0x200006e8

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b094      	sub	sp, #80	@ 0x50
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	2238      	movs	r2, #56	@ 0x38
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f009 fb46 	bl	800b308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f005 f93e 	bl	8006f0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c9a:	2340      	movs	r3, #64	@ 0x40
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001caa:	2355      	movs	r3, #85	@ 0x55
 8001cac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 f9d8 	bl	8007074 <HAL_RCC_OscConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cca:	f000 f818 	bl	8001cfe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cce:	230f      	movs	r3, #15
 8001cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 fcd6 	bl	8007698 <HAL_RCC_ClockConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cf2:	f000 f804 	bl	8001cfe <Error_Handler>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	@ 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d02:	b672      	cpsid	i
}
 8001d04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <Error_Handler+0x8>
	...

08001d0c <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8001d14:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <vMotorInit+0x60>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <vMotorInit+0x60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f006 f9db 	bl	80080dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <vMotorInit+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f006 f9d5 	bl	80080dc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <vMotorInit+0x64>)
 8001d3a:	f003 fa05 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d44:	480a      	ldr	r0, [pc, #40]	@ (8001d70 <vMotorInit+0x64>)
 8001d46:	f003 f9ff 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <vMotorInit+0x64>)
 8001d50:	f003 f9fa 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5e:	f003 f9f3 	bl	8005148 <HAL_GPIO_WritePin>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200005d4 	.word	0x200005d4
 8001d70:	48000400 	.word	0x48000400

08001d74 <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8001d7c:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <vLineSensor1Init+0x30>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <vLineSensor1Init+0x30>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	217f      	movs	r1, #127	@ 0x7f
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 faa1 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <vLineSensor1Init+0x30>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4904      	ldr	r1, [pc, #16]	@ (8001da8 <vLineSensor1Init+0x34>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fb8c 	bl	80034b4 <HAL_ADC_Start_DMA>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200005d8 	.word	0x200005d8
 8001da8:	200005ec 	.word	0x200005ec

08001dac <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 8001db4:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <vLineSensor2Init+0x30>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <vLineSensor2Init+0x30>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	217f      	movs	r1, #127	@ 0x7f
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fa85 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 8001dc6:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <vLineSensor2Init+0x30>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4904      	ldr	r1, [pc, #16]	@ (8001de0 <vLineSensor2Init+0x34>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fb70 	bl	80034b4 <HAL_ADC_Start_DMA>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200005dc 	.word	0x200005dc
 8001de0:	200005f0 	.word	0x200005f0

08001de4 <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8001dec:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <vLineSensor3Init+0x30>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <vLineSensor3Init+0x30>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	217f      	movs	r1, #127	@ 0x7f
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fa69 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <vLineSensor3Init+0x30>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4904      	ldr	r1, [pc, #16]	@ (8001e18 <vLineSensor3Init+0x34>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 fb54 	bl	80034b4 <HAL_ADC_Start_DMA>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200005e0 	.word	0x200005e0
 8001e18:	200005f4 	.word	0x200005f4

08001e1c <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8001e24:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <vLineSensor4Init+0x30>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <vLineSensor4Init+0x30>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	217f      	movs	r1, #127	@ 0x7f
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 fa4d 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <vLineSensor4Init+0x30>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <vLineSensor4Init+0x34>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fb38 	bl	80034b4 <HAL_ADC_Start_DMA>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200005e4 	.word	0x200005e4
 8001e50:	200005f8 	.word	0x200005f8

08001e54 <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8001e5c:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <vLineSensor5Init+0x30>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <vLineSensor5Init+0x30>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	217f      	movs	r1, #127	@ 0x7f
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fa31 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <vLineSensor5Init+0x30>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4904      	ldr	r1, [pc, #16]	@ (8001e88 <vLineSensor5Init+0x34>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fb1c 	bl	80034b4 <HAL_ADC_Start_DMA>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200005e8 	.word	0x200005e8
 8001e88:	200005fc 	.word	0x200005fc

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_MspInit+0x44>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ec2:	f005 f8c7 	bl	8007054 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f000 fe83 	bl	8002c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Fr_Pin);
 8001f36:	2004      	movs	r0, #4
 8001f38:	f003 f91e 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA1_Channel6_IRQHandler+0x10>)
 8001f46:	f002 fe20 	bl	8004b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000500 	.word	0x20000500

08001f54 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <DMA1_Channel7_IRQHandler+0x10>)
 8001f5a:	f002 fe16 	bl	8004b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000560 	.word	0x20000560

08001f68 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001f6e:	f006 fb79 	bl	8008664 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001f72:	4803      	ldr	r0, [pc, #12]	@ (8001f80 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001f74:	f006 fb76 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000604 	.word	0x20000604
 8001f80:	20000734 	.word	0x20000734

08001f84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001f8a:	f006 fb6b 	bl	8008664 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001f8e:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001f90:	f006 fb68 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000604 	.word	0x20000604
 8001f9c:	20000780 	.word	0x20000780

08001fa0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa4:	4803      	ldr	r0, [pc, #12]	@ (8001fb4 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001fa6:	f006 fb5d 	bl	8008664 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001faa:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001fac:	f006 fb5a 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000604 	.word	0x20000604
 8001fb8:	200007cc 	.word	0x200007cc

08001fbc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <I2C2_EV_IRQHandler+0x10>)
 8001fc2:	f003 faab 	bl	800551c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200004ac 	.word	0x200004ac

08001fd0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <I2C2_ER_IRQHandler+0x10>)
 8001fd6:	f003 fabb 	bl	8005550 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200004ac 	.word	0x200004ac

08001fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fe8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fec:	f003 f8c4 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <TIM7_DAC_IRQHandler+0x10>)
 8001ffa:	f006 fb33 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000069c 	.word	0x2000069c

08002008 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <DMA2_Channel1_IRQHandler+0x10>)
 800200e:	f002 fdbc 	bl	8004b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200008ac 	.word	0x200008ac

0800201c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <DMA2_Channel2_IRQHandler+0x10>)
 8002022:	f002 fdb2 	bl	8004b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000090c 	.word	0x2000090c

08002030 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <LPUART1_IRQHandler+0x10>)
 8002036:	f007 ff6b 	bl	8009f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000818 	.word	0x20000818

08002044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800204c:	4a14      	ldr	r2, [pc, #80]	@ (80020a0 <_sbrk+0x5c>)
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <_sbrk+0x60>)
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <_sbrk+0x64>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <_sbrk+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d207      	bcs.n	8002084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002074:	f009 f950 	bl	800b318 <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	220c      	movs	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e009      	b.n	8002098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <_sbrk+0x64>)
 8002094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20020000 	.word	0x20020000
 80020a4:	00000400 	.word	0x00000400
 80020a8:	20000600 	.word	0x20000600
 80020ac:	20000ab8 	.word	0x20000ab8

080020b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <SystemInit+0x20>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <SystemInit+0x20>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09c      	sub	sp, #112	@ 0x70
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2234      	movs	r2, #52	@ 0x34
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f009 f8fa 	bl	800b308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002114:	4b4b      	ldr	r3, [pc, #300]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002116:	4a4c      	ldr	r2, [pc, #304]	@ (8002248 <MX_TIM1_Init+0x174>)
 8002118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800211a:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <MX_TIM1_Init+0x170>)
 800211c:	22a9      	movs	r2, #169	@ 0xa9
 800211e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b48      	ldr	r3, [pc, #288]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002126:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002128:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800212c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b45      	ldr	r3, [pc, #276]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002134:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b42      	ldr	r3, [pc, #264]	@ (8002244 <MX_TIM1_Init+0x170>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002140:	4840      	ldr	r0, [pc, #256]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002142:	f005 ff13 	bl	8007f6c <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800214c:	f7ff fdd7 	bl	8001cfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002154:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002156:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800215a:	4619      	mov	r1, r3
 800215c:	4839      	ldr	r0, [pc, #228]	@ (8002244 <MX_TIM1_Init+0x170>)
 800215e:	f006 fd81 	bl	8008c64 <HAL_TIM_ConfigClockSource>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002168:	f7ff fdc9 	bl	8001cfe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800216c:	4835      	ldr	r0, [pc, #212]	@ (8002244 <MX_TIM1_Init+0x170>)
 800216e:	f005 ff54 	bl	800801a <HAL_TIM_PWM_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002178:	f7ff fdc1 	bl	8001cfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002188:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800218c:	4619      	mov	r1, r3
 800218e:	482d      	ldr	r0, [pc, #180]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002190:	f007 fc70 	bl	8009a74 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800219a:	f7ff fdb0 	bl	8001cfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219e:	2360      	movs	r3, #96	@ 0x60
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a6:	2300      	movs	r3, #0
 80021a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021aa:	2300      	movs	r3, #0
 80021ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4820      	ldr	r0, [pc, #128]	@ (8002244 <MX_TIM1_Init+0x170>)
 80021c4:	f006 fc3a 	bl	8008a3c <HAL_TIM_PWM_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80021ce:	f7ff fd96 	bl	8001cfe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021d6:	2204      	movs	r2, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	481a      	ldr	r0, [pc, #104]	@ (8002244 <MX_TIM1_Init+0x170>)
 80021dc:	f006 fc2e 	bl	8008a3c <HAL_TIM_PWM_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80021e6:	f7ff fd8a 	bl	8001cfe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002202:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4807      	ldr	r0, [pc, #28]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002228:	f007 fcba 	bl	8009ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002232:	f7ff fd64 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002236:	4803      	ldr	r0, [pc, #12]	@ (8002244 <MX_TIM1_Init+0x170>)
 8002238:	f000 fb1c 	bl	8002874 <HAL_TIM_MspPostInit>

}
 800223c:	bf00      	nop
 800223e:	3770      	adds	r7, #112	@ 0x70
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000604 	.word	0x20000604
 8002248:	40012c00 	.word	0x40012c00

0800224c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <MX_TIM6_Init+0x64>)
 800225e:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <MX_TIM6_Init+0x68>)
 8002260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <MX_TIM6_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_TIM6_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <MX_TIM6_Init+0x64>)
 8002270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002274:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_TIM6_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <MX_TIM6_Init+0x64>)
 800227e:	f005 fe75 	bl	8007f6c <HAL_TIM_Base_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002288:	f7ff fd39 	bl	8001cfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_TIM6_Init+0x64>)
 800229a:	f007 fbeb 	bl	8009a74 <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80022a4:	f7ff fd2b 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000650 	.word	0x20000650
 80022b4:	40001000 	.word	0x40001000

080022b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022c8:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022ca:	4a16      	ldr	r2, [pc, #88]	@ (8002324 <MX_TIM7_Init+0x6c>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022d0:	f244 2267 	movw	r2, #16999	@ 0x4267
 80022d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80022e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022ea:	480d      	ldr	r0, [pc, #52]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022ec:	f005 fe3e 	bl	8007f6c <HAL_TIM_Base_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80022f6:	f7ff fd02 	bl	8001cfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_TIM7_Init+0x68>)
 8002308:	f007 fbb4 	bl	8009a74 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002312:	f7ff fcf4 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000069c 	.word	0x2000069c
 8002324:	40001400 	.word	0x40001400

08002328 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b09c      	sub	sp, #112	@ 0x70
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002348:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2234      	movs	r2, #52	@ 0x34
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f008 ffd0 	bl	800b308 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <MX_TIM8_Init+0x158>)
 800236a:	4a46      	ldr	r2, [pc, #280]	@ (8002484 <MX_TIM8_Init+0x15c>)
 800236c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 240-1;
 800236e:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002370:	22ef      	movs	r2, #239	@ 0xef
 8002372:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <MX_TIM8_Init+0x158>)
 800237c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002380:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002388:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <MX_TIM8_Init+0x158>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b3c      	ldr	r3, [pc, #240]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002394:	483a      	ldr	r0, [pc, #232]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002396:	f005 fde9 	bl	8007f6c <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80023a0:	f7ff fcad 	bl	8001cfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023ae:	4619      	mov	r1, r3
 80023b0:	4833      	ldr	r0, [pc, #204]	@ (8002480 <MX_TIM8_Init+0x158>)
 80023b2:	f006 fc57 	bl	8008c64 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80023bc:	f7ff fc9f 	bl	8001cfe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023c0:	482f      	ldr	r0, [pc, #188]	@ (8002480 <MX_TIM8_Init+0x158>)
 80023c2:	f005 fe2a 	bl	800801a <HAL_TIM_PWM_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80023cc:	f7ff fc97 	bl	8001cfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023e0:	4619      	mov	r1, r3
 80023e2:	4827      	ldr	r0, [pc, #156]	@ (8002480 <MX_TIM8_Init+0x158>)
 80023e4:	f007 fb46 	bl	8009a74 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80023ee:	f7ff fc86 	bl	8001cfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f2:	2360      	movs	r3, #96	@ 0x60
 80023f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023fe:	2300      	movs	r3, #0
 8002400:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002412:	2200      	movs	r2, #0
 8002414:	4619      	mov	r1, r3
 8002416:	481a      	ldr	r0, [pc, #104]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002418:	f006 fb10 	bl	8008a3c <HAL_TIM_PWM_ConfigChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002422:	f7ff fc6c 	bl	8001cfe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800243a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800244c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002456:	2300      	movs	r3, #0
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002464:	f007 fb9c 	bl	8009ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800246e:	f7ff fc46 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002472:	4803      	ldr	r0, [pc, #12]	@ (8002480 <MX_TIM8_Init+0x158>)
 8002474:	f000 f9fe 	bl	8002874 <HAL_TIM_MspPostInit>

}
 8002478:	bf00      	nop
 800247a:	3770      	adds	r7, #112	@ 0x70
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200006e8 	.word	0x200006e8
 8002484:	40013400 	.word	0x40013400

08002488 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <MX_TIM15_Init+0xa0>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024ae:	22a9      	movs	r2, #169	@ 0xa9
 80024b0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024be:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024d2:	4814      	ldr	r0, [pc, #80]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024d4:	f005 fd4a 	bl	8007f6c <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024de:	f7ff fc0e 	bl	8001cfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4619      	mov	r1, r3
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <MX_TIM15_Init+0x9c>)
 80024f0:	f006 fbb8 	bl	8008c64 <HAL_TIM_ConfigClockSource>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024fa:	f7ff fc00 	bl	8001cfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	@ (8002524 <MX_TIM15_Init+0x9c>)
 800250c:	f007 fab2 	bl	8009a74 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002516:	f7ff fbf2 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000734 	.word	0x20000734
 8002528:	40014000 	.word	0x40014000

0800252c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002532:	463b      	mov	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 8002540:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <MX_TIM16_Init+0x90>)
 8002542:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002544:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 8002546:	22a9      	movs	r2, #169	@ 0xa9
 8002548:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 8002552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002556:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800256a:	4813      	ldr	r0, [pc, #76]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 800256c:	f005 fcfe 	bl	8007f6c <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002576:	f7ff fbc2 	bl	8001cfe <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800257a:	480f      	ldr	r0, [pc, #60]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 800257c:	f005 fec0 	bl	8008300 <HAL_TIM_IC_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002586:	f7ff fbba 	bl	8001cfe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800258e:	2301      	movs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002596:	230f      	movs	r3, #15
 8002598:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_TIM16_Init+0x8c>)
 80025a2:	f006 f9ae 	bl	8008902 <HAL_TIM_IC_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80025ac:	f7ff fba7 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000780 	.word	0x20000780
 80025bc:	40014400 	.word	0x40014400

080025c0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80025c6:	463b      	mov	r3, r7
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <MX_TIM17_Init+0x90>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025da:	22a9      	movs	r2, #169	@ 0xa9
 80025dc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <MX_TIM17_Init+0x8c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025fe:	4813      	ldr	r0, [pc, #76]	@ (800264c <MX_TIM17_Init+0x8c>)
 8002600:	f005 fcb4 	bl	8007f6c <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800260a:	f7ff fb78 	bl	8001cfe <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800260e:	480f      	ldr	r0, [pc, #60]	@ (800264c <MX_TIM17_Init+0x8c>)
 8002610:	f005 fe76 	bl	8008300 <HAL_TIM_IC_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800261a:	f7ff fb70 	bl	8001cfe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800261e:	2300      	movs	r3, #0
 8002620:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002622:	2301      	movs	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800262a:	230f      	movs	r3, #15
 800262c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	4619      	mov	r1, r3
 8002634:	4805      	ldr	r0, [pc, #20]	@ (800264c <MX_TIM17_Init+0x8c>)
 8002636:	f006 f964 	bl	8008902 <HAL_TIM_IC_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002640:	f7ff fb5d 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200007cc 	.word	0x200007cc
 8002650:	40014800 	.word	0x40014800

08002654 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b090      	sub	sp, #64	@ 0x40
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a77      	ldr	r2, [pc, #476]	@ (8002850 <HAL_TIM_Base_MspInit+0x1fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d124      	bne.n	80026c0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002676:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	4a76      	ldr	r2, [pc, #472]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 800267c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002680:	6613      	str	r3, [r2, #96]	@ 0x60
 8002682:	4b74      	ldr	r3, [pc, #464]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	2018      	movs	r0, #24
 8002694:	f002 f861 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002698:	2018      	movs	r0, #24
 800269a:	f002 f878 	bl	800478e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2019      	movs	r0, #25
 80026a4:	f002 f859 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026a8:	2019      	movs	r0, #25
 80026aa:	f002 f870 	bl	800478e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201a      	movs	r0, #26
 80026b4:	f002 f851 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80026b8:	201a      	movs	r0, #26
 80026ba:	f002 f868 	bl	800478e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80026be:	e0c2      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM6)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a64      	ldr	r2, [pc, #400]	@ (8002858 <HAL_TIM_Base_MspInit+0x204>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10c      	bne.n	80026e4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026d0:	f043 0310 	orr.w	r3, r3, #16
 80026d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026e2:	e0b0      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM7)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_TIM_Base_MspInit+0x208>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d114      	bne.n	8002718 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fa:	4b56      	ldr	r3, [pc, #344]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2037      	movs	r0, #55	@ 0x37
 800270c:	f002 f825 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002710:	2037      	movs	r0, #55	@ 0x37
 8002712:	f002 f83c 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 8002716:	e096      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM8)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a50      	ldr	r2, [pc, #320]	@ (8002860 <HAL_TIM_Base_MspInit+0x20c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10c      	bne.n	800273c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002722:	4b4c      	ldr	r3, [pc, #304]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	4a4b      	ldr	r2, [pc, #300]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002728:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800272c:	6613      	str	r3, [r2, #96]	@ 0x60
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
}
 800273a:	e084      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM15)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <HAL_TIM_Base_MspInit+0x210>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d114      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002746:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	4a42      	ldr	r2, [pc, #264]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6613      	str	r3, [r2, #96]	@ 0x60
 8002752:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2018      	movs	r0, #24
 8002764:	f001 fff9 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002768:	2018      	movs	r0, #24
 800276a:	f002 f810 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 800276e:	e06a      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM16)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3c      	ldr	r2, [pc, #240]	@ (8002868 <HAL_TIM_Base_MspInit+0x214>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d130      	bne.n	80027dc <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800277a:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	4a35      	ldr	r2, [pc, #212]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	6613      	str	r3, [r2, #96]	@ 0x60
 8002786:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	4a2f      	ldr	r2, [pc, #188]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 80027aa:	2310      	movs	r3, #16
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80027ba:	2301      	movs	r3, #1
 80027bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027c2:	4619      	mov	r1, r3
 80027c4:	4829      	ldr	r0, [pc, #164]	@ (800286c <HAL_TIM_Base_MspInit+0x218>)
 80027c6:	f002 fb3d 	bl	8004e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2019      	movs	r0, #25
 80027d0:	f001 ffc3 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027d4:	2019      	movs	r0, #25
 80027d6:	f001 ffda 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 80027da:	e034      	b.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM17)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a23      	ldr	r2, [pc, #140]	@ (8002870 <HAL_TIM_Base_MspInit+0x21c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d12f      	bne.n	8002846 <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027f2:	4b18      	ldr	r3, [pc, #96]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_TIM_Base_MspInit+0x200>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8002816:	2320      	movs	r3, #32
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002826:	230a      	movs	r3, #10
 8002828:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800282e:	4619      	mov	r1, r3
 8002830:	480e      	ldr	r0, [pc, #56]	@ (800286c <HAL_TIM_Base_MspInit+0x218>)
 8002832:	f002 fb07 	bl	8004e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	201a      	movs	r0, #26
 800283c:	f001 ff8d 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002840:	201a      	movs	r0, #26
 8002842:	f001 ffa4 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3740      	adds	r7, #64	@ 0x40
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40001000 	.word	0x40001000
 800285c:	40001400 	.word	0x40001400
 8002860:	40013400 	.word	0x40013400
 8002864:	40014000 	.word	0x40014000
 8002868:	40014400 	.word	0x40014400
 800286c:	48000400 	.word	0x48000400
 8002870:	40014800 	.word	0x40014800

08002874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	@ (8002920 <HAL_TIM_MspPostInit+0xac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d11c      	bne.n	80028d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 80028ae:	2303      	movs	r3, #3
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028be:	2302      	movs	r3, #2
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4817      	ldr	r0, [pc, #92]	@ (8002928 <HAL_TIM_MspPostInit+0xb4>)
 80028ca:	f002 fabb 	bl	8004e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80028ce:	e022      	b.n	8002916 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	@ (800292c <HAL_TIM_MspPostInit+0xb8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d11d      	bne.n	8002916 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_TIM_MspPostInit+0xb0>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Buzzer_PWM_Pin;
 80028f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002904:	2302      	movs	r3, #2
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzzer_PWM_GPIO_Port, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002912:	f002 fa97 	bl	8004e44 <HAL_GPIO_Init>
}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	@ 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40021000 	.word	0x40021000
 8002928:	48000800 	.word	0x48000800
 800292c:	40013400 	.word	0x40013400

08002930 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002936:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <MX_LPUART1_UART_Init+0x90>)
 8002938:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002960:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002968:	2200      	movs	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 800296e:	2200      	movs	r2, #0
 8002970:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002972:	4812      	ldr	r0, [pc, #72]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002974:	f007 f9ee 	bl	8009d54 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800297e:	f7ff f9be 	bl	8001cfe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002982:	2100      	movs	r1, #0
 8002984:	480d      	ldr	r0, [pc, #52]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002986:	f008 fbd4 	bl	800b132 <HAL_UARTEx_SetTxFifoThreshold>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002990:	f7ff f9b5 	bl	8001cfe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002994:	2100      	movs	r1, #0
 8002996:	4809      	ldr	r0, [pc, #36]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 8002998:	f008 fc09 	bl	800b1ae <HAL_UARTEx_SetRxFifoThreshold>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80029a2:	f7ff f9ac 	bl	8001cfe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029a6:	4805      	ldr	r0, [pc, #20]	@ (80029bc <MX_LPUART1_UART_Init+0x8c>)
 80029a8:	f008 fb8a 	bl	800b0c0 <HAL_UARTEx_DisableFifoMode>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80029b2:	f7ff f9a4 	bl	8001cfe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000818 	.word	0x20000818
 80029c0:	40008000 	.word	0x40008000

080029c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b09e      	sub	sp, #120	@ 0x78
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	2254      	movs	r2, #84	@ 0x54
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f008 fc8f 	bl	800b308 <memset>
  if(uartHandle->Instance==LPUART1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002b24 <HAL_UART_MspInit+0x160>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	f040 8092 	bne.w	8002b1a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029f6:	2320      	movs	r3, #32
 80029f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 f864 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a0e:	f7ff f976 	bl	8001cfe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a12:	4b45      	ldr	r3, [pc, #276]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	4a44      	ldr	r2, [pc, #272]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a1e:	4b42      	ldr	r3, [pc, #264]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a36:	4b3c      	ldr	r3, [pc, #240]	@ (8002b28 <HAL_UART_MspInit+0x164>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002a42:	230c      	movs	r3, #12
 8002a44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002a52:	230c      	movs	r3, #12
 8002a54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a60:	f002 f9f0 	bl	8004e44 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA2_Channel1;
 8002a64:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a66:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <HAL_UART_MspInit+0x16c>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002a6a:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a6c:	2222      	movs	r2, #34	@ 0x22
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a82:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a88:	4b28      	ldr	r3, [pc, #160]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002a8e:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002a9a:	4824      	ldr	r0, [pc, #144]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002a9c:	f001 fe92 	bl	80047c4 <HAL_DMA_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002aa6:	f7ff f92a 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <HAL_UART_MspInit+0x168>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002aba:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <HAL_UART_MspInit+0x174>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ac0:	2223      	movs	r2, #35	@ 0x23
 8002ac2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002aee:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002af0:	f001 fe68 	bl	80047c4 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002afa:	f7ff f900 	bl	8001cfe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002b02:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_UART_MspInit+0x170>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	205b      	movs	r0, #91	@ 0x5b
 8002b10:	f001 fe23 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002b14:	205b      	movs	r0, #91	@ 0x5b
 8002b16:	f001 fe3a 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3778      	adds	r7, #120	@ 0x78
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40008000 	.word	0x40008000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	200008ac 	.word	0x200008ac
 8002b30:	40020408 	.word	0x40020408
 8002b34:	2000090c 	.word	0x2000090c
 8002b38:	4002041c 	.word	0x4002041c

08002b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b3c:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b40:	f7ff fab6 	bl	80020b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490d      	ldr	r1, [pc, #52]	@ (8002b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b88 <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f008 fbdb 	bl	800b324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b6e:	f7ff f805 	bl	8001b7c <main>

08002b72 <LoopForever>:

LoopForever:
    b LoopForever
 8002b72:	e7fe      	b.n	8002b72 <LoopForever>
  ldr   r0, =_estack
 8002b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002b80:	0800bcd4 	.word	0x0800bcd4
  ldr r2, =_sbss
 8002b84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002b88:	20000ab8 	.word	0x20000ab8

08002b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC1_2_IRQHandler>

08002b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f001 fdd3 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f80e 	bl	8002bc0 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	e001      	b.n	8002bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bb0:	f7ff f96c 	bl	8001e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bb4:	79fb      	ldrb	r3, [r7, #7]

}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_InitTick+0x68>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d022      	beq.n	8002c1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bd4:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_InitTick+0x6c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <HAL_InitTick+0x68>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fdde 	bl	80047aa <HAL_SYSTICK_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10f      	bne.n	8002c14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d809      	bhi.n	8002c0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	f001 fdaa 	bl	800475a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <HAL_InitTick+0x70>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e007      	b.n	8002c1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e004      	b.n	8002c1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e001      	b.n	8002c1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_IncTick+0x1c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_IncTick+0x20>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a03      	ldr	r2, [pc, #12]	@ (8002c50 <HAL_IncTick+0x1c>)
 8002c44:	6013      	str	r3, [r2, #0]
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	2000096c 	.word	0x2000096c
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000096c 	.word	0x2000096c

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d004      	beq.n	8002c94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_Delay+0x40>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c94:	bf00      	nop
 8002c96:	f7ff ffdf 	bl	8002c58 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d8f7      	bhi.n	8002c96 <HAL_Delay+0x26>
  {
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000008 	.word	0x20000008

08002cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3360      	adds	r3, #96	@ 0x60
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <LL_ADC_SetOffset+0x44>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	03fff000 	.word	0x03fff000

08002d64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3360      	adds	r3, #96	@ 0x60
 8002d72:	461a      	mov	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3360      	adds	r3, #96	@ 0x60
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3360      	adds	r3, #96	@ 0x60
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3360      	adds	r3, #96	@ 0x60
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	615a      	str	r2, [r3, #20]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3330      	adds	r3, #48	@ 0x30
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	211f      	movs	r1, #31
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	f003 011f 	and.w	r1, r3, #31
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0e5b      	lsrs	r3, r3, #25
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	0d1b      	lsrs	r3, r3, #20
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2107      	movs	r1, #7
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	0d1b      	lsrs	r3, r3, #20
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0318 	and.w	r3, r3, #24
 8002f4e:	4908      	ldr	r1, [pc, #32]	@ (8002f70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f50:	40d9      	lsrs	r1, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	400b      	ands	r3, r1
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	0007ffff 	.word	0x0007ffff

08002f74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 031f 	and.w	r3, r3, #31
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002fa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003068:	f043 0202 	orr.w	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <LL_ADC_IsEnabled+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_IsEnabled+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d101      	bne.n	80030ba <LL_ADC_IsDisableOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_IsDisableOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d101      	bne.n	8003108 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d101      	bne.n	800312e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1a9      	b.n	80034aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fc89 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff19 	bl	8002fb4 <LL_ADC_IsDeepPowerDownEnabled>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff feff 	bl	8002f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff34 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff18 	bl	8002fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003420 <HAL_ADC_Init+0x2e4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	4a9c      	ldr	r2, [pc, #624]	@ (8003424 <HAL_ADC_Init+0x2e8>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031c0:	e002      	b.n	80031c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f9      	bne.n	80031c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff16 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff76 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 8003204:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8142 	bne.w	8003498 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 813e 	bne.w	8003498 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003224:	f043 0202 	orr.w	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff23 	bl	800307c <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d141      	bne.n	80032c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003244:	d004      	beq.n	8003250 <HAL_ADC_Init+0x114>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <HAL_ADC_Init+0x2ec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10f      	bne.n	8003270 <HAL_ADC_Init+0x134>
 8003250:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003254:	f7ff ff12 	bl	800307c <LL_ADC_IsEnabled>
 8003258:	4604      	mov	r4, r0
 800325a:	4873      	ldr	r0, [pc, #460]	@ (8003428 <HAL_ADC_Init+0x2ec>)
 800325c:	f7ff ff0e 	bl	800307c <LL_ADC_IsEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	4323      	orrs	r3, r4
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e012      	b.n	8003296 <HAL_ADC_Init+0x15a>
 8003270:	486e      	ldr	r0, [pc, #440]	@ (800342c <HAL_ADC_Init+0x2f0>)
 8003272:	f7ff ff03 	bl	800307c <LL_ADC_IsEnabled>
 8003276:	4604      	mov	r4, r0
 8003278:	486d      	ldr	r0, [pc, #436]	@ (8003430 <HAL_ADC_Init+0x2f4>)
 800327a:	f7ff feff 	bl	800307c <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	431c      	orrs	r4, r3
 8003282:	486c      	ldr	r0, [pc, #432]	@ (8003434 <HAL_ADC_Init+0x2f8>)
 8003284:	f7ff fefa 	bl	800307c <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	4323      	orrs	r3, r4
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d012      	beq.n	80032c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_Init+0x172>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003428 <HAL_ADC_Init+0x2ec>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_Init+0x176>
 80032ae:	4a62      	ldr	r2, [pc, #392]	@ (8003438 <HAL_ADC_Init+0x2fc>)
 80032b0:	e000      	b.n	80032b4 <HAL_ADC_Init+0x178>
 80032b2:	4a62      	ldr	r2, [pc, #392]	@ (800343c <HAL_ADC_Init+0x300>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7ff fcfa 	bl	8002cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7f5b      	ldrb	r3, [r3, #29]
 80032c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	045b      	lsls	r3, r3, #17
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	4b48      	ldr	r3, [pc, #288]	@ (8003440 <HAL_ADC_Init+0x304>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	430b      	orrs	r3, r1
 800332a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fee5 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 800334c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d17f      	bne.n	8003454 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d17c      	bne.n	8003454 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800335e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003366:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003376:	f023 0302 	bic.w	r3, r3, #2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	430b      	orrs	r3, r1
 8003382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800339a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6911      	ldr	r1, [r2, #16]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80033ba:	e013      	b.n	80033e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d12a      	bne.n	8003444 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003410:	430a      	orrs	r2, r1
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	e019      	b.n	8003454 <HAL_ADC_Init+0x318>
 8003420:	20000000 	.word	0x20000000
 8003424:	053e2d63 	.word	0x053e2d63
 8003428:	50000100 	.word	0x50000100
 800342c:	50000400 	.word	0x50000400
 8003430:	50000500 	.word	0x50000500
 8003434:	50000600 	.word	0x50000600
 8003438:	50000300 	.word	0x50000300
 800343c:	50000700 	.word	0x50000700
 8003440:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10c      	bne.n	8003476 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f023 010f 	bic.w	r1, r3, #15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
 8003474:	e007      	b.n	8003486 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 020f 	bic.w	r2, r2, #15
 8003484:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003496:	e007      	b.n	80034a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	@ 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c8:	d004      	beq.n	80034d4 <HAL_ADC_Start_DMA+0x20>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003638 <HAL_ADC_Start_DMA+0x184>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_Start_DMA+0x24>
 80034d4:	4b59      	ldr	r3, [pc, #356]	@ (800363c <HAL_ADC_Start_DMA+0x188>)
 80034d6:	e000      	b.n	80034da <HAL_ADC_Start_DMA+0x26>
 80034d8:	4b59      	ldr	r3, [pc, #356]	@ (8003640 <HAL_ADC_Start_DMA+0x18c>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fd4a 	bl	8002f74 <LL_ADC_GetMultimode>
 80034e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fe02 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 809b 	bne.w	800362a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_Start_DMA+0x4e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e096      	b.n	8003630 <HAL_ADC_Start_DMA+0x17c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4d      	ldr	r2, [pc, #308]	@ (8003644 <HAL_ADC_Start_DMA+0x190>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d008      	beq.n	8003526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d002      	beq.n	8003526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b09      	cmp	r3, #9
 8003524:	d17a      	bne.n	800361c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fcf6 	bl	8003f18 <ADC_Enable>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d16d      	bne.n	8003612 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <HAL_ADC_Start_DMA+0x184>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_ADC_Start_DMA+0xb4>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3b      	ldr	r2, [pc, #236]	@ (8003648 <HAL_ADC_Start_DMA+0x194>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d002      	beq.n	8003564 <HAL_ADC_Start_DMA+0xb0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e003      	b.n	800356c <HAL_ADC_Start_DMA+0xb8>
 8003564:	4b39      	ldr	r3, [pc, #228]	@ (800364c <HAL_ADC_Start_DMA+0x198>)
 8003566:	e001      	b.n	800356c <HAL_ADC_Start_DMA+0xb8>
 8003568:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4293      	cmp	r3, r2
 8003572:	d002      	beq.n	800357a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003596:	f023 0206 	bic.w	r2, r3, #6
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	661a      	str	r2, [r3, #96]	@ 0x60
 800359e:	e002      	b.n	80035a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	4a29      	ldr	r2, [pc, #164]	@ (8003650 <HAL_ADC_Start_DMA+0x19c>)
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	4a28      	ldr	r2, [pc, #160]	@ (8003654 <HAL_ADC_Start_DMA+0x1a0>)
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <HAL_ADC_Start_DMA+0x1a4>)
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	221c      	movs	r2, #28
 80035c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0210 	orr.w	r2, r2, #16
 80035dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3340      	adds	r3, #64	@ 0x40
 80035f8:	4619      	mov	r1, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f001 f989 	bl	8004914 <HAL_DMA_Start_IT>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fd5c 	bl	80030c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003610:	e00d      	b.n	800362e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800361a:	e008      	b.n	800362e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003628:	e001      	b.n	800362e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800362a:	2302      	movs	r3, #2
 800362c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	50000100 	.word	0x50000100
 800363c:	50000300 	.word	0x50000300
 8003640:	50000700 	.word	0x50000700
 8003644:	50000600 	.word	0x50000600
 8003648:	50000500 	.word	0x50000500
 800364c:	50000400 	.word	0x50000400
 8003650:	08004103 	.word	0x08004103
 8003654:	080041db 	.word	0x080041db
 8003658:	080041f7 	.word	0x080041f7

0800365c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0b6      	sub	sp, #216	@ 0xd8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x24>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f000 bc13 	b.w	8003ee2 <HAL_ADC_ConfigChannel+0x84a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fd11 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 83f3 	bne.w	8003ebc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7ff fbcb 	bl	8002e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fcff 	bl	80030f0 <LL_ADC_REG_IsConversionOngoing>
 80036f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fd0b 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 8003700:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 81d9 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 81d4 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003720:	d10f      	bne.n	8003742 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	f7ff fbd2 	bl	8002ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fb79 	bl	8002e32 <LL_ADC_SetSamplingTimeCommonConfig>
 8003740:	e00e      	b.n	8003760 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	461a      	mov	r2, r3
 8003750:	f7ff fbc1 	bl	8002ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fb69 	bl	8002e32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d022      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6919      	ldr	r1, [r3, #16]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003792:	f7ff fac3 	bl	8002d1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7ff fb0f 	bl	8002dc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_ADC_ConfigChannel+0x126>
 80037b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x128>
 80037be:	2300      	movs	r3, #0
 80037c0:	461a      	mov	r2, r3
 80037c2:	f7ff fb1b 	bl	8002dfc <LL_ADC_SetOffsetSaturation>
 80037c6:	e17b      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fac8 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x15c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fabd 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	e01e      	b.n	8003832 <HAL_ADC_ConfigChannel+0x19a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fab2 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800381a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e004      	b.n	8003830 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_ConfigChannel+0x1b2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	e018      	b.n	800387c <HAL_ADC_ConfigChannel+0x1e4>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800385e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fa81 	bl	8002d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fa65 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x222>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fa5a 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	e01e      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x260>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fa4f 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e004      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80038ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x278>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	e018      	b.n	8003942 <HAL_ADC_ConfigChannel+0x2aa>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800392c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e004      	b.n	8003942 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003942:	429a      	cmp	r2, r3
 8003944:	d106      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fa1e 	bl	8002d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fa02 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x2e8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f9f7 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	e01e      	b.n	80039be <HAL_ADC_ConfigChannel+0x326>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f9ec 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e004      	b.n	80039bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x33e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	e016      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x36c>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80039e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80039ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e004      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80039fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d106      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f9bd 	bl	8002d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f9a1 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x3aa>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2103      	movs	r1, #3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f996 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	0e9b      	lsrs	r3, r3, #26
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	e017      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x3da>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2103      	movs	r1, #3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f98b 	bl	8002d64 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x3f2>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e9b      	lsrs	r3, r3, #26
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	e011      	b.n	8003aae <HAL_ADC_ConfigChannel+0x416>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	e003      	b.n	8003aae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d106      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2103      	movs	r1, #3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f968 	bl	8002d90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fad9 	bl	800307c <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 813d 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7ff fa24 	bl	8002f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4aa2      	ldr	r2, [pc, #648]	@ (8003d74 <HAL_ADC_ConfigChannel+0x6dc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f040 812e 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x480>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e019      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x4b4>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e003      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	bf94      	ite	ls
 8003b46:	2301      	movls	r3, #1
 8003b48:	2300      	movhi	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d079      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x4d4>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	069b      	lsls	r3, r3, #26
 8003b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6a:	e015      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x500>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	069b      	lsls	r3, r3, #26
 8003b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x520>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x550>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x576>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	051b      	lsls	r3, r3, #20
 8003c0c:	e018      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x5a8>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e003      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	e07e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x5c8>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	3301      	adds	r3, #1
 8003c58:	069b      	lsls	r3, r3, #26
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c5e:	e015      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x5f4>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x614>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	e017      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x644>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	ea42 0103 	orr.w	r1, r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x670>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b1e      	subs	r3, #30
 8003d00:	051b      	lsls	r3, r3, #20
 8003d02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	e01b      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x6a8>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	613b      	str	r3, [r7, #16]
  return result;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f003 021f 	and.w	r2, r3, #31
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	3b1e      	subs	r3, #30
 8003d3a:	051b      	lsls	r3, r3, #20
 8003d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7ff f8c5 	bl	8002ed6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80be 	beq.w	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_ConfigChannel+0x6d6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <HAL_ADC_ConfigChannel+0x6e4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x6ec>
 8003d6e:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d70:	e009      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x6ee>
 8003d72:	bf00      	nop
 8003d74:	407f0000 	.word	0x407f0000
 8003d78:	80080000 	.word	0x80080000
 8003d7c:	50000100 	.word	0x50000100
 8003d80:	50000300 	.word	0x50000300
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe ffba 	bl	8002d00 <LL_ADC_GetCommonPathInternalCh>
 8003d8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x858>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x70c>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a55      	ldr	r2, [pc, #340]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x85c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d13a      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d134      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db8:	d005      	beq.n	8003dc6 <HAL_ADC_ConfigChannel+0x72e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x860>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	f040 8085 	bne.w	8003ed0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dce:	d004      	beq.n	8003dda <HAL_ADC_ConfigChannel+0x742>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x746>
 8003dda:	4a49      	ldr	r2, [pc, #292]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003ddc:	e000      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x748>
 8003dde:	4a43      	ldr	r2, [pc, #268]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fe ff75 	bl	8002cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df0:	4b44      	ldr	r3, [pc, #272]	@ (8003f04 <HAL_ADC_ConfigChannel+0x86c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	4a44      	ldr	r2, [pc, #272]	@ (8003f08 <HAL_ADC_ConfigChannel+0x870>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e0a:	e002      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f9      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e18:	e05a      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f0c <HAL_ADC_ConfigChannel+0x874>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d125      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11f      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d104      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x7ac>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	@ (8003f10 <HAL_ADC_ConfigChannel+0x878>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d047      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x7c0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x7c4>
 8003e58:	4a29      	ldr	r2, [pc, #164]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x7c6>
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7fe ff36 	bl	8002cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6e:	e031      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <HAL_ADC_ConfigChannel+0x87c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12d      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d127      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADC_ConfigChannel+0x80c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x810>
 8003ea4:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x812>
 8003ea8:	4a10      	ldr	r2, [pc, #64]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7fe ff10 	bl	8002cda <LL_ADC_SetCommonPathInternalCh>
 8003eba:	e00c      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ece:	e002      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	37d8      	adds	r7, #216	@ 0xd8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	50000700 	.word	0x50000700
 8003ef0:	c3210000 	.word	0xc3210000
 8003ef4:	90c00010 	.word	0x90c00010
 8003ef8:	50000600 	.word	0x50000600
 8003efc:	50000100 	.word	0x50000100
 8003f00:	50000300 	.word	0x50000300
 8003f04:	20000000 	.word	0x20000000
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	c7520000 	.word	0xc7520000
 8003f10:	50000500 	.word	0x50000500
 8003f14:	cb840000 	.word	0xcb840000

08003f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff f8a7 	bl	800307c <LL_ADC_IsEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d176      	bne.n	8004022 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800402c <ADC_Enable+0x114>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e062      	b.n	8004024 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f862 	bl	800302c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d004      	beq.n	8003f7c <ADC_Enable+0x64>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2e      	ldr	r2, [pc, #184]	@ (8004030 <ADC_Enable+0x118>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <ADC_Enable+0x68>
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004034 <ADC_Enable+0x11c>)
 8003f7e:	e000      	b.n	8003f82 <ADC_Enable+0x6a>
 8003f80:	4b2d      	ldr	r3, [pc, #180]	@ (8004038 <ADC_Enable+0x120>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe febc 	bl	8002d00 <LL_ADC_GetCommonPathInternalCh>
 8003f88:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d013      	beq.n	8003fba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <ADC_Enable+0x124>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	4a29      	ldr	r2, [pc, #164]	@ (8004040 <ADC_Enable+0x128>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fac:	e002      	b.n	8003fb4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f9      	bne.n	8003fae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fba:	f7fe fe4d 	bl	8002c58 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc0:	e028      	b.n	8004014 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff f858 	bl	800307c <LL_ADC_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff f828 	bl	800302c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fdc:	f7fe fe3c 	bl	8002c58 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d914      	bls.n	8004014 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d00d      	beq.n	8004014 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d1cf      	bne.n	8003fc2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	8000003f 	.word	0x8000003f
 8004030:	50000100 	.word	0x50000100
 8004034:	50000300 	.word	0x50000300
 8004038:	50000700 	.word	0x50000700
 800403c:	20000000 	.word	0x20000000
 8004040:	053e2d63 	.word	0x053e2d63

08004044 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f826 	bl	80030a2 <LL_ADC_IsDisableOngoing>
 8004056:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff f80d 	bl	800307c <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d047      	beq.n	80040f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d144      	bne.n	80040f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030d 	and.w	r3, r3, #13
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10c      	bne.n	8004096 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe ffe7 	bl	8003054 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2203      	movs	r2, #3
 800408c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800408e:	f7fe fde3 	bl	8002c58 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004094:	e029      	b.n	80040ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e023      	b.n	80040fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040b2:	f7fe fdd1 	bl	8002c58 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d914      	bls.n	80040ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1dc      	bne.n	80040b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004114:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004118:	2b00      	cmp	r3, #0
 800411a:	d14b      	bne.n	80041b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fe8c 	bl	8002e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d032      	beq.n	80041ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d12b      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11f      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004178:	e018      	b.n	80041ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d111      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fa55 	bl	800365c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b2:	e00e      	b.n	80041d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fa5f 	bl	8003684 <HAL_ADC_ErrorCallback>
}
 80041c6:	e004      	b.n	80041d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fa41 	bl	8003670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fa31 	bl	8003684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <LL_ADC_IsEnabled>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <LL_ADC_IsEnabled+0x18>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <LL_ADC_IsEnabled+0x1a>
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_StartCalibration>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004262:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800426c:	4313      	orrs	r3, r2
 800426e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_ADC_IsCalibrationOnGoing>:
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004296:	d101      	bne.n	800429c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_ADC_REG_IsConversionOngoing>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d101      	bne.n	80042c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_ADCEx_Calibration_Start+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e04d      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fea5 	bl	8004044 <ADC_Disable>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d136      	bne.n	8004372 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004308:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	f043 0202 	orr.w	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff96 	bl	8004250 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004324:	e014      	b.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d90d      	bls.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f023 0312 	bic.w	r3, r3, #18
 800433c:	f043 0210 	orr.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff94 	bl	8004282 <LL_ADC_IsCalibrationOnGoing>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e2      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004370:	e005      	b.n	800437e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	0004de01 	.word	0x0004de01

08004394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b0a1      	sub	sp, #132	@ 0x84
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0e7      	b.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80043ba:	2300      	movs	r3, #0
 80043bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80043be:	2300      	movs	r3, #0
 80043c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ca:	d102      	bne.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	e009      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d102      	bne.n	80043e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80043dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	e001      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0be      	b.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff4f 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 800440c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff49 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 80a0 	bne.w	8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 809c 	bne.w	8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004430:	d004      	beq.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a55      	ldr	r2, [pc, #340]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800443c:	4b56      	ldr	r3, [pc, #344]	@ (8004598 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800443e:	e000      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004440:	4b56      	ldr	r3, [pc, #344]	@ (800459c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004442:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d04b      	beq.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800444c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800445e:	035b      	lsls	r3, r3, #13
 8004460:	430b      	orrs	r3, r1
 8004462:	431a      	orrs	r2, r3
 8004464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004466:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004470:	d004      	beq.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a45      	ldr	r2, [pc, #276]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10f      	bne.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800447c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004480:	f7ff fed3 	bl	800422a <LL_ADC_IsEnabled>
 8004484:	4604      	mov	r4, r0
 8004486:	4841      	ldr	r0, [pc, #260]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004488:	f7ff fecf 	bl	800422a <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	4323      	orrs	r3, r4
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e012      	b.n	80044c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800449c:	483c      	ldr	r0, [pc, #240]	@ (8004590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800449e:	f7ff fec4 	bl	800422a <LL_ADC_IsEnabled>
 80044a2:	4604      	mov	r4, r0
 80044a4:	483b      	ldr	r0, [pc, #236]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044a6:	f7ff fec0 	bl	800422a <LL_ADC_IsEnabled>
 80044aa:	4603      	mov	r3, r0
 80044ac:	431c      	orrs	r4, r3
 80044ae:	483c      	ldr	r0, [pc, #240]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044b0:	f7ff febb 	bl	800422a <LL_ADC_IsEnabled>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4323      	orrs	r3, r4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d056      	beq.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044ce:	f023 030f 	bic.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	6811      	ldr	r1, [r2, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	430a      	orrs	r2, r1
 80044dc:	431a      	orrs	r2, r3
 80044de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044e2:	e047      	b.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f8:	d004      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a23      	ldr	r2, [pc, #140]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10f      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004504:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004508:	f7ff fe8f 	bl	800422a <LL_ADC_IsEnabled>
 800450c:	4604      	mov	r4, r0
 800450e:	481f      	ldr	r0, [pc, #124]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004510:	f7ff fe8b 	bl	800422a <LL_ADC_IsEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	4323      	orrs	r3, r4
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e012      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004524:	481a      	ldr	r0, [pc, #104]	@ (8004590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004526:	f7ff fe80 	bl	800422a <LL_ADC_IsEnabled>
 800452a:	4604      	mov	r4, r0
 800452c:	4819      	ldr	r0, [pc, #100]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800452e:	f7ff fe7c 	bl	800422a <LL_ADC_IsEnabled>
 8004532:	4603      	mov	r3, r0
 8004534:	431c      	orrs	r4, r3
 8004536:	481a      	ldr	r0, [pc, #104]	@ (80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004538:	f7ff fe77 	bl	800422a <LL_ADC_IsEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	4323      	orrs	r3, r4
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d012      	beq.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800454e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004556:	f023 030f 	bic.w	r3, r3, #15
 800455a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800455c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800455e:	e009      	b.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004572:	e000      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004574:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800457e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004582:	4618      	mov	r0, r3
 8004584:	3784      	adds	r7, #132	@ 0x84
 8004586:	46bd      	mov	sp, r7
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	bf00      	nop
 800458c:	50000100 	.word	0x50000100
 8004590:	50000400 	.word	0x50000400
 8004594:	50000500 	.word	0x50000500
 8004598:	50000300 	.word	0x50000300
 800459c:	50000700 	.word	0x50000700
 80045a0:	50000600 	.word	0x50000600

080045a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <__NVIC_SetPriorityGrouping+0x44>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c0:	4013      	ands	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <__NVIC_SetPriorityGrouping+0x44>)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	60d3      	str	r3, [r2, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <__NVIC_GetPriorityGrouping+0x18>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 0307 	and.w	r3, r3, #7
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db0b      	blt.n	8004632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	f003 021f 	and.w	r2, r3, #31
 8004620:	4907      	ldr	r1, [pc, #28]	@ (8004640 <__NVIC_EnableIRQ+0x38>)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2001      	movs	r0, #1
 800462a:	fa00 f202 	lsl.w	r2, r0, r2
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db0a      	blt.n	800466e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	490c      	ldr	r1, [pc, #48]	@ (8004690 <__NVIC_SetPriority+0x4c>)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	440b      	add	r3, r1
 8004668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800466c:	e00a      	b.n	8004684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4908      	ldr	r1, [pc, #32]	@ (8004694 <__NVIC_SetPriority+0x50>)
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3b04      	subs	r3, #4
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	440b      	add	r3, r1
 8004682:	761a      	strb	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	@ 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf28      	it	cs
 80046b6:	2304      	movcs	r3, #4
 80046b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3304      	adds	r3, #4
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d902      	bls.n	80046c8 <NVIC_EncodePriority+0x30>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3b03      	subs	r3, #3
 80046c6:	e000      	b.n	80046ca <NVIC_EncodePriority+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e0:	f04f 31ff 	mov.w	r1, #4294967295
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43d9      	mvns	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	4313      	orrs	r3, r2
         );
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	@ 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004710:	d301      	bcc.n	8004716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004716:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <SysTick_Config+0x40>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471e:	210f      	movs	r1, #15
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	f7ff ff8e 	bl	8004644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <SysTick_Config+0x40>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472e:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <SysTick_Config+0x40>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010

08004744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff29 	bl	80045a4 <__NVIC_SetPriorityGrouping>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004768:	f7ff ff40 	bl	80045ec <__NVIC_GetPriorityGrouping>
 800476c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff ff90 	bl	8004698 <NVIC_EncodePriority>
 8004778:	4602      	mov	r2, r0
 800477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff5f 	bl	8004644 <__NVIC_SetPriority>
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff33 	bl	8004608 <__NVIC_EnableIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ffa4 	bl	8004700 <SysTick_Config>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e08d      	b.n	80048f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	4b47      	ldr	r3, [pc, #284]	@ (80048fc <HAL_DMA_Init+0x138>)
 80047de:	429a      	cmp	r2, r3
 80047e0:	d80f      	bhi.n	8004802 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b45      	ldr	r3, [pc, #276]	@ (8004900 <HAL_DMA_Init+0x13c>)
 80047ea:	4413      	add	r3, r2
 80047ec:	4a45      	ldr	r2, [pc, #276]	@ (8004904 <HAL_DMA_Init+0x140>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a42      	ldr	r2, [pc, #264]	@ (8004908 <HAL_DMA_Init+0x144>)
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004800:	e00e      	b.n	8004820 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	4b40      	ldr	r3, [pc, #256]	@ (800490c <HAL_DMA_Init+0x148>)
 800480a:	4413      	add	r3, r2
 800480c:	4a3d      	ldr	r2, [pc, #244]	@ (8004904 <HAL_DMA_Init+0x140>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	009a      	lsls	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a3c      	ldr	r2, [pc, #240]	@ (8004910 <HAL_DMA_Init+0x14c>)
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa84 	bl	8004d80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004880:	d102      	bne.n	8004888 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800489c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <HAL_DMA_Init+0x104>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d80c      	bhi.n	80048c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 faa4 	bl	8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	e008      	b.n	80048da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40020407 	.word	0x40020407
 8004900:	bffdfff8 	.word	0xbffdfff8
 8004904:	cccccccd 	.word	0xcccccccd
 8004908:	40020000 	.word	0x40020000
 800490c:	bffdfbf8 	.word	0xbffdfbf8
 8004910:	40020400 	.word	0x40020400

08004914 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Start_IT+0x20>
 8004930:	2302      	movs	r3, #2
 8004932:	e066      	b.n	8004a02 <HAL_DMA_Start_IT+0xee>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d155      	bne.n	80049f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f9c9 	bl	8004d04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 020e 	orr.w	r2, r2, #14
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e00f      	b.n	80049ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0204 	bic.w	r2, r2, #4
 800499a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 020a 	orr.w	r2, r2, #10
 80049aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e005      	b.n	8004a00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e037      	b.n	8004a9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 020e 	bic.w	r2, r2, #14
 8004a3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	f003 021f 	and.w	r2, r3, #31
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	e047      	b.n	8004b80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 020e 	bic.w	r2, r2, #14
 8004afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b24:	f003 021f 	and.w	r2, r3, #31
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
    }
  }
  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2204      	movs	r2, #4
 8004bac:	409a      	lsls	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d026      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x7a>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d021      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f003 021f 	and.w	r2, r3, #31
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	2104      	movs	r1, #4
 8004bec:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d071      	beq.n	8004cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c02:	e06c      	b.n	8004cde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02e      	beq.n	8004c76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d029      	beq.n	8004c76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 020a 	bic.w	r2, r2, #10
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4c:	f003 021f 	and.w	r2, r3, #31
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	2102      	movs	r1, #2
 8004c56:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d038      	beq.n	8004cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c74:	e033      	b.n	8004cde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2208      	movs	r2, #8
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d02a      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d025      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 020e 	bic.w	r2, r2, #14
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca8:	f003 021f 	and.w	r2, r3, #31
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
}
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cf6:	b2db      	uxtb	r3, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	f003 021f 	and.w	r2, r3, #31
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d108      	bne.n	8004d64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d62:	e007      	b.n	8004d74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b16      	ldr	r3, [pc, #88]	@ (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d802      	bhi.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d94:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e001      	b.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004d9a:	4b15      	ldr	r3, [pc, #84]	@ (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3b08      	subs	r3, #8
 8004daa:	4a12      	ldr	r2, [pc, #72]	@ (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	089b      	lsrs	r3, r3, #2
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004dca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40020407 	.word	0x40020407
 8004dec:	40020800 	.word	0x40020800
 8004df0:	40020820 	.word	0x40020820
 8004df4:	cccccccd 	.word	0xcccccccd
 8004df8:	40020880 	.word	0x40020880

08004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e1e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	2201      	movs	r2, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	1000823f 	.word	0x1000823f
 8004e40:	40020940 	.word	0x40020940

08004e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e52:	e15a      	b.n	800510a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 814c 	beq.w	8005104 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d005      	beq.n	8004e84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d130      	bne.n	8004ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eba:	2201      	movs	r2, #1
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0201 	and.w	r2, r3, #1
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d017      	beq.n	8004f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	2203      	movs	r2, #3
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d123      	bne.n	8004f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	08da      	lsrs	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3208      	adds	r2, #8
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	08da      	lsrs	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3208      	adds	r2, #8
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80a6 	beq.w	8005104 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8005128 <HAL_GPIO_Init+0x2e4>)
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	4a5a      	ldr	r2, [pc, #360]	@ (8005128 <HAL_GPIO_Init+0x2e4>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fc4:	4b58      	ldr	r3, [pc, #352]	@ (8005128 <HAL_GPIO_Init+0x2e4>)
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd0:	4a56      	ldr	r2, [pc, #344]	@ (800512c <HAL_GPIO_Init+0x2e8>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	220f      	movs	r2, #15
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ffa:	d01f      	beq.n	800503c <HAL_GPIO_Init+0x1f8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8005130 <HAL_GPIO_Init+0x2ec>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d019      	beq.n	8005038 <HAL_GPIO_Init+0x1f4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a4b      	ldr	r2, [pc, #300]	@ (8005134 <HAL_GPIO_Init+0x2f0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <HAL_GPIO_Init+0x1f0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a4a      	ldr	r2, [pc, #296]	@ (8005138 <HAL_GPIO_Init+0x2f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00d      	beq.n	8005030 <HAL_GPIO_Init+0x1ec>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a49      	ldr	r2, [pc, #292]	@ (800513c <HAL_GPIO_Init+0x2f8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <HAL_GPIO_Init+0x1e8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a48      	ldr	r2, [pc, #288]	@ (8005140 <HAL_GPIO_Init+0x2fc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_GPIO_Init+0x1e4>
 8005024:	2305      	movs	r3, #5
 8005026:	e00a      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 8005028:	2306      	movs	r3, #6
 800502a:	e008      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 800502c:	2304      	movs	r3, #4
 800502e:	e006      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 8005030:	2303      	movs	r3, #3
 8005032:	e004      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 8005034:	2302      	movs	r3, #2
 8005036:	e002      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_GPIO_Init+0x1fa>
 800503c:	2300      	movs	r3, #0
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	f002 0203 	and.w	r2, r2, #3
 8005044:	0092      	lsls	r2, r2, #2
 8005046:	4093      	lsls	r3, r2
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800504e:	4937      	ldr	r1, [pc, #220]	@ (800512c <HAL_GPIO_Init+0x2e8>)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	3302      	adds	r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800505c:	4b39      	ldr	r3, [pc, #228]	@ (8005144 <HAL_GPIO_Init+0x300>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	43db      	mvns	r3, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4013      	ands	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005080:	4a30      	ldr	r2, [pc, #192]	@ (8005144 <HAL_GPIO_Init+0x300>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005086:	4b2f      	ldr	r3, [pc, #188]	@ (8005144 <HAL_GPIO_Init+0x300>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050aa:	4a26      	ldr	r2, [pc, #152]	@ (8005144 <HAL_GPIO_Init+0x300>)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050b0:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <HAL_GPIO_Init+0x300>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005144 <HAL_GPIO_Init+0x300>)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050da:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <HAL_GPIO_Init+0x300>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <HAL_GPIO_Init+0x300>)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3301      	adds	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f ae9d 	bne.w	8004e54 <HAL_GPIO_Init+0x10>
  }
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40021000 	.word	0x40021000
 800512c:	40010000 	.word	0x40010000
 8005130:	48000400 	.word	0x48000400
 8005134:	48000800 	.word	0x48000800
 8005138:	48000c00 	.word	0x48000c00
 800513c:	48001000 	.word	0x48001000
 8005140:	48001400 	.word	0x48001400
 8005144:	40010400 	.word	0x40010400

08005148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
 8005154:	4613      	mov	r3, r2
 8005156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005158:	787b      	ldrb	r3, [r7, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005164:	e002      	b.n	800516c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005182:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d006      	beq.n	800519c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800518e:	4a05      	ldr	r2, [pc, #20]	@ (80051a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f806 	bl	80051a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40010400 	.word	0x40010400

080051a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e08d      	b.n	80052ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fc f8fd 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2224      	movs	r2, #36	@ 0x24
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800520e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800521e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d107      	bne.n	8005238 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	e006      	b.n	8005246 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005244:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d108      	bne.n	8005260 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e007      	b.n	8005270 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800526e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800527e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005282:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005292:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69d9      	ldr	r1, [r3, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	460b      	mov	r3, r1
 8005302:	817b      	strh	r3, [r7, #10]
 8005304:	4613      	mov	r3, r2
 8005306:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b20      	cmp	r3, #32
 8005316:	f040 80ef 	bne.w	80054f8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005328:	d101      	bne.n	800532e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
 800532c:	e0e5      	b.n	80054fa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005338:	2302      	movs	r3, #2
 800533a:	e0de      	b.n	80054fa <HAL_I2C_Master_Transmit_DMA+0x206>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2221      	movs	r2, #33	@ 0x21
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2210      	movs	r2, #16
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	893a      	ldrh	r2, [r7, #8]
 8005364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a66      	ldr	r2, [pc, #408]	@ (8005504 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a66      	ldr	r2, [pc, #408]	@ (8005508 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	2bff      	cmp	r3, #255	@ 0xff
 800537a:	d906      	bls.n	800538a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	22ff      	movs	r2, #255	@ 0xff
 8005380:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e007      	b.n	800539a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005394:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005398:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01a      	beq.n	80053d8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d074      	beq.n	80054ca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d022      	beq.n	800542e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	4a47      	ldr	r2, [pc, #284]	@ (800550c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80053ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	4a46      	ldr	r2, [pc, #280]	@ (8005510 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80053f6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	2200      	movs	r2, #0
 8005406:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005418:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800541e:	f7ff fa79 	bl	8004914 <HAL_DMA_Start_IT>
 8005422:	4603      	mov	r3, r0
 8005424:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d13a      	bne.n	80054a2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800542c:	e013      	b.n	8005456 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e051      	b.n	80054fa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545a:	b2db      	uxtb	r3, r3
 800545c:	3301      	adds	r3, #1
 800545e:	b2da      	uxtb	r2, r3
 8005460:	8979      	ldrh	r1, [r7, #10]
 8005462:	4b2c      	ldr	r3, [pc, #176]	@ (8005514 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f001 fba3 	bl	8006bb4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005488:	2110      	movs	r1, #16
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fbc4 	bl	8006c18 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e028      	b.n	80054f4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e017      	b.n	80054fa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80054ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	8979      	ldrh	r1, [r7, #10]
 80054d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005514 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f001 fb68 	bl	8006bb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054ec:	2101      	movs	r1, #1
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f001 fb92 	bl	8006c18 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	ffff0000 	.word	0xffff0000
 8005508:	08005b33 	.word	0x08005b33
 800550c:	08006ab3 	.word	0x08006ab3
 8005510:	08006b49 	.word	0x08006b49
 8005514:	80002000 	.word	0x80002000
 8005518:	080056f3 	.word	0x080056f3

0800551c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
  }
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00f      	beq.n	8005592 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005580:	f043 0201 	orr.w	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005590:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00f      	beq.n	80055bc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f043 0208 	orr.w	r2, r3, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d4:	f043 0202 	orr.w	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 030b 	and.w	r3, r3, #11
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 f91f 	bl	800683c <I2C_ITError>
  }
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
 8005662:	4613      	mov	r3, r2
 8005664:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e4:	b2db      	uxtb	r3, r3
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af02      	add	r7, sp, #8
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <I2C_Master_ISR_IT+0x1e>
 800570c:	2302      	movs	r3, #2
 800570e:	e113      	b.n	8005938 <I2C_Master_ISR_IT+0x246>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005738:	f043 0204 	orr.w	r2, r3, #4
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 f992 	bl	8006a6a <I2C_Flush_TXDR>
 8005746:	e0e4      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01d      	beq.n	8005798 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0304 	bic.w	r3, r3, #4
 8005762:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005796:	e0bc      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d128      	bne.n	80057f4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d023      	beq.n	80057f4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01e      	beq.n	80057f4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a8 	beq.w	8005912 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80057f2:	e08e      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d05c      	beq.n	80058b8 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005804:	2b00      	cmp	r3, #0
 8005806:	d057      	beq.n	80058b8 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d040      	beq.n	8005894 <I2C_Master_ISR_IT+0x1a2>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d13c      	bne.n	8005894 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005826:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2bff      	cmp	r3, #255	@ 0xff
 8005830:	d90e      	bls.n	8005850 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	@ 0xff
 8005836:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8a79      	ldrh	r1, [r7, #18]
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f001 f9b3 	bl	8006bb4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800584e:	e032      	b.n	80058b6 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005862:	d00b      	beq.n	800587c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800586e:	8a79      	ldrh	r1, [r7, #18]
 8005870:	2000      	movs	r0, #0
 8005872:	9000      	str	r0, [sp, #0]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f001 f99d 	bl	8006bb4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587a:	e01c      	b.n	80058b6 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	b2da      	uxtb	r2, r3
 8005882:	8a79      	ldrh	r1, [r7, #18]
 8005884:	2300      	movs	r3, #0
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f001 f991 	bl	8006bb4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005892:	e010      	b.n	80058b6 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058a2:	d003      	beq.n	80058ac <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fcb0 	bl	800620a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058aa:	e032      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80058ac:	2140      	movs	r1, #64	@ 0x40
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 ffc4 	bl	800683c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b4:	e02d      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
 80058b6:	e02c      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d027      	beq.n	8005912 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d022      	beq.n	8005912 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d119      	bne.n	800590a <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e4:	d015      	beq.n	8005912 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058ee:	d108      	bne.n	8005902 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e007      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fc81 	bl	800620a <I2C_ITMasterSeqCplt>
 8005908:	e003      	b.n	8005912 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800590a:	2140      	movs	r1, #64	@ 0x40
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 ff95 	bl	800683c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fd07 	bl	800633c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <I2C_Slave_ISR_IT+0x24>
 8005960:	2302      	movs	r3, #2
 8005962:	e0e2      	b.n	8005b2a <I2C_Slave_ISR_IT+0x1ea>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005980:	6939      	ldr	r1, [r7, #16]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fda2 	bl	80064cc <I2C_ITSlaveCplt>
 8005988:	e0ca      	b.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d04b      	beq.n	8005a2c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800599a:	2b00      	cmp	r3, #0
 800599c:	d046      	beq.n	8005a2c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d128      	bne.n	80059fa <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b28      	cmp	r3, #40	@ 0x28
 80059b2:	d108      	bne.n	80059c6 <I2C_Slave_ISR_IT+0x86>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ba:	d104      	bne.n	80059c6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059bc:	6939      	ldr	r1, [r7, #16]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fee8 	bl	8006794 <I2C_ITListenCplt>
 80059c4:	e031      	b.n	8005a2a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b29      	cmp	r3, #41	@ 0x29
 80059d0:	d10e      	bne.n	80059f0 <I2C_Slave_ISR_IT+0xb0>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059d8:	d00a      	beq.n	80059f0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2210      	movs	r2, #16
 80059e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f001 f841 	bl	8006a6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fc4b 	bl	8006284 <I2C_ITSlaveSeqCplt>
 80059ee:	e01c      	b.n	8005a2a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2210      	movs	r2, #16
 80059f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80059f8:	e08f      	b.n	8005b1a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <I2C_Slave_ISR_IT+0xdc>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a1a:	d17e      	bne.n	8005b1a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a20:	4619      	mov	r1, r3
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 ff0a 	bl	800683c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a28:	e077      	b.n	8005b1a <I2C_Slave_ISR_IT+0x1da>
 8005a2a:	e076      	b.n	8005b1a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d02f      	beq.n	8005a96 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02a      	beq.n	8005a96 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d018      	beq.n	8005a7c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d14b      	bne.n	8005b1e <I2C_Slave_ISR_IT+0x1de>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a8c:	d047      	beq.n	8005b1e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fbf8 	bl	8006284 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005a94:	e043      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005aaa:	6939      	ldr	r1, [r7, #16]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fb28 	bl	8006102 <I2C_ITAddrCplt>
 8005ab2:	e035      	b.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d030      	beq.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02b      	beq.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b02:	e00d      	b.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b0a:	d002      	beq.n	8005b12 <I2C_Slave_ISR_IT+0x1d2>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fbb6 	bl	8006284 <I2C_ITSlaveSeqCplt>
 8005b18:	e002      	b.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005b1e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af02      	add	r7, sp, #8
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <I2C_Master_ISR_DMA+0x1a>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e0d9      	b.n	8005d00 <I2C_Master_ISR_DMA+0x1ce>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d011      	beq.n	8005b8c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	f043 0204 	orr.w	r2, r3, #4
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 f84a 	bl	8006c18 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 ff70 	bl	8006a6a <I2C_Flush_TXDR>
 8005b8a:	e0b4      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d071      	beq.n	8005c7a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d06c      	beq.n	8005c7a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bae:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04e      	beq.n	8005c58 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2bff      	cmp	r3, #255	@ 0xff
 8005bd0:	d906      	bls.n	8005be0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	22ff      	movs	r2, #255	@ 0xff
 8005bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e010      	b.n	8005c02 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bf2:	d003      	beq.n	8005bfc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e002      	b.n	8005c02 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c00:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	8a79      	ldrh	r1, [r7, #18]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ffcf 	bl	8006bb4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b22      	cmp	r3, #34	@ 0x22
 8005c32:	d108      	bne.n	8005c46 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c44:	e057      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c56:	e04e      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c66:	d003      	beq.n	8005c70 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 face 	bl	800620a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005c6e:	e042      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c70:	2140      	movs	r1, #64	@ 0x40
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fde2 	bl	800683c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005c78:	e03d      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d028      	beq.n	8005cd6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d023      	beq.n	8005cd6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d119      	bne.n	8005ccc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca6:	d025      	beq.n	8005cf4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cb0:	d108      	bne.n	8005cc4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cc0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005cc2:	e017      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 faa0 	bl	800620a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005cca:	e013      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ccc:	2140      	movs	r1, #64	@ 0x40
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fdb4 	bl	800683c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cd4:	e00e      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fb25 	bl	800633c <I2C_ITMasterCplt>
 8005cf2:	e000      	b.n	8005cf6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005cf4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005d14:	4b8d      	ldr	r3, [pc, #564]	@ (8005f4c <I2C_Mem_ISR_DMA+0x244>)
 8005d16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <I2C_Mem_ISR_DMA+0x1e>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e10e      	b.n	8005f44 <I2C_Mem_ISR_DMA+0x23c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d016      	beq.n	8005d66 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d011      	beq.n	8005d66 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2210      	movs	r2, #16
 8005d48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d56:	2120      	movs	r1, #32
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 ff5d 	bl	8006c18 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fe83 	bl	8006a6a <I2C_Flush_TXDR>
 8005d64:	e0e9      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d8c:	e0d5      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05f      	beq.n	8005e58 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d05a      	beq.n	8005e58 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005da2:	2101      	movs	r1, #1
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 ffbb 	bl	8006d20 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005daa:	2110      	movs	r1, #16
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 ff33 	bl	8006c18 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d048      	beq.n	8005e4e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2bff      	cmp	r3, #255	@ 0xff
 8005dc4:	d910      	bls.n	8005de8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	@ 0xff
 8005dca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 fee7 	bl	8006bb4 <I2C_TransferConfig>
 8005de6:	e011      	b.n	8005e0c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df6:	b299      	uxth	r1, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fed4 	bl	8006bb4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b22      	cmp	r3, #34	@ 0x22
 8005e28:	d108      	bne.n	8005e3c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e3a:	e07e      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e4c:	e075      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e4e:	2140      	movs	r1, #64	@ 0x40
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fcf3 	bl	800683c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005e56:	e070      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05d      	beq.n	8005f1e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d058      	beq.n	8005f1e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 ff56 	bl	8006d20 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005e74:	2110      	movs	r1, #16
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fece 	bl	8006c18 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b22      	cmp	r3, #34	@ 0x22
 8005e86:	d101      	bne.n	8005e8c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <I2C_Mem_ISR_DMA+0x248>)
 8005e8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2bff      	cmp	r3, #255	@ 0xff
 8005e94:	d910      	bls.n	8005eb8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea0:	b299      	uxth	r1, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fe7f 	bl	8006bb4 <I2C_TransferConfig>
 8005eb6:	e011      	b.n	8005edc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fe6c 	bl	8006bb4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b22      	cmp	r3, #34	@ 0x22
 8005ef8:	d108      	bne.n	8005f0c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f08:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f0a:	e016      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f1c:	e00d      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa01 	bl	800633c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	80002000 	.word	0x80002000
 8005f50:	80002400 	.word	0x80002400

08005f54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <I2C_Slave_ISR_DMA+0x24>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e0c0      	b.n	80060fa <I2C_Slave_ISR_DMA+0x1a6>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fa98 	bl	80064cc <I2C_ITSlaveCplt>
 8005f9c:	e0a8      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8095 	beq.w	80060d4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 808f 	beq.w	80060d4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07d      	beq.n	80060c6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00c      	beq.n	800600e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800600a:	2301      	movs	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d128      	bne.n	8006066 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b28      	cmp	r3, #40	@ 0x28
 800601e:	d108      	bne.n	8006032 <I2C_Slave_ISR_DMA+0xde>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006026:	d104      	bne.n	8006032 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fbb2 	bl	8006794 <I2C_ITListenCplt>
 8006030:	e048      	b.n	80060c4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b29      	cmp	r3, #41	@ 0x29
 800603c:	d10e      	bne.n	800605c <I2C_Slave_ISR_DMA+0x108>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006044:	d00a      	beq.n	800605c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2210      	movs	r2, #16
 800604c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fd0b 	bl	8006a6a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f915 	bl	8006284 <I2C_ITSlaveSeqCplt>
 800605a:	e033      	b.n	80060c4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006064:	e034      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006080:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <I2C_Slave_ISR_DMA+0x13c>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800608e:	d11f      	bne.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b21      	cmp	r3, #33	@ 0x21
 8006094:	d002      	beq.n	800609c <I2C_Slave_ISR_DMA+0x148>
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	2b29      	cmp	r3, #41	@ 0x29
 800609a:	d103      	bne.n	80060a4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2221      	movs	r2, #33	@ 0x21
 80060a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80060a2:	e008      	b.n	80060b6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b22      	cmp	r3, #34	@ 0x22
 80060a8:	d002      	beq.n	80060b0 <I2C_Slave_ISR_DMA+0x15c>
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ae:	d102      	bne.n	80060b6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	@ 0x22
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fbbd 	bl	800683c <I2C_ITError>
      if (treatdmanack == 1U)
 80060c2:	e005      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
 80060c4:	e004      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060ce:	e00f      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80060d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060d2:	e00d      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f809 	bl	8006102 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006118:	2b28      	cmp	r3, #40	@ 0x28
 800611a:	d16a      	bne.n	80061f2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b29b      	uxth	r3, r3
 8006136:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800613a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006148:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006156:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d138      	bne.n	80061d2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006160:	897b      	ldrh	r3, [r7, #10]
 8006162:	09db      	lsrs	r3, r3, #7
 8006164:	b29a      	uxth	r2, r3
 8006166:	89bb      	ldrh	r3, [r7, #12]
 8006168:	4053      	eors	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	f003 0306 	and.w	r3, r3, #6
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11c      	bne.n	80061ae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006174:	897b      	ldrh	r3, [r7, #10]
 8006176:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006186:	2b02      	cmp	r3, #2
 8006188:	d13b      	bne.n	8006202 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061a0:	89ba      	ldrh	r2, [r7, #12]
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fa55 	bl	8005656 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80061ac:	e029      	b.n	8006202 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80061ae:	893b      	ldrh	r3, [r7, #8]
 80061b0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fdb2 	bl	8006d20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061c4:	89ba      	ldrh	r2, [r7, #12]
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fa43 	bl	8005656 <HAL_I2C_AddrCallback>
}
 80061d0:	e017      	b.n	8006202 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fda2 	bl	8006d20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061e4:	89ba      	ldrh	r2, [r7, #12]
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fa33 	bl	8005656 <HAL_I2C_AddrCallback>
}
 80061f0:	e007      	b.n	8006202 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2208      	movs	r2, #8
 80061f8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b21      	cmp	r3, #33	@ 0x21
 8006224:	d115      	bne.n	8006252 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2211      	movs	r2, #17
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800623a:	2101      	movs	r1, #1
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fd6f 	bl	8006d20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff f9db 	bl	8005606 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006250:	e014      	b.n	800627c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2212      	movs	r2, #18
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006266:	2102      	movs	r1, #2
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fd59 	bl	8006d20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff f9cf 	bl	800561a <HAL_I2C_MasterRxCpltCallback>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e00c      	b.n	80062d2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b29      	cmp	r3, #41	@ 0x29
 80062dc:	d112      	bne.n	8006304 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2228      	movs	r2, #40	@ 0x28
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2221      	movs	r2, #33	@ 0x21
 80062ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062ec:	2101      	movs	r1, #1
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fd16 	bl	8006d20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f996 	bl	800562e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006302:	e017      	b.n	8006334 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b2a      	cmp	r3, #42	@ 0x2a
 800630e:	d111      	bne.n	8006334 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2228      	movs	r2, #40	@ 0x28
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2222      	movs	r2, #34	@ 0x22
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800631e:	2102      	movs	r1, #2
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fcfd 	bl	8006d20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f987 	bl	8005642 <HAL_I2C_SlaveRxCpltCallback>
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2220      	movs	r2, #32
 8006350:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b21      	cmp	r3, #33	@ 0x21
 800635c:	d107      	bne.n	800636e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fcdd 	bl	8006d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2211      	movs	r2, #17
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
 800636c:	e00c      	b.n	8006388 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b22      	cmp	r3, #34	@ 0x22
 8006378:	d106      	bne.n	8006388 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800637a:	2102      	movs	r1, #2
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fccf 	bl	8006d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2212      	movs	r2, #18
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b4c      	ldr	r3, [pc, #304]	@ (80064c4 <I2C_ITMasterCplt+0x188>)
 8006394:	400b      	ands	r3, r1
 8006396:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a49      	ldr	r2, [pc, #292]	@ (80064c8 <I2C_ITMasterCplt+0x18c>)
 80063a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2210      	movs	r2, #16
 80063b4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b60      	cmp	r3, #96	@ 0x60
 80063cc:	d10a      	bne.n	80063e4 <I2C_ITMasterCplt+0xa8>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80063e2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb40 	bl	8006a6a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	d002      	beq.n	8006402 <I2C_ITMasterCplt+0xc6>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa17 	bl	800683c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800640e:	e054      	b.n	80064ba <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b21      	cmp	r3, #33	@ 0x21
 800641a:	d124      	bne.n	8006466 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d10b      	bne.n	800644e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff f91d 	bl	8005686 <HAL_I2C_MemTxCpltCallback>
}
 800644c:	e035      	b.n	80064ba <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff f8d1 	bl	8005606 <HAL_I2C_MasterTxCpltCallback>
}
 8006464:	e029      	b.n	80064ba <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b22      	cmp	r3, #34	@ 0x22
 8006470:	d123      	bne.n	80064ba <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b40      	cmp	r3, #64	@ 0x40
 800648a:	d10b      	bne.n	80064a4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff f8fc 	bl	800569a <HAL_I2C_MemRxCpltCallback>
}
 80064a2:	e00a      	b.n	80064ba <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff f8b0 	bl	800561a <HAL_I2C_MasterRxCpltCallback>
}
 80064ba:	bf00      	nop
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	fe00e800 	.word	0xfe00e800
 80064c8:	ffff0000 	.word	0xffff0000

080064cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2220      	movs	r2, #32
 80064f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	2b21      	cmp	r3, #33	@ 0x21
 80064fc:	d002      	beq.n	8006504 <I2C_ITSlaveCplt+0x38>
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	2b29      	cmp	r3, #41	@ 0x29
 8006502:	d108      	bne.n	8006516 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006504:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fc09 	bl	8006d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2221      	movs	r2, #33	@ 0x21
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30
 8006514:	e019      	b.n	800654a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	2b22      	cmp	r3, #34	@ 0x22
 800651a:	d002      	beq.n	8006522 <I2C_ITSlaveCplt+0x56>
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006520:	d108      	bne.n	8006534 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006522:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fbfa 	bl	8006d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2222      	movs	r2, #34	@ 0x22
 8006530:	631a      	str	r2, [r3, #48]	@ 0x30
 8006532:	e00a      	b.n	800654a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	2b28      	cmp	r3, #40	@ 0x28
 8006538:	d107      	bne.n	800654a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800653a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fbee 	bl	8006d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006558:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b89      	ldr	r3, [pc, #548]	@ (800678c <I2C_ITSlaveCplt+0x2c0>)
 8006566:	400b      	ands	r3, r1
 8006568:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa7d 	bl	8006a6a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006588:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01f      	beq.n	80065d2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065a0:	e017      	b.n	80065d2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d012      	beq.n	80065d2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d006      	beq.n	80065d2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d020      	beq.n	800661e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0304 	bic.w	r3, r3, #4
 80065e2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662c:	f043 0204 	orr.w	r2, r3, #4
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	d049      	beq.n	80066d2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006644:	2b00      	cmp	r3, #0
 8006646:	d044      	beq.n	80066d2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d128      	bne.n	80066a4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b28      	cmp	r3, #40	@ 0x28
 800665c:	d108      	bne.n	8006670 <I2C_ITSlaveCplt+0x1a4>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006664:	d104      	bne.n	8006670 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f893 	bl	8006794 <I2C_ITListenCplt>
 800666e:	e030      	b.n	80066d2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b29      	cmp	r3, #41	@ 0x29
 800667a:	d10e      	bne.n	800669a <I2C_ITSlaveCplt+0x1ce>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006682:	d00a      	beq.n	800669a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2210      	movs	r2, #16
 800668a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9ec 	bl	8006a6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fdf6 	bl	8006284 <I2C_ITSlaveSeqCplt>
 8006698:	e01b      	b.n	80066d2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2210      	movs	r2, #16
 80066a0:	61da      	str	r2, [r3, #28]
 80066a2:	e016      	b.n	80066d2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2210      	movs	r2, #16
 80066aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b0:	f043 0204 	orr.w	r2, r3, #4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <I2C_ITSlaveCplt+0x1fa>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066c4:	d105      	bne.n	80066d2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8b5 	bl	800683c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8a4 	bl	800683c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b28      	cmp	r3, #40	@ 0x28
 80066fe:	d141      	bne.n	8006784 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006700:	6979      	ldr	r1, [r7, #20]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f846 	bl	8006794 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006708:	e03c      	b.n	8006784 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006712:	d014      	beq.n	800673e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fdb5 	bl	8006284 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <I2C_ITSlaveCplt+0x2c4>)
 800671e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fe ff9b 	bl	8005672 <HAL_I2C_ListenCpltCallback>
}
 800673c:	e022      	b.n	8006784 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b22      	cmp	r3, #34	@ 0x22
 8006748:	d10e      	bne.n	8006768 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fe ff6e 	bl	8005642 <HAL_I2C_SlaveRxCpltCallback>
}
 8006766:	e00d      	b.n	8006784 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fe ff55 	bl	800562e <HAL_I2C_SlaveTxCpltCallback>
}
 8006784:	bf00      	nop
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	fe00e800 	.word	0xfe00e800
 8006790:	ffff0000 	.word	0xffff0000

08006794 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a25      	ldr	r2, [pc, #148]	@ (8006838 <I2C_ITListenCplt+0xa4>)
 80067a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d022      	beq.n	8006810 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d012      	beq.n	8006810 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006808:	f043 0204 	orr.w	r2, r3, #4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006810:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa83 	bl	8006d20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2210      	movs	r2, #16
 8006820:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fe ff21 	bl	8005672 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	ffff0000 	.word	0xffff0000

0800683c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a6d      	ldr	r2, [pc, #436]	@ (8006a10 <I2C_ITError+0x1d4>)
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b28      	cmp	r3, #40	@ 0x28
 8006872:	d005      	beq.n	8006880 <I2C_ITError+0x44>
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b29      	cmp	r3, #41	@ 0x29
 8006878:	d002      	beq.n	8006880 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b2a      	cmp	r3, #42	@ 0x2a
 800687e:	d10b      	bne.n	8006898 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006880:	2103      	movs	r1, #3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa4c 	bl	8006d20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2228      	movs	r2, #40	@ 0x28
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a60      	ldr	r2, [pc, #384]	@ (8006a14 <I2C_ITError+0x1d8>)
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34
 8006896:	e030      	b.n	80068fa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006898:	f248 0103 	movw	r1, #32771	@ 0x8003
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa3f 	bl	8006d20 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f8e1 	bl	8006a6a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b60      	cmp	r3, #96	@ 0x60
 80068b2:	d01f      	beq.n	80068f4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d114      	bne.n	80068f4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d109      	bne.n	80068ec <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2210      	movs	r2, #16
 80068de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e4:	f043 0204 	orr.w	r2, r3, #4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2220      	movs	r2, #32
 80068f2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d039      	beq.n	800697c <I2C_ITError+0x140>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b11      	cmp	r3, #17
 800690c:	d002      	beq.n	8006914 <I2C_ITError+0xd8>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b21      	cmp	r3, #33	@ 0x21
 8006912:	d133      	bne.n	800697c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800691e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006922:	d107      	bne.n	8006934 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006932:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe f9d5 	bl	8004ce8 <HAL_DMA_GetState>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d017      	beq.n	8006974 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	4a33      	ldr	r2, [pc, #204]	@ (8006a18 <I2C_ITError+0x1dc>)
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe f8af 	bl	8004abc <HAL_DMA_Abort_IT>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d04d      	beq.n	8006a00 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800696e:	4610      	mov	r0, r2
 8006970:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006972:	e045      	b.n	8006a00 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f851 	bl	8006a1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800697a:	e041      	b.n	8006a00 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d039      	beq.n	80069f8 <I2C_ITError+0x1bc>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b12      	cmp	r3, #18
 8006988:	d002      	beq.n	8006990 <I2C_ITError+0x154>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b22      	cmp	r3, #34	@ 0x22
 800698e:	d133      	bne.n	80069f8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699e:	d107      	bne.n	80069b0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe f997 	bl	8004ce8 <HAL_DMA_GetState>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d017      	beq.n	80069f0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <I2C_ITError+0x1dc>)
 80069c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe f871 	bl	8004abc <HAL_DMA_Abort_IT>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d011      	beq.n	8006a04 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069ea:	4610      	mov	r0, r2
 80069ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069ee:	e009      	b.n	8006a04 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f813 	bl	8006a1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069f6:	e005      	b.n	8006a04 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f80f 	bl	8006a1c <I2C_TreatErrorCallback>
  }
}
 80069fe:	e002      	b.n	8006a06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a04:	bf00      	nop
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	ffff0000 	.word	0xffff0000
 8006a14:	08005941 	.word	0x08005941
 8006a18:	08006b77 	.word	0x08006b77

08006a1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b60      	cmp	r3, #96	@ 0x60
 8006a2e:	d10e      	bne.n	8006a4e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe fe3b 	bl	80056c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a4c:	e009      	b.n	8006a62 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fe fe26 	bl	80056ae <HAL_I2C_ErrorCallback>
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d103      	bne.n	8006a88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2200      	movs	r2, #0
 8006a86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d007      	beq.n	8006aa6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	619a      	str	r2, [r3, #24]
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ace:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ada:	2120      	movs	r1, #32
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f89b 	bl	8006c18 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ae2:	e02d      	b.n	8006b40 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2bff      	cmp	r3, #255	@ 0xff
 8006afa:	d903      	bls.n	8006b04 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	22ff      	movs	r2, #255	@ 0xff
 8006b00:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b02:	e004      	b.n	8006b0e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	4619      	mov	r1, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3328      	adds	r3, #40	@ 0x28
 8006b1e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006b24:	f7fd fef6 	bl	8004914 <HAL_DMA_Start_IT>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b2e:	2110      	movs	r1, #16
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff fe83 	bl	800683c <I2C_ITError>
}
 8006b36:	e003      	b.n	8006b40 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b38:	2140      	movs	r1, #64	@ 0x40
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f86c 	bl	8006c18 <I2C_Enable_IRQ>
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b64:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b66:	2110      	movs	r1, #16
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff fe67 	bl	800683c <I2C_ITError>
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	2200      	movs	r2, #0
 8006b92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff ff39 	bl	8006a1c <I2C_TreatErrorCallback>
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	817b      	strh	r3, [r7, #10]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bcc:	7a7b      	ldrb	r3, [r7, #9]
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006be2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	0d5b      	lsrs	r3, r3, #21
 8006bee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006bf2:	4b08      	ldr	r3, [pc, #32]	@ (8006c14 <I2C_TransferConfig+0x60>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	ea02 0103 	and.w	r1, r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	03ff63ff 	.word	0x03ff63ff

08006c18 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2c:	4a39      	ldr	r2, [pc, #228]	@ (8006d14 <I2C_Enable_IRQ+0xfc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d032      	beq.n	8006c98 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006c36:	4a38      	ldr	r2, [pc, #224]	@ (8006d18 <I2C_Enable_IRQ+0x100>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d02d      	beq.n	8006c98 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006c40:	4a36      	ldr	r2, [pc, #216]	@ (8006d1c <I2C_Enable_IRQ+0x104>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d028      	beq.n	8006c98 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da03      	bge.n	8006c56 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006c66:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c68:	887b      	ldrh	r3, [r7, #2]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006c78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c7a:	887b      	ldrh	r3, [r7, #2]
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d103      	bne.n	8006c88 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d133      	bne.n	8006cf6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c96:	e02e      	b.n	8006cf6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da03      	bge.n	8006ca8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ca6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ca8:	887b      	ldrh	r3, [r7, #2]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006cb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006cba:	887b      	ldrh	r3, [r7, #2]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006cca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	2b10      	cmp	r3, #16
 8006cd0:	d103      	bne.n	8006cda <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006cd8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cda:	887b      	ldrh	r3, [r7, #2]
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d103      	bne.n	8006ce8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006ce6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	2b40      	cmp	r3, #64	@ 0x40
 8006cec:	d103      	bne.n	8006cf6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6819      	ldr	r1, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	08005b33 	.word	0x08005b33
 8006d18:	08005f55 	.word	0x08005f55
 8006d1c:	08005d09 	.word	0x08005d09

08006d20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00f      	beq.n	8006d5a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006d40:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d4e:	2b28      	cmp	r3, #40	@ 0x28
 8006d50:	d003      	beq.n	8006d5a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006d58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d5a:	887b      	ldrh	r3, [r7, #2]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00f      	beq.n	8006d84 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006d6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d78:	2b28      	cmp	r3, #40	@ 0x28
 8006d7a:	d003      	beq.n	8006d84 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006d82:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da03      	bge.n	8006d94 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006d92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d94:	887b      	ldrh	r3, [r7, #2]
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d103      	bne.n	8006da2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006da2:	887b      	ldrh	r3, [r7, #2]
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d103      	bne.n	8006db0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f043 0320 	orr.w	r3, r3, #32
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006db0:	887b      	ldrh	r3, [r7, #2]
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d103      	bne.n	8006dbe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	400a      	ands	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d138      	bne.n	8006e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e032      	b.n	8006e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2224      	movs	r2, #36	@ 0x24
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6819      	ldr	r1, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d139      	bne.n	8006efc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e033      	b.n	8006efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2224      	movs	r2, #36	@ 0x24
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ec4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d141      	bne.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f26:	d131      	bne.n	8006f8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f28:	4b47      	ldr	r3, [pc, #284]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f2e:	4a46      	ldr	r2, [pc, #280]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f38:	4b43      	ldr	r3, [pc, #268]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f40:	4a41      	ldr	r2, [pc, #260]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f48:	4b40      	ldr	r3, [pc, #256]	@ (800704c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2232      	movs	r2, #50	@ 0x32
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	4a3f      	ldr	r2, [pc, #252]	@ (8007050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	0c9b      	lsrs	r3, r3, #18
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f5e:	e002      	b.n	8006f66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f66:	4b38      	ldr	r3, [pc, #224]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f72:	d102      	bne.n	8006f7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f2      	bne.n	8006f60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f7a:	4b33      	ldr	r3, [pc, #204]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f86:	d158      	bne.n	800703a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e057      	b.n	800703c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f92:	4a2d      	ldr	r2, [pc, #180]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f9c:	e04d      	b.n	800703a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa4:	d141      	bne.n	800702a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fa6:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb2:	d131      	bne.n	8007018 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fb4:	4b24      	ldr	r3, [pc, #144]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fba:	4a23      	ldr	r2, [pc, #140]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fc4:	4b20      	ldr	r3, [pc, #128]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2232      	movs	r2, #50	@ 0x32
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	4a1c      	ldr	r2, [pc, #112]	@ (8007050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	0c9b      	lsrs	r3, r3, #18
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fea:	e002      	b.n	8006ff2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ff2:	4b15      	ldr	r3, [pc, #84]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ffe:	d102      	bne.n	8007006 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f2      	bne.n	8006fec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007006:	4b10      	ldr	r3, [pc, #64]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800700e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007012:	d112      	bne.n	800703a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e011      	b.n	800703c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800701a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701e:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007028:	e007      	b.n	800703a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800702a:	4b07      	ldr	r3, [pc, #28]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007032:	4a05      	ldr	r2, [pc, #20]	@ (8007048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007034:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007038:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40007000 	.word	0x40007000
 800704c:	20000000 	.word	0x20000000
 8007050:	431bde83 	.word	0x431bde83

08007054 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007058:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4a04      	ldr	r2, [pc, #16]	@ (8007070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800705e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007062:	6093      	str	r3, [r2, #8]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40007000 	.word	0x40007000

08007074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e2fe      	b.n	8007684 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d075      	beq.n	800717e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007092:	4b97      	ldr	r3, [pc, #604]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800709c:	4b94      	ldr	r3, [pc, #592]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d102      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3e>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d002      	beq.n	80070b8 <HAL_RCC_OscConfig+0x44>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d10b      	bne.n	80070d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b8:	4b8d      	ldr	r3, [pc, #564]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d05b      	beq.n	800717c <HAL_RCC_OscConfig+0x108>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d157      	bne.n	800717c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e2d9      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d106      	bne.n	80070e8 <HAL_RCC_OscConfig+0x74>
 80070da:	4b85      	ldr	r3, [pc, #532]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a84      	ldr	r2, [pc, #528]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80070e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e01d      	b.n	8007124 <HAL_RCC_OscConfig+0xb0>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0x98>
 80070f2:	4b7f      	ldr	r3, [pc, #508]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7e      	ldr	r2, [pc, #504]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80070f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b7c      	ldr	r3, [pc, #496]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7b      	ldr	r2, [pc, #492]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e00b      	b.n	8007124 <HAL_RCC_OscConfig+0xb0>
 800710c:	4b78      	ldr	r3, [pc, #480]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a77      	ldr	r2, [pc, #476]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	4b75      	ldr	r3, [pc, #468]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a74      	ldr	r2, [pc, #464]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800711e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fb fd94 	bl	8002c58 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007134:	f7fb fd90 	bl	8002c58 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	@ 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e29e      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007146:	4b6a      	ldr	r3, [pc, #424]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0xc0>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fb fd80 	bl	8002c58 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800715c:	f7fb fd7c 	bl	8002c58 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	@ 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e28a      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800716e:	4b60      	ldr	r3, [pc, #384]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0xe8>
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800717c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d075      	beq.n	8007276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800718a:	4b59      	ldr	r3, [pc, #356]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
 8007192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007194:	4b56      	ldr	r3, [pc, #344]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d102      	bne.n	80071aa <HAL_RCC_OscConfig+0x136>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d002      	beq.n	80071b0 <HAL_RCC_OscConfig+0x13c>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d11f      	bne.n	80071f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b0:	4b4f      	ldr	r3, [pc, #316]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_RCC_OscConfig+0x154>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e25d      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c8:	4b49      	ldr	r3, [pc, #292]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	4946      	ldr	r1, [pc, #280]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071dc:	4b45      	ldr	r3, [pc, #276]	@ (80072f4 <HAL_RCC_OscConfig+0x280>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fb fced 	bl	8002bc0 <HAL_InitTick>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d043      	beq.n	8007274 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e249      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d023      	beq.n	8007240 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071f8:	4b3d      	ldr	r3, [pc, #244]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3c      	ldr	r2, [pc, #240]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80071fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fb fd28 	bl	8002c58 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800720c:	f7fb fd24 	bl	8002c58 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e232      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800721e:	4b34      	ldr	r3, [pc, #208]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722a:	4b31      	ldr	r3, [pc, #196]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	061b      	lsls	r3, r3, #24
 8007238:	492d      	ldr	r1, [pc, #180]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	604b      	str	r3, [r1, #4]
 800723e:	e01a      	b.n	8007276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007240:	4b2b      	ldr	r3, [pc, #172]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2a      	ldr	r2, [pc, #168]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800724a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fb fd04 	bl	8002c58 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007254:	f7fb fd00 	bl	8002c58 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e20e      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007266:	4b22      	ldr	r3, [pc, #136]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x1e0>
 8007272:	e000      	b.n	8007276 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007274:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d041      	beq.n	8007306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01c      	beq.n	80072c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728a:	4b19      	ldr	r3, [pc, #100]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 800728c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007290:	4a17      	ldr	r2, [pc, #92]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729a:	f7fb fcdd 	bl	8002c58 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a2:	f7fb fcd9 	bl	8002c58 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e1e7      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072b4:	4b0e      	ldr	r3, [pc, #56]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80072b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ef      	beq.n	80072a2 <HAL_RCC_OscConfig+0x22e>
 80072c2:	e020      	b.n	8007306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c4:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80072c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ca:	4a09      	ldr	r2, [pc, #36]	@ (80072f0 <HAL_RCC_OscConfig+0x27c>)
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fb fcc0 	bl	8002c58 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072da:	e00d      	b.n	80072f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072dc:	f7fb fcbc 	bl	8002c58 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d906      	bls.n	80072f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e1ca      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
 80072ee:	bf00      	nop
 80072f0:	40021000 	.word	0x40021000
 80072f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072f8:	4b8c      	ldr	r3, [pc, #560]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80072fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1ea      	bne.n	80072dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 80a6 	beq.w	8007460 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007314:	2300      	movs	r3, #0
 8007316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007318:	4b84      	ldr	r3, [pc, #528]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_RCC_OscConfig+0x2b4>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <HAL_RCC_OscConfig+0x2b6>
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732e:	4b7f      	ldr	r3, [pc, #508]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007332:	4a7e      	ldr	r2, [pc, #504]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007338:	6593      	str	r3, [r2, #88]	@ 0x58
 800733a:	4b7c      	ldr	r3, [pc, #496]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800734a:	4b79      	ldr	r3, [pc, #484]	@ (8007530 <HAL_RCC_OscConfig+0x4bc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d118      	bne.n	8007388 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007356:	4b76      	ldr	r3, [pc, #472]	@ (8007530 <HAL_RCC_OscConfig+0x4bc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a75      	ldr	r2, [pc, #468]	@ (8007530 <HAL_RCC_OscConfig+0x4bc>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007362:	f7fb fc79 	bl	8002c58 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736a:	f7fb fc75 	bl	8002c58 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e183      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800737c:	4b6c      	ldr	r3, [pc, #432]	@ (8007530 <HAL_RCC_OscConfig+0x4bc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d108      	bne.n	80073a2 <HAL_RCC_OscConfig+0x32e>
 8007390:	4b66      	ldr	r3, [pc, #408]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007396:	4a65      	ldr	r2, [pc, #404]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073a0:	e024      	b.n	80073ec <HAL_RCC_OscConfig+0x378>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d110      	bne.n	80073cc <HAL_RCC_OscConfig+0x358>
 80073aa:	4b60      	ldr	r3, [pc, #384]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b0:	4a5e      	ldr	r2, [pc, #376]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073b2:	f043 0304 	orr.w	r3, r3, #4
 80073b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073ba:	4b5c      	ldr	r3, [pc, #368]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	4a5a      	ldr	r2, [pc, #360]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073ca:	e00f      	b.n	80073ec <HAL_RCC_OscConfig+0x378>
 80073cc:	4b57      	ldr	r3, [pc, #348]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	4a56      	ldr	r2, [pc, #344]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073dc:	4b53      	ldr	r3, [pc, #332]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e2:	4a52      	ldr	r2, [pc, #328]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80073e4:	f023 0304 	bic.w	r3, r3, #4
 80073e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d016      	beq.n	8007422 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fb fc30 	bl	8002c58 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073fa:	e00a      	b.n	8007412 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fc:	f7fb fc2c 	bl	8002c58 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e138      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007412:	4b46      	ldr	r3, [pc, #280]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ed      	beq.n	80073fc <HAL_RCC_OscConfig+0x388>
 8007420:	e015      	b.n	800744e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007422:	f7fb fc19 	bl	8002c58 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742a:	f7fb fc15 	bl	8002c58 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007438:	4293      	cmp	r3, r2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e121      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007440:	4b3a      	ldr	r3, [pc, #232]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1ed      	bne.n	800742a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800744e:	7ffb      	ldrb	r3, [r7, #31]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d105      	bne.n	8007460 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007454:	4b35      	ldr	r3, [pc, #212]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007458:	4a34      	ldr	r2, [pc, #208]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 800745a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d03c      	beq.n	80074e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01c      	beq.n	80074ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007474:	4b2d      	ldr	r3, [pc, #180]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800747a:	4a2c      	ldr	r2, [pc, #176]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 800747c:	f043 0301 	orr.w	r3, r3, #1
 8007480:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007484:	f7fb fbe8 	bl	8002c58 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800748c:	f7fb fbe4 	bl	8002c58 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e0f2      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800749e:	4b23      	ldr	r3, [pc, #140]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80074a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0ef      	beq.n	800748c <HAL_RCC_OscConfig+0x418>
 80074ac:	e01b      	b.n	80074e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074ae:	4b1f      	ldr	r3, [pc, #124]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80074b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074b4:	4a1d      	ldr	r2, [pc, #116]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074be:	f7fb fbcb 	bl	8002c58 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074c6:	f7fb fbc7 	bl	8002c58 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e0d5      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074d8:	4b14      	ldr	r3, [pc, #80]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80074da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1ef      	bne.n	80074c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80c9 	beq.w	8007682 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074f0:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 030c 	and.w	r3, r3, #12
 80074f8:	2b0c      	cmp	r3, #12
 80074fa:	f000 8083 	beq.w	8007604 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d15e      	bne.n	80075c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a08      	ldr	r2, [pc, #32]	@ (800752c <HAL_RCC_OscConfig+0x4b8>)
 800750c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007512:	f7fb fba1 	bl	8002c58 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007518:	e00c      	b.n	8007534 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800751a:	f7fb fb9d 	bl	8002c58 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d905      	bls.n	8007534 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e0ab      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
 800752c:	40021000 	.word	0x40021000
 8007530:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007534:	4b55      	ldr	r3, [pc, #340]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1ec      	bne.n	800751a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007540:	4b52      	ldr	r3, [pc, #328]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	4b52      	ldr	r3, [pc, #328]	@ (8007690 <HAL_RCC_OscConfig+0x61c>)
 8007546:	4013      	ands	r3, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6a11      	ldr	r1, [r2, #32]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007550:	3a01      	subs	r2, #1
 8007552:	0112      	lsls	r2, r2, #4
 8007554:	4311      	orrs	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800755a:	0212      	lsls	r2, r2, #8
 800755c:	4311      	orrs	r1, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007562:	0852      	lsrs	r2, r2, #1
 8007564:	3a01      	subs	r2, #1
 8007566:	0552      	lsls	r2, r2, #21
 8007568:	4311      	orrs	r1, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800756e:	0852      	lsrs	r2, r2, #1
 8007570:	3a01      	subs	r2, #1
 8007572:	0652      	lsls	r2, r2, #25
 8007574:	4311      	orrs	r1, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800757a:	06d2      	lsls	r2, r2, #27
 800757c:	430a      	orrs	r2, r1
 800757e:	4943      	ldr	r1, [pc, #268]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007580:	4313      	orrs	r3, r2
 8007582:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007584:	4b41      	ldr	r3, [pc, #260]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a40      	ldr	r2, [pc, #256]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 800758a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800758e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007590:	4b3e      	ldr	r3, [pc, #248]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	4a3d      	ldr	r2, [pc, #244]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800759a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fb fb5c 	bl	8002c58 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a4:	f7fb fb58 	bl	8002c58 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e066      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b6:	4b35      	ldr	r3, [pc, #212]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCC_OscConfig+0x530>
 80075c2:	e05e      	b.n	8007682 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c4:	4b31      	ldr	r3, [pc, #196]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a30      	ldr	r2, [pc, #192]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fb fb42 	bl	8002c58 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fb fb3e 	bl	8002c58 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e04c      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ea:	4b28      	ldr	r3, [pc, #160]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f0      	bne.n	80075d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80075f6:	4b25      	ldr	r3, [pc, #148]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	4924      	ldr	r1, [pc, #144]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 80075fc:	4b25      	ldr	r3, [pc, #148]	@ (8007694 <HAL_RCC_OscConfig+0x620>)
 80075fe:	4013      	ands	r3, r2
 8007600:	60cb      	str	r3, [r1, #12]
 8007602:	e03e      	b.n	8007682 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e039      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007610:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <HAL_RCC_OscConfig+0x618>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f003 0203 	and.w	r2, r3, #3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	429a      	cmp	r2, r3
 8007622:	d12c      	bne.n	800767e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	3b01      	subs	r3, #1
 8007630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d123      	bne.n	800767e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007642:	429a      	cmp	r2, r3
 8007644:	d11b      	bne.n	800767e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007652:	429a      	cmp	r2, r3
 8007654:	d113      	bne.n	800767e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	3b01      	subs	r3, #1
 8007664:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007666:	429a      	cmp	r2, r3
 8007668:	d109      	bne.n	800767e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	3b01      	subs	r3, #1
 8007678:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800767a:	429a      	cmp	r2, r3
 800767c:	d001      	beq.n	8007682 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000
 8007690:	019f800c 	.word	0x019f800c
 8007694:	feeefffc 	.word	0xfeeefffc

08007698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e11e      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076b0:	4b91      	ldr	r3, [pc, #580]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d910      	bls.n	80076e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b8e      	ldr	r3, [pc, #568]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 020f 	bic.w	r2, r3, #15
 80076c6:	498c      	ldr	r1, [pc, #560]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ce:	4b8a      	ldr	r3, [pc, #552]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e106      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d073      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d129      	bne.n	8007748 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f4:	4b81      	ldr	r3, [pc, #516]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0f4      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007704:	f000 f99e 	bl	8007a44 <RCC_GetSysClockFreqFromPLLSource>
 8007708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4a7c      	ldr	r2, [pc, #496]	@ (8007900 <HAL_RCC_ClockConfig+0x268>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d93f      	bls.n	8007792 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007712:	4b7a      	ldr	r3, [pc, #488]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007726:	2b00      	cmp	r3, #0
 8007728:	d033      	beq.n	8007792 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800772e:	2b00      	cmp	r3, #0
 8007730:	d12f      	bne.n	8007792 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007732:	4b72      	ldr	r3, [pc, #456]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800773a:	4a70      	ldr	r2, [pc, #448]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 800773c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007740:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007742:	2380      	movs	r3, #128	@ 0x80
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	e024      	b.n	8007792 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d107      	bne.n	8007760 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007750:	4b6a      	ldr	r3, [pc, #424]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0c6      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007760:	4b66      	ldr	r3, [pc, #408]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0be      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007770:	f000 f8ce 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 8007774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4a61      	ldr	r2, [pc, #388]	@ (8007900 <HAL_RCC_ClockConfig+0x268>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d909      	bls.n	8007792 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800777e:	4b5f      	ldr	r3, [pc, #380]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007786:	4a5d      	ldr	r2, [pc, #372]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800778e:	2380      	movs	r3, #128	@ 0x80
 8007790:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007792:	4b5a      	ldr	r3, [pc, #360]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f023 0203 	bic.w	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4957      	ldr	r1, [pc, #348]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a4:	f7fb fa58 	bl	8002c58 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	e00a      	b.n	80077c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ac:	f7fb fa54 	bl	8002c58 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e095      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c2:	4b4e      	ldr	r3, [pc, #312]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 020c 	and.w	r2, r3, #12
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d1eb      	bne.n	80077ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d023      	beq.n	8007828 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077ec:	4b43      	ldr	r3, [pc, #268]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	4a42      	ldr	r2, [pc, #264]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80077f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80077f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007804:	4b3d      	ldr	r3, [pc, #244]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800780c:	4a3b      	ldr	r2, [pc, #236]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 800780e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007814:	4b39      	ldr	r3, [pc, #228]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4936      	ldr	r1, [pc, #216]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
 8007826:	e008      	b.n	800783a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b80      	cmp	r3, #128	@ 0x80
 800782c:	d105      	bne.n	800783a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800782e:	4b33      	ldr	r3, [pc, #204]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	4a32      	ldr	r2, [pc, #200]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007834:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007838:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800783a:	4b2f      	ldr	r3, [pc, #188]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d21d      	bcs.n	8007884 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007848:	4b2b      	ldr	r3, [pc, #172]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f023 020f 	bic.w	r2, r3, #15
 8007850:	4929      	ldr	r1, [pc, #164]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	4313      	orrs	r3, r2
 8007856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007858:	f7fb f9fe 	bl	8002c58 <HAL_GetTick>
 800785c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800785e:	e00a      	b.n	8007876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007860:	f7fb f9fa 	bl	8002c58 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e03b      	b.n	80078ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007876:	4b20      	ldr	r3, [pc, #128]	@ (80078f8 <HAL_RCC_ClockConfig+0x260>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d1ed      	bne.n	8007860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007890:	4b1a      	ldr	r3, [pc, #104]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4917      	ldr	r1, [pc, #92]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ae:	4b13      	ldr	r3, [pc, #76]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	490f      	ldr	r1, [pc, #60]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078c2:	f000 f825 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 80078c6:	4602      	mov	r2, r0
 80078c8:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <HAL_RCC_ClockConfig+0x264>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	490c      	ldr	r1, [pc, #48]	@ (8007904 <HAL_RCC_ClockConfig+0x26c>)
 80078d4:	5ccb      	ldrb	r3, [r1, r3]
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	4a0a      	ldr	r2, [pc, #40]	@ (8007908 <HAL_RCC_ClockConfig+0x270>)
 80078e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80078e2:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <HAL_RCC_ClockConfig+0x274>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fb f96a 	bl	8002bc0 <HAL_InitTick>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40022000 	.word	0x40022000
 80078fc:	40021000 	.word	0x40021000
 8007900:	04c4b400 	.word	0x04c4b400
 8007904:	0800bc50 	.word	0x0800bc50
 8007908:	20000000 	.word	0x20000000
 800790c:	20000004 	.word	0x20000004

08007910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007916:	4b2c      	ldr	r3, [pc, #176]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 030c 	and.w	r3, r3, #12
 800791e:	2b04      	cmp	r3, #4
 8007920:	d102      	bne.n	8007928 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007922:	4b2a      	ldr	r3, [pc, #168]	@ (80079cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	e047      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b08      	cmp	r3, #8
 8007932:	d102      	bne.n	800793a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007934:	4b26      	ldr	r3, [pc, #152]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	e03e      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800793a:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 030c 	and.w	r3, r3, #12
 8007942:	2b0c      	cmp	r3, #12
 8007944:	d136      	bne.n	80079b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007946:	4b20      	ldr	r3, [pc, #128]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007950:	4b1d      	ldr	r3, [pc, #116]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	3301      	adds	r3, #1
 800795c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d10c      	bne.n	800797e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007964:	4a1a      	ldr	r2, [pc, #104]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800796e:	68d2      	ldr	r2, [r2, #12]
 8007970:	0a12      	lsrs	r2, r2, #8
 8007972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
      break;
 800797c:	e00c      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800797e:	4a13      	ldr	r2, [pc, #76]	@ (80079cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4a10      	ldr	r2, [pc, #64]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007988:	68d2      	ldr	r2, [r2, #12]
 800798a:	0a12      	lsrs	r2, r2, #8
 800798c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
      break;
 8007996:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007998:	4b0b      	ldr	r3, [pc, #44]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0e5b      	lsrs	r3, r3, #25
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	3301      	adds	r3, #1
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	e001      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80079b8:	693b      	ldr	r3, [r7, #16]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40021000 	.word	0x40021000
 80079cc:	00f42400 	.word	0x00f42400
 80079d0:	016e3600 	.word	0x016e3600

080079d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079d8:	4b03      	ldr	r3, [pc, #12]	@ (80079e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079da:	681b      	ldr	r3, [r3, #0]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20000000 	.word	0x20000000

080079ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079f0:	f7ff fff0 	bl	80079d4 <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4904      	ldr	r1, [pc, #16]	@ (8007a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40021000 	.word	0x40021000
 8007a14:	0800bc60 	.word	0x0800bc60

08007a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a1c:	f7ff ffda 	bl	80079d4 <HAL_RCC_GetHCLKFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	0adb      	lsrs	r3, r3, #11
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	4904      	ldr	r1, [pc, #16]	@ (8007a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	0800bc60 	.word	0x0800bc60

08007a44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a54:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d10c      	bne.n	8007a82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a68:	4a17      	ldr	r2, [pc, #92]	@ (8007ac8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	4a14      	ldr	r2, [pc, #80]	@ (8007ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a72:	68d2      	ldr	r2, [r2, #12]
 8007a74:	0a12      	lsrs	r2, r2, #8
 8007a76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	617b      	str	r3, [r7, #20]
    break;
 8007a80:	e00c      	b.n	8007a9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a82:	4a12      	ldr	r2, [pc, #72]	@ (8007acc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a8c:	68d2      	ldr	r2, [r2, #12]
 8007a8e:	0a12      	lsrs	r2, r2, #8
 8007a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a94:	fb02 f303 	mul.w	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]
    break;
 8007a9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	0e5b      	lsrs	r3, r3, #25
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007ab6:	687b      	ldr	r3, [r7, #4]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	016e3600 	.word	0x016e3600
 8007acc:	00f42400 	.word	0x00f42400

08007ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007adc:	2300      	movs	r3, #0
 8007ade:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8098 	beq.w	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aee:	2300      	movs	r3, #0
 8007af0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007af2:	4b43      	ldr	r3, [pc, #268]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10d      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007afe:	4b40      	ldr	r3, [pc, #256]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b02:	4a3f      	ldr	r2, [pc, #252]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b16:	2301      	movs	r3, #1
 8007b18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a39      	ldr	r2, [pc, #228]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b26:	f7fb f897 	bl	8002c58 <HAL_GetTick>
 8007b2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b2c:	e009      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b2e:	f7fb f893 	bl	8002c58 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d902      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	74fb      	strb	r3, [r7, #19]
        break;
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b42:	4b30      	ldr	r3, [pc, #192]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ef      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d159      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b54:	4b2a      	ldr	r3, [pc, #168]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01e      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d019      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b70:	4b23      	ldr	r3, [pc, #140]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b7c:	4b20      	ldr	r3, [pc, #128]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b82:	4a1f      	ldr	r2, [pc, #124]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b9c:	4a18      	ldr	r2, [pc, #96]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bae:	f7fb f853 	bl	8002c58 <HAL_GetTick>
 8007bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bb4:	e00b      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb6:	f7fb f84f 	bl	8002c58 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d902      	bls.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	74fb      	strb	r3, [r7, #19]
            break;
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bce:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0ec      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007bdc:	7cfb      	ldrb	r3, [r7, #19]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007be2:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	4903      	ldr	r1, [pc, #12]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007bf8:	e008      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bfa:	7cfb      	ldrb	r3, [r7, #19]
 8007bfc:	74bb      	strb	r3, [r7, #18]
 8007bfe:	e005      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c00:	40021000 	.word	0x40021000
 8007c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	7cfb      	ldrb	r3, [r7, #19]
 8007c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c0c:	7c7b      	ldrb	r3, [r7, #17]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c12:	4ba7      	ldr	r3, [pc, #668]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c16:	4aa6      	ldr	r2, [pc, #664]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c30:	f023 0203 	bic.w	r2, r3, #3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	499d      	ldr	r1, [pc, #628]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c4c:	4b98      	ldr	r3, [pc, #608]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c52:	f023 020c 	bic.w	r2, r3, #12
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	4995      	ldr	r1, [pc, #596]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c6e:	4b90      	ldr	r3, [pc, #576]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	498c      	ldr	r1, [pc, #560]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c90:	4b87      	ldr	r3, [pc, #540]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4984      	ldr	r1, [pc, #528]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	497b      	ldr	r1, [pc, #492]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cd4:	4b76      	ldr	r3, [pc, #472]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	4973      	ldr	r1, [pc, #460]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	496a      	ldr	r1, [pc, #424]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d18:	4b65      	ldr	r3, [pc, #404]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	4962      	ldr	r1, [pc, #392]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	4959      	ldr	r1, [pc, #356]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d5c:	4b54      	ldr	r3, [pc, #336]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d62:	f023 0203 	bic.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6a:	4951      	ldr	r1, [pc, #324]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	4948      	ldr	r1, [pc, #288]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007da0:	4b43      	ldr	r3, [pc, #268]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	4940      	ldr	r1, [pc, #256]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dbe:	d105      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007dd8:	4b35      	ldr	r3, [pc, #212]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de6:	4932      	ldr	r1, [pc, #200]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007df6:	d105      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007df8:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d015      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e10:	4b27      	ldr	r3, [pc, #156]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1e:	4924      	ldr	r1, [pc, #144]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e2e:	d105      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e30:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e56:	4916      	ldr	r1, [pc, #88]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e66:	d105      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e68:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4a10      	ldr	r2, [pc, #64]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d019      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	4908      	ldr	r1, [pc, #32]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e9e:	d109      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea0:	4b03      	ldr	r3, [pc, #12]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4a02      	ldr	r2, [pc, #8]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eaa:	60d3      	str	r3, [r2, #12]
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007eae:	bf00      	nop
 8007eb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d015      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ec0:	4b29      	ldr	r3, [pc, #164]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ece:	4926      	ldr	r1, [pc, #152]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ede:	d105      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ee0:	4b21      	ldr	r3, [pc, #132]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a20      	ldr	r2, [pc, #128]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d015      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f06:	4918      	ldr	r1, [pc, #96]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f16:	d105      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f18:	4b13      	ldr	r3, [pc, #76]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4a12      	ldr	r2, [pc, #72]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f30:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3e:	490a      	ldr	r1, [pc, #40]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f50:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a04      	ldr	r2, [pc, #16]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40021000 	.word	0x40021000

08007f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e049      	b.n	8008012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fa fb5e 	bl	8002654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f000 ff98 	bl	8008ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e049      	b.n	80080c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f841 	bl	80080c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f000 ff41 	bl	8008ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <HAL_TIM_PWM_Start+0x24>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	bf14      	ite	ne
 80080f8:	2301      	movne	r3, #1
 80080fa:	2300      	moveq	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	e03c      	b.n	800817a <HAL_TIM_PWM_Start+0x9e>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b04      	cmp	r3, #4
 8008104:	d109      	bne.n	800811a <HAL_TIM_PWM_Start+0x3e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	bf14      	ite	ne
 8008112:	2301      	movne	r3, #1
 8008114:	2300      	moveq	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e02f      	b.n	800817a <HAL_TIM_PWM_Start+0x9e>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b08      	cmp	r3, #8
 800811e:	d109      	bne.n	8008134 <HAL_TIM_PWM_Start+0x58>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	e022      	b.n	800817a <HAL_TIM_PWM_Start+0x9e>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b0c      	cmp	r3, #12
 8008138:	d109      	bne.n	800814e <HAL_TIM_PWM_Start+0x72>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b01      	cmp	r3, #1
 8008144:	bf14      	ite	ne
 8008146:	2301      	movne	r3, #1
 8008148:	2300      	moveq	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e015      	b.n	800817a <HAL_TIM_PWM_Start+0x9e>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b10      	cmp	r3, #16
 8008152:	d109      	bne.n	8008168 <HAL_TIM_PWM_Start+0x8c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	e008      	b.n	800817a <HAL_TIM_PWM_Start+0x9e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	bf14      	ite	ne
 8008174:	2301      	movne	r3, #1
 8008176:	2300      	moveq	r3, #0
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e0a6      	b.n	80082d0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <HAL_TIM_PWM_Start+0xb6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008190:	e023      	b.n	80081da <HAL_TIM_PWM_Start+0xfe>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b04      	cmp	r3, #4
 8008196:	d104      	bne.n	80081a2 <HAL_TIM_PWM_Start+0xc6>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a0:	e01b      	b.n	80081da <HAL_TIM_PWM_Start+0xfe>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_PWM_Start+0xd6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b0:	e013      	b.n	80081da <HAL_TIM_PWM_Start+0xfe>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b0c      	cmp	r3, #12
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xe6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081c0:	e00b      	b.n	80081da <HAL_TIM_PWM_Start+0xfe>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b10      	cmp	r3, #16
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_PWM_Start+0xf6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d0:	e003      	b.n	80081da <HAL_TIM_PWM_Start+0xfe>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2201      	movs	r2, #1
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fc20 	bl	8009a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3a      	ldr	r2, [pc, #232]	@ (80082d8 <HAL_TIM_PWM_Start+0x1fc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_TIM_PWM_Start+0x148>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a39      	ldr	r2, [pc, #228]	@ (80082dc <HAL_TIM_PWM_Start+0x200>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_TIM_PWM_Start+0x148>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a37      	ldr	r2, [pc, #220]	@ (80082e0 <HAL_TIM_PWM_Start+0x204>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_TIM_PWM_Start+0x148>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a36      	ldr	r2, [pc, #216]	@ (80082e4 <HAL_TIM_PWM_Start+0x208>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_TIM_PWM_Start+0x148>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a34      	ldr	r2, [pc, #208]	@ (80082e8 <HAL_TIM_PWM_Start+0x20c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIM_PWM_Start+0x148>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a33      	ldr	r2, [pc, #204]	@ (80082ec <HAL_TIM_PWM_Start+0x210>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d101      	bne.n	8008228 <HAL_TIM_PWM_Start+0x14c>
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <HAL_TIM_PWM_Start+0x14e>
 8008228:	2300      	movs	r3, #0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800823c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a25      	ldr	r2, [pc, #148]	@ (80082d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d022      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008250:	d01d      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a26      	ldr	r2, [pc, #152]	@ (80082f0 <HAL_TIM_PWM_Start+0x214>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d018      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a24      	ldr	r2, [pc, #144]	@ (80082f4 <HAL_TIM_PWM_Start+0x218>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a23      	ldr	r2, [pc, #140]	@ (80082f8 <HAL_TIM_PWM_Start+0x21c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00e      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a19      	ldr	r2, [pc, #100]	@ (80082dc <HAL_TIM_PWM_Start+0x200>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d009      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <HAL_TIM_PWM_Start+0x204>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d004      	beq.n	800828e <HAL_TIM_PWM_Start+0x1b2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a18      	ldr	r2, [pc, #96]	@ (80082ec <HAL_TIM_PWM_Start+0x210>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d115      	bne.n	80082ba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	4b19      	ldr	r3, [pc, #100]	@ (80082fc <HAL_TIM_PWM_Start+0x220>)
 8008296:	4013      	ands	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b06      	cmp	r3, #6
 800829e:	d015      	beq.n	80082cc <HAL_TIM_PWM_Start+0x1f0>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a6:	d011      	beq.n	80082cc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b8:	e008      	b.n	80082cc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0201 	orr.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e000      	b.n	80082ce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40013400 	.word	0x40013400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40014400 	.word	0x40014400
 80082e8:	40014800 	.word	0x40014800
 80082ec:	40015000 	.word	0x40015000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	00010007 	.word	0x00010007

08008300 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e049      	b.n	80083a6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f841 	bl	80083ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3304      	adds	r3, #4
 800833c:	4619      	mov	r1, r3
 800833e:	4610      	mov	r0, r2
 8008340:	f000 fdce 	bl	8008ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <HAL_TIM_IC_Start_IT+0x1e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	e023      	b.n	800842a <HAL_TIM_IC_Start_IT+0x66>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_IC_Start_IT+0x2e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	e01b      	b.n	800842a <HAL_TIM_IC_Start_IT+0x66>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_IC_Start_IT+0x3e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e013      	b.n	800842a <HAL_TIM_IC_Start_IT+0x66>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b0c      	cmp	r3, #12
 8008406:	d104      	bne.n	8008412 <HAL_TIM_IC_Start_IT+0x4e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840e:	b2db      	uxtb	r3, r3
 8008410:	e00b      	b.n	800842a <HAL_TIM_IC_Start_IT+0x66>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b10      	cmp	r3, #16
 8008416:	d104      	bne.n	8008422 <HAL_TIM_IC_Start_IT+0x5e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800841e:	b2db      	uxtb	r3, r3
 8008420:	e003      	b.n	800842a <HAL_TIM_IC_Start_IT+0x66>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008428:	b2db      	uxtb	r3, r3
 800842a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <HAL_TIM_IC_Start_IT+0x78>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e013      	b.n	8008464 <HAL_TIM_IC_Start_IT+0xa0>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d104      	bne.n	800844c <HAL_TIM_IC_Start_IT+0x88>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e00b      	b.n	8008464 <HAL_TIM_IC_Start_IT+0xa0>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d104      	bne.n	800845c <HAL_TIM_IC_Start_IT+0x98>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e003      	b.n	8008464 <HAL_TIM_IC_Start_IT+0xa0>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008462:	b2db      	uxtb	r3, r3
 8008464:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d102      	bne.n	8008472 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800846c:	7b7b      	ldrb	r3, [r7, #13]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e0e2      	b.n	800863c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <HAL_TIM_IC_Start_IT+0xc2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008484:	e023      	b.n	80084ce <HAL_TIM_IC_Start_IT+0x10a>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b04      	cmp	r3, #4
 800848a:	d104      	bne.n	8008496 <HAL_TIM_IC_Start_IT+0xd2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008494:	e01b      	b.n	80084ce <HAL_TIM_IC_Start_IT+0x10a>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d104      	bne.n	80084a6 <HAL_TIM_IC_Start_IT+0xe2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a4:	e013      	b.n	80084ce <HAL_TIM_IC_Start_IT+0x10a>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b0c      	cmp	r3, #12
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_IC_Start_IT+0xf2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084b4:	e00b      	b.n	80084ce <HAL_TIM_IC_Start_IT+0x10a>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_IC_Start_IT+0x102>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084c4:	e003      	b.n	80084ce <HAL_TIM_IC_Start_IT+0x10a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <HAL_TIM_IC_Start_IT+0x11a>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084dc:	e013      	b.n	8008506 <HAL_TIM_IC_Start_IT+0x142>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d104      	bne.n	80084ee <HAL_TIM_IC_Start_IT+0x12a>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ec:	e00b      	b.n	8008506 <HAL_TIM_IC_Start_IT+0x142>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d104      	bne.n	80084fe <HAL_TIM_IC_Start_IT+0x13a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084fc:	e003      	b.n	8008506 <HAL_TIM_IC_Start_IT+0x142>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b0c      	cmp	r3, #12
 800850a:	d841      	bhi.n	8008590 <HAL_TIM_IC_Start_IT+0x1cc>
 800850c:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <HAL_TIM_IC_Start_IT+0x150>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	08008549 	.word	0x08008549
 8008518:	08008591 	.word	0x08008591
 800851c:	08008591 	.word	0x08008591
 8008520:	08008591 	.word	0x08008591
 8008524:	0800855b 	.word	0x0800855b
 8008528:	08008591 	.word	0x08008591
 800852c:	08008591 	.word	0x08008591
 8008530:	08008591 	.word	0x08008591
 8008534:	0800856d 	.word	0x0800856d
 8008538:	08008591 	.word	0x08008591
 800853c:	08008591 	.word	0x08008591
 8008540:	08008591 	.word	0x08008591
 8008544:	0800857f 	.word	0x0800857f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0202 	orr.w	r2, r2, #2
 8008556:	60da      	str	r2, [r3, #12]
      break;
 8008558:	e01d      	b.n	8008596 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0204 	orr.w	r2, r2, #4
 8008568:	60da      	str	r2, [r3, #12]
      break;
 800856a:	e014      	b.n	8008596 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0208 	orr.w	r2, r2, #8
 800857a:	60da      	str	r2, [r3, #12]
      break;
 800857c:	e00b      	b.n	8008596 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0210 	orr.w	r2, r2, #16
 800858c:	60da      	str	r2, [r3, #12]
      break;
 800858e:	e002      	b.n	8008596 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	bf00      	nop
  }

  if (status == HAL_OK)
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d14e      	bne.n	800863a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2201      	movs	r2, #1
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fa3f 	bl	8009a28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a25      	ldr	r2, [pc, #148]	@ (8008644 <HAL_TIM_IC_Start_IT+0x280>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d022      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085bc:	d01d      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a21      	ldr	r2, [pc, #132]	@ (8008648 <HAL_TIM_IC_Start_IT+0x284>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d018      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1f      	ldr	r2, [pc, #124]	@ (800864c <HAL_TIM_IC_Start_IT+0x288>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008650 <HAL_TIM_IC_Start_IT+0x28c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00e      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008654 <HAL_TIM_IC_Start_IT+0x290>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d009      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008658 <HAL_TIM_IC_Start_IT+0x294>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d004      	beq.n	80085fa <HAL_TIM_IC_Start_IT+0x236>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a19      	ldr	r2, [pc, #100]	@ (800865c <HAL_TIM_IC_Start_IT+0x298>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d115      	bne.n	8008626 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	4b17      	ldr	r3, [pc, #92]	@ (8008660 <HAL_TIM_IC_Start_IT+0x29c>)
 8008602:	4013      	ands	r3, r2
 8008604:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b06      	cmp	r3, #6
 800860a:	d015      	beq.n	8008638 <HAL_TIM_IC_Start_IT+0x274>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008612:	d011      	beq.n	8008638 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008624:	e008      	b.n	8008638 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0201 	orr.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	e000      	b.n	800863a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008638:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40000400 	.word	0x40000400
 800864c:	40000800 	.word	0x40000800
 8008650:	40000c00 	.word	0x40000c00
 8008654:	40013400 	.word	0x40013400
 8008658:	40014000 	.word	0x40014000
 800865c:	40015000 	.word	0x40015000
 8008660:	00010007 	.word	0x00010007

08008664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d020      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01b      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f06f 0202 	mvn.w	r2, #2
 8008698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7f8 fd6c 	bl	800118c <HAL_TIM_IC_CaptureCallback>
 80086b4:	e005      	b.n	80086c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fbf4 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fbfb 	bl	8008eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d020      	beq.n	8008714 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01b      	beq.n	8008714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0204 	mvn.w	r2, #4
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2202      	movs	r2, #2
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7f8 fd46 	bl	800118c <HAL_TIM_IC_CaptureCallback>
 8008700:	e005      	b.n	800870e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fbce 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fbd5 	bl	8008eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d020      	beq.n	8008760 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01b      	beq.n	8008760 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0208 	mvn.w	r2, #8
 8008730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7f8 fd20 	bl	800118c <HAL_TIM_IC_CaptureCallback>
 800874c:	e005      	b.n	800875a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fba8 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbaf 	bl	8008eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b00      	cmp	r3, #0
 8008768:	d020      	beq.n	80087ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f003 0310 	and.w	r3, r3, #16
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0210 	mvn.w	r2, #16
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2208      	movs	r2, #8
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7f8 fcfa 	bl	800118c <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb82 	bl	8008ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fb89 	bl	8008eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f06f 0201 	mvn.w	r2, #1
 80087c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fb60 	bl	8008e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fa6f 	bl	8009cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fa67 	bl	8009cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fb43 	bl	8008ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f06f 0220 	mvn.w	r2, #32
 8008862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 fa2f 	bl	8009cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fa3b 	bl	8009d04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80088aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fa33 	bl	8009d18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fa2b 	bl	8009d2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 fa23 	bl	8009d40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_TIM_IC_ConfigChannel+0x1e>
 800891c:	2302      	movs	r3, #2
 800891e:	e088      	b.n	8008a32 <HAL_TIM_IC_ConfigChannel+0x130>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d11b      	bne.n	8008966 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800893e:	f000 fead 	bl	800969c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 020c 	bic.w	r2, r2, #12
 8008950:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6999      	ldr	r1, [r3, #24]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	619a      	str	r2, [r3, #24]
 8008964:	e060      	b.n	8008a28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b04      	cmp	r3, #4
 800896a:	d11c      	bne.n	80089a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800897c:	f000 ff31 	bl	80097e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800898e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6999      	ldr	r1, [r3, #24]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	619a      	str	r2, [r3, #24]
 80089a4:	e040      	b.n	8008a28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d11b      	bne.n	80089e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80089bc:	f000 ff7e 	bl	80098bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69da      	ldr	r2, [r3, #28]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 020c 	bic.w	r2, r2, #12
 80089ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69d9      	ldr	r1, [r3, #28]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	61da      	str	r2, [r3, #28]
 80089e2:	e021      	b.n	8008a28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b0c      	cmp	r3, #12
 80089e8:	d11c      	bne.n	8008a24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80089fa:	f000 ff9b 	bl	8009934 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008a0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69d9      	ldr	r1, [r3, #28]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	021a      	lsls	r2, r3, #8
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	61da      	str	r2, [r3, #28]
 8008a22:	e001      	b.n	8008a28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e0ff      	b.n	8008c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b14      	cmp	r3, #20
 8008a66:	f200 80f0 	bhi.w	8008c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008ac5 	.word	0x08008ac5
 8008a74:	08008c4b 	.word	0x08008c4b
 8008a78:	08008c4b 	.word	0x08008c4b
 8008a7c:	08008c4b 	.word	0x08008c4b
 8008a80:	08008b05 	.word	0x08008b05
 8008a84:	08008c4b 	.word	0x08008c4b
 8008a88:	08008c4b 	.word	0x08008c4b
 8008a8c:	08008c4b 	.word	0x08008c4b
 8008a90:	08008b47 	.word	0x08008b47
 8008a94:	08008c4b 	.word	0x08008c4b
 8008a98:	08008c4b 	.word	0x08008c4b
 8008a9c:	08008c4b 	.word	0x08008c4b
 8008aa0:	08008b87 	.word	0x08008b87
 8008aa4:	08008c4b 	.word	0x08008c4b
 8008aa8:	08008c4b 	.word	0x08008c4b
 8008aac:	08008c4b 	.word	0x08008c4b
 8008ab0:	08008bc9 	.word	0x08008bc9
 8008ab4:	08008c4b 	.word	0x08008c4b
 8008ab8:	08008c4b 	.word	0x08008c4b
 8008abc:	08008c4b 	.word	0x08008c4b
 8008ac0:	08008c09 	.word	0x08008c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fabc 	bl	8009048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0208 	orr.w	r2, r2, #8
 8008ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0204 	bic.w	r2, r2, #4
 8008aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6999      	ldr	r1, [r3, #24]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	619a      	str	r2, [r3, #24]
      break;
 8008b02:	e0a5      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68b9      	ldr	r1, [r7, #8]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb36 	bl	800917c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6999      	ldr	r1, [r3, #24]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	021a      	lsls	r2, r3, #8
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	619a      	str	r2, [r3, #24]
      break;
 8008b44:	e084      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fba9 	bl	80092a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0208 	orr.w	r2, r2, #8
 8008b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 0204 	bic.w	r2, r2, #4
 8008b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69d9      	ldr	r1, [r3, #28]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	61da      	str	r2, [r3, #28]
      break;
 8008b84:	e064      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fc1b 	bl	80093c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69da      	ldr	r2, [r3, #28]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69d9      	ldr	r1, [r3, #28]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	021a      	lsls	r2, r3, #8
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	61da      	str	r2, [r3, #28]
      break;
 8008bc6:	e043      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fc8e 	bl	80094f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0208 	orr.w	r2, r2, #8
 8008be2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0204 	bic.w	r2, r2, #4
 8008bf2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691a      	ldr	r2, [r3, #16]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c06:	e023      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fcd8 	bl	80095c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	021a      	lsls	r2, r3, #8
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c48:	e002      	b.n	8008c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_TIM_ConfigClockSource+0x1c>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e0f6      	b.n	8008e6e <HAL_TIM_ConfigClockSource+0x20a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008c9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a6f      	ldr	r2, [pc, #444]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x214>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	f000 80c1 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008cc0:	4a6d      	ldr	r2, [pc, #436]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x214>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	f200 80c6 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x218>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	f000 80b9 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x218>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	f200 80be 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd8:	4a69      	ldr	r2, [pc, #420]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x21c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	f000 80b1 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008ce0:	4a67      	ldr	r2, [pc, #412]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	f200 80b6 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce8:	4a66      	ldr	r2, [pc, #408]	@ (8008e84 <HAL_TIM_ConfigClockSource+0x220>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	f000 80a9 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008cf0:	4a64      	ldr	r2, [pc, #400]	@ (8008e84 <HAL_TIM_ConfigClockSource+0x220>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	f200 80ae 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf8:	4a63      	ldr	r2, [pc, #396]	@ (8008e88 <HAL_TIM_ConfigClockSource+0x224>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	f000 80a1 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d00:	4a61      	ldr	r2, [pc, #388]	@ (8008e88 <HAL_TIM_ConfigClockSource+0x224>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	f200 80a6 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d08:	4a60      	ldr	r2, [pc, #384]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x228>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	f000 8099 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d10:	4a5e      	ldr	r2, [pc, #376]	@ (8008e8c <HAL_TIM_ConfigClockSource+0x228>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	f200 809e 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d1c:	f000 8091 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d24:	f200 8096 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d2c:	f000 8089 	beq.w	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d34:	f200 808e 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d3c:	d03e      	beq.n	8008dbc <HAL_TIM_ConfigClockSource+0x158>
 8008d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d42:	f200 8087 	bhi.w	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d4a:	f000 8086 	beq.w	8008e5a <HAL_TIM_ConfigClockSource+0x1f6>
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d52:	d87f      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d54:	2b70      	cmp	r3, #112	@ 0x70
 8008d56:	d01a      	beq.n	8008d8e <HAL_TIM_ConfigClockSource+0x12a>
 8008d58:	2b70      	cmp	r3, #112	@ 0x70
 8008d5a:	d87b      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d5c:	2b60      	cmp	r3, #96	@ 0x60
 8008d5e:	d050      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x19e>
 8008d60:	2b60      	cmp	r3, #96	@ 0x60
 8008d62:	d877      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d64:	2b50      	cmp	r3, #80	@ 0x50
 8008d66:	d03c      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x17e>
 8008d68:	2b50      	cmp	r3, #80	@ 0x50
 8008d6a:	d873      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d6c:	2b40      	cmp	r3, #64	@ 0x40
 8008d6e:	d058      	beq.n	8008e22 <HAL_TIM_ConfigClockSource+0x1be>
 8008d70:	2b40      	cmp	r3, #64	@ 0x40
 8008d72:	d86f      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d74:	2b30      	cmp	r3, #48	@ 0x30
 8008d76:	d064      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d78:	2b30      	cmp	r3, #48	@ 0x30
 8008d7a:	d86b      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d060      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d867      	bhi.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d05c      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d05a      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x1de>
 8008d8c:	e062      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d9e:	f000 fe23 	bl	80099e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	609a      	str	r2, [r3, #8]
      break;
 8008dba:	e04f      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dcc:	f000 fe0c 	bl	80099e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dde:	609a      	str	r2, [r3, #8]
      break;
 8008de0:	e03c      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 fcc8 	bl	8009784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2150      	movs	r1, #80	@ 0x50
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fdd7 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8008e00:	e02c      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f000 fd24 	bl	800985c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2160      	movs	r1, #96	@ 0x60
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fdc7 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8008e20:	e01c      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f000 fca8 	bl	8009784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2140      	movs	r1, #64	@ 0x40
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fdb7 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8008e40:	e00c      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f000 fdae 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8008e52:	e003      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]
      break;
 8008e58:	e000      	b.n	8008e5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	00100070 	.word	0x00100070
 8008e7c:	00100060 	.word	0x00100060
 8008e80:	00100050 	.word	0x00100050
 8008e84:	00100040 	.word	0x00100040
 8008e88:	00100030 	.word	0x00100030
 8008e8c:	00100020 	.word	0x00100020

08008e90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8009024 <TIM_Base_SetConfig+0x144>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d017      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008efe:	d013      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a49      	ldr	r2, [pc, #292]	@ (8009028 <TIM_Base_SetConfig+0x148>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00f      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a48      	ldr	r2, [pc, #288]	@ (800902c <TIM_Base_SetConfig+0x14c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a47      	ldr	r2, [pc, #284]	@ (8009030 <TIM_Base_SetConfig+0x150>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a46      	ldr	r2, [pc, #280]	@ (8009034 <TIM_Base_SetConfig+0x154>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_Base_SetConfig+0x48>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a45      	ldr	r2, [pc, #276]	@ (8009038 <TIM_Base_SetConfig+0x158>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d108      	bne.n	8008f3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a39      	ldr	r2, [pc, #228]	@ (8009024 <TIM_Base_SetConfig+0x144>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d023      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f48:	d01f      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a36      	ldr	r2, [pc, #216]	@ (8009028 <TIM_Base_SetConfig+0x148>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d01b      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a35      	ldr	r2, [pc, #212]	@ (800902c <TIM_Base_SetConfig+0x14c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d017      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a34      	ldr	r2, [pc, #208]	@ (8009030 <TIM_Base_SetConfig+0x150>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a33      	ldr	r2, [pc, #204]	@ (8009034 <TIM_Base_SetConfig+0x154>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00f      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a33      	ldr	r2, [pc, #204]	@ (800903c <TIM_Base_SetConfig+0x15c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00b      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a32      	ldr	r2, [pc, #200]	@ (8009040 <TIM_Base_SetConfig+0x160>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a31      	ldr	r2, [pc, #196]	@ (8009044 <TIM_Base_SetConfig+0x164>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_Base_SetConfig+0xaa>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a2c      	ldr	r2, [pc, #176]	@ (8009038 <TIM_Base_SetConfig+0x158>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d108      	bne.n	8008f9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a18      	ldr	r2, [pc, #96]	@ (8009024 <TIM_Base_SetConfig+0x144>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d013      	beq.n	8008ff0 <TIM_Base_SetConfig+0x110>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a1a      	ldr	r2, [pc, #104]	@ (8009034 <TIM_Base_SetConfig+0x154>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00f      	beq.n	8008ff0 <TIM_Base_SetConfig+0x110>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800903c <TIM_Base_SetConfig+0x15c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00b      	beq.n	8008ff0 <TIM_Base_SetConfig+0x110>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a19      	ldr	r2, [pc, #100]	@ (8009040 <TIM_Base_SetConfig+0x160>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d007      	beq.n	8008ff0 <TIM_Base_SetConfig+0x110>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a18      	ldr	r2, [pc, #96]	@ (8009044 <TIM_Base_SetConfig+0x164>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_Base_SetConfig+0x110>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a13      	ldr	r2, [pc, #76]	@ (8009038 <TIM_Base_SetConfig+0x158>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d103      	bne.n	8008ff8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b01      	cmp	r3, #1
 8009008:	d105      	bne.n	8009016 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f023 0201 	bic.w	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	611a      	str	r2, [r3, #16]
  }
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800
 8009030:	40000c00 	.word	0x40000c00
 8009034:	40013400 	.word	0x40013400
 8009038:	40015000 	.word	0x40015000
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800

08009048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f023 0201 	bic.w	r2, r3, #1
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f023 0302 	bic.w	r3, r3, #2
 8009094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a30      	ldr	r2, [pc, #192]	@ (8009164 <TIM_OC1_SetConfig+0x11c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <TIM_OC1_SetConfig+0x88>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009168 <TIM_OC1_SetConfig+0x120>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_OC1_SetConfig+0x88>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2e      	ldr	r2, [pc, #184]	@ (800916c <TIM_OC1_SetConfig+0x124>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_OC1_SetConfig+0x88>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009170 <TIM_OC1_SetConfig+0x128>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_OC1_SetConfig+0x88>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2c      	ldr	r2, [pc, #176]	@ (8009174 <TIM_OC1_SetConfig+0x12c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC1_SetConfig+0x88>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009178 <TIM_OC1_SetConfig+0x130>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d10c      	bne.n	80090ea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f023 0308 	bic.w	r3, r3, #8
 80090d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f023 0304 	bic.w	r3, r3, #4
 80090e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009164 <TIM_OC1_SetConfig+0x11c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d013      	beq.n	800911a <TIM_OC1_SetConfig+0xd2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <TIM_OC1_SetConfig+0x120>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00f      	beq.n	800911a <TIM_OC1_SetConfig+0xd2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1b      	ldr	r2, [pc, #108]	@ (800916c <TIM_OC1_SetConfig+0x124>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00b      	beq.n	800911a <TIM_OC1_SetConfig+0xd2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a1a      	ldr	r2, [pc, #104]	@ (8009170 <TIM_OC1_SetConfig+0x128>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d007      	beq.n	800911a <TIM_OC1_SetConfig+0xd2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a19      	ldr	r2, [pc, #100]	@ (8009174 <TIM_OC1_SetConfig+0x12c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d003      	beq.n	800911a <TIM_OC1_SetConfig+0xd2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a18      	ldr	r2, [pc, #96]	@ (8009178 <TIM_OC1_SetConfig+0x130>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d111      	bne.n	800913e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	621a      	str	r2, [r3, #32]
}
 8009158:	bf00      	nop
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40013400 	.word	0x40013400
 800916c:	40014000 	.word	0x40014000
 8009170:	40014400 	.word	0x40014400
 8009174:	40014800 	.word	0x40014800
 8009178:	40015000 	.word	0x40015000

0800917c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f023 0210 	bic.w	r2, r3, #16
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f023 0320 	bic.w	r3, r3, #32
 80091ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a2c      	ldr	r2, [pc, #176]	@ (800928c <TIM_OC2_SetConfig+0x110>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d007      	beq.n	80091f0 <TIM_OC2_SetConfig+0x74>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009290 <TIM_OC2_SetConfig+0x114>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_OC2_SetConfig+0x74>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009294 <TIM_OC2_SetConfig+0x118>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10d      	bne.n	800920c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800920a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a1f      	ldr	r2, [pc, #124]	@ (800928c <TIM_OC2_SetConfig+0x110>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d013      	beq.n	800923c <TIM_OC2_SetConfig+0xc0>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a1e      	ldr	r2, [pc, #120]	@ (8009290 <TIM_OC2_SetConfig+0x114>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00f      	beq.n	800923c <TIM_OC2_SetConfig+0xc0>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a1e      	ldr	r2, [pc, #120]	@ (8009298 <TIM_OC2_SetConfig+0x11c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00b      	beq.n	800923c <TIM_OC2_SetConfig+0xc0>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1d      	ldr	r2, [pc, #116]	@ (800929c <TIM_OC2_SetConfig+0x120>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <TIM_OC2_SetConfig+0xc0>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a1c      	ldr	r2, [pc, #112]	@ (80092a0 <TIM_OC2_SetConfig+0x124>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_OC2_SetConfig+0xc0>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a17      	ldr	r2, [pc, #92]	@ (8009294 <TIM_OC2_SetConfig+0x118>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d113      	bne.n	8009264 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800924a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4313      	orrs	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	40012c00 	.word	0x40012c00
 8009290:	40013400 	.word	0x40013400
 8009294:	40015000 	.word	0x40015000
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800

080092a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2b      	ldr	r2, [pc, #172]	@ (80093b0 <TIM_OC3_SetConfig+0x10c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d007      	beq.n	8009316 <TIM_OC3_SetConfig+0x72>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a2a      	ldr	r2, [pc, #168]	@ (80093b4 <TIM_OC3_SetConfig+0x110>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d003      	beq.n	8009316 <TIM_OC3_SetConfig+0x72>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a29      	ldr	r2, [pc, #164]	@ (80093b8 <TIM_OC3_SetConfig+0x114>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d10d      	bne.n	8009332 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800931c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1e      	ldr	r2, [pc, #120]	@ (80093b0 <TIM_OC3_SetConfig+0x10c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d013      	beq.n	8009362 <TIM_OC3_SetConfig+0xbe>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a1d      	ldr	r2, [pc, #116]	@ (80093b4 <TIM_OC3_SetConfig+0x110>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d00f      	beq.n	8009362 <TIM_OC3_SetConfig+0xbe>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a1d      	ldr	r2, [pc, #116]	@ (80093bc <TIM_OC3_SetConfig+0x118>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00b      	beq.n	8009362 <TIM_OC3_SetConfig+0xbe>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a1c      	ldr	r2, [pc, #112]	@ (80093c0 <TIM_OC3_SetConfig+0x11c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d007      	beq.n	8009362 <TIM_OC3_SetConfig+0xbe>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a1b      	ldr	r2, [pc, #108]	@ (80093c4 <TIM_OC3_SetConfig+0x120>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d003      	beq.n	8009362 <TIM_OC3_SetConfig+0xbe>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a16      	ldr	r2, [pc, #88]	@ (80093b8 <TIM_OC3_SetConfig+0x114>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d113      	bne.n	800938a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4313      	orrs	r3, r2
 800937c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4313      	orrs	r3, r2
 8009388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	621a      	str	r2, [r3, #32]
}
 80093a4:	bf00      	nop
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40013400 	.word	0x40013400
 80093b8:	40015000 	.word	0x40015000
 80093bc:	40014000 	.word	0x40014000
 80093c0:	40014400 	.word	0x40014400
 80093c4:	40014800 	.word	0x40014800

080093c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	031b      	lsls	r3, r3, #12
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a2c      	ldr	r2, [pc, #176]	@ (80094d8 <TIM_OC4_SetConfig+0x110>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_OC4_SetConfig+0x74>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2b      	ldr	r2, [pc, #172]	@ (80094dc <TIM_OC4_SetConfig+0x114>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_OC4_SetConfig+0x74>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2a      	ldr	r2, [pc, #168]	@ (80094e0 <TIM_OC4_SetConfig+0x118>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d10d      	bne.n	8009458 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	031b      	lsls	r3, r3, #12
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4313      	orrs	r3, r2
 800944e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a1f      	ldr	r2, [pc, #124]	@ (80094d8 <TIM_OC4_SetConfig+0x110>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d013      	beq.n	8009488 <TIM_OC4_SetConfig+0xc0>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a1e      	ldr	r2, [pc, #120]	@ (80094dc <TIM_OC4_SetConfig+0x114>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00f      	beq.n	8009488 <TIM_OC4_SetConfig+0xc0>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1e      	ldr	r2, [pc, #120]	@ (80094e4 <TIM_OC4_SetConfig+0x11c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00b      	beq.n	8009488 <TIM_OC4_SetConfig+0xc0>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a1d      	ldr	r2, [pc, #116]	@ (80094e8 <TIM_OC4_SetConfig+0x120>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d007      	beq.n	8009488 <TIM_OC4_SetConfig+0xc0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a1c      	ldr	r2, [pc, #112]	@ (80094ec <TIM_OC4_SetConfig+0x124>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_OC4_SetConfig+0xc0>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a17      	ldr	r2, [pc, #92]	@ (80094e0 <TIM_OC4_SetConfig+0x118>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d113      	bne.n	80094b0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800948e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009496:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	019b      	lsls	r3, r3, #6
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	019b      	lsls	r3, r3, #6
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	621a      	str	r2, [r3, #32]
}
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40012c00 	.word	0x40012c00
 80094dc:	40013400 	.word	0x40013400
 80094e0:	40015000 	.word	0x40015000
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40014400 	.word	0x40014400
 80094ec:	40014800 	.word	0x40014800

080094f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800951e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a19      	ldr	r2, [pc, #100]	@ (80095ac <TIM_OC5_SetConfig+0xbc>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d013      	beq.n	8009572 <TIM_OC5_SetConfig+0x82>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a18      	ldr	r2, [pc, #96]	@ (80095b0 <TIM_OC5_SetConfig+0xc0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00f      	beq.n	8009572 <TIM_OC5_SetConfig+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a17      	ldr	r2, [pc, #92]	@ (80095b4 <TIM_OC5_SetConfig+0xc4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00b      	beq.n	8009572 <TIM_OC5_SetConfig+0x82>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <TIM_OC5_SetConfig+0xc8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d007      	beq.n	8009572 <TIM_OC5_SetConfig+0x82>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a15      	ldr	r2, [pc, #84]	@ (80095bc <TIM_OC5_SetConfig+0xcc>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d003      	beq.n	8009572 <TIM_OC5_SetConfig+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a14      	ldr	r2, [pc, #80]	@ (80095c0 <TIM_OC5_SetConfig+0xd0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d109      	bne.n	8009586 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	621a      	str	r2, [r3, #32]
}
 80095a0:	bf00      	nop
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	40012c00 	.word	0x40012c00
 80095b0:	40013400 	.word	0x40013400
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800
 80095c0:	40015000 	.word	0x40015000

080095c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800960a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	051b      	lsls	r3, r3, #20
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a1a      	ldr	r2, [pc, #104]	@ (8009684 <TIM_OC6_SetConfig+0xc0>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d013      	beq.n	8009648 <TIM_OC6_SetConfig+0x84>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a19      	ldr	r2, [pc, #100]	@ (8009688 <TIM_OC6_SetConfig+0xc4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00f      	beq.n	8009648 <TIM_OC6_SetConfig+0x84>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a18      	ldr	r2, [pc, #96]	@ (800968c <TIM_OC6_SetConfig+0xc8>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00b      	beq.n	8009648 <TIM_OC6_SetConfig+0x84>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <TIM_OC6_SetConfig+0xcc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d007      	beq.n	8009648 <TIM_OC6_SetConfig+0x84>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a16      	ldr	r2, [pc, #88]	@ (8009694 <TIM_OC6_SetConfig+0xd0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d003      	beq.n	8009648 <TIM_OC6_SetConfig+0x84>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a15      	ldr	r2, [pc, #84]	@ (8009698 <TIM_OC6_SetConfig+0xd4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d109      	bne.n	800965c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800964e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	029b      	lsls	r3, r3, #10
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	4313      	orrs	r3, r2
 800965a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	621a      	str	r2, [r3, #32]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40012c00 	.word	0x40012c00
 8009688:	40013400 	.word	0x40013400
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800
 8009698:	40015000 	.word	0x40015000

0800969c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f023 0201 	bic.w	r2, r3, #1
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a28      	ldr	r2, [pc, #160]	@ (8009768 <TIM_TI1_SetConfig+0xcc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01b      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d0:	d017      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4a25      	ldr	r2, [pc, #148]	@ (800976c <TIM_TI1_SetConfig+0xd0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d013      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4a24      	ldr	r2, [pc, #144]	@ (8009770 <TIM_TI1_SetConfig+0xd4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00f      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4a23      	ldr	r2, [pc, #140]	@ (8009774 <TIM_TI1_SetConfig+0xd8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00b      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a22      	ldr	r2, [pc, #136]	@ (8009778 <TIM_TI1_SetConfig+0xdc>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d007      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a21      	ldr	r2, [pc, #132]	@ (800977c <TIM_TI1_SetConfig+0xe0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d003      	beq.n	8009702 <TIM_TI1_SetConfig+0x66>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a20      	ldr	r2, [pc, #128]	@ (8009780 <TIM_TI1_SetConfig+0xe4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d101      	bne.n	8009706 <TIM_TI1_SetConfig+0x6a>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <TIM_TI1_SetConfig+0x6c>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e003      	b.n	8009726 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800972c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	b2db      	uxtb	r3, r3
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f023 030a 	bic.w	r3, r3, #10
 8009740:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	f003 030a 	and.w	r3, r3, #10
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4313      	orrs	r3, r2
 800974c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40012c00 	.word	0x40012c00
 800976c:	40000400 	.word	0x40000400
 8009770:	40000800 	.word	0x40000800
 8009774:	40000c00 	.word	0x40000c00
 8009778:	40013400 	.word	0x40013400
 800977c:	40014000 	.word	0x40014000
 8009780:	40015000 	.word	0x40015000

08009784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f023 0201 	bic.w	r2, r3, #1
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f023 030a 	bic.w	r3, r3, #10
 80097c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	621a      	str	r2, [r3, #32]
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f023 0210 	bic.w	r2, r3, #16
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800980e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	031b      	lsls	r3, r3, #12
 8009826:	b29b      	uxth	r3, r3
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009834:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4313      	orrs	r3, r2
 8009842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	621a      	str	r2, [r3, #32]
}
 8009850:	bf00      	nop
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0210 	bic.w	r2, r3, #16
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	031b      	lsls	r3, r3, #12
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009898:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	621a      	str	r2, [r3, #32]
}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f023 0303 	bic.w	r3, r3, #3
 80098e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	4313      	orrs	r3, r2
 8009904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800990c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	021b      	lsls	r3, r3, #8
 8009912:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	621a      	str	r2, [r3, #32]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009960:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009972:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	031b      	lsls	r3, r3, #12
 8009978:	b29b      	uxth	r3, r3
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	031b      	lsls	r3, r3, #12
 800998c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	621a      	str	r2, [r3, #32]
}
 80099a2:	bf00      	nop
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80099c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f043 0307 	orr.w	r3, r3, #7
 80099d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	021a      	lsls	r2, r3, #8
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	609a      	str	r2, [r3, #8]
}
 8009a1c:	bf00      	nop
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f003 031f 	and.w	r3, r3, #31
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a1a      	ldr	r2, [r3, #32]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	43db      	mvns	r3, r3
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d101      	bne.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e074      	b.n	8009b76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a34      	ldr	r2, [pc, #208]	@ (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a33      	ldr	r2, [pc, #204]	@ (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a31      	ldr	r2, [pc, #196]	@ (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d108      	bne.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ad0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a21      	ldr	r2, [pc, #132]	@ (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d022      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0c:	d01d      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1f      	ldr	r2, [pc, #124]	@ (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d018      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d013      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a1c      	ldr	r2, [pc, #112]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d00e      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a15      	ldr	r2, [pc, #84]	@ (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d009      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a18      	ldr	r2, [pc, #96]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d004      	beq.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a11      	ldr	r2, [pc, #68]	@ (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d10c      	bne.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40013400 	.word	0x40013400
 8009b8c:	40015000 	.word	0x40015000
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800
 8009b98:	40000c00 	.word	0x40000c00
 8009b9c:	40014000 	.word	0x40014000

08009ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d101      	bne.n	8009bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e078      	b.n	8009cae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	041b      	lsls	r3, r3, #16
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1c      	ldr	r2, [pc, #112]	@ (8009cbc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d009      	beq.n	8009c62 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d004      	beq.n	8009c62 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a19      	ldr	r2, [pc, #100]	@ (8009cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d11c      	bne.n	8009c9c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	051b      	lsls	r3, r3, #20
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40012c00 	.word	0x40012c00
 8009cc0:	40013400 	.word	0x40013400
 8009cc4:	40015000 	.word	0x40015000

08009cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e042      	b.n	8009dec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d106      	bne.n	8009d7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7f8 fe23 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2224      	movs	r2, #36	@ 0x24
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0201 	bic.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 ff14 	bl	800abcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fc15 	bl	800a5d4 <UART_SetConfig>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e01b      	b.n	8009dec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 ff93 	bl	800ad10 <UART_CheckIdleState>
 8009dea:	4603      	mov	r3, r0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	@ 0x28
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	4613      	mov	r3, r2
 8009e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d17b      	bne.n	8009f06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <HAL_UART_Transmit+0x26>
 8009e14:	88fb      	ldrh	r3, [r7, #6]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e074      	b.n	8009f08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2221      	movs	r2, #33	@ 0x21
 8009e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e2e:	f7f8 ff13 	bl	8002c58 <HAL_GetTick>
 8009e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	88fa      	ldrh	r2, [r7, #6]
 8009e38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e4c:	d108      	bne.n	8009e60 <HAL_UART_Transmit+0x6c>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	61bb      	str	r3, [r7, #24]
 8009e5e:	e003      	b.n	8009e68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e68:	e030      	b.n	8009ecc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2200      	movs	r2, #0
 8009e72:	2180      	movs	r1, #128	@ 0x80
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fff5 	bl	800ae64 <UART_WaitOnFlagUntilTimeout>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e03d      	b.n	8009f08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	61bb      	str	r3, [r7, #24]
 8009ea8:	e007      	b.n	8009eba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1c8      	bne.n	8009e6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2140      	movs	r1, #64	@ 0x40
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 ffbe 	bl	800ae64 <UART_WaitOnFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e006      	b.n	8009f08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e000      	b.n	8009f08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
  }
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b0ba      	sub	sp, #232	@ 0xe8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f3e:	4013      	ands	r3, r2
 8009f40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11b      	bne.n	8009f84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f50:	f003 0320 	and.w	r3, r3, #32
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d015      	beq.n	8009f84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f5c:	f003 0320 	and.w	r3, r3, #32
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d105      	bne.n	8009f70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 8300 	beq.w	800a57a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	4798      	blx	r3
      }
      return;
 8009f82:	e2fa      	b.n	800a57a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 8123 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f92:	4b8d      	ldr	r3, [pc, #564]	@ (800a1c8 <HAL_UART_IRQHandler+0x2b8>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009f9e:	4b8b      	ldr	r3, [pc, #556]	@ (800a1cc <HAL_UART_IRQHandler+0x2bc>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8116 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d011      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xc8>
 8009fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fce:	f043 0201 	orr.w	r2, r3, #1
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d011      	beq.n	800a008 <HAL_UART_IRQHandler+0xf8>
 8009fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ffe:	f043 0204 	orr.w	r2, r3, #4
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	d011      	beq.n	800a038 <HAL_UART_IRQHandler+0x128>
 800a014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2204      	movs	r2, #4
 800a026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02e:	f043 0202 	orr.w	r2, r3, #2
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b00      	cmp	r3, #0
 800a042:	d017      	beq.n	800a074 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a048:	f003 0320 	and.w	r3, r3, #32
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d105      	bne.n	800a05c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a050:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a054:	4b5c      	ldr	r3, [pc, #368]	@ (800a1c8 <HAL_UART_IRQHandler+0x2b8>)
 800a056:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2208      	movs	r2, #8
 800a062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06a:	f043 0208 	orr.w	r2, r3, #8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d012      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x196>
 800a080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00c      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09c:	f043 0220 	orr.w	r2, r3, #32
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8266 	beq.w	800a57e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d013      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d105      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d007      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fa:	2b40      	cmp	r3, #64	@ 0x40
 800a0fc:	d005      	beq.n	800a10a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a102:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a106:	2b00      	cmp	r3, #0
 800a108:	d054      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 ff17 	bl	800af3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a11a:	2b40      	cmp	r3, #64	@ 0x40
 800a11c:	d146      	bne.n	800a1ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a13c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3308      	adds	r3, #8
 800a146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a14a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a14e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1d9      	bne.n	800a11e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a170:	2b00      	cmp	r3, #0
 800a172:	d017      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a17a:	4a15      	ldr	r2, [pc, #84]	@ (800a1d0 <HAL_UART_IRQHandler+0x2c0>)
 800a17c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a184:	4618      	mov	r0, r3
 800a186:	f7fa fc99 	bl	8004abc <HAL_DMA_Abort_IT>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d019      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a2:	e00f      	b.n	800a1c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9ff 	bl	800a5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1aa:	e00b      	b.n	800a1c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9fb 	bl	800a5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b2:	e007      	b.n	800a1c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f9f7 	bl	800a5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a1c2:	e1dc      	b.n	800a57e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c4:	bf00      	nop
    return;
 800a1c6:	e1da      	b.n	800a57e <HAL_UART_IRQHandler+0x66e>
 800a1c8:	10000001 	.word	0x10000001
 800a1cc:	04000120 	.word	0x04000120
 800a1d0:	0800b00b 	.word	0x0800b00b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	f040 8170 	bne.w	800a4be <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e2:	f003 0310 	and.w	r3, r3, #16
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 8169 	beq.w	800a4be <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 8162 	beq.w	800a4be <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2210      	movs	r2, #16
 800a200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a20c:	2b40      	cmp	r3, #64	@ 0x40
 800a20e:	f040 80d8 	bne.w	800a3c2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80af 	beq.w	800a388 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a234:	429a      	cmp	r2, r3
 800a236:	f080 80a7 	bcs.w	800a388 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a240:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 8087 	bne.w	800a366 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a26c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a286:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a28e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a29a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1da      	bne.n	800a258 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a2b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a2c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a2ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a2d2:	e841 2300 	strex	r3, r2, [r1]
 800a2d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a2d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1e1      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2e8:	e853 3f00 	ldrex	r3, [r3]
 800a2ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a302:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a304:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a308:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e3      	bne.n	800a2de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a334:	f023 0310 	bic.w	r3, r3, #16
 800a338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a346:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a34c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e4      	bne.n	800a324 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a360:	4618      	mov	r0, r3
 800a362:	f7fa fb52 	bl	8004a0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a378:	b29b      	uxth	r3, r3
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f91b 	bl	800a5bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a386:	e0fc      	b.n	800a582 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a38e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a392:	429a      	cmp	r2, r3
 800a394:	f040 80f5 	bne.w	800a582 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	f040 80eb 	bne.w	800a582 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f8fe 	bl	800a5bc <HAL_UARTEx_RxEventCallback>
      return;
 800a3c0:	e0df      	b.n	800a582 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 80d1 	beq.w	800a586 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a3e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80cc 	beq.w	800a586 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a410:	647b      	str	r3, [r7, #68]	@ 0x44
 800a412:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e4      	bne.n	800a3ee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3308      	adds	r3, #8
 800a42a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	623b      	str	r3, [r7, #32]
   return(result);
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a43a:	f023 0301 	bic.w	r3, r3, #1
 800a43e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a44c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e1      	bne.n	800a424 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	60fb      	str	r3, [r7, #12]
   return(result);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f023 0310 	bic.w	r3, r3, #16
 800a488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	69b9      	ldr	r1, [r7, #24]
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e4      	bne.n	800a474 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f880 	bl	800a5bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4bc:	e063      	b.n	800a586 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x5d8>
 800a4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a4de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fdcf 	bl	800b084 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4e6:	e051      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d014      	beq.n	800a51e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d008      	beq.n	800a51e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03a      	beq.n	800a58a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	4798      	blx	r3
    }
    return;
 800a51c:	e035      	b.n	800a58a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <HAL_UART_IRQHandler+0x62e>
 800a52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fd79 	bl	800b02e <UART_EndTransmit_IT>
    return;
 800a53c:	e026      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <HAL_UART_IRQHandler+0x64e>
 800a54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a54e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fda8 	bl	800b0ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a55c:	e016      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a566:	2b00      	cmp	r3, #0
 800a568:	d010      	beq.n	800a58c <HAL_UART_IRQHandler+0x67c>
 800a56a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	da0c      	bge.n	800a58c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fd90 	bl	800b098 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a578:	e008      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
      return;
 800a57a:	bf00      	nop
 800a57c:	e006      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
    return;
 800a57e:	bf00      	nop
 800a580:	e004      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
      return;
 800a582:	bf00      	nop
 800a584:	e002      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
      return;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <HAL_UART_IRQHandler+0x67c>
    return;
 800a58a:	bf00      	nop
  }
}
 800a58c:	37e8      	adds	r7, #232	@ 0xe8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop

0800a594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d8:	b08c      	sub	sp, #48	@ 0x30
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	4baa      	ldr	r3, [pc, #680]	@ (800a8ac <UART_SetConfig+0x2d8>)
 800a604:	4013      	ands	r3, r2
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	6812      	ldr	r2, [r2, #0]
 800a60a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a60c:	430b      	orrs	r3, r1
 800a60e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a9f      	ldr	r2, [pc, #636]	@ (800a8b0 <UART_SetConfig+0x2dc>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d004      	beq.n	800a640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a63c:	4313      	orrs	r3, r2
 800a63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a64a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a654:	430b      	orrs	r3, r1
 800a656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65e:	f023 010f 	bic.w	r1, r3, #15
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a90      	ldr	r2, [pc, #576]	@ (800a8b4 <UART_SetConfig+0x2e0>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d125      	bne.n	800a6c4 <UART_SetConfig+0xf0>
 800a678:	4b8f      	ldr	r3, [pc, #572]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	2b03      	cmp	r3, #3
 800a684:	d81a      	bhi.n	800a6bc <UART_SetConfig+0xe8>
 800a686:	a201      	add	r2, pc, #4	@ (adr r2, 800a68c <UART_SetConfig+0xb8>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a6ad 	.word	0x0800a6ad
 800a694:	0800a6a5 	.word	0x0800a6a5
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a2:	e116      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6aa:	e112      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a6ac:	2304      	movs	r3, #4
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b2:	e10e      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ba:	e10a      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e106      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a7c      	ldr	r2, [pc, #496]	@ (800a8bc <UART_SetConfig+0x2e8>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d138      	bne.n	800a740 <UART_SetConfig+0x16c>
 800a6ce:	4b7a      	ldr	r3, [pc, #488]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d4:	f003 030c 	and.w	r3, r3, #12
 800a6d8:	2b0c      	cmp	r3, #12
 800a6da:	d82d      	bhi.n	800a738 <UART_SetConfig+0x164>
 800a6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e4 <UART_SetConfig+0x110>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a719 	.word	0x0800a719
 800a6e8:	0800a739 	.word	0x0800a739
 800a6ec:	0800a739 	.word	0x0800a739
 800a6f0:	0800a739 	.word	0x0800a739
 800a6f4:	0800a729 	.word	0x0800a729
 800a6f8:	0800a739 	.word	0x0800a739
 800a6fc:	0800a739 	.word	0x0800a739
 800a700:	0800a739 	.word	0x0800a739
 800a704:	0800a721 	.word	0x0800a721
 800a708:	0800a739 	.word	0x0800a739
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	0800a739 	.word	0x0800a739
 800a714:	0800a731 	.word	0x0800a731
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a71e:	e0d8      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a720:	2302      	movs	r3, #2
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a726:	e0d4      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a728:	2304      	movs	r3, #4
 800a72a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72e:	e0d0      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a730:	2308      	movs	r3, #8
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a736:	e0cc      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a738:	2310      	movs	r3, #16
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73e:	e0c8      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a5e      	ldr	r2, [pc, #376]	@ (800a8c0 <UART_SetConfig+0x2ec>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d125      	bne.n	800a796 <UART_SetConfig+0x1c2>
 800a74a:	4b5b      	ldr	r3, [pc, #364]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a750:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a754:	2b30      	cmp	r3, #48	@ 0x30
 800a756:	d016      	beq.n	800a786 <UART_SetConfig+0x1b2>
 800a758:	2b30      	cmp	r3, #48	@ 0x30
 800a75a:	d818      	bhi.n	800a78e <UART_SetConfig+0x1ba>
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d00a      	beq.n	800a776 <UART_SetConfig+0x1a2>
 800a760:	2b20      	cmp	r3, #32
 800a762:	d814      	bhi.n	800a78e <UART_SetConfig+0x1ba>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <UART_SetConfig+0x19a>
 800a768:	2b10      	cmp	r3, #16
 800a76a:	d008      	beq.n	800a77e <UART_SetConfig+0x1aa>
 800a76c:	e00f      	b.n	800a78e <UART_SetConfig+0x1ba>
 800a76e:	2300      	movs	r3, #0
 800a770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a774:	e0ad      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a776:	2302      	movs	r3, #2
 800a778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a77c:	e0a9      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a77e:	2304      	movs	r3, #4
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a784:	e0a5      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a786:	2308      	movs	r3, #8
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78c:	e0a1      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a78e:	2310      	movs	r3, #16
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a794:	e09d      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a4a      	ldr	r2, [pc, #296]	@ (800a8c4 <UART_SetConfig+0x2f0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d125      	bne.n	800a7ec <UART_SetConfig+0x218>
 800a7a0:	4b45      	ldr	r3, [pc, #276]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a7aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7ac:	d016      	beq.n	800a7dc <UART_SetConfig+0x208>
 800a7ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7b0:	d818      	bhi.n	800a7e4 <UART_SetConfig+0x210>
 800a7b2:	2b80      	cmp	r3, #128	@ 0x80
 800a7b4:	d00a      	beq.n	800a7cc <UART_SetConfig+0x1f8>
 800a7b6:	2b80      	cmp	r3, #128	@ 0x80
 800a7b8:	d814      	bhi.n	800a7e4 <UART_SetConfig+0x210>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <UART_SetConfig+0x1f0>
 800a7be:	2b40      	cmp	r3, #64	@ 0x40
 800a7c0:	d008      	beq.n	800a7d4 <UART_SetConfig+0x200>
 800a7c2:	e00f      	b.n	800a7e4 <UART_SetConfig+0x210>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ca:	e082      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d2:	e07e      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7da:	e07a      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e2:	e076      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ea:	e072      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a35      	ldr	r2, [pc, #212]	@ (800a8c8 <UART_SetConfig+0x2f4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d12a      	bne.n	800a84c <UART_SetConfig+0x278>
 800a7f6:	4b30      	ldr	r3, [pc, #192]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a804:	d01a      	beq.n	800a83c <UART_SetConfig+0x268>
 800a806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a80a:	d81b      	bhi.n	800a844 <UART_SetConfig+0x270>
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a810:	d00c      	beq.n	800a82c <UART_SetConfig+0x258>
 800a812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a816:	d815      	bhi.n	800a844 <UART_SetConfig+0x270>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <UART_SetConfig+0x250>
 800a81c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a820:	d008      	beq.n	800a834 <UART_SetConfig+0x260>
 800a822:	e00f      	b.n	800a844 <UART_SetConfig+0x270>
 800a824:	2300      	movs	r3, #0
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82a:	e052      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a82c:	2302      	movs	r3, #2
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a832:	e04e      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a834:	2304      	movs	r3, #4
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	e04a      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a83c:	2308      	movs	r3, #8
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a842:	e046      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a844:	2310      	movs	r3, #16
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a84a:	e042      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a17      	ldr	r2, [pc, #92]	@ (800a8b0 <UART_SetConfig+0x2dc>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d13a      	bne.n	800a8cc <UART_SetConfig+0x2f8>
 800a856:	4b18      	ldr	r3, [pc, #96]	@ (800a8b8 <UART_SetConfig+0x2e4>)
 800a858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a864:	d01a      	beq.n	800a89c <UART_SetConfig+0x2c8>
 800a866:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a86a:	d81b      	bhi.n	800a8a4 <UART_SetConfig+0x2d0>
 800a86c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a870:	d00c      	beq.n	800a88c <UART_SetConfig+0x2b8>
 800a872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a876:	d815      	bhi.n	800a8a4 <UART_SetConfig+0x2d0>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <UART_SetConfig+0x2b0>
 800a87c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a880:	d008      	beq.n	800a894 <UART_SetConfig+0x2c0>
 800a882:	e00f      	b.n	800a8a4 <UART_SetConfig+0x2d0>
 800a884:	2300      	movs	r3, #0
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e022      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a88c:	2302      	movs	r3, #2
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a892:	e01e      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a894:	2304      	movs	r3, #4
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89a:	e01a      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a89c:	2308      	movs	r3, #8
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8a2:	e016      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8aa:	e012      	b.n	800a8d2 <UART_SetConfig+0x2fe>
 800a8ac:	cfff69f3 	.word	0xcfff69f3
 800a8b0:	40008000 	.word	0x40008000
 800a8b4:	40013800 	.word	0x40013800
 800a8b8:	40021000 	.word	0x40021000
 800a8bc:	40004400 	.word	0x40004400
 800a8c0:	40004800 	.word	0x40004800
 800a8c4:	40004c00 	.word	0x40004c00
 800a8c8:	40005000 	.word	0x40005000
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4aae      	ldr	r2, [pc, #696]	@ (800ab90 <UART_SetConfig+0x5bc>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	f040 8097 	bne.w	800aa0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d823      	bhi.n	800a92e <UART_SetConfig+0x35a>
 800a8e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ec <UART_SetConfig+0x318>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a911 	.word	0x0800a911
 800a8f0:	0800a92f 	.word	0x0800a92f
 800a8f4:	0800a919 	.word	0x0800a919
 800a8f8:	0800a92f 	.word	0x0800a92f
 800a8fc:	0800a91f 	.word	0x0800a91f
 800a900:	0800a92f 	.word	0x0800a92f
 800a904:	0800a92f 	.word	0x0800a92f
 800a908:	0800a92f 	.word	0x0800a92f
 800a90c:	0800a927 	.word	0x0800a927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a910:	f7fd f86c 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 800a914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a916:	e010      	b.n	800a93a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a918:	4b9e      	ldr	r3, [pc, #632]	@ (800ab94 <UART_SetConfig+0x5c0>)
 800a91a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a91c:	e00d      	b.n	800a93a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a91e:	f7fc fff7 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 800a922:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a924:	e009      	b.n	800a93a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a92a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a92c:	e005      	b.n	800a93a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a938:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8130 	beq.w	800aba2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a946:	4a94      	ldr	r2, [pc, #592]	@ (800ab98 <UART_SetConfig+0x5c4>)
 800a948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a94c:	461a      	mov	r2, r3
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	fbb3 f3f2 	udiv	r3, r3, r2
 800a954:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	4413      	add	r3, r2
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	429a      	cmp	r2, r3
 800a964:	d305      	bcc.n	800a972 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d903      	bls.n	800a97a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a978:	e113      	b.n	800aba2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97c:	2200      	movs	r2, #0
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	60fa      	str	r2, [r7, #12]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a986:	4a84      	ldr	r2, [pc, #528]	@ (800ab98 <UART_SetConfig+0x5c4>)
 800a988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2200      	movs	r2, #0
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a99c:	f7f5 fc98 	bl	80002d0 <__aeabi_uldivmod>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	020b      	lsls	r3, r1, #8
 800a9b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9b6:	0202      	lsls	r2, r0, #8
 800a9b8:	6979      	ldr	r1, [r7, #20]
 800a9ba:	6849      	ldr	r1, [r1, #4]
 800a9bc:	0849      	lsrs	r1, r1, #1
 800a9be:	2000      	movs	r0, #0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	eb12 0804 	adds.w	r8, r2, r4
 800a9c8:	eb43 0905 	adc.w	r9, r3, r5
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	469a      	mov	sl, r3
 800a9d4:	4693      	mov	fp, r2
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	465b      	mov	r3, fp
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fc77 	bl	80002d0 <__aeabi_uldivmod>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9f0:	d308      	bcc.n	800aa04 <UART_SetConfig+0x430>
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9f8:	d204      	bcs.n	800aa04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6a3a      	ldr	r2, [r7, #32]
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	e0ce      	b.n	800aba2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa0a:	e0ca      	b.n	800aba2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa14:	d166      	bne.n	800aae4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aa16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	d827      	bhi.n	800aa6e <UART_SetConfig+0x49a>
 800aa1e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa24 <UART_SetConfig+0x450>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa49 	.word	0x0800aa49
 800aa28:	0800aa51 	.word	0x0800aa51
 800aa2c:	0800aa59 	.word	0x0800aa59
 800aa30:	0800aa6f 	.word	0x0800aa6f
 800aa34:	0800aa5f 	.word	0x0800aa5f
 800aa38:	0800aa6f 	.word	0x0800aa6f
 800aa3c:	0800aa6f 	.word	0x0800aa6f
 800aa40:	0800aa6f 	.word	0x0800aa6f
 800aa44:	0800aa67 	.word	0x0800aa67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa48:	f7fc ffd0 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 800aa4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa4e:	e014      	b.n	800aa7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa50:	f7fc ffe2 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 800aa54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa56:	e010      	b.n	800aa7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa58:	4b4e      	ldr	r3, [pc, #312]	@ (800ab94 <UART_SetConfig+0x5c0>)
 800aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa5c:	e00d      	b.n	800aa7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa5e:	f7fc ff57 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 800aa62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa64:	e009      	b.n	800aa7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa6c:	e005      	b.n	800aa7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8090 	beq.w	800aba2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa86:	4a44      	ldr	r2, [pc, #272]	@ (800ab98 <UART_SetConfig+0x5c4>)
 800aa88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa94:	005a      	lsls	r2, r3, #1
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	441a      	add	r2, r3
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	2b0f      	cmp	r3, #15
 800aaac:	d916      	bls.n	800aadc <UART_SetConfig+0x508>
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab4:	d212      	bcs.n	800aadc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f023 030f 	bic.w	r3, r3, #15
 800aabe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	8bfb      	ldrh	r3, [r7, #30]
 800aace:	4313      	orrs	r3, r2
 800aad0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	8bfa      	ldrh	r2, [r7, #30]
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	e062      	b.n	800aba2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aae2:	e05e      	b.n	800aba2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aae4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d828      	bhi.n	800ab3e <UART_SetConfig+0x56a>
 800aaec:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf4 <UART_SetConfig+0x520>)
 800aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf2:	bf00      	nop
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab21 	.word	0x0800ab21
 800aafc:	0800ab29 	.word	0x0800ab29
 800ab00:	0800ab3f 	.word	0x0800ab3f
 800ab04:	0800ab2f 	.word	0x0800ab2f
 800ab08:	0800ab3f 	.word	0x0800ab3f
 800ab0c:	0800ab3f 	.word	0x0800ab3f
 800ab10:	0800ab3f 	.word	0x0800ab3f
 800ab14:	0800ab37 	.word	0x0800ab37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab18:	f7fc ff68 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 800ab1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab1e:	e014      	b.n	800ab4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab20:	f7fc ff7a 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 800ab24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab26:	e010      	b.n	800ab4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab28:	4b1a      	ldr	r3, [pc, #104]	@ (800ab94 <UART_SetConfig+0x5c0>)
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab2c:	e00d      	b.n	800ab4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab2e:	f7fc feef 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 800ab32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab34:	e009      	b.n	800ab4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab3c:	e005      	b.n	800ab4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab48:	bf00      	nop
    }

    if (pclk != 0U)
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d028      	beq.n	800aba2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	4a10      	ldr	r2, [pc, #64]	@ (800ab98 <UART_SetConfig+0x5c4>)
 800ab56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	085b      	lsrs	r3, r3, #1
 800ab68:	441a      	add	r2, r3
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	2b0f      	cmp	r3, #15
 800ab78:	d910      	bls.n	800ab9c <UART_SetConfig+0x5c8>
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab80:	d20c      	bcs.n	800ab9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60da      	str	r2, [r3, #12]
 800ab8c:	e009      	b.n	800aba2 <UART_SetConfig+0x5ce>
 800ab8e:	bf00      	nop
 800ab90:	40008000 	.word	0x40008000
 800ab94:	00f42400 	.word	0x00f42400
 800ab98:	0800bc68 	.word	0x0800bc68
      }
      else
      {
        ret = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2201      	movs	r2, #1
 800abae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2200      	movs	r2, #0
 800abb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2200      	movs	r2, #0
 800abbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800abbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3730      	adds	r7, #48	@ 0x30
 800abc6:	46bd      	mov	sp, r7
 800abc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800abcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00a      	beq.n	800ac7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01a      	beq.n	800ace2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acca:	d10a      	bne.n	800ace2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	605a      	str	r2, [r3, #4]
  }
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b098      	sub	sp, #96	@ 0x60
 800ad14:	af02      	add	r7, sp, #8
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad20:	f7f7 ff9a 	bl	8002c58 <HAL_GetTick>
 800ad24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d12f      	bne.n	800ad94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f88e 	bl	800ae64 <UART_WaitOnFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d022      	beq.n	800ad94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad56:	e853 3f00 	ldrex	r3, [r3]
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad74:	e841 2300 	strex	r3, r2, [r1]
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1e6      	bne.n	800ad4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2220      	movs	r2, #32
 800ad84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e063      	b.n	800ae5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d149      	bne.n	800ae36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ada2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adaa:	2200      	movs	r2, #0
 800adac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f857 	bl	800ae64 <UART_WaitOnFlagUntilTimeout>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d03c      	beq.n	800ae36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	623b      	str	r3, [r7, #32]
   return(result);
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adda:	633b      	str	r3, [r7, #48]	@ 0x30
 800addc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ade8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e6      	bne.n	800adbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3308      	adds	r3, #8
 800adf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae0e:	61fa      	str	r2, [r7, #28]
 800ae10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	69b9      	ldr	r1, [r7, #24]
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e5      	bne.n	800adee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e012      	b.n	800ae5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3758      	adds	r7, #88	@ 0x58
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	4613      	mov	r3, r2
 800ae72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae74:	e04f      	b.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d04b      	beq.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae7e:	f7f7 feeb 	bl	8002c58 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d302      	bcc.n	800ae94 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e04e      	b.n	800af36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0304 	and.w	r3, r3, #4
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d037      	beq.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b80      	cmp	r3, #128	@ 0x80
 800aeaa:	d034      	beq.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b40      	cmp	r3, #64	@ 0x40
 800aeb0:	d031      	beq.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	f003 0308 	and.w	r3, r3, #8
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	d110      	bne.n	800aee2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2208      	movs	r2, #8
 800aec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f838 	bl	800af3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2208      	movs	r2, #8
 800aed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e029      	b.n	800af36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef0:	d111      	bne.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aefa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f81e 	bl	800af3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2220      	movs	r2, #32
 800af06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e00f      	b.n	800af36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4013      	ands	r3, r2
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	429a      	cmp	r2, r3
 800af24:	bf0c      	ite	eq
 800af26:	2301      	moveq	r3, #1
 800af28:	2300      	movne	r3, #0
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	461a      	mov	r2, r3
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	429a      	cmp	r2, r3
 800af32:	d0a0      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af3e:	b480      	push	{r7}
 800af40:	b095      	sub	sp, #84	@ 0x54
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af64:	643b      	str	r3, [r7, #64]	@ 0x40
 800af66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e6      	bne.n	800af46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3308      	adds	r3, #8
 800af7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	61fb      	str	r3, [r7, #28]
   return(result);
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af8e:	f023 0301 	bic.w	r3, r3, #1
 800af92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e3      	bne.n	800af78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d118      	bne.n	800afea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f023 0310 	bic.w	r3, r3, #16
 800afcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afd6:	61bb      	str	r3, [r7, #24]
 800afd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6979      	ldr	r1, [r7, #20]
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	613b      	str	r3, [r7, #16]
   return(result);
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e6      	bne.n	800afb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2220      	movs	r2, #32
 800afee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800affe:	bf00      	nop
 800b000:	3754      	adds	r7, #84	@ 0x54
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fac1 	bl	800a5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b088      	sub	sp, #32
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	60bb      	str	r3, [r7, #8]
   return(result);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	6979      	ldr	r1, [r7, #20]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	613b      	str	r3, [r7, #16]
   return(result);
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e6      	bne.n	800b036 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2220      	movs	r2, #32
 800b06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fa8c 	bl	800a594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b07c:	bf00      	nop
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e027      	b.n	800b126 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2224      	movs	r2, #36	@ 0x24
 800b0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f022 0201 	bic.w	r2, r2, #1
 800b0fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b142:	2b01      	cmp	r3, #1
 800b144:	d101      	bne.n	800b14a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b146:	2302      	movs	r3, #2
 800b148:	e02d      	b.n	800b1a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2224      	movs	r2, #36	@ 0x24
 800b156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f022 0201 	bic.w	r2, r2, #1
 800b170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f850 	bl	800b22c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2220      	movs	r2, #32
 800b198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d101      	bne.n	800b1c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e02d      	b.n	800b222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2224      	movs	r2, #36	@ 0x24
 800b1d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0201 	bic.w	r2, r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f812 	bl	800b22c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2220      	movs	r2, #32
 800b214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d108      	bne.n	800b24e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b24c:	e031      	b.n	800b2b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b24e:	2308      	movs	r3, #8
 800b250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b252:	2308      	movs	r3, #8
 800b254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	0e5b      	lsrs	r3, r3, #25
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f003 0307 	and.w	r3, r3, #7
 800b264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	0f5b      	lsrs	r3, r3, #29
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f003 0307 	and.w	r3, r3, #7
 800b274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	7b3a      	ldrb	r2, [r7, #12]
 800b27a:	4911      	ldr	r1, [pc, #68]	@ (800b2c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b27c:	5c8a      	ldrb	r2, [r1, r2]
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b282:	7b3a      	ldrb	r2, [r7, #12]
 800b284:	490f      	ldr	r1, [pc, #60]	@ (800b2c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b288:	fb93 f3f2 	sdiv	r3, r3, r2
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	7b7a      	ldrb	r2, [r7, #13]
 800b298:	4909      	ldr	r1, [pc, #36]	@ (800b2c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b29a:	5c8a      	ldrb	r2, [r1, r2]
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2a0:	7b7a      	ldrb	r2, [r7, #13]
 800b2a2:	4908      	ldr	r1, [pc, #32]	@ (800b2c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b2a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	0800bc80 	.word	0x0800bc80
 800b2c4:	0800bc88 	.word	0x0800bc88

0800b2c8 <siprintf>:
 800b2c8:	b40e      	push	{r1, r2, r3}
 800b2ca:	b500      	push	{lr}
 800b2cc:	b09c      	sub	sp, #112	@ 0x70
 800b2ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2d0:	9002      	str	r0, [sp, #8]
 800b2d2:	9006      	str	r0, [sp, #24]
 800b2d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2d8:	4809      	ldr	r0, [pc, #36]	@ (800b300 <siprintf+0x38>)
 800b2da:	9107      	str	r1, [sp, #28]
 800b2dc:	9104      	str	r1, [sp, #16]
 800b2de:	4909      	ldr	r1, [pc, #36]	@ (800b304 <siprintf+0x3c>)
 800b2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e4:	9105      	str	r1, [sp, #20]
 800b2e6:	6800      	ldr	r0, [r0, #0]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	a902      	add	r1, sp, #8
 800b2ec:	f000 f994 	bl	800b618 <_svfiprintf_r>
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	b01c      	add	sp, #112	@ 0x70
 800b2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2fc:	b003      	add	sp, #12
 800b2fe:	4770      	bx	lr
 800b300:	2000000c 	.word	0x2000000c
 800b304:	ffff0208 	.word	0xffff0208

0800b308 <memset>:
 800b308:	4402      	add	r2, r0
 800b30a:	4603      	mov	r3, r0
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d100      	bne.n	800b312 <memset+0xa>
 800b310:	4770      	bx	lr
 800b312:	f803 1b01 	strb.w	r1, [r3], #1
 800b316:	e7f9      	b.n	800b30c <memset+0x4>

0800b318 <__errno>:
 800b318:	4b01      	ldr	r3, [pc, #4]	@ (800b320 <__errno+0x8>)
 800b31a:	6818      	ldr	r0, [r3, #0]
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	2000000c 	.word	0x2000000c

0800b324 <__libc_init_array>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	4d0d      	ldr	r5, [pc, #52]	@ (800b35c <__libc_init_array+0x38>)
 800b328:	4c0d      	ldr	r4, [pc, #52]	@ (800b360 <__libc_init_array+0x3c>)
 800b32a:	1b64      	subs	r4, r4, r5
 800b32c:	10a4      	asrs	r4, r4, #2
 800b32e:	2600      	movs	r6, #0
 800b330:	42a6      	cmp	r6, r4
 800b332:	d109      	bne.n	800b348 <__libc_init_array+0x24>
 800b334:	4d0b      	ldr	r5, [pc, #44]	@ (800b364 <__libc_init_array+0x40>)
 800b336:	4c0c      	ldr	r4, [pc, #48]	@ (800b368 <__libc_init_array+0x44>)
 800b338:	f000 fc66 	bl	800bc08 <_init>
 800b33c:	1b64      	subs	r4, r4, r5
 800b33e:	10a4      	asrs	r4, r4, #2
 800b340:	2600      	movs	r6, #0
 800b342:	42a6      	cmp	r6, r4
 800b344:	d105      	bne.n	800b352 <__libc_init_array+0x2e>
 800b346:	bd70      	pop	{r4, r5, r6, pc}
 800b348:	f855 3b04 	ldr.w	r3, [r5], #4
 800b34c:	4798      	blx	r3
 800b34e:	3601      	adds	r6, #1
 800b350:	e7ee      	b.n	800b330 <__libc_init_array+0xc>
 800b352:	f855 3b04 	ldr.w	r3, [r5], #4
 800b356:	4798      	blx	r3
 800b358:	3601      	adds	r6, #1
 800b35a:	e7f2      	b.n	800b342 <__libc_init_array+0x1e>
 800b35c:	0800bccc 	.word	0x0800bccc
 800b360:	0800bccc 	.word	0x0800bccc
 800b364:	0800bccc 	.word	0x0800bccc
 800b368:	0800bcd0 	.word	0x0800bcd0

0800b36c <__retarget_lock_acquire_recursive>:
 800b36c:	4770      	bx	lr

0800b36e <__retarget_lock_release_recursive>:
 800b36e:	4770      	bx	lr

0800b370 <_free_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4605      	mov	r5, r0
 800b374:	2900      	cmp	r1, #0
 800b376:	d041      	beq.n	800b3fc <_free_r+0x8c>
 800b378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b37c:	1f0c      	subs	r4, r1, #4
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bfb8      	it	lt
 800b382:	18e4      	addlt	r4, r4, r3
 800b384:	f000 f8e0 	bl	800b548 <__malloc_lock>
 800b388:	4a1d      	ldr	r2, [pc, #116]	@ (800b400 <_free_r+0x90>)
 800b38a:	6813      	ldr	r3, [r2, #0]
 800b38c:	b933      	cbnz	r3, 800b39c <_free_r+0x2c>
 800b38e:	6063      	str	r3, [r4, #4]
 800b390:	6014      	str	r4, [r2, #0]
 800b392:	4628      	mov	r0, r5
 800b394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b398:	f000 b8dc 	b.w	800b554 <__malloc_unlock>
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	d908      	bls.n	800b3b2 <_free_r+0x42>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	1821      	adds	r1, r4, r0
 800b3a4:	428b      	cmp	r3, r1
 800b3a6:	bf01      	itttt	eq
 800b3a8:	6819      	ldreq	r1, [r3, #0]
 800b3aa:	685b      	ldreq	r3, [r3, #4]
 800b3ac:	1809      	addeq	r1, r1, r0
 800b3ae:	6021      	streq	r1, [r4, #0]
 800b3b0:	e7ed      	b.n	800b38e <_free_r+0x1e>
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	b10b      	cbz	r3, 800b3bc <_free_r+0x4c>
 800b3b8:	42a3      	cmp	r3, r4
 800b3ba:	d9fa      	bls.n	800b3b2 <_free_r+0x42>
 800b3bc:	6811      	ldr	r1, [r2, #0]
 800b3be:	1850      	adds	r0, r2, r1
 800b3c0:	42a0      	cmp	r0, r4
 800b3c2:	d10b      	bne.n	800b3dc <_free_r+0x6c>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	4401      	add	r1, r0
 800b3c8:	1850      	adds	r0, r2, r1
 800b3ca:	4283      	cmp	r3, r0
 800b3cc:	6011      	str	r1, [r2, #0]
 800b3ce:	d1e0      	bne.n	800b392 <_free_r+0x22>
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	6053      	str	r3, [r2, #4]
 800b3d6:	4408      	add	r0, r1
 800b3d8:	6010      	str	r0, [r2, #0]
 800b3da:	e7da      	b.n	800b392 <_free_r+0x22>
 800b3dc:	d902      	bls.n	800b3e4 <_free_r+0x74>
 800b3de:	230c      	movs	r3, #12
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	e7d6      	b.n	800b392 <_free_r+0x22>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	1821      	adds	r1, r4, r0
 800b3e8:	428b      	cmp	r3, r1
 800b3ea:	bf04      	itt	eq
 800b3ec:	6819      	ldreq	r1, [r3, #0]
 800b3ee:	685b      	ldreq	r3, [r3, #4]
 800b3f0:	6063      	str	r3, [r4, #4]
 800b3f2:	bf04      	itt	eq
 800b3f4:	1809      	addeq	r1, r1, r0
 800b3f6:	6021      	streq	r1, [r4, #0]
 800b3f8:	6054      	str	r4, [r2, #4]
 800b3fa:	e7ca      	b.n	800b392 <_free_r+0x22>
 800b3fc:	bd38      	pop	{r3, r4, r5, pc}
 800b3fe:	bf00      	nop
 800b400:	20000ab4 	.word	0x20000ab4

0800b404 <sbrk_aligned>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	4e0f      	ldr	r6, [pc, #60]	@ (800b444 <sbrk_aligned+0x40>)
 800b408:	460c      	mov	r4, r1
 800b40a:	6831      	ldr	r1, [r6, #0]
 800b40c:	4605      	mov	r5, r0
 800b40e:	b911      	cbnz	r1, 800b416 <sbrk_aligned+0x12>
 800b410:	f000 fba6 	bl	800bb60 <_sbrk_r>
 800b414:	6030      	str	r0, [r6, #0]
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f000 fba1 	bl	800bb60 <_sbrk_r>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d103      	bne.n	800b42a <sbrk_aligned+0x26>
 800b422:	f04f 34ff 	mov.w	r4, #4294967295
 800b426:	4620      	mov	r0, r4
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	1cc4      	adds	r4, r0, #3
 800b42c:	f024 0403 	bic.w	r4, r4, #3
 800b430:	42a0      	cmp	r0, r4
 800b432:	d0f8      	beq.n	800b426 <sbrk_aligned+0x22>
 800b434:	1a21      	subs	r1, r4, r0
 800b436:	4628      	mov	r0, r5
 800b438:	f000 fb92 	bl	800bb60 <_sbrk_r>
 800b43c:	3001      	adds	r0, #1
 800b43e:	d1f2      	bne.n	800b426 <sbrk_aligned+0x22>
 800b440:	e7ef      	b.n	800b422 <sbrk_aligned+0x1e>
 800b442:	bf00      	nop
 800b444:	20000ab0 	.word	0x20000ab0

0800b448 <_malloc_r>:
 800b448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b44c:	1ccd      	adds	r5, r1, #3
 800b44e:	f025 0503 	bic.w	r5, r5, #3
 800b452:	3508      	adds	r5, #8
 800b454:	2d0c      	cmp	r5, #12
 800b456:	bf38      	it	cc
 800b458:	250c      	movcc	r5, #12
 800b45a:	2d00      	cmp	r5, #0
 800b45c:	4606      	mov	r6, r0
 800b45e:	db01      	blt.n	800b464 <_malloc_r+0x1c>
 800b460:	42a9      	cmp	r1, r5
 800b462:	d904      	bls.n	800b46e <_malloc_r+0x26>
 800b464:	230c      	movs	r3, #12
 800b466:	6033      	str	r3, [r6, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b544 <_malloc_r+0xfc>
 800b472:	f000 f869 	bl	800b548 <__malloc_lock>
 800b476:	f8d8 3000 	ldr.w	r3, [r8]
 800b47a:	461c      	mov	r4, r3
 800b47c:	bb44      	cbnz	r4, 800b4d0 <_malloc_r+0x88>
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff ffbf 	bl	800b404 <sbrk_aligned>
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	4604      	mov	r4, r0
 800b48a:	d158      	bne.n	800b53e <_malloc_r+0xf6>
 800b48c:	f8d8 4000 	ldr.w	r4, [r8]
 800b490:	4627      	mov	r7, r4
 800b492:	2f00      	cmp	r7, #0
 800b494:	d143      	bne.n	800b51e <_malloc_r+0xd6>
 800b496:	2c00      	cmp	r4, #0
 800b498:	d04b      	beq.n	800b532 <_malloc_r+0xea>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	4639      	mov	r1, r7
 800b49e:	4630      	mov	r0, r6
 800b4a0:	eb04 0903 	add.w	r9, r4, r3
 800b4a4:	f000 fb5c 	bl	800bb60 <_sbrk_r>
 800b4a8:	4581      	cmp	r9, r0
 800b4aa:	d142      	bne.n	800b532 <_malloc_r+0xea>
 800b4ac:	6821      	ldr	r1, [r4, #0]
 800b4ae:	1a6d      	subs	r5, r5, r1
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f7ff ffa6 	bl	800b404 <sbrk_aligned>
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d03a      	beq.n	800b532 <_malloc_r+0xea>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	442b      	add	r3, r5
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	bb62      	cbnz	r2, 800b524 <_malloc_r+0xdc>
 800b4ca:	f8c8 7000 	str.w	r7, [r8]
 800b4ce:	e00f      	b.n	800b4f0 <_malloc_r+0xa8>
 800b4d0:	6822      	ldr	r2, [r4, #0]
 800b4d2:	1b52      	subs	r2, r2, r5
 800b4d4:	d420      	bmi.n	800b518 <_malloc_r+0xd0>
 800b4d6:	2a0b      	cmp	r2, #11
 800b4d8:	d917      	bls.n	800b50a <_malloc_r+0xc2>
 800b4da:	1961      	adds	r1, r4, r5
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	6025      	str	r5, [r4, #0]
 800b4e0:	bf18      	it	ne
 800b4e2:	6059      	strne	r1, [r3, #4]
 800b4e4:	6863      	ldr	r3, [r4, #4]
 800b4e6:	bf08      	it	eq
 800b4e8:	f8c8 1000 	streq.w	r1, [r8]
 800b4ec:	5162      	str	r2, [r4, r5]
 800b4ee:	604b      	str	r3, [r1, #4]
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f000 f82f 	bl	800b554 <__malloc_unlock>
 800b4f6:	f104 000b 	add.w	r0, r4, #11
 800b4fa:	1d23      	adds	r3, r4, #4
 800b4fc:	f020 0007 	bic.w	r0, r0, #7
 800b500:	1ac2      	subs	r2, r0, r3
 800b502:	bf1c      	itt	ne
 800b504:	1a1b      	subne	r3, r3, r0
 800b506:	50a3      	strne	r3, [r4, r2]
 800b508:	e7af      	b.n	800b46a <_malloc_r+0x22>
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	bf0c      	ite	eq
 800b510:	f8c8 2000 	streq.w	r2, [r8]
 800b514:	605a      	strne	r2, [r3, #4]
 800b516:	e7eb      	b.n	800b4f0 <_malloc_r+0xa8>
 800b518:	4623      	mov	r3, r4
 800b51a:	6864      	ldr	r4, [r4, #4]
 800b51c:	e7ae      	b.n	800b47c <_malloc_r+0x34>
 800b51e:	463c      	mov	r4, r7
 800b520:	687f      	ldr	r7, [r7, #4]
 800b522:	e7b6      	b.n	800b492 <_malloc_r+0x4a>
 800b524:	461a      	mov	r2, r3
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	42a3      	cmp	r3, r4
 800b52a:	d1fb      	bne.n	800b524 <_malloc_r+0xdc>
 800b52c:	2300      	movs	r3, #0
 800b52e:	6053      	str	r3, [r2, #4]
 800b530:	e7de      	b.n	800b4f0 <_malloc_r+0xa8>
 800b532:	230c      	movs	r3, #12
 800b534:	6033      	str	r3, [r6, #0]
 800b536:	4630      	mov	r0, r6
 800b538:	f000 f80c 	bl	800b554 <__malloc_unlock>
 800b53c:	e794      	b.n	800b468 <_malloc_r+0x20>
 800b53e:	6005      	str	r5, [r0, #0]
 800b540:	e7d6      	b.n	800b4f0 <_malloc_r+0xa8>
 800b542:	bf00      	nop
 800b544:	20000ab4 	.word	0x20000ab4

0800b548 <__malloc_lock>:
 800b548:	4801      	ldr	r0, [pc, #4]	@ (800b550 <__malloc_lock+0x8>)
 800b54a:	f7ff bf0f 	b.w	800b36c <__retarget_lock_acquire_recursive>
 800b54e:	bf00      	nop
 800b550:	20000aac 	.word	0x20000aac

0800b554 <__malloc_unlock>:
 800b554:	4801      	ldr	r0, [pc, #4]	@ (800b55c <__malloc_unlock+0x8>)
 800b556:	f7ff bf0a 	b.w	800b36e <__retarget_lock_release_recursive>
 800b55a:	bf00      	nop
 800b55c:	20000aac 	.word	0x20000aac

0800b560 <__ssputs_r>:
 800b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	688e      	ldr	r6, [r1, #8]
 800b566:	461f      	mov	r7, r3
 800b568:	42be      	cmp	r6, r7
 800b56a:	680b      	ldr	r3, [r1, #0]
 800b56c:	4682      	mov	sl, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4690      	mov	r8, r2
 800b572:	d82d      	bhi.n	800b5d0 <__ssputs_r+0x70>
 800b574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b57c:	d026      	beq.n	800b5cc <__ssputs_r+0x6c>
 800b57e:	6965      	ldr	r5, [r4, #20]
 800b580:	6909      	ldr	r1, [r1, #16]
 800b582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b586:	eba3 0901 	sub.w	r9, r3, r1
 800b58a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b58e:	1c7b      	adds	r3, r7, #1
 800b590:	444b      	add	r3, r9
 800b592:	106d      	asrs	r5, r5, #1
 800b594:	429d      	cmp	r5, r3
 800b596:	bf38      	it	cc
 800b598:	461d      	movcc	r5, r3
 800b59a:	0553      	lsls	r3, r2, #21
 800b59c:	d527      	bpl.n	800b5ee <__ssputs_r+0x8e>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7ff ff52 	bl	800b448 <_malloc_r>
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	b360      	cbz	r0, 800b602 <__ssputs_r+0xa2>
 800b5a8:	6921      	ldr	r1, [r4, #16]
 800b5aa:	464a      	mov	r2, r9
 800b5ac:	f000 fae8 	bl	800bb80 <memcpy>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	6126      	str	r6, [r4, #16]
 800b5be:	6165      	str	r5, [r4, #20]
 800b5c0:	444e      	add	r6, r9
 800b5c2:	eba5 0509 	sub.w	r5, r5, r9
 800b5c6:	6026      	str	r6, [r4, #0]
 800b5c8:	60a5      	str	r5, [r4, #8]
 800b5ca:	463e      	mov	r6, r7
 800b5cc:	42be      	cmp	r6, r7
 800b5ce:	d900      	bls.n	800b5d2 <__ssputs_r+0x72>
 800b5d0:	463e      	mov	r6, r7
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	4641      	mov	r1, r8
 800b5d8:	f000 faa8 	bl	800bb2c <memmove>
 800b5dc:	68a3      	ldr	r3, [r4, #8]
 800b5de:	1b9b      	subs	r3, r3, r6
 800b5e0:	60a3      	str	r3, [r4, #8]
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	4433      	add	r3, r6
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	f000 fad4 	bl	800bb9c <_realloc_r>
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d1e0      	bne.n	800b5bc <__ssputs_r+0x5c>
 800b5fa:	6921      	ldr	r1, [r4, #16]
 800b5fc:	4650      	mov	r0, sl
 800b5fe:	f7ff feb7 	bl	800b370 <_free_r>
 800b602:	230c      	movs	r3, #12
 800b604:	f8ca 3000 	str.w	r3, [sl]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	e7e9      	b.n	800b5ea <__ssputs_r+0x8a>
	...

0800b618 <_svfiprintf_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4698      	mov	r8, r3
 800b61e:	898b      	ldrh	r3, [r1, #12]
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	b09d      	sub	sp, #116	@ 0x74
 800b624:	4607      	mov	r7, r0
 800b626:	460d      	mov	r5, r1
 800b628:	4614      	mov	r4, r2
 800b62a:	d510      	bpl.n	800b64e <_svfiprintf_r+0x36>
 800b62c:	690b      	ldr	r3, [r1, #16]
 800b62e:	b973      	cbnz	r3, 800b64e <_svfiprintf_r+0x36>
 800b630:	2140      	movs	r1, #64	@ 0x40
 800b632:	f7ff ff09 	bl	800b448 <_malloc_r>
 800b636:	6028      	str	r0, [r5, #0]
 800b638:	6128      	str	r0, [r5, #16]
 800b63a:	b930      	cbnz	r0, 800b64a <_svfiprintf_r+0x32>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	b01d      	add	sp, #116	@ 0x74
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	2340      	movs	r3, #64	@ 0x40
 800b64c:	616b      	str	r3, [r5, #20]
 800b64e:	2300      	movs	r3, #0
 800b650:	9309      	str	r3, [sp, #36]	@ 0x24
 800b652:	2320      	movs	r3, #32
 800b654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b658:	f8cd 800c 	str.w	r8, [sp, #12]
 800b65c:	2330      	movs	r3, #48	@ 0x30
 800b65e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7fc <_svfiprintf_r+0x1e4>
 800b662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b666:	f04f 0901 	mov.w	r9, #1
 800b66a:	4623      	mov	r3, r4
 800b66c:	469a      	mov	sl, r3
 800b66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b672:	b10a      	cbz	r2, 800b678 <_svfiprintf_r+0x60>
 800b674:	2a25      	cmp	r2, #37	@ 0x25
 800b676:	d1f9      	bne.n	800b66c <_svfiprintf_r+0x54>
 800b678:	ebba 0b04 	subs.w	fp, sl, r4
 800b67c:	d00b      	beq.n	800b696 <_svfiprintf_r+0x7e>
 800b67e:	465b      	mov	r3, fp
 800b680:	4622      	mov	r2, r4
 800b682:	4629      	mov	r1, r5
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ff6b 	bl	800b560 <__ssputs_r>
 800b68a:	3001      	adds	r0, #1
 800b68c:	f000 80a7 	beq.w	800b7de <_svfiprintf_r+0x1c6>
 800b690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b692:	445a      	add	r2, fp
 800b694:	9209      	str	r2, [sp, #36]	@ 0x24
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 809f 	beq.w	800b7de <_svfiprintf_r+0x1c6>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6aa:	f10a 0a01 	add.w	sl, sl, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6b8:	4654      	mov	r4, sl
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c0:	484e      	ldr	r0, [pc, #312]	@ (800b7fc <_svfiprintf_r+0x1e4>)
 800b6c2:	f7f4 fdb5 	bl	8000230 <memchr>
 800b6c6:	9a04      	ldr	r2, [sp, #16]
 800b6c8:	b9d8      	cbnz	r0, 800b702 <_svfiprintf_r+0xea>
 800b6ca:	06d0      	lsls	r0, r2, #27
 800b6cc:	bf44      	itt	mi
 800b6ce:	2320      	movmi	r3, #32
 800b6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d4:	0711      	lsls	r1, r2, #28
 800b6d6:	bf44      	itt	mi
 800b6d8:	232b      	movmi	r3, #43	@ 0x2b
 800b6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6e4:	d015      	beq.n	800b712 <_svfiprintf_r+0xfa>
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f6:	3b30      	subs	r3, #48	@ 0x30
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d94b      	bls.n	800b794 <_svfiprintf_r+0x17c>
 800b6fc:	b1b0      	cbz	r0, 800b72c <_svfiprintf_r+0x114>
 800b6fe:	9207      	str	r2, [sp, #28]
 800b700:	e014      	b.n	800b72c <_svfiprintf_r+0x114>
 800b702:	eba0 0308 	sub.w	r3, r0, r8
 800b706:	fa09 f303 	lsl.w	r3, r9, r3
 800b70a:	4313      	orrs	r3, r2
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	46a2      	mov	sl, r4
 800b710:	e7d2      	b.n	800b6b8 <_svfiprintf_r+0xa0>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	1d19      	adds	r1, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9103      	str	r1, [sp, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfbb      	ittet	lt
 800b71e:	425b      	neglt	r3, r3
 800b720:	f042 0202 	orrlt.w	r2, r2, #2
 800b724:	9307      	strge	r3, [sp, #28]
 800b726:	9307      	strlt	r3, [sp, #28]
 800b728:	bfb8      	it	lt
 800b72a:	9204      	strlt	r2, [sp, #16]
 800b72c:	7823      	ldrb	r3, [r4, #0]
 800b72e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b730:	d10a      	bne.n	800b748 <_svfiprintf_r+0x130>
 800b732:	7863      	ldrb	r3, [r4, #1]
 800b734:	2b2a      	cmp	r3, #42	@ 0x2a
 800b736:	d132      	bne.n	800b79e <_svfiprintf_r+0x186>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	9203      	str	r2, [sp, #12]
 800b740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b744:	3402      	adds	r4, #2
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b80c <_svfiprintf_r+0x1f4>
 800b74c:	7821      	ldrb	r1, [r4, #0]
 800b74e:	2203      	movs	r2, #3
 800b750:	4650      	mov	r0, sl
 800b752:	f7f4 fd6d 	bl	8000230 <memchr>
 800b756:	b138      	cbz	r0, 800b768 <_svfiprintf_r+0x150>
 800b758:	9b04      	ldr	r3, [sp, #16]
 800b75a:	eba0 000a 	sub.w	r0, r0, sl
 800b75e:	2240      	movs	r2, #64	@ 0x40
 800b760:	4082      	lsls	r2, r0
 800b762:	4313      	orrs	r3, r2
 800b764:	3401      	adds	r4, #1
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	4824      	ldr	r0, [pc, #144]	@ (800b800 <_svfiprintf_r+0x1e8>)
 800b76e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b772:	2206      	movs	r2, #6
 800b774:	f7f4 fd5c 	bl	8000230 <memchr>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d036      	beq.n	800b7ea <_svfiprintf_r+0x1d2>
 800b77c:	4b21      	ldr	r3, [pc, #132]	@ (800b804 <_svfiprintf_r+0x1ec>)
 800b77e:	bb1b      	cbnz	r3, 800b7c8 <_svfiprintf_r+0x1b0>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3307      	adds	r3, #7
 800b784:	f023 0307 	bic.w	r3, r3, #7
 800b788:	3308      	adds	r3, #8
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b78e:	4433      	add	r3, r6
 800b790:	9309      	str	r3, [sp, #36]	@ 0x24
 800b792:	e76a      	b.n	800b66a <_svfiprintf_r+0x52>
 800b794:	fb0c 3202 	mla	r2, ip, r2, r3
 800b798:	460c      	mov	r4, r1
 800b79a:	2001      	movs	r0, #1
 800b79c:	e7a8      	b.n	800b6f0 <_svfiprintf_r+0xd8>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f04f 0c0a 	mov.w	ip, #10
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b0:	3a30      	subs	r2, #48	@ 0x30
 800b7b2:	2a09      	cmp	r2, #9
 800b7b4:	d903      	bls.n	800b7be <_svfiprintf_r+0x1a6>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0c6      	beq.n	800b748 <_svfiprintf_r+0x130>
 800b7ba:	9105      	str	r1, [sp, #20]
 800b7bc:	e7c4      	b.n	800b748 <_svfiprintf_r+0x130>
 800b7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e7f0      	b.n	800b7aa <_svfiprintf_r+0x192>
 800b7c8:	ab03      	add	r3, sp, #12
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b808 <_svfiprintf_r+0x1f0>)
 800b7d0:	a904      	add	r1, sp, #16
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	1c42      	adds	r2, r0, #1
 800b7da:	4606      	mov	r6, r0
 800b7dc:	d1d6      	bne.n	800b78c <_svfiprintf_r+0x174>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	065b      	lsls	r3, r3, #25
 800b7e2:	f53f af2d 	bmi.w	800b640 <_svfiprintf_r+0x28>
 800b7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7e8:	e72c      	b.n	800b644 <_svfiprintf_r+0x2c>
 800b7ea:	ab03      	add	r3, sp, #12
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <_svfiprintf_r+0x1f0>)
 800b7f2:	a904      	add	r1, sp, #16
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f000 f879 	bl	800b8ec <_printf_i>
 800b7fa:	e7ed      	b.n	800b7d8 <_svfiprintf_r+0x1c0>
 800b7fc:	0800bc90 	.word	0x0800bc90
 800b800:	0800bc9a 	.word	0x0800bc9a
 800b804:	00000000 	.word	0x00000000
 800b808:	0800b561 	.word	0x0800b561
 800b80c:	0800bc96 	.word	0x0800bc96

0800b810 <_printf_common>:
 800b810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b814:	4616      	mov	r6, r2
 800b816:	4698      	mov	r8, r3
 800b818:	688a      	ldr	r2, [r1, #8]
 800b81a:	690b      	ldr	r3, [r1, #16]
 800b81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b820:	4293      	cmp	r3, r2
 800b822:	bfb8      	it	lt
 800b824:	4613      	movlt	r3, r2
 800b826:	6033      	str	r3, [r6, #0]
 800b828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b82c:	4607      	mov	r7, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	b10a      	cbz	r2, 800b836 <_printf_common+0x26>
 800b832:	3301      	adds	r3, #1
 800b834:	6033      	str	r3, [r6, #0]
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	0699      	lsls	r1, r3, #26
 800b83a:	bf42      	ittt	mi
 800b83c:	6833      	ldrmi	r3, [r6, #0]
 800b83e:	3302      	addmi	r3, #2
 800b840:	6033      	strmi	r3, [r6, #0]
 800b842:	6825      	ldr	r5, [r4, #0]
 800b844:	f015 0506 	ands.w	r5, r5, #6
 800b848:	d106      	bne.n	800b858 <_printf_common+0x48>
 800b84a:	f104 0a19 	add.w	sl, r4, #25
 800b84e:	68e3      	ldr	r3, [r4, #12]
 800b850:	6832      	ldr	r2, [r6, #0]
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	42ab      	cmp	r3, r5
 800b856:	dc26      	bgt.n	800b8a6 <_printf_common+0x96>
 800b858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	3b00      	subs	r3, #0
 800b860:	bf18      	it	ne
 800b862:	2301      	movne	r3, #1
 800b864:	0692      	lsls	r2, r2, #26
 800b866:	d42b      	bmi.n	800b8c0 <_printf_common+0xb0>
 800b868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b86c:	4641      	mov	r1, r8
 800b86e:	4638      	mov	r0, r7
 800b870:	47c8      	blx	r9
 800b872:	3001      	adds	r0, #1
 800b874:	d01e      	beq.n	800b8b4 <_printf_common+0xa4>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	6922      	ldr	r2, [r4, #16]
 800b87a:	f003 0306 	and.w	r3, r3, #6
 800b87e:	2b04      	cmp	r3, #4
 800b880:	bf02      	ittt	eq
 800b882:	68e5      	ldreq	r5, [r4, #12]
 800b884:	6833      	ldreq	r3, [r6, #0]
 800b886:	1aed      	subeq	r5, r5, r3
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	bf0c      	ite	eq
 800b88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b890:	2500      	movne	r5, #0
 800b892:	4293      	cmp	r3, r2
 800b894:	bfc4      	itt	gt
 800b896:	1a9b      	subgt	r3, r3, r2
 800b898:	18ed      	addgt	r5, r5, r3
 800b89a:	2600      	movs	r6, #0
 800b89c:	341a      	adds	r4, #26
 800b89e:	42b5      	cmp	r5, r6
 800b8a0:	d11a      	bne.n	800b8d8 <_printf_common+0xc8>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e008      	b.n	800b8b8 <_printf_common+0xa8>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	4641      	mov	r1, r8
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	47c8      	blx	r9
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d103      	bne.n	800b8bc <_printf_common+0xac>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8bc:	3501      	adds	r5, #1
 800b8be:	e7c6      	b.n	800b84e <_printf_common+0x3e>
 800b8c0:	18e1      	adds	r1, r4, r3
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	2030      	movs	r0, #48	@ 0x30
 800b8c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ca:	4422      	add	r2, r4
 800b8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8d4:	3302      	adds	r3, #2
 800b8d6:	e7c7      	b.n	800b868 <_printf_common+0x58>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4641      	mov	r1, r8
 800b8de:	4638      	mov	r0, r7
 800b8e0:	47c8      	blx	r9
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	d0e6      	beq.n	800b8b4 <_printf_common+0xa4>
 800b8e6:	3601      	adds	r6, #1
 800b8e8:	e7d9      	b.n	800b89e <_printf_common+0x8e>
	...

0800b8ec <_printf_i>:
 800b8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	7e0f      	ldrb	r7, [r1, #24]
 800b8f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8f4:	2f78      	cmp	r7, #120	@ 0x78
 800b8f6:	4691      	mov	r9, r2
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	469a      	mov	sl, r3
 800b8fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b902:	d807      	bhi.n	800b914 <_printf_i+0x28>
 800b904:	2f62      	cmp	r7, #98	@ 0x62
 800b906:	d80a      	bhi.n	800b91e <_printf_i+0x32>
 800b908:	2f00      	cmp	r7, #0
 800b90a:	f000 80d2 	beq.w	800bab2 <_printf_i+0x1c6>
 800b90e:	2f58      	cmp	r7, #88	@ 0x58
 800b910:	f000 80b9 	beq.w	800ba86 <_printf_i+0x19a>
 800b914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b91c:	e03a      	b.n	800b994 <_printf_i+0xa8>
 800b91e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b922:	2b15      	cmp	r3, #21
 800b924:	d8f6      	bhi.n	800b914 <_printf_i+0x28>
 800b926:	a101      	add	r1, pc, #4	@ (adr r1, 800b92c <_printf_i+0x40>)
 800b928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b92c:	0800b985 	.word	0x0800b985
 800b930:	0800b999 	.word	0x0800b999
 800b934:	0800b915 	.word	0x0800b915
 800b938:	0800b915 	.word	0x0800b915
 800b93c:	0800b915 	.word	0x0800b915
 800b940:	0800b915 	.word	0x0800b915
 800b944:	0800b999 	.word	0x0800b999
 800b948:	0800b915 	.word	0x0800b915
 800b94c:	0800b915 	.word	0x0800b915
 800b950:	0800b915 	.word	0x0800b915
 800b954:	0800b915 	.word	0x0800b915
 800b958:	0800ba99 	.word	0x0800ba99
 800b95c:	0800b9c3 	.word	0x0800b9c3
 800b960:	0800ba53 	.word	0x0800ba53
 800b964:	0800b915 	.word	0x0800b915
 800b968:	0800b915 	.word	0x0800b915
 800b96c:	0800babb 	.word	0x0800babb
 800b970:	0800b915 	.word	0x0800b915
 800b974:	0800b9c3 	.word	0x0800b9c3
 800b978:	0800b915 	.word	0x0800b915
 800b97c:	0800b915 	.word	0x0800b915
 800b980:	0800ba5b 	.word	0x0800ba5b
 800b984:	6833      	ldr	r3, [r6, #0]
 800b986:	1d1a      	adds	r2, r3, #4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6032      	str	r2, [r6, #0]
 800b98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b994:	2301      	movs	r3, #1
 800b996:	e09d      	b.n	800bad4 <_printf_i+0x1e8>
 800b998:	6833      	ldr	r3, [r6, #0]
 800b99a:	6820      	ldr	r0, [r4, #0]
 800b99c:	1d19      	adds	r1, r3, #4
 800b99e:	6031      	str	r1, [r6, #0]
 800b9a0:	0606      	lsls	r6, r0, #24
 800b9a2:	d501      	bpl.n	800b9a8 <_printf_i+0xbc>
 800b9a4:	681d      	ldr	r5, [r3, #0]
 800b9a6:	e003      	b.n	800b9b0 <_printf_i+0xc4>
 800b9a8:	0645      	lsls	r5, r0, #25
 800b9aa:	d5fb      	bpl.n	800b9a4 <_printf_i+0xb8>
 800b9ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	da03      	bge.n	800b9bc <_printf_i+0xd0>
 800b9b4:	232d      	movs	r3, #45	@ 0x2d
 800b9b6:	426d      	negs	r5, r5
 800b9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9bc:	4859      	ldr	r0, [pc, #356]	@ (800bb24 <_printf_i+0x238>)
 800b9be:	230a      	movs	r3, #10
 800b9c0:	e011      	b.n	800b9e6 <_printf_i+0xfa>
 800b9c2:	6821      	ldr	r1, [r4, #0]
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	0608      	lsls	r0, r1, #24
 800b9c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9cc:	d402      	bmi.n	800b9d4 <_printf_i+0xe8>
 800b9ce:	0649      	lsls	r1, r1, #25
 800b9d0:	bf48      	it	mi
 800b9d2:	b2ad      	uxthmi	r5, r5
 800b9d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9d6:	4853      	ldr	r0, [pc, #332]	@ (800bb24 <_printf_i+0x238>)
 800b9d8:	6033      	str	r3, [r6, #0]
 800b9da:	bf14      	ite	ne
 800b9dc:	230a      	movne	r3, #10
 800b9de:	2308      	moveq	r3, #8
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9e6:	6866      	ldr	r6, [r4, #4]
 800b9e8:	60a6      	str	r6, [r4, #8]
 800b9ea:	2e00      	cmp	r6, #0
 800b9ec:	bfa2      	ittt	ge
 800b9ee:	6821      	ldrge	r1, [r4, #0]
 800b9f0:	f021 0104 	bicge.w	r1, r1, #4
 800b9f4:	6021      	strge	r1, [r4, #0]
 800b9f6:	b90d      	cbnz	r5, 800b9fc <_printf_i+0x110>
 800b9f8:	2e00      	cmp	r6, #0
 800b9fa:	d04b      	beq.n	800ba94 <_printf_i+0x1a8>
 800b9fc:	4616      	mov	r6, r2
 800b9fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba02:	fb03 5711 	mls	r7, r3, r1, r5
 800ba06:	5dc7      	ldrb	r7, [r0, r7]
 800ba08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba0c:	462f      	mov	r7, r5
 800ba0e:	42bb      	cmp	r3, r7
 800ba10:	460d      	mov	r5, r1
 800ba12:	d9f4      	bls.n	800b9fe <_printf_i+0x112>
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d10b      	bne.n	800ba30 <_printf_i+0x144>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	07df      	lsls	r7, r3, #31
 800ba1c:	d508      	bpl.n	800ba30 <_printf_i+0x144>
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	6861      	ldr	r1, [r4, #4]
 800ba22:	4299      	cmp	r1, r3
 800ba24:	bfde      	ittt	le
 800ba26:	2330      	movle	r3, #48	@ 0x30
 800ba28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba30:	1b92      	subs	r2, r2, r6
 800ba32:	6122      	str	r2, [r4, #16]
 800ba34:	f8cd a000 	str.w	sl, [sp]
 800ba38:	464b      	mov	r3, r9
 800ba3a:	aa03      	add	r2, sp, #12
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4640      	mov	r0, r8
 800ba40:	f7ff fee6 	bl	800b810 <_printf_common>
 800ba44:	3001      	adds	r0, #1
 800ba46:	d14a      	bne.n	800bade <_printf_i+0x1f2>
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	b004      	add	sp, #16
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	f043 0320 	orr.w	r3, r3, #32
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	4833      	ldr	r0, [pc, #204]	@ (800bb28 <_printf_i+0x23c>)
 800ba5c:	2778      	movs	r7, #120	@ 0x78
 800ba5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	6831      	ldr	r1, [r6, #0]
 800ba66:	061f      	lsls	r7, r3, #24
 800ba68:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba6c:	d402      	bmi.n	800ba74 <_printf_i+0x188>
 800ba6e:	065f      	lsls	r7, r3, #25
 800ba70:	bf48      	it	mi
 800ba72:	b2ad      	uxthmi	r5, r5
 800ba74:	6031      	str	r1, [r6, #0]
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	bf44      	itt	mi
 800ba7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba7e:	6023      	strmi	r3, [r4, #0]
 800ba80:	b11d      	cbz	r5, 800ba8a <_printf_i+0x19e>
 800ba82:	2310      	movs	r3, #16
 800ba84:	e7ac      	b.n	800b9e0 <_printf_i+0xf4>
 800ba86:	4827      	ldr	r0, [pc, #156]	@ (800bb24 <_printf_i+0x238>)
 800ba88:	e7e9      	b.n	800ba5e <_printf_i+0x172>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f023 0320 	bic.w	r3, r3, #32
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	e7f6      	b.n	800ba82 <_printf_i+0x196>
 800ba94:	4616      	mov	r6, r2
 800ba96:	e7bd      	b.n	800ba14 <_printf_i+0x128>
 800ba98:	6833      	ldr	r3, [r6, #0]
 800ba9a:	6825      	ldr	r5, [r4, #0]
 800ba9c:	6961      	ldr	r1, [r4, #20]
 800ba9e:	1d18      	adds	r0, r3, #4
 800baa0:	6030      	str	r0, [r6, #0]
 800baa2:	062e      	lsls	r6, r5, #24
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	d501      	bpl.n	800baac <_printf_i+0x1c0>
 800baa8:	6019      	str	r1, [r3, #0]
 800baaa:	e002      	b.n	800bab2 <_printf_i+0x1c6>
 800baac:	0668      	lsls	r0, r5, #25
 800baae:	d5fb      	bpl.n	800baa8 <_printf_i+0x1bc>
 800bab0:	8019      	strh	r1, [r3, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	6123      	str	r3, [r4, #16]
 800bab6:	4616      	mov	r6, r2
 800bab8:	e7bc      	b.n	800ba34 <_printf_i+0x148>
 800baba:	6833      	ldr	r3, [r6, #0]
 800babc:	1d1a      	adds	r2, r3, #4
 800babe:	6032      	str	r2, [r6, #0]
 800bac0:	681e      	ldr	r6, [r3, #0]
 800bac2:	6862      	ldr	r2, [r4, #4]
 800bac4:	2100      	movs	r1, #0
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7f4 fbb2 	bl	8000230 <memchr>
 800bacc:	b108      	cbz	r0, 800bad2 <_printf_i+0x1e6>
 800bace:	1b80      	subs	r0, r0, r6
 800bad0:	6060      	str	r0, [r4, #4]
 800bad2:	6863      	ldr	r3, [r4, #4]
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	2300      	movs	r3, #0
 800bad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800badc:	e7aa      	b.n	800ba34 <_printf_i+0x148>
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	4632      	mov	r2, r6
 800bae2:	4649      	mov	r1, r9
 800bae4:	4640      	mov	r0, r8
 800bae6:	47d0      	blx	sl
 800bae8:	3001      	adds	r0, #1
 800baea:	d0ad      	beq.n	800ba48 <_printf_i+0x15c>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	079b      	lsls	r3, r3, #30
 800baf0:	d413      	bmi.n	800bb1a <_printf_i+0x22e>
 800baf2:	68e0      	ldr	r0, [r4, #12]
 800baf4:	9b03      	ldr	r3, [sp, #12]
 800baf6:	4298      	cmp	r0, r3
 800baf8:	bfb8      	it	lt
 800bafa:	4618      	movlt	r0, r3
 800bafc:	e7a6      	b.n	800ba4c <_printf_i+0x160>
 800bafe:	2301      	movs	r3, #1
 800bb00:	4632      	mov	r2, r6
 800bb02:	4649      	mov	r1, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	47d0      	blx	sl
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d09d      	beq.n	800ba48 <_printf_i+0x15c>
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	68e3      	ldr	r3, [r4, #12]
 800bb10:	9903      	ldr	r1, [sp, #12]
 800bb12:	1a5b      	subs	r3, r3, r1
 800bb14:	42ab      	cmp	r3, r5
 800bb16:	dcf2      	bgt.n	800bafe <_printf_i+0x212>
 800bb18:	e7eb      	b.n	800baf2 <_printf_i+0x206>
 800bb1a:	2500      	movs	r5, #0
 800bb1c:	f104 0619 	add.w	r6, r4, #25
 800bb20:	e7f5      	b.n	800bb0e <_printf_i+0x222>
 800bb22:	bf00      	nop
 800bb24:	0800bca1 	.word	0x0800bca1
 800bb28:	0800bcb2 	.word	0x0800bcb2

0800bb2c <memmove>:
 800bb2c:	4288      	cmp	r0, r1
 800bb2e:	b510      	push	{r4, lr}
 800bb30:	eb01 0402 	add.w	r4, r1, r2
 800bb34:	d902      	bls.n	800bb3c <memmove+0x10>
 800bb36:	4284      	cmp	r4, r0
 800bb38:	4623      	mov	r3, r4
 800bb3a:	d807      	bhi.n	800bb4c <memmove+0x20>
 800bb3c:	1e43      	subs	r3, r0, #1
 800bb3e:	42a1      	cmp	r1, r4
 800bb40:	d008      	beq.n	800bb54 <memmove+0x28>
 800bb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb4a:	e7f8      	b.n	800bb3e <memmove+0x12>
 800bb4c:	4402      	add	r2, r0
 800bb4e:	4601      	mov	r1, r0
 800bb50:	428a      	cmp	r2, r1
 800bb52:	d100      	bne.n	800bb56 <memmove+0x2a>
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb5e:	e7f7      	b.n	800bb50 <memmove+0x24>

0800bb60 <_sbrk_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	@ (800bb7c <_sbrk_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f6 fa6a 	bl	8002044 <_sbrk>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_sbrk_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_sbrk_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20000aa8 	.word	0x20000aa8

0800bb80 <memcpy>:
 800bb80:	440a      	add	r2, r1
 800bb82:	4291      	cmp	r1, r2
 800bb84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb88:	d100      	bne.n	800bb8c <memcpy+0xc>
 800bb8a:	4770      	bx	lr
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb96:	4291      	cmp	r1, r2
 800bb98:	d1f9      	bne.n	800bb8e <memcpy+0xe>
 800bb9a:	bd10      	pop	{r4, pc}

0800bb9c <_realloc_r>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	4680      	mov	r8, r0
 800bba2:	4615      	mov	r5, r2
 800bba4:	460c      	mov	r4, r1
 800bba6:	b921      	cbnz	r1, 800bbb2 <_realloc_r+0x16>
 800bba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	4611      	mov	r1, r2
 800bbae:	f7ff bc4b 	b.w	800b448 <_malloc_r>
 800bbb2:	b92a      	cbnz	r2, 800bbc0 <_realloc_r+0x24>
 800bbb4:	f7ff fbdc 	bl	800b370 <_free_r>
 800bbb8:	2400      	movs	r4, #0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	f000 f81a 	bl	800bbf8 <_malloc_usable_size_r>
 800bbc4:	4285      	cmp	r5, r0
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	d802      	bhi.n	800bbd0 <_realloc_r+0x34>
 800bbca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbce:	d8f4      	bhi.n	800bbba <_realloc_r+0x1e>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	f7ff fc38 	bl	800b448 <_malloc_r>
 800bbd8:	4607      	mov	r7, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d0ec      	beq.n	800bbb8 <_realloc_r+0x1c>
 800bbde:	42b5      	cmp	r5, r6
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	bf28      	it	cs
 800bbe6:	4632      	movcs	r2, r6
 800bbe8:	f7ff ffca 	bl	800bb80 <memcpy>
 800bbec:	4621      	mov	r1, r4
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f7ff fbbe 	bl	800b370 <_free_r>
 800bbf4:	463c      	mov	r4, r7
 800bbf6:	e7e0      	b.n	800bbba <_realloc_r+0x1e>

0800bbf8 <_malloc_usable_size_r>:
 800bbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfc:	1f18      	subs	r0, r3, #4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bfbc      	itt	lt
 800bc02:	580b      	ldrlt	r3, [r1, r0]
 800bc04:	18c0      	addlt	r0, r0, r3
 800bc06:	4770      	bx	lr

0800bc08 <_init>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	bf00      	nop
 800bc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0e:	bc08      	pop	{r3}
 800bc10:	469e      	mov	lr, r3
 800bc12:	4770      	bx	lr

0800bc14 <_fini>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr
