
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e628  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800e808  0800e808  0000f808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e950  0800e950  00010098  2**0
                  CONTENTS
  4 .ARM          00000008  0800e950  0800e950  0000f950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e958  0800e958  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e958  0800e958  0000f958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e95c  0800e95c  0000f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800e960  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d14  20000098  0800e9f8  00010098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  0800e9f8  00010dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fec  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045db  00000000  00000000  000320b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00036690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001511  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4cd  00000000  00000000  000396c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cb7  00000000  00000000  00064b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117445  00000000  00000000  0008884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019fc92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b4  00000000  00000000  0019fcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001a758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e7f0 	.word	0x0800e7f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800e7f0 	.word	0x0800e7f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	@ 0x30
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2220      	movs	r2, #32
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00d f857 	bl	800dec8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e22:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e36:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e48:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e62:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000e9e:	f004 f887 	bl	8004fb0 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ea8:	f001 fe14 	bl	8002ad4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000eb8:	f005 f9a6 	bl	8006208 <HAL_ADCEx_MultiModeConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000ec2:	f001 fe07 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_ADC1_Init+0x104>)
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed2:	237f      	movs	r3, #127	@ 0x7f
 8000ed4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <MX_ADC1_Init+0x100>)
 8000ee4:	f004 fb12 	bl	800550c <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000eee:	f001 fdf1 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	@ 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000b4 	.word	0x200000b4
 8000f00:	04300002 	.word	0x04300002

08000f04 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00c ffd9 	bl	800dec8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f18:	4a31      	ldr	r2, [pc, #196]	@ (8000fe0 <MX_ADC2_Init+0xdc>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f22:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f80:	220c      	movs	r2, #12
 8000f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000f98:	f004 f80a 	bl	8004fb0 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000fa2:	f001 fd97 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_ADC2_Init+0xe0>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	@ 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <MX_ADC2_Init+0xd8>)
 8000fc4:	f004 faa2 	bl	800550c <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000fce:	f001 fd81 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000120 	.word	0x20000120
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	0c900008 	.word	0x0c900008

08000fe8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f00c ff61 	bl	800dec8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001008:	4a37      	ldr	r2, [pc, #220]	@ (80010e8 <MX_ADC3_Init+0x100>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800100e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001012:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800102e:	2204      	movs	r2, #4
 8001030:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001034:	2200      	movs	r2, #0
 8001036:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800103a:	2201      	movs	r2, #1
 800103c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001040:	2201      	movs	r2, #1
 8001042:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001070:	220c      	movs	r2, #12
 8001072:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001076:	2280      	movs	r2, #128	@ 0x80
 8001078:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 800107c:	2200      	movs	r2, #0
 800107e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001082:	2201      	movs	r2, #1
 8001084:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 8001088:	f003 ff92 	bl	8004fb0 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8001092:	f001 fd1f 	bl	8002ad4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800109a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4810      	ldr	r0, [pc, #64]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 80010a2:	f005 f8b1 	bl	8006208 <HAL_ADCEx_MultiModeConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80010ac:	f001 fd12 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_ADC3_Init+0x104>)
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b4:	2306      	movs	r3, #6
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010bc:	237f      	movs	r3, #127	@ 0x7f
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c0:	2304      	movs	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_ADC3_Init+0xfc>)
 80010ce:	f004 fa1d 	bl	800550c <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80010d8:	f001 fcfc 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3730      	adds	r7, #48	@ 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000018c 	.word	0x2000018c
 80010e8:	50000400 	.word	0x50000400
 80010ec:	14f00020 	.word	0x14f00020

080010f0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2220      	movs	r2, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00c fee3 	bl	800dec8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001102:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001104:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <MX_ADC4_Init+0xdc>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001108:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800110a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800110e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800112a:	2204      	movs	r2, #4
 800112c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001136:	2201      	movs	r2, #1
 8001138:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800113c:	2201      	movs	r2, #1
 800113e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800116c:	220c      	movs	r2, #12
 800116e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 800117e:	2201      	movs	r2, #1
 8001180:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 8001184:	f003 ff14 	bl	8004fb0 <HAL_ADC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 800118e:	f001 fca1 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_ADC4_Init+0xe0>)
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2306      	movs	r3, #6
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	237f      	movs	r3, #127	@ 0x7f
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2304      	movs	r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_ADC4_Init+0xd8>)
 80011b0:	f004 f9ac 	bl	800550c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 80011ba:	f001 fc8b 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001f8 	.word	0x200001f8
 80011cc:	50000500 	.word	0x50000500
 80011d0:	14f00020 	.word	0x14f00020

080011d4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c fe71 	bl	800dec8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <MX_ADC5_Init+0xd8>)
 80011e8:	4a31      	ldr	r2, [pc, #196]	@ (80012b0 <MX_ADC5_Init+0xdc>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <MX_ADC5_Init+0xd8>)
 80011ee:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80011f2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <MX_ADC5_Init+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <MX_ADC5_Init+0xd8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001200:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001206:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <MX_ADC5_Init+0xd8>)
 800120e:	2204      	movs	r2, #4
 8001210:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <MX_ADC5_Init+0xd8>)
 800121a:	2201      	movs	r2, #1
 800121c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001220:	2201      	movs	r2, #1
 8001222:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_ADC5_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_ADC5_Init+0xd8>)
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001250:	220c      	movs	r2, #12
 8001252:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_ADC5_Init+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001262:	2201      	movs	r2, #1
 8001264:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001266:	4811      	ldr	r0, [pc, #68]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001268:	f003 fea2 	bl	8004fb0 <HAL_ADC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8001272:	f001 fc2f 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_ADC5_Init+0xe0>)
 8001278:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127a:	2306      	movs	r3, #6
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001282:	237f      	movs	r3, #127	@ 0x7f
 8001284:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001286:	2304      	movs	r3, #4
 8001288:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_ADC5_Init+0xd8>)
 8001294:	f004 f93a 	bl	800550c <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 800129e:	f001 fc19 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000264 	.word	0x20000264
 80012b0:	50000600 	.word	0x50000600
 80012b4:	08600004 	.word	0x08600004

080012b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0a6      	sub	sp, #152	@ 0x98
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d4:	2254      	movs	r2, #84	@ 0x54
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00c fdf5 	bl	800dec8 <memset>
  if(adcHandle->Instance==ADC1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012e6:	d16c      	bne.n	80013c2 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012f2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 fb3b 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001304:	f001 fbe6 	bl	8002ad4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001308:	4ba0      	ldr	r3, [pc, #640]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a9f      	ldr	r2, [pc, #636]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 8001310:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001312:	4b9e      	ldr	r3, [pc, #632]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10b      	bne.n	8001332 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800131a:	4b9d      	ldr	r3, [pc, #628]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a9c      	ldr	r2, [pc, #624]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b9a      	ldr	r3, [pc, #616]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b97      	ldr	r3, [pc, #604]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a96      	ldr	r2, [pc, #600]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b94      	ldr	r3, [pc, #592]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 800134a:	2301      	movs	r3, #1
 800134c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f005 fca7 	bl	8006cb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800136a:	4b8a      	ldr	r3, [pc, #552]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 800136c:	4a8a      	ldr	r2, [pc, #552]	@ (8001598 <HAL_ADC_MspInit+0x2e0>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001370:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 8001372:	2205      	movs	r2, #5
 8001374:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001376:	4b87      	ldr	r3, [pc, #540]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b85      	ldr	r3, [pc, #532]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b84      	ldr	r3, [pc, #528]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001388:	4b82      	ldr	r3, [pc, #520]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 800138a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800138e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001390:	4b80      	ldr	r3, [pc, #512]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 8001392:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001396:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001398:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 800139a:	2220      	movs	r2, #32
 800139c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b7d      	ldr	r3, [pc, #500]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013a4:	487b      	ldr	r0, [pc, #492]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 80013a6:	f005 f947 	bl	8006638 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80013b0:	f001 fb90 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a77      	ldr	r2, [pc, #476]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80013ba:	4a76      	ldr	r2, [pc, #472]	@ (8001594 <HAL_ADC_MspInit+0x2dc>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80013c0:	e1e0      	b.n	8001784 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a75      	ldr	r2, [pc, #468]	@ (800159c <HAL_ADC_MspInit+0x2e4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d16c      	bne.n	80014a6 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013d6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fac9 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80013e8:	f001 fb74 	bl	8002ad4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ec:	4b67      	ldr	r3, [pc, #412]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a66      	ldr	r2, [pc, #408]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 80013f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_ADC_MspInit+0x2d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10b      	bne.n	8001416 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fe:	4b64      	ldr	r3, [pc, #400]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a63      	ldr	r2, [pc, #396]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001404:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b61      	ldr	r3, [pc, #388]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b5e      	ldr	r3, [pc, #376]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a5d      	ldr	r2, [pc, #372]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b5b      	ldr	r3, [pc, #364]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 800142e:	2340      	movs	r3, #64	@ 0x40
 8001430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 fc35 	bl	8006cb8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800144e:	4b54      	ldr	r3, [pc, #336]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001450:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <HAL_ADC_MspInit+0x2ec>)
 8001452:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001454:	4b52      	ldr	r3, [pc, #328]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001456:	2224      	movs	r2, #36	@ 0x24
 8001458:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145a:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b4f      	ldr	r3, [pc, #316]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b4e      	ldr	r3, [pc, #312]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001468:	2280      	movs	r2, #128	@ 0x80
 800146a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146c:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 800146e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001472:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001474:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800147a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800147c:	4b48      	ldr	r3, [pc, #288]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001488:	4845      	ldr	r0, [pc, #276]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 800148a:	f005 f8d5 	bl	8006638 <HAL_DMA_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8001494:	f001 fb1e 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a41      	ldr	r2, [pc, #260]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 800149c:	655a      	str	r2, [r3, #84]	@ 0x54
 800149e:	4a40      	ldr	r2, [pc, #256]	@ (80015a0 <HAL_ADC_MspInit+0x2e8>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80014a4:	e16e      	b.n	8001784 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a3f      	ldr	r2, [pc, #252]	@ (80015a8 <HAL_ADC_MspInit+0x2f0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f040 8085 	bne.w	80015bc <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fa56 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80014ce:	f001 fb01 	bl	8002ad4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014d2:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <HAL_ADC_MspInit+0x2f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a34      	ldr	r2, [pc, #208]	@ (80015ac <HAL_ADC_MspInit+0x2f4>)
 80014da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014dc:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <HAL_ADC_MspInit+0x2f4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10b      	bne.n	80014fc <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	4a29      	ldr	r2, [pc, #164]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	4a23      	ldr	r2, [pc, #140]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_ADC_MspInit+0x2d8>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800152c:	4619      	mov	r1, r3
 800152e:	4820      	ldr	r0, [pc, #128]	@ (80015b0 <HAL_ADC_MspInit+0x2f8>)
 8001530:	f005 fbc2 	bl	8006cb8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001536:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <HAL_ADC_MspInit+0x300>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 800153c:	2225      	movs	r2, #37	@ 0x25
 800153e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001558:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 800155c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001560:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001564:	2220      	movs	r2, #32
 8001566:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800156e:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001570:	f005 f862 	bl	8006638 <HAL_DMA_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 800157a:	f001 faab 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001582:	655a      	str	r2, [r3, #84]	@ 0x54
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_ADC_MspInit+0x2fc>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800158a:	e0fb      	b.n	8001784 <HAL_ADC_MspInit+0x4cc>
 800158c:	200004b0 	.word	0x200004b0
 8001590:	40021000 	.word	0x40021000
 8001594:	200002d0 	.word	0x200002d0
 8001598:	40020008 	.word	0x40020008
 800159c:	50000100 	.word	0x50000100
 80015a0:	20000330 	.word	0x20000330
 80015a4:	4002001c 	.word	0x4002001c
 80015a8:	50000400 	.word	0x50000400
 80015ac:	200004b4 	.word	0x200004b4
 80015b0:	48000400 	.word	0x48000400
 80015b4:	20000390 	.word	0x20000390
 80015b8:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a72      	ldr	r2, [pc, #456]	@ (800178c <HAL_ADC_MspInit+0x4d4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d16c      	bne.n	80016a0 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 f9cc 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 80015e2:	f001 fa77 	bl	8002ad4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a68      	ldr	r2, [pc, #416]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80015ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015f0:	4b67      	ldr	r3, [pc, #412]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10b      	bne.n	8001610 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015f8:	4b66      	ldr	r3, [pc, #408]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	4a65      	ldr	r2, [pc, #404]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80015fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001604:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b60      	ldr	r3, [pc, #384]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161c:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8001628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800162c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001640:	4619      	mov	r1, r3
 8001642:	4855      	ldr	r0, [pc, #340]	@ (8001798 <HAL_ADC_MspInit+0x4e0>)
 8001644:	f005 fb38 	bl	8006cb8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001648:	4b54      	ldr	r3, [pc, #336]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 800164a:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <HAL_ADC_MspInit+0x4e8>)
 800164c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800164e:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001650:	2226      	movs	r2, #38	@ 0x26
 8001652:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001654:	4b51      	ldr	r3, [pc, #324]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b50      	ldr	r3, [pc, #320]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b4e      	ldr	r3, [pc, #312]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001666:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800166c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800166e:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001674:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001676:	4b49      	ldr	r3, [pc, #292]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001678:	2220      	movs	r2, #32
 800167a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800167c:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001682:	4846      	ldr	r0, [pc, #280]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001684:	f004 ffd8 	bl	8006638 <HAL_DMA_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 800168e:	f001 fa21 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a41      	ldr	r2, [pc, #260]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 8001696:	655a      	str	r2, [r3, #84]	@ 0x54
 8001698:	4a40      	ldr	r2, [pc, #256]	@ (800179c <HAL_ADC_MspInit+0x4e4>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800169e:	e071      	b.n	8001784 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3f      	ldr	r2, [pc, #252]	@ (80017a4 <HAL_ADC_MspInit+0x4ec>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d16c      	bne.n	8001784 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80016aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ae:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80016b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ba:	4618      	mov	r0, r3
 80016bc:	f008 f95a 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80016c6:	f001 fa05 	bl	8002ad4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80016d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001790 <HAL_ADC_MspInit+0x4d8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_ADC_MspInit+0x4dc>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 800170c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172a:	f005 fac5 	bl	8006cb8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001730:	4a1e      	ldr	r2, [pc, #120]	@ (80017ac <HAL_ADC_MspInit+0x4f4>)
 8001732:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001736:	2227      	movs	r2, #39	@ 0x27
 8001738:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001748:	2280      	movs	r2, #128	@ 0x80
 800174a:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 800174e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001752:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800175a:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 800175e:	2220      	movs	r2, #32
 8001760:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001768:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 800176a:	f004 ff65 	bl	8006638 <HAL_DMA_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001774:	f001 f9ae 	bl	8002ad4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 800177c:	655a      	str	r2, [r3, #84]	@ 0x54
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_ADC_MspInit+0x4f0>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001784:	bf00      	nop
 8001786:	3798      	adds	r7, #152	@ 0x98
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	50000500 	.word	0x50000500
 8001790:	200004b4 	.word	0x200004b4
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400
 800179c:	200003f0 	.word	0x200003f0
 80017a0:	40020044 	.word	0x40020044
 80017a4:	50000600 	.word	0x50000600
 80017a8:	20000450 	.word	0x20000450
 80017ac:	40020058 	.word	0x40020058

080017b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <MX_DMA_Init+0x60>)
 80017b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <MX_DMA_Init+0x60>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <MX_DMA_Init+0x60>)
 80017c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <MX_DMA_Init+0x60>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <MX_DMA_Init+0x60>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <MX_DMA_Init+0x60>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2010      	movs	r0, #16
 80017ec:	f004 feef 	bl	80065ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017f0:	2010      	movs	r0, #16
 80017f2:	f004 ff06 	bl	8006602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2011      	movs	r0, #17
 80017fc:	f004 fee7 	bl	80065ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001800:	2011      	movs	r0, #17
 8001802:	f004 fefe 	bl	8006602 <HAL_NVIC_EnableIRQ>

}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 800181e:	2100      	movs	r1, #0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f008 fd91 	bl	800a348 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8001826:	2100      	movs	r1, #0
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f008 fd8d 	bl	800a348 <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start_IT(timer16);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f008 fb46 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(timer17);
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f008 fb43 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <processarCapturaRodaEsquerda>:

void processarCapturaRodaEsquerda(TIM_HandleTypeDef *htim) {
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <processarCapturaRodaEsquerda+0xb4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <processarCapturaRodaEsquerda+0x28>
    {	overflow1 =0;
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <processarCapturaRodaEsquerda+0xb8>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
    	valorCaptura1 = htim->Instance->CCR1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001860:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <processarCapturaRodaEsquerda+0xbc>)
 8001862:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <processarCapturaRodaEsquerda+0xb4>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
        overflow1 =0;
    }
}
 800186a:	e03e      	b.n	80018ea <processarCapturaRodaEsquerda+0xa6>
        valorCaptura2 = htim->Instance -> CCR1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001872:	4a24      	ldr	r2, [pc, #144]	@ (8001904 <processarCapturaRodaEsquerda+0xc0>)
 8001874:	6013      	str	r3, [r2, #0]
        valorCaptura2 += contadorMaximo*overflow1;
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <processarCapturaRodaEsquerda+0xc4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <processarCapturaRodaEsquerda+0xb8>)
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	461a      	mov	r2, r3
 8001884:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <processarCapturaRodaEsquerda+0xc0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4413      	add	r3, r2
 800188a:	4a1e      	ldr	r2, [pc, #120]	@ (8001904 <processarCapturaRodaEsquerda+0xc0>)
 800188c:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <processarCapturaRodaEsquerda+0xc0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <processarCapturaRodaEsquerda+0xbc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <processarCapturaRodaEsquerda+0xc8>)
 800189a:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <processarCapturaRodaEsquerda+0xcc>)
 800189e:	60fb      	str	r3, [r7, #12]
        frequenciaRodaEsquerda = clockReferencia / diferencaTempo;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <processarCapturaRodaEsquerda+0xc8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ac:	edd7 6a03 	vldr	s13, [r7, #12]
 80018b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <processarCapturaRodaEsquerda+0xd0>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]
        velocidadeRodaEsquerda = (frequenciaRodaEsquerda / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <processarCapturaRodaEsquerda+0xd0>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001918 <processarCapturaRodaEsquerda+0xd4>
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <processarCapturaRodaEsquerda+0xd8>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <processarCapturaRodaEsquerda+0xb4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
        overflow1 =0;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <processarCapturaRodaEsquerda+0xb8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200004cc 	.word	0x200004cc
 80018fc:	200004d8 	.word	0x200004d8
 8001900:	200004b8 	.word	0x200004b8
 8001904:	200004bc 	.word	0x200004bc
 8001908:	20000000 	.word	0x20000000
 800190c:	200004c8 	.word	0x200004c8
 8001910:	47c35000 	.word	0x47c35000
 8001914:	200004e0 	.word	0x200004e0
 8001918:	41a347ae 	.word	0x41a347ae
 800191c:	200004e8 	.word	0x200004e8

08001920 <processarCapturaRodaDireita>:

void processarCapturaRodaDireita(TIM_HandleTypeDef *htim) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8001928:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <processarCapturaRodaDireita+0xb4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10b      	bne.n	8001948 <processarCapturaRodaDireita+0x28>
    {	overflow2 =0;
 8001930:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <processarCapturaRodaDireita+0xb8>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    	valorCaptura3 = htim->Instance->CCR1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193c:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <processarCapturaRodaDireita+0xbc>)
 800193e:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <processarCapturaRodaDireita+0xb4>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
        overflow2 =0;
    }
}
 8001946:	e03e      	b.n	80019c6 <processarCapturaRodaDireita+0xa6>
        valorCaptura4 = htim->Instance -> CCR1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194e:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <processarCapturaRodaDireita+0xc0>)
 8001950:	6013      	str	r3, [r2, #0]
        valorCaptura4 += contadorMaximo*overflow2;
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <processarCapturaRodaDireita+0xc4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <processarCapturaRodaDireita+0xb8>)
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	461a      	mov	r2, r3
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <processarCapturaRodaDireita+0xc0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <processarCapturaRodaDireita+0xc0>)
 8001968:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <processarCapturaRodaDireita+0xc0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <processarCapturaRodaDireita+0xbc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <processarCapturaRodaDireita+0xc8>)
 8001976:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <processarCapturaRodaDireita+0xcc>)
 800197a:	60fb      	str	r3, [r7, #12]
        frequenciaRodaDireita = clockReferencia / diferencaTempo2;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <processarCapturaRodaDireita+0xc8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001988:	edd7 6a03 	vldr	s13, [r7, #12]
 800198c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <processarCapturaRodaDireita+0xd0>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
        velocidadeRodaDireita = (frequenciaRodaDireita / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <processarCapturaRodaDireita+0xd0>)
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80019a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80019f4 <processarCapturaRodaDireita+0xd4>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <processarCapturaRodaDireita+0xd8>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <processarCapturaRodaDireita+0xb4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
        overflow2 =0;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <processarCapturaRodaDireita+0xb8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200004d4 	.word	0x200004d4
 80019d8:	200004dc 	.word	0x200004dc
 80019dc:	200004c0 	.word	0x200004c0
 80019e0:	200004c4 	.word	0x200004c4
 80019e4:	20000000 	.word	0x20000000
 80019e8:	200004d0 	.word	0x200004d0
 80019ec:	47c35000 	.word	0x47c35000
 80019f0:	200004e4 	.word	0x200004e4
 80019f4:	41a347ae 	.word	0x41a347ae
 80019f8:	200004ec 	.word	0x200004ec

080019fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	4a46      	ldr	r2, [pc, #280]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1e:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	4a40      	ldr	r2, [pc, #256]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a36:	4b3e      	ldr	r3, [pc, #248]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a2e      	ldr	r2, [pc, #184]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <MX_GPIO_Init+0x134>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001a90:	4828      	ldr	r0, [pc, #160]	@ (8001b34 <MX_GPIO_Init+0x138>)
 8001a92:	f005 faab 	bl	8006fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa0:	f005 faa4 	bl	8006fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aaa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481f      	ldr	r0, [pc, #124]	@ (8001b38 <MX_GPIO_Init+0x13c>)
 8001abc:	f005 f8fc 	bl	8006cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001ac0:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4816      	ldr	r0, [pc, #88]	@ (8001b34 <MX_GPIO_Init+0x138>)
 8001ada:	f005 f8ed 	bl	8006cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 8001ade:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afa:	f005 f8dd 	bl	8006cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Colisao_Pin;
 8001afe:	2304      	movs	r3, #4
 8001b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Colisao_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480a      	ldr	r0, [pc, #40]	@ (8001b3c <MX_GPIO_Init+0x140>)
 8001b14:	f005 f8d0 	bl	8006cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2028      	movs	r0, #40	@ 0x28
 8001b1e:	f004 fd56 	bl	80065ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b22:	2028      	movs	r0, #40	@ 0x28
 8001b24:	f004 fd6d 	bl	8006602 <HAL_NVIC_EnableIRQ>

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00

08001b40 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b46:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <MX_I2C2_Init+0x78>)
 8001b48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <MX_I2C2_Init+0x7c>)
 8001b4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b50:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b7a:	480e      	ldr	r0, [pc, #56]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b7c:	f005 fa71 	bl	8007062 <HAL_I2C_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b86:	f000 ffa5 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001b8e:	f007 f877 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b98:	f000 ff9c 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_I2C2_Init+0x74>)
 8001ba0:	f007 f8b9 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001baa:	f000 ff93 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200004f0 	.word	0x200004f0
 8001bb8:	40005800 	.word	0x40005800
 8001bbc:	40b285c2 	.word	0x40b285c2

08001bc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a0      	sub	sp, #128	@ 0x80
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2254      	movs	r2, #84	@ 0x54
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00c f971 	bl	800dec8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5f      	ldr	r2, [pc, #380]	@ (8001d68 <HAL_I2C_MspInit+0x1a8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f040 80b6 	bne.w	8001d5e <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 feb8 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c0a:	f000 ff63 	bl	8002ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a56      	ldr	r2, [pc, #344]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c32:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4845      	ldr	r0, [pc, #276]	@ (8001d70 <HAL_I2C_MspInit+0x1b0>)
 8001c5a:	f005 f82d 	bl	8006cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c70:	2304      	movs	r3, #4
 8001c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7e:	f005 f81b 	bl	8006cb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	4a39      	ldr	r2, [pc, #228]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <HAL_I2C_MspInit+0x1ac>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 8001c9a:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001c9c:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <HAL_I2C_MspInit+0x1b8>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001ca2:	2212      	movs	r2, #18
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb2:	4b30      	ldr	r3, [pc, #192]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cb4:	2280      	movs	r2, #128	@ 0x80
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001cd0:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001cd2:	f004 fcb1 	bl	8006638 <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001cdc:	f000 fefa 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <HAL_I2C_MspInit+0x1b4>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001cee:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_I2C_MspInit+0x1c0>)
 8001cf0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001cf4:	2213      	movs	r2, #19
 8001cf6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001d22:	4816      	ldr	r0, [pc, #88]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d24:	f004 fc88 	bl	8006638 <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001d2e:	f000 fed1 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d38:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_I2C_MspInit+0x1bc>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2021      	movs	r0, #33	@ 0x21
 8001d44:	f004 fc43 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d48:	2021      	movs	r0, #33	@ 0x21
 8001d4a:	f004 fc5a 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2022      	movs	r0, #34	@ 0x22
 8001d54:	f004 fc3b 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d58:	2022      	movs	r0, #34	@ 0x22
 8001d5a:	f004 fc52 	bl	8006602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3780      	adds	r7, #128	@ 0x80
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005800 	.word	0x40005800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000800 	.word	0x48000800
 8001d74:	20000544 	.word	0x20000544
 8001d78:	4002006c 	.word	0x4002006c
 8001d7c:	200005a4 	.word	0x200005a4
 8001d80:	40020080 	.word	0x40020080

08001d84 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	70fb      	strb	r3, [r7, #3]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70bb      	strb	r3, [r7, #2]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001da2:	4a53      	ldr	r2, [pc, #332]	@ (8001ef0 <lcdInit+0x16c>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <lcdInit+0x16c>)
 8001db0:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001db2:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef0 <lcdInit+0x16c>)
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001db8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef0 <lcdInit+0x16c>)
 8001dba:	787b      	ldrb	r3, [r7, #1]
 8001dbc:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <lcdInit+0x16c>)
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef4 <lcdInit+0x170>)
 8001dc6:	2234      	movs	r2, #52	@ 0x34
 8001dc8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001dca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef4 <lcdInit+0x170>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b49      	ldr	r3, [pc, #292]	@ (8001ef4 <lcdInit+0x170>)
 8001dd0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001dd2:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <lcdInit+0x170>)
 8001dd4:	2230      	movs	r2, #48	@ 0x30
 8001dd6:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	737b      	strb	r3, [r7, #13]
 8001ddc:	e02f      	b.n	8001e3e <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001dde:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <lcdInit+0x16c>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <lcdInit+0x16c>)
 8001de4:	799b      	ldrb	r3, [r3, #6]
 8001de6:	4619      	mov	r1, r3
 8001de8:	2303      	movs	r3, #3
 8001dea:	4a42      	ldr	r2, [pc, #264]	@ (8001ef4 <lcdInit+0x170>)
 8001dec:	f005 f9d4 	bl	8007198 <HAL_I2C_Master_Transmit_DMA>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <lcdInit+0x76>
            return -1;
 8001df6:	23ff      	movs	r3, #255	@ 0xff
 8001df8:	e076      	b.n	8001ee8 <lcdInit+0x164>
        }

        usCont = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001dfe:	e009      	b.n	8001e14 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	81fa      	strh	r2, [r7, #14]
 8001e06:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e08:	d101      	bne.n	8001e0e <lcdInit+0x8a>
        		return -1;
 8001e0a:	23ff      	movs	r3, #255	@ 0xff
 8001e0c:	e06c      	b.n	8001ee8 <lcdInit+0x164>
        	HAL_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f002 fe68 	bl	8004ae4 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <lcdInit+0x16c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f005 fbae 	bl	800757a <HAL_I2C_GetState>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d1ed      	bne.n	8001e00 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001e24:	7b7b      	ldrb	r3, [r7, #13]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f002 fe5a 	bl	8004ae4 <HAL_Delay>
 8001e30:	e002      	b.n	8001e38 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001e32:	2005      	movs	r0, #5
 8001e34:	f002 fe56 	bl	8004ae4 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001e38:	7b7b      	ldrb	r3, [r7, #13]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	737b      	strb	r3, [r7, #13]
 8001e3e:	7b7b      	ldrb	r3, [r7, #13]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d9cc      	bls.n	8001dde <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001e44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <lcdInit+0x170>)
 8001e46:	222c      	movs	r2, #44	@ 0x2c
 8001e48:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <lcdInit+0x170>)
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <lcdInit+0x170>)
 8001e50:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <lcdInit+0x170>)
 8001e54:	2228      	movs	r2, #40	@ 0x28
 8001e56:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001e58:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <lcdInit+0x16c>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <lcdInit+0x16c>)
 8001e5e:	799b      	ldrb	r3, [r3, #6]
 8001e60:	4619      	mov	r1, r3
 8001e62:	2303      	movs	r3, #3
 8001e64:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <lcdInit+0x170>)
 8001e66:	f005 f997 	bl	8007198 <HAL_I2C_Master_Transmit_DMA>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <lcdInit+0xf0>
        return -1;
 8001e70:	23ff      	movs	r3, #255	@ 0xff
 8001e72:	e039      	b.n	8001ee8 <lcdInit+0x164>
    }

    usCont = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e78:	e009      	b.n	8001e8e <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	81fa      	strh	r2, [r7, #14]
 8001e80:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e82:	d101      	bne.n	8001e88 <lcdInit+0x104>
    		return -1;
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	e02f      	b.n	8001ee8 <lcdInit+0x164>
    	HAL_Delay(1);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f002 fe2b 	bl	8004ae4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <lcdInit+0x16c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fb71 	bl	800757a <HAL_I2C_GetState>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d1ed      	bne.n	8001e7a <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001e9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <lcdInit+0x16c>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d904      	bls.n	8001eba <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001eb0:	7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 f945 	bl	8002150 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f000 f815 	bl	8001ef8 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2007      	movs	r0, #7
 8001ed2:	f000 f811 	bl	8001ef8 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f000 f80d 	bl	8001ef8 <lcdCommand>
    lcdCursorHome();
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2005      	movs	r0, #5
 8001ee2:	f000 f809 	bl	8001ef8 <lcdCommand>

    return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000060c 	.word	0x2000060c
 8001ef4:	20000604 	.word	0x20000604

08001ef8 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	460a      	mov	r2, r1
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d064      	beq.n	8001fdc <lcdCommand+0xe4>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f040 80aa 	bne.w	800206c <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d85a      	bhi.n	8001fd6 <lcdCommand+0xde>
 8001f20:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <lcdCommand+0x30>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f79 	.word	0x08001f79
 8001f30:	08001f59 	.word	0x08001f59
 8001f34:	08001f69 	.word	0x08001f69
 8001f38:	08001f93 	.word	0x08001f93
 8001f3c:	08001fbd 	.word	0x08001fbd
 8001f40:	08001fad 	.word	0x08001fad
 8001f44:	08001fc7 	.word	0x08001fc7
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001f48:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <lcdCommand+0x1c4>)
 8001f4a:	7a1b      	ldrb	r3, [r3, #8]
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b5a      	ldr	r3, [pc, #360]	@ (80020bc <lcdCommand+0x1c4>)
 8001f54:	721a      	strb	r2, [r3, #8]
                    break;
 8001f56:	e040      	b.n	8001fda <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001f58:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <lcdCommand+0x1c4>)
 8001f5a:	7a1b      	ldrb	r3, [r3, #8]
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b56      	ldr	r3, [pc, #344]	@ (80020bc <lcdCommand+0x1c4>)
 8001f64:	721a      	strb	r2, [r3, #8]
                    break;
 8001f66:	e038      	b.n	8001fda <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001f68:	4b54      	ldr	r3, [pc, #336]	@ (80020bc <lcdCommand+0x1c4>)
 8001f6a:	7a1b      	ldrb	r3, [r3, #8]
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b52      	ldr	r3, [pc, #328]	@ (80020bc <lcdCommand+0x1c4>)
 8001f74:	721a      	strb	r2, [r3, #8]
                    break;
 8001f76:	e030      	b.n	8001fda <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001f7c:	f107 030f 	add.w	r3, r7, #15
 8001f80:	4619      	mov	r1, r3
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f8e4 	bl	8002150 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f002 fdab 	bl	8004ae4 <HAL_Delay>
                        return 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e090      	b.n	80020b4 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001f92:	2302      	movs	r3, #2
 8001f94:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8001f96:	f107 030f 	add.w	r3, r7, #15
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f8d7 	bl	8002150 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f002 fd9e 	bl	8004ae4 <HAL_Delay>
                        return 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e083      	b.n	80020b4 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001fac:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <lcdCommand+0x1c4>)
 8001fae:	7a5b      	ldrb	r3, [r3, #9]
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <lcdCommand+0x1c4>)
 8001fb8:	725a      	strb	r2, [r3, #9]
                    break;
 8001fba:	e00e      	b.n	8001fda <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80020bc <lcdCommand+0x1c4>)
 8001fbe:	7a5a      	ldrb	r2, [r3, #9]
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <lcdCommand+0x1c4>)
 8001fc2:	725a      	strb	r2, [r3, #9]
                    break;
 8001fc4:	e009      	b.n	8001fda <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80020bc <lcdCommand+0x1c4>)
 8001fc8:	7a5b      	ldrb	r3, [r3, #9]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <lcdCommand+0x1c4>)
 8001fd2:	725a      	strb	r2, [r3, #9]
                    break;
 8001fd4:	e001      	b.n	8001fda <lcdCommand+0xe2>

                default:
                    return -1;
 8001fd6:	23ff      	movs	r3, #255	@ 0xff
 8001fd8:	e06c      	b.n	80020b4 <lcdCommand+0x1bc>
            }

            break;
 8001fda:	e049      	b.n	8002070 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	d840      	bhi.n	8002066 <lcdCommand+0x16e>
 8001fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <lcdCommand+0xf4>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	0800200d 	.word	0x0800200d
 8001ff0:	08002067 	.word	0x08002067
 8001ff4:	0800201d 	.word	0x0800201d
 8001ff8:	0800202d 	.word	0x0800202d
 8001ffc:	08002067 	.word	0x08002067
 8002000:	0800204d 	.word	0x0800204d
 8002004:	0800203d 	.word	0x0800203d
 8002008:	08002057 	.word	0x08002057
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 800200c:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <lcdCommand+0x1c4>)
 800200e:	7a1b      	ldrb	r3, [r3, #8]
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b29      	ldr	r3, [pc, #164]	@ (80020bc <lcdCommand+0x1c4>)
 8002018:	721a      	strb	r2, [r3, #8]
                    break;
 800201a:	e026      	b.n	800206a <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 800201c:	4b27      	ldr	r3, [pc, #156]	@ (80020bc <lcdCommand+0x1c4>)
 800201e:	7a1b      	ldrb	r3, [r3, #8]
 8002020:	f023 0302 	bic.w	r3, r3, #2
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <lcdCommand+0x1c4>)
 8002028:	721a      	strb	r2, [r3, #8]
                    break;
 800202a:	e01e      	b.n	800206a <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <lcdCommand+0x1c4>)
 800202e:	7a1b      	ldrb	r3, [r3, #8]
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <lcdCommand+0x1c4>)
 8002038:	721a      	strb	r2, [r3, #8]
                    break;
 800203a:	e016      	b.n	800206a <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <lcdCommand+0x1c4>)
 800203e:	7a5b      	ldrb	r3, [r3, #9]
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <lcdCommand+0x1c4>)
 8002048:	725a      	strb	r2, [r3, #9]
                    break;
 800204a:	e00e      	b.n	800206a <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <lcdCommand+0x1c4>)
 800204e:	7a5a      	ldrb	r2, [r3, #9]
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <lcdCommand+0x1c4>)
 8002052:	725a      	strb	r2, [r3, #9]
                    break;
 8002054:	e009      	b.n	800206a <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <lcdCommand+0x1c4>)
 8002058:	7a5b      	ldrb	r3, [r3, #9]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <lcdCommand+0x1c4>)
 8002062:	725a      	strb	r2, [r3, #9]
                    break;
 8002064:	e001      	b.n	800206a <lcdCommand+0x172>

                default:
                    return -1;
 8002066:	23ff      	movs	r3, #255	@ 0xff
 8002068:	e024      	b.n	80020b4 <lcdCommand+0x1bc>
            }

            break;
 800206a:	e001      	b.n	8002070 <lcdCommand+0x178>

        default:
            return -1;
 800206c:	23ff      	movs	r3, #255	@ 0xff
 800206e:	e021      	b.n	80020b4 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b08      	cmp	r3, #8
 8002074:	dc16      	bgt.n	80020a4 <lcdCommand+0x1ac>
 8002076:	2b06      	cmp	r3, #6
 8002078:	da0d      	bge.n	8002096 <lcdCommand+0x19e>
 800207a:	2b01      	cmp	r3, #1
 800207c:	d004      	beq.n	8002088 <lcdCommand+0x190>
 800207e:	2b00      	cmp	r3, #0
 8002080:	dd10      	ble.n	80020a4 <lcdCommand+0x1ac>
 8002082:	3b03      	subs	r3, #3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d80d      	bhi.n	80020a4 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <lcdCommand+0x1c4>)
 800208a:	7a1b      	ldrb	r3, [r3, #8]
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	b2db      	uxtb	r3, r3
 8002092:	73fb      	strb	r3, [r7, #15]
            break;
 8002094:	e007      	b.n	80020a6 <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <lcdCommand+0x1c4>)
 8002098:	7a5b      	ldrb	r3, [r3, #9]
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	73fb      	strb	r3, [r7, #15]
            break;
 80020a2:	e000      	b.n	80020a6 <lcdCommand+0x1ae>

        default:
            break;
 80020a4:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80020a6:	f107 030f 	add.w	r3, r7, #15
 80020aa:	4619      	mov	r1, r3
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f84f 	bl	8002150 <lcdWriteByte>
 80020b2:	4603      	mov	r3, r0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000060c 	.word	0x2000060c

080020c0 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <lcdSetCursorPosition+0x50>)
 80020d2:	791b      	ldrb	r3, [r3, #4]
 80020d4:	79ba      	ldrb	r2, [r7, #6]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d303      	bcc.n	80020e2 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <lcdSetCursorPosition+0x50>)
 80020dc:	791b      	ldrb	r3, [r3, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <lcdSetCursorPosition+0x54>)
 80020e6:	5cd2      	ldrb	r2, [r2, r3]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	4619      	mov	r1, r3
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f825 	bl	8002150 <lcdWriteByte>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000060c 	.word	0x2000060c
 8002114:	0800e8d8 	.word	0x0800e8d8

08002118 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e009      	b.n	800213e <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	4619      	mov	r1, r3
 8002132:	2001      	movs	r0, #1
 8002134:	f000 f80c 	bl	8002150 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	3301      	adds	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3f1      	bcc.n	800212a <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 800215c:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <lcdWriteByte+0xf0>)
 800215e:	79da      	ldrb	r2, [r3, #7]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4313      	orrs	r3, r2
 8002164:	b2da      	uxtb	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	f023 030f 	bic.w	r3, r3, #15
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <lcdWriteByte+0xf4>)
 800217c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <lcdWriteByte+0xf4>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <lcdWriteByte+0xf4>)
 8002184:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8002186:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <lcdWriteByte+0xf0>)
 8002188:	79da      	ldrb	r2, [r3, #7]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4313      	orrs	r3, r2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	b25a      	sxtb	r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	f023 030f 	bic.w	r3, r3, #15
 800219c:	b25b      	sxtb	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <lcdWriteByte+0xf4>)
 80021a6:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <lcdWriteByte+0xf0>)
 80021aa:	79da      	ldrb	r2, [r3, #7]
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4313      	orrs	r3, r2
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <lcdWriteByte+0xf4>)
 80021c6:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <lcdWriteByte+0xf4>)
 80021ca:	78da      	ldrb	r2, [r3, #3]
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <lcdWriteByte+0xf4>)
 80021ce:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <lcdWriteByte+0xf0>)
 80021d2:	79da      	ldrb	r2, [r3, #7]
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <lcdWriteByte+0xf4>)
 80021ec:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <lcdWriteByte+0xf0>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <lcdWriteByte+0xf0>)
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	4619      	mov	r1, r3
 80021f8:	2306      	movs	r3, #6
 80021fa:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <lcdWriteByte+0xf4>)
 80021fc:	f004 ffcc 	bl	8007198 <HAL_I2C_Master_Transmit_DMA>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <lcdWriteByte+0xba>
        return -1;
 8002206:	23ff      	movs	r3, #255	@ 0xff
 8002208:	e015      	b.n	8002236 <lcdWriteByte+0xe6>
    }

    usCont = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800220e:	e009      	b.n	8002224 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	81fa      	strh	r2, [r7, #14]
 8002216:	2bc8      	cmp	r3, #200	@ 0xc8
 8002218:	d101      	bne.n	800221e <lcdWriteByte+0xce>
    		return -1;
 800221a:	23ff      	movs	r3, #255	@ 0xff
 800221c:	e00b      	b.n	8002236 <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f002 fc60 	bl	8004ae4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <lcdWriteByte+0xf0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f005 f9a6 	bl	800757a <HAL_I2C_GetState>
 800222e:	4603      	mov	r3, r0
 8002230:	2b20      	cmp	r3, #32
 8002232:	d1ed      	bne.n	8002210 <lcdWriteByte+0xc0>
    }

    return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000060c 	.word	0x2000060c
 8002244:	20000604 	.word	0x20000604

08002248 <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 8002248:	b580      	push	{r7, lr}
 800224a:	b090      	sub	sp, #64	@ 0x40
 800224c:	af00      	add	r7, sp, #0
 800224e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002252:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 8002256:	edd7 7a01 	vldr	s15, [r7, #4]
 800225a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225e:	ee17 3a90 	vmov	r3, s15
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 8002264:	edd7 7a00 	vldr	s15, [r7]
 8002268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226c:	ee17 3a90 	vmov	r3, s15
 8002270:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 8002272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002284:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002364 <vPrintMotorSpeed+0x11c>
 8002288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8002296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	ed97 7a00 	vldr	s14, [r7]
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002364 <vPrintMotorSpeed+0x11c>
 80022ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	ee17 3a90 	vmov	r3, s15
 80022b8:	633b      	str	r3, [r7, #48]	@ 0x30

    // Display Test
    // Filtering the lowest speeds
    if (10 <= fVelocidadeRodaEsquerda) sprintf((char *)ucLCD0Msg, "Speed L:  %02d,%02d ", iVEInteiro, iVEdec);
 80022ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80022be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	db07      	blt.n	80022dc <vPrintMotorSpeed+0x94>
 80022cc:	f107 001c 	add.w	r0, r7, #28
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022d4:	4924      	ldr	r1, [pc, #144]	@ (8002368 <vPrintMotorSpeed+0x120>)
 80022d6:	f00b fdd7 	bl	800de88 <siprintf>
 80022da:	e005      	b.n	80022e8 <vPrintMotorSpeed+0xa0>
    else sprintf((char *)ucLCD0Msg, "Speed L:  00,00 ");
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4922      	ldr	r1, [pc, #136]	@ (800236c <vPrintMotorSpeed+0x124>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00b fdd0 	bl	800de88 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fee8 	bl	80020c0 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fd ff93 	bl	8000220 <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff07 	bl	8002118 <lcdPrintStr>

    // Filter low speeds
    if (10 <= fVelocidadeRodaDireita) sprintf((char *)ucLCD1Msg, "Speed R:  %02d,%02d ", iVDInteiro, iVDdec);
 800230a:	edd7 7a00 	vldr	s15, [r7]
 800230e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	db07      	blt.n	800232c <vPrintMotorSpeed+0xe4>
 800231c:	f107 0008 	add.w	r0, r7, #8
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002324:	4912      	ldr	r1, [pc, #72]	@ (8002370 <vPrintMotorSpeed+0x128>)
 8002326:	f00b fdaf 	bl	800de88 <siprintf>
 800232a:	e005      	b.n	8002338 <vPrintMotorSpeed+0xf0>
    else sprintf((char *)ucLCD1Msg, "Speed R:  00,00 ");
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	4910      	ldr	r1, [pc, #64]	@ (8002374 <vPrintMotorSpeed+0x12c>)
 8002332:	4618      	mov	r0, r3
 8002334:	f00b fda8 	bl	800de88 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8002338:	2101      	movs	r1, #1
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fec0 	bl	80020c0 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f7fd ff6b 	bl	8000220 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b2da      	uxtb	r2, r3
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fedf 	bl	8002118 <lcdPrintStr>
}
 800235a:	bf00      	nop
 800235c:	3740      	adds	r7, #64	@ 0x40
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	42c80000 	.word	0x42c80000
 8002368:	0800e808 	.word	0x0800e808
 800236c:	0800e820 	.word	0x0800e820
 8002370:	0800e834 	.word	0x0800e834
 8002374:	0800e84c 	.word	0x0800e84c

08002378 <vPrintString>:

void vPrintString(char* strLinha0, char* strLinha1){
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];

    // Garantir que as strings não ultrapassem 16 caracteres
    strncpy((char *)ucLCD0Msg, strLinha0, 16);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	2210      	movs	r2, #16
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	f00b fda4 	bl	800ded8 <strncpy>
    ucLCD0Msg[16] = '\0';  // Garantir que a string tenha terminação nula
 8002390:	2300      	movs	r3, #0
 8002392:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    strncpy((char *)ucLCD1Msg, strLinha1, 16);
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	2210      	movs	r2, #16
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f00b fd9a 	bl	800ded8 <strncpy>
    ucLCD1Msg[16] = '\0';  // Garantir que a string tenha terminação nula
 80023a4:	2300      	movs	r3, #0
 80023a6:	763b      	strb	r3, [r7, #24]

    // Exibir a primeira string na primeira linha do display
    lcdSetCursorPosition(0, 0);  // Define a posição do cursor para a linha 0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff fe88 	bl	80020c0 <lcdSetCursorPosition>
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));  // Imprime a string
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff33 	bl	8000220 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fea7 	bl	8002118 <lcdPrintStr>

    // Exibir a segunda string na segunda linha do display
    lcdSetCursorPosition(0, 1);  // Define a posição do cursor para a linha 1
 80023ca:	2101      	movs	r1, #1
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fe77 	bl	80020c0 <lcdSetCursorPosition>
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));  // Imprime a string
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fd ff22 	bl	8000220 <strlen>
 80023dc:	4603      	mov	r3, r0
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fe96 	bl	8002118 <lcdPrintStr>
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	@ 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f8:	f002 fb03 	bl	8004a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fc:	f000 f996 	bl	800272c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002400:	f7ff fafc 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002404:	f7ff f9d4 	bl	80017b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002408:	f002 f99c 	bl	8004744 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800240c:	f001 fb32 	bl	8003a74 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002410:	f7ff fb96 	bl	8001b40 <MX_I2C2_Init>
  MX_ADC3_Init();
 8002414:	f7fe fde8 	bl	8000fe8 <MX_ADC3_Init>
  MX_ADC1_Init();
 8002418:	f7fe fcf0 	bl	8000dfc <MX_ADC1_Init>
  MX_ADC2_Init();
 800241c:	f7fe fd72 	bl	8000f04 <MX_ADC2_Init>
  MX_ADC4_Init();
 8002420:	f7fe fe66 	bl	80010f0 <MX_ADC4_Init>
  MX_ADC5_Init();
 8002424:	f7fe fed6 	bl	80011d4 <MX_ADC5_Init>
  MX_TIM16_Init();
 8002428:	f001 fdfc 	bl	8004024 <MX_TIM16_Init>
  MX_TIM17_Init();
 800242c:	f001 fe46 	bl	80040bc <MX_TIM17_Init>
  MX_TIM6_Init();
 8002430:	f001 fcc0 	bl	8003db4 <MX_TIM6_Init>
  MX_TIM15_Init();
 8002434:	f001 fda4 	bl	8003f80 <MX_TIM15_Init>
  MX_TIM2_Init();
 8002438:	f001 fbd8 	bl	8003bec <MX_TIM2_Init>
  MX_TIM3_Init();
 800243c:	f001 fc24 	bl	8003c88 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002440:	f002 f9ca 	bl	80047d8 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8002444:	f001 fcec 	bl	8003e20 <MX_TIM8_Init>
  MX_TIM20_Init();
 8002448:	f001 fe84 	bl	8004154 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 800244c:	4895      	ldr	r0, [pc, #596]	@ (80026a4 <main+0x2b0>)
 800244e:	f000 fb47 	bl	8002ae0 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8002452:	4995      	ldr	r1, [pc, #596]	@ (80026a8 <main+0x2b4>)
 8002454:	4895      	ldr	r0, [pc, #596]	@ (80026ac <main+0x2b8>)
 8002456:	f7ff f9dd 	bl	8001814 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 800245a:	4895      	ldr	r0, [pc, #596]	@ (80026b0 <main+0x2bc>)
 800245c:	f000 fdfe 	bl	800305c <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8002460:	4894      	ldr	r0, [pc, #592]	@ (80026b4 <main+0x2c0>)
 8002462:	f000 fe17 	bl	8003094 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8002466:	4894      	ldr	r0, [pc, #592]	@ (80026b8 <main+0x2c4>)
 8002468:	f000 fe30 	bl	80030cc <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 800246c:	4893      	ldr	r0, [pc, #588]	@ (80026bc <main+0x2c8>)
 800246e:	f000 fe49 	bl	8003104 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8002472:	4893      	ldr	r0, [pc, #588]	@ (80026c0 <main+0x2cc>)
 8002474:	f000 fe62 	bl	800313c <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8002478:	2310      	movs	r3, #16
 800247a:	2202      	movs	r2, #2
 800247c:	2127      	movs	r1, #39	@ 0x27
 800247e:	4891      	ldr	r0, [pc, #580]	@ (80026c4 <main+0x2d0>)
 8002480:	f7ff fc80 	bl	8001d84 <lcdInit>
  HAL_TIM_Base_Start_IT(&htim15);
 8002484:	4890      	ldr	r0, [pc, #576]	@ (80026c8 <main+0x2d4>)
 8002486:	f007 fd1b 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800248a:	4890      	ldr	r0, [pc, #576]	@ (80026cc <main+0x2d8>)
 800248c:	f007 fd18 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
  vPidInit(3.2, 0.22, 0, 1000, 100);
 8002490:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 80026d0 <main+0x2dc>
 8002494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002498:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 80026d4 <main+0x2e0>
 800249c:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80026d8 <main+0x2e4>
 80024a0:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 80026dc <main+0x2e8>
 80024a4:	f000 fbaa 	bl	8002bfc <vPidInit>
  vPidInit2(3.5, 0.5, 0, 1000, 100);
 80024a8:	eddf 1a89 	vldr	s3, [pc, #548]	@ 80026d0 <main+0x2dc>
 80024ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024b0:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 80026d4 <main+0x2e0>
 80024b4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80024b8:	eeb0 0a0c 	vmov.f32	s0, #12	@ 0x40600000  3.5
 80024bc:	f000 fc92 	bl	8002de4 <vPidInit2>

  //Buzzer
  vDistanceSensorInitSensors(&htim20, TIM_CHANNEL_1, &htim3, TIM_CHANNEL_1);
 80024c0:	2300      	movs	r3, #0
 80024c2:	4a82      	ldr	r2, [pc, #520]	@ (80026cc <main+0x2d8>)
 80024c4:	2100      	movs	r1, #0
 80024c6:	4886      	ldr	r0, [pc, #536]	@ (80026e0 <main+0x2ec>)
 80024c8:	f001 f924 	bl	8003714 <vDistanceSensorInitSensors>

  //Bluetooth
  HAL_UART_Receive_IT(&huart3,&rxData,1);
 80024cc:	2201      	movs	r2, #1
 80024ce:	4985      	ldr	r1, [pc, #532]	@ (80026e4 <main+0x2f0>)
 80024d0:	4885      	ldr	r0, [pc, #532]	@ (80026e8 <main+0x2f4>)
 80024d2:	f009 fc8b 	bl	800bdec <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */

  	//vPrintMotorSpeed(0, 0);
    while (1)
    {
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80024d6:	4b85      	ldr	r3, [pc, #532]	@ (80026ec <main+0x2f8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34
//    	iColisao = 0;


    	if((iCarroParado == 1) && (iColisao == 0)){
 80024de:	4b84      	ldr	r3, [pc, #528]	@ (80026f0 <main+0x2fc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <main+0x102>
 80024e6:	4b83      	ldr	r3, [pc, #524]	@ (80026f4 <main+0x300>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <main+0x102>
    		vPrintString("      MODO      ", "     MANUAL     ");
 80024ee:	4982      	ldr	r1, [pc, #520]	@ (80026f8 <main+0x304>)
 80024f0:	4882      	ldr	r0, [pc, #520]	@ (80026fc <main+0x308>)
 80024f2:	f7ff ff41 	bl	8002378 <vPrintString>
    	}


    	if ((5 <= iLCDcounter) && (rxData_M == 0) && (iColisao == 0))
 80024f6:	4b82      	ldr	r3, [pc, #520]	@ (8002700 <main+0x30c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	f340 8095 	ble.w	800262a <main+0x236>
 8002500:	4b80      	ldr	r3, [pc, #512]	@ (8002704 <main+0x310>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 808f 	bne.w	800262a <main+0x236>
 800250c:	4b79      	ldr	r3, [pc, #484]	@ (80026f4 <main+0x300>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 808a 	bne.w	800262a <main+0x236>

	    {
			if ((fVelocidadeEsquerdaAntiga == velocidadeRodaEsquerda) && (fVelocidadeDireitaAntiga != velocidadeRodaDireita))
 8002516:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <main+0x314>)
 8002518:	ed93 7a00 	vldr	s14, [r3]
 800251c:	4b7b      	ldr	r3, [pc, #492]	@ (800270c <main+0x318>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eeb4 7a67 	vcmp.f32	s14, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d114      	bne.n	8002556 <main+0x162>
 800252c:	4b78      	ldr	r3, [pc, #480]	@ (8002710 <main+0x31c>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b78      	ldr	r3, [pc, #480]	@ (8002714 <main+0x320>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	eeb4 7a67 	vcmp.f32	s14, s15
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	d009      	beq.n	8002556 <main+0x162>
			  {
				vPrintMotorSpeed(0, velocidadeRodaDireita);
 8002542:	4b74      	ldr	r3, [pc, #464]	@ (8002714 <main+0x320>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	eef0 0a67 	vmov.f32	s1, s15
 800254c:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80026d4 <main+0x2e0>
 8002550:	f7ff fe7a 	bl	8002248 <vPrintMotorSpeed>
 8002554:	e05e      	b.n	8002614 <main+0x220>
			  }
			  else if ((fVelocidadeEsquerdaAntiga != velocidadeRodaEsquerda) && (fVelocidadeDireitaAntiga == velocidadeRodaDireita))
 8002556:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <main+0x314>)
 8002558:	ed93 7a00 	vldr	s14, [r3]
 800255c:	4b6b      	ldr	r3, [pc, #428]	@ (800270c <main+0x318>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	eeb4 7a67 	vcmp.f32	s14, s15
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	d014      	beq.n	8002596 <main+0x1a2>
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <main+0x31c>)
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	4b68      	ldr	r3, [pc, #416]	@ (8002714 <main+0x320>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eeb4 7a67 	vcmp.f32	s14, s15
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d109      	bne.n	8002596 <main+0x1a2>
			  {
				vPrintMotorSpeed(velocidadeRodaEsquerda, 0);
 8002582:	4b62      	ldr	r3, [pc, #392]	@ (800270c <main+0x318>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80026d4 <main+0x2e0>
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	f7ff fe5a 	bl	8002248 <vPrintMotorSpeed>
 8002594:	e03e      	b.n	8002614 <main+0x220>
			  }
			  else if ((fVelocidadeEsquerdaAntiga != velocidadeRodaEsquerda) && (fVelocidadeDireitaAntiga != velocidadeRodaDireita))
 8002596:	4b5c      	ldr	r3, [pc, #368]	@ (8002708 <main+0x314>)
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <main+0x318>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d017      	beq.n	80025dc <main+0x1e8>
 80025ac:	4b58      	ldr	r3, [pc, #352]	@ (8002710 <main+0x31c>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	4b58      	ldr	r3, [pc, #352]	@ (8002714 <main+0x320>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	d00c      	beq.n	80025dc <main+0x1e8>
			  {
				vPrintMotorSpeed(velocidadeRodaEsquerda, velocidadeRodaDireita);
 80025c2:	4b52      	ldr	r3, [pc, #328]	@ (800270c <main+0x318>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	4b52      	ldr	r3, [pc, #328]	@ (8002714 <main+0x320>)
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	eef0 0a47 	vmov.f32	s1, s14
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	f7ff fe37 	bl	8002248 <vPrintMotorSpeed>
 80025da:	e01b      	b.n	8002614 <main+0x220>
			  }
			  else if ((fVelocidadeEsquerdaAntiga == velocidadeRodaEsquerda) && (fVelocidadeDireitaAntiga == velocidadeRodaDireita))
 80025dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <main+0x314>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	4b4a      	ldr	r3, [pc, #296]	@ (800270c <main+0x318>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d110      	bne.n	8002614 <main+0x220>
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <main+0x31c>)
 80025f4:	ed93 7a00 	vldr	s14, [r3]
 80025f8:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <main+0x320>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d105      	bne.n	8002614 <main+0x220>
			  {
				vPrintMotorSpeed(0, 0);
 8002608:	eddf 0a32 	vldr	s1, [pc, #200]	@ 80026d4 <main+0x2e0>
 800260c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80026d4 <main+0x2e0>
 8002610:	f7ff fe1a 	bl	8002248 <vPrintMotorSpeed>
			  }

			  fVelocidadeEsquerdaAntiga = velocidadeRodaEsquerda;
 8002614:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <main+0x318>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <main+0x314>)
 800261a:	6013      	str	r3, [r2, #0]
		      fVelocidadeDireitaAntiga = velocidadeRodaDireita;
 800261c:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <main+0x320>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <main+0x31c>)
 8002622:	6013      	str	r3, [r2, #0]
		      iLCDcounter=0;
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <main+0x30c>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
	    }



    	if(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 800262a:	2104      	movs	r1, #4
 800262c:	483a      	ldr	r0, [pc, #232]	@ (8002718 <main+0x324>)
 800262e:	f004 fcc5 	bl	8006fbc <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d112      	bne.n	800265e <main+0x26a>

    		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 999);
 8002638:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <main+0x2f8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34
    		vPrintString("    ATENCAO  !! ", "  HOUVE COLISAO ");
 8002642:	4936      	ldr	r1, [pc, #216]	@ (800271c <main+0x328>)
 8002644:	4836      	ldr	r0, [pc, #216]	@ (8002720 <main+0x32c>)
 8002646:	f7ff fe97 	bl	8002378 <vPrintString>
    		vSetRodasDC(0,0);
 800264a:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80026d4 <main+0x2e0>
 800264e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80026d4 <main+0x2e0>
 8002652:	f000 fa79 	bl	8002b48 <vSetRodasDC>
    		iColisao = 1;
 8002656:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <main+0x300>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e002      	b.n	8002664 <main+0x270>

    	}
    	else{
    		iColisao = 0;
 800265e:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <main+0x300>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    	}
    	fDistancia = fDistanceSensorGetRightDistance();
 8002664:	f001 f894 	bl	8003790 <fDistanceSensorGetRightDistance>
 8002668:	eef0 7a40 	vmov.f32	s15, s0
 800266c:	4b2d      	ldr	r3, [pc, #180]	@ (8002724 <main+0x330>)
 800266e:	edc3 7a00 	vstr	s15, [r3]
    	if (fDistancia < 20)
 8002672:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <main+0x330>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800267c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	d50c      	bpl.n	80026a0 <main+0x2ac>
    	{
    		vPrintString("    ATENCAO  !! ", "  HAVERA COLISAO ");
 8002686:	4928      	ldr	r1, [pc, #160]	@ (8002728 <main+0x334>)
 8002688:	4825      	ldr	r0, [pc, #148]	@ (8002720 <main+0x32c>)
 800268a:	f7ff fe75 	bl	8002378 <vPrintString>
    		vSetRodasDC(0,0);
 800268e:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80026d4 <main+0x2e0>
 8002692:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80026d4 <main+0x2e0>
 8002696:	f000 fa57 	bl	8002b48 <vSetRodasDC>
			iColisao = 1;
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <main+0x300>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80026a0:	e719      	b.n	80024d6 <main+0xe2>
 80026a2:	bf00      	nop
 80026a4:	2000088c 	.word	0x2000088c
 80026a8:	20000aa0 	.word	0x20000aa0
 80026ac:	20000a54 	.word	0x20000a54
 80026b0:	200000b4 	.word	0x200000b4
 80026b4:	20000120 	.word	0x20000120
 80026b8:	2000018c 	.word	0x2000018c
 80026bc:	200001f8 	.word	0x200001f8
 80026c0:	20000264 	.word	0x20000264
 80026c4:	200004f0 	.word	0x200004f0
 80026c8:	20000a08 	.word	0x20000a08
 80026cc:	20000924 	.word	0x20000924
 80026d0:	42c80000 	.word	0x42c80000
 80026d4:	00000000 	.word	0x00000000
 80026d8:	3e6147ae 	.word	0x3e6147ae
 80026dc:	404ccccd 	.word	0x404ccccd
 80026e0:	20000aec 	.word	0x20000aec
 80026e4:	20000618 	.word	0x20000618
 80026e8:	20000bcc 	.word	0x20000bcc
 80026ec:	200009bc 	.word	0x200009bc
 80026f0:	20000620 	.word	0x20000620
 80026f4:	2000061c 	.word	0x2000061c
 80026f8:	0800e860 	.word	0x0800e860
 80026fc:	0800e874 	.word	0x0800e874
 8002700:	20000624 	.word	0x20000624
 8002704:	20000619 	.word	0x20000619
 8002708:	20000628 	.word	0x20000628
 800270c:	200004e8 	.word	0x200004e8
 8002710:	2000062c 	.word	0x2000062c
 8002714:	200004ec 	.word	0x200004ec
 8002718:	48000c00 	.word	0x48000c00
 800271c:	0800e888 	.word	0x0800e888
 8002720:	0800e89c 	.word	0x0800e89c
 8002724:	20000630 	.word	0x20000630
 8002728:	0800e8b0 	.word	0x0800e8b0

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b094      	sub	sp, #80	@ 0x50
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	2238      	movs	r2, #56	@ 0x38
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f00b fbc4 	bl	800dec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800274e:	2000      	movs	r0, #0
 8002750:	f006 fb2e 	bl	8008db0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800275e:	2340      	movs	r3, #64	@ 0x40
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002762:	2302      	movs	r3, #2
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002766:	2302      	movs	r3, #2
 8002768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800276a:	2304      	movs	r3, #4
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800276e:	2355      	movs	r3, #85	@ 0x55
 8002770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002772:	2302      	movs	r3, #2
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002776:	2302      	movs	r3, #2
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800277a:	2302      	movs	r3, #2
 800277c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277e:	f107 0318 	add.w	r3, r7, #24
 8002782:	4618      	mov	r0, r3
 8002784:	f006 fbc8 	bl	8008f18 <HAL_RCC_OscConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800278e:	f000 f9a1 	bl	8002ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002792:	230f      	movs	r3, #15
 8002794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002796:	2303      	movs	r3, #3
 8002798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2104      	movs	r1, #4
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fec6 	bl	800953c <HAL_RCC_ClockConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027b6:	f000 f98d 	bl	8002ad4 <Error_Handler>
  }
}
 80027ba:	bf00      	nop
 80027bc:	3750      	adds	r7, #80	@ 0x50
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	iCarroParado = 0;
 80027cc:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
	if (rxData_M == 0 && iColisao ==0){
 80027d2:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d132      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x7e>
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d12e      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x7e>
		if (htim == &htim15){
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a31      	ldr	r2, [pc, #196]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
			vLineSensorPIDControl();
 80027ec:	f000 fd66 	bl	80032bc <vLineSensorPIDControl>
		}
		if (htim == &htim3){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_PeriodElapsedCallback+0x38>
			ajustaVelocidadeRodas();
 80027f8:	f000 fbe8 	bl	8002fcc <ajustaVelocidadeRodas>
			}
		if (htim == &htim16){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a2d      	ldr	r2, [pc, #180]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d10c      	bne.n	800281e <HAL_TIM_PeriodElapsedCallback+0x5a>
			overflow1 +=1;
 8002804:	4b2c      	ldr	r3, [pc, #176]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	4a2b      	ldr	r2, [pc, #172]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800280c:	6013      	str	r3, [r2, #0]
			if(overflow1 > 5){
 800280e:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b05      	cmp	r3, #5
 8002814:	dd03      	ble.n	800281e <HAL_TIM_PeriodElapsedCallback+0x5a>
				velocidadeRodaEsquerda = 0;
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
			}
			}
		if (htim == &htim17){
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a27      	ldr	r2, [pc, #156]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12e      	bne.n	8002884 <HAL_TIM_PeriodElapsedCallback+0xc0>
			overflow2 +=1;
 8002826:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800282e:	6013      	str	r3, [r2, #0]
			if(overflow2 > 5){
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b05      	cmp	r3, #5
 8002836:	dd25      	ble.n	8002884 <HAL_TIM_PeriodElapsedCallback+0xc0>
				velocidadeRodaDireita = 0;
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
		if (htim == &htim17){
 8002840:	e020      	b.n	8002884 <HAL_TIM_PeriodElapsedCallback+0xc0>
			}
		}
	}
	else if((iColisao == 1)){
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d106      	bne.n	8002858 <HAL_TIM_PeriodElapsedCallback+0x94>
		vSetRodasDC(0,0);
 800284a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80028cc <HAL_TIM_PeriodElapsedCallback+0x108>
 800284e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80028cc <HAL_TIM_PeriodElapsedCallback+0x108>
 8002852:	f000 f979 	bl	8002b48 <vSetRodasDC>
 8002856:	e016      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0xc2>
	}
	else if((fDistancia < 20) && rxData_M == 0){
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d50c      	bpl.n	8002886 <HAL_TIM_PeriodElapsedCallback+0xc2>
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_TIM_PeriodElapsedCallback+0xc2>
			vSetRodasDC(0,0);
 8002876:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80028cc <HAL_TIM_PeriodElapsedCallback+0x108>
 800287a:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80028cc <HAL_TIM_PeriodElapsedCallback+0x108>
 800287e:	f000 f963 	bl	8002b48 <vSetRodasDC>
 8002882:	e000      	b.n	8002886 <HAL_TIM_PeriodElapsedCallback+0xc2>
		if (htim == &htim17){
 8002884:	bf00      	nop
		}
	if (htim == &htim15){
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d104      	bne.n	8002898 <HAL_TIM_PeriodElapsedCallback+0xd4>
		iLCDcounter += 1;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	4a0f      	ldr	r2, [pc, #60]	@ (80028d4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002896:	6013      	str	r3, [r2, #0]
	}
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000620 	.word	0x20000620
 80028a4:	20000619 	.word	0x20000619
 80028a8:	2000061c 	.word	0x2000061c
 80028ac:	20000a08 	.word	0x20000a08
 80028b0:	20000924 	.word	0x20000924
 80028b4:	20000a54 	.word	0x20000a54
 80028b8:	200004d8 	.word	0x200004d8
 80028bc:	200004e8 	.word	0x200004e8
 80028c0:	20000aa0 	.word	0x20000aa0
 80028c4:	200004dc 	.word	0x200004dc
 80028c8:	200004ec 	.word	0x200004ec
 80028cc:	00000000 	.word	0x00000000
 80028d0:	20000630 	.word	0x20000630
 80028d4:	20000624 	.word	0x20000624

080028d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	if (htim == pDistanceSensorTIM)
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d102      	bne.n	80028f0 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		vDistanceSensorInputCaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 ff5e 	bl	80037ac <vDistanceSensorInputCaptureCallback>
	}
    if (htim == &htim16) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_TIM_IC_CaptureCallback+0x40>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d102      	bne.n	80028fe <HAL_TIM_IC_CaptureCallback+0x26>
        processarCapturaRodaEsquerda(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe ffa3 	bl	8001844 <processarCapturaRodaEsquerda>
    }
    if (htim == &htim17) {
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a06      	ldr	r2, [pc, #24]	@ (800291c <HAL_TIM_IC_CaptureCallback+0x44>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d102      	bne.n	800290c <HAL_TIM_IC_CaptureCallback+0x34>
        processarCapturaRodaDireita(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff f80a 	bl	8001920 <processarCapturaRodaDireita>

    }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000860 	.word	0x20000860
 8002918:	20000a54 	.word	0x20000a54
 800291c:	20000aa0 	.word	0x20000aa0

08002920 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a60      	ldr	r2, [pc, #384]	@ (8002ab0 <HAL_UART_RxCpltCallback+0x190>)
 800292e:	4293      	cmp	r3, r2
 8002930:	f040 80b9 	bne.w	8002aa6 <HAL_UART_RxCpltCallback+0x186>
  {

	if(rxData=='M') // Modo Manual
 8002934:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b4d      	cmp	r3, #77	@ 0x4d
 800293a:	d106      	bne.n	800294a <HAL_UART_RxCpltCallback+0x2a>
	{
		rxData_M = 1;
 800293c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab8 <HAL_UART_RxCpltCallback+0x198>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
		iCarroParado = 1;
 8002942:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <HAL_UART_RxCpltCallback+0x19c>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e0a8      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>

	}
	else if (rxData=='A') // Modo Automático
 800294a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b41      	cmp	r3, #65	@ 0x41
 8002950:	d103      	bne.n	800295a <HAL_UART_RxCpltCallback+0x3a>
	{
	    rxData_M = 0;
 8002952:	4b59      	ldr	r3, [pc, #356]	@ (8002ab8 <HAL_UART_RxCpltCallback+0x198>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e0a0      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
	}
	else if(rxData=='1') // Move para frente
 800295a:	4b56      	ldr	r3, [pc, #344]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b31      	cmp	r3, #49	@ 0x31
 8002960:	d11a      	bne.n	8002998 <HAL_UART_RxCpltCallback+0x78>
	{
		vSetRodasDC(1,1);
 8002962:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002966:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800296a:	f000 f8ed 	bl	8002b48 <vSetRodasDC>
		iCarroParado = 1;
 800296e:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_UART_RxCpltCallback+0x19c>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 8002974:	e008      	b.n	8002988 <HAL_UART_RxCpltCallback+0x68>
			vSetRodasDC(0,0);
 8002976:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 800297a:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 800297e:	f000 f8e3 	bl	8002b48 <vSetRodasDC>
			iColisao = 1;
 8002982:	4b50      	ldr	r3, [pc, #320]	@ (8002ac4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 8002988:	2104      	movs	r1, #4
 800298a:	484f      	ldr	r0, [pc, #316]	@ (8002ac8 <HAL_UART_RxCpltCallback+0x1a8>)
 800298c:	f004 fb16 	bl	8006fbc <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d0ef      	beq.n	8002976 <HAL_UART_RxCpltCallback+0x56>
 8002996:	e081      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
		}
	}
	else if (rxData=='2') // Gira para direita
 8002998:	4b46      	ldr	r3, [pc, #280]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b32      	cmp	r3, #50	@ 0x32
 800299e:	d11a      	bne.n	80029d6 <HAL_UART_RxCpltCallback+0xb6>
	{
		vSetRodasDC(1,0);
 80029a0:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80029a8:	f000 f8ce 	bl	8002b48 <vSetRodasDC>
		iCarroParado = 1;
 80029ac:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <HAL_UART_RxCpltCallback+0x19c>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 80029b2:	e008      	b.n	80029c6 <HAL_UART_RxCpltCallback+0xa6>
			vSetRodasDC(0,0);
 80029b4:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029b8:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029bc:	f000 f8c4 	bl	8002b48 <vSetRodasDC>
			iColisao = 1;
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <HAL_UART_RxCpltCallback+0x1a4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 80029c6:	2104      	movs	r1, #4
 80029c8:	483f      	ldr	r0, [pc, #252]	@ (8002ac8 <HAL_UART_RxCpltCallback+0x1a8>)
 80029ca:	f004 faf7 	bl	8006fbc <HAL_GPIO_ReadPin>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d0ef      	beq.n	80029b4 <HAL_UART_RxCpltCallback+0x94>
 80029d4:	e062      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
		}
	}
	else if (rxData=='3') // Gira para esquerda
 80029d6:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b33      	cmp	r3, #51	@ 0x33
 80029dc:	d11a      	bne.n	8002a14 <HAL_UART_RxCpltCallback+0xf4>
	{
		vSetRodasDC(0,1);
 80029de:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80029e2:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029e6:	f000 f8af 	bl	8002b48 <vSetRodasDC>
		iCarroParado = 1;
 80029ea:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_UART_RxCpltCallback+0x19c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 80029f0:	e008      	b.n	8002a04 <HAL_UART_RxCpltCallback+0xe4>
			vSetRodasDC(0,0);
 80029f2:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029f6:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 80029fa:	f000 f8a5 	bl	8002b48 <vSetRodasDC>
			iColisao = 1;
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(Colisao_GPIO_Port, Colisao_Pin) == 1){
 8002a04:	2104      	movs	r1, #4
 8002a06:	4830      	ldr	r0, [pc, #192]	@ (8002ac8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002a08:	f004 fad8 	bl	8006fbc <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d0ef      	beq.n	80029f2 <HAL_UART_RxCpltCallback+0xd2>
 8002a12:	e043      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
		}
	}
	else if (rxData=='4') // Para o veículo
 8002a14:	4b27      	ldr	r3, [pc, #156]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b34      	cmp	r3, #52	@ 0x34
 8002a1a:	d106      	bne.n	8002a2a <HAL_UART_RxCpltCallback+0x10a>
	{
		vSetRodasDC(0,0);
 8002a1c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 8002a20:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002ac0 <HAL_UART_RxCpltCallback+0x1a0>
 8002a24:	f000 f890 	bl	8002b48 <vSetRodasDC>
 8002a28:	e038      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
	}

    else if (rxData=='6')
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b36      	cmp	r3, #54	@ 0x36
 8002a30:	d034      	beq.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
    {

    }
    else if (rxData=='7')
 8002a32:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b37      	cmp	r3, #55	@ 0x37
 8002a38:	d030      	beq.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
    {

    }
    else if (rxData=='8') // Apaga todos os LEDs
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b38      	cmp	r3, #56	@ 0x38
 8002a40:	d114      	bne.n	8002a6c <HAL_UART_RxCpltCallback+0x14c>
    {
    	HAL_GPIO_WritePin(LED_G_PWM_GPIO_Port, LED_G_PWM_Pin, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a4c:	f004 face 	bl	8006fec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_R_PWM_GPIO_Port, LED_R_PWM_Pin, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5a:	f004 fac7 	bl	8006fec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_B_PWM_GPIO_Port, LED_B_PWM_Pin, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a64:	4819      	ldr	r0, [pc, #100]	@ (8002acc <HAL_UART_RxCpltCallback+0x1ac>)
 8002a66:	f004 fac1 	bl	8006fec <HAL_GPIO_WritePin>
 8002a6a:	e017      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
    }
    else if (rxData=='9') // Acendo todos os LEDs
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b39      	cmp	r3, #57	@ 0x39
 8002a72:	d113      	bne.n	8002a9c <HAL_UART_RxCpltCallback+0x17c>
    {
    	HAL_GPIO_WritePin(LED_G_PWM_GPIO_Port, LED_G_PWM_Pin, 1);
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a7e:	f004 fab5 	bl	8006fec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_R_PWM_GPIO_Port, LED_R_PWM_Pin, 1);
 8002a82:	2201      	movs	r2, #1
 8002a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a8c:	f004 faae 	bl	8006fec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_B_PWM_GPIO_Port, LED_B_PWM_Pin, 1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a96:	480d      	ldr	r0, [pc, #52]	@ (8002acc <HAL_UART_RxCpltCallback+0x1ac>)
 8002a98:	f004 faa8 	bl	8006fec <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart3,&rxData,1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4905      	ldr	r1, [pc, #20]	@ (8002ab4 <HAL_UART_RxCpltCallback+0x194>)
 8002aa0:	480b      	ldr	r0, [pc, #44]	@ (8002ad0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002aa2:	f009 f9a3 	bl	800bdec <HAL_UART_Receive_IT>
  }


}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40004800 	.word	0x40004800
 8002ab4:	20000618 	.word	0x20000618
 8002ab8:	20000619 	.word	0x20000619
 8002abc:	20000620 	.word	0x20000620
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	2000061c 	.word	0x2000061c
 8002ac8:	48000c00 	.word	0x48000c00
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	20000bcc 	.word	0x20000bcc

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <Error_Handler+0x8>

08002ae0 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8002ae8:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <vMotorInit+0x60>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <vMotorInit+0x60>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f007 fab3 	bl	800a060 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <vMotorInit+0x60>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2104      	movs	r1, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f007 faad 	bl	800a060 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b0c:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <vMotorInit+0x64>)
 8002b0e:	f004 fa6d 	bl	8006fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8002b12:	2201      	movs	r2, #1
 8002b14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b18:	480a      	ldr	r0, [pc, #40]	@ (8002b44 <vMotorInit+0x64>)
 8002b1a:	f004 fa67 	bl	8006fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	4808      	ldr	r0, [pc, #32]	@ (8002b44 <vMotorInit+0x64>)
 8002b24:	f004 fa62 	bl	8006fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b32:	f004 fa5b 	bl	8006fec <HAL_GPIO_WritePin>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000634 	.word	0x20000634
 8002b44:	48000400 	.word	0x48000400

08002b48 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b52:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8002b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b5a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002bf4 <vSetRodasDC+0xac>
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <vSetRodasDC+0xb0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b74:	ee17 2a90 	vmov	r2, s15
 8002b78:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8002b7a:	edd7 7a00 	vldr	s15, [r7]
 8002b7e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002bf4 <vSetRodasDC+0xac>
 8002b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <vSetRodasDC+0xb0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b98:	ee17 2a90 	vmov	r2, s15
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8002b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002bf4 <vSetRodasDC+0xac>
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <vSetRodasDC+0xb0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbc:	ee17 2a90 	vmov	r2, s15
 8002bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8002bc2:	edd7 7a00 	vldr	s15, [r7]
 8002bc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002bf4 <vSetRodasDC+0xac>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <vSetRodasDC+0xb0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be0:	ee17 2a90 	vmov	r2, s15
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	447a0000 	.word	0x447a0000
 8002bf8:	20000634 	.word	0x20000634

08002bfc <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
void vPidInit(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c06:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c0a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c0e:	4603      	mov	r3, r0
 8002c10:	edc7 1a01 	vstr	s3, [r7, #4]
 8002c14:	817b      	strh	r3, [r7, #10]
	xPidConfig.fKp = fKp;
 8002c16:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <vPidInit+0x70>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6013      	str	r3, [r2, #0]
	xPidConfig.fKd = fKd;
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <vPidInit+0x70>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6093      	str	r3, [r2, #8]
	xPidConfig.fKi = fKi;
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <vPidInit+0x70>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6053      	str	r3, [r2, #4]
	xPidConfig.fError_previous = 0;
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <vPidInit+0x70>)
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
	xPidConfig.fError_sum = 0.0;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <vPidInit+0x70>)
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	f242 7273 	movw	r2, #10099	@ 0x2773
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d902      	bls.n	8002c48 <vPidInit+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8002c42:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c46:	817b      	strh	r3, [r7, #10]

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <vPidInit+0x74>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <vPidInit+0x70>)
 8002c56:	829a      	strh	r2, [r3, #20]

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <vPidInit+0x70>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6193      	str	r3, [r2, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000638 	.word	0x20000638
 8002c70:	51eb851f 	.word	0x51eb851f
 8002c74:	00000000 	.word	0x00000000

08002c78 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c82:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 8002c86:	ed97 7a00 	vldr	s14, [r7]
 8002c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c92:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 8002c96:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002c98:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ddc <fPidUpdateData+0x164>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <fPidUpdateData+0x168>)
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	4b48      	ldr	r3, [pc, #288]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002cb8:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 8002cbc:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <fPidUpdateData+0x164>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4a47      	ldr	r2, [pc, #284]	@ (8002de0 <fPidUpdateData+0x168>)
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig.usIntegratorSize)
 8002cca:	4b44      	ldr	r3, [pc, #272]	@ (8002ddc <fPidUpdateData+0x164>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b42      	ldr	r3, [pc, #264]	@ (8002ddc <fPidUpdateData+0x164>)
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <fPidUpdateData+0x164>)
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002cdc:	8a9b      	ldrh	r3, [r3, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <fPidUpdateData+0x70>
		usIntegratorCount = 0;
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ddc <fPidUpdateData+0x164>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig.fError_previous);
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cee:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig.fKp * fError
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002cfc:	ed93 7a00 	vldr	s14, [r3]
 8002d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d08:	ee17 0a90 	vmov	r0, s15
 8002d0c:	f7fd fc44 	bl	8000598 <__aeabi_f2d>
 8002d10:	4604      	mov	r4, r0
 8002d12:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 8002d14:	4b30      	ldr	r3, [pc, #192]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002d16:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002d1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d24:	ee17 0a90 	vmov	r0, s15
 8002d28:	f7fd fc36 	bl	8000598 <__aeabi_f2d>
 8002d2c:	a328      	add	r3, pc, #160	@ (adr r3, 8002dd0 <fPidUpdateData+0x158>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc89 	bl	8000648 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd facd 	bl	80002dc <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
		 + xPidConfig.fKd * fDifference / UPDATE_RATE;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	ee17 0a90 	vmov	r0, s15
 8002d5c:	f7fd fc1c 	bl	8000598 <__aeabi_f2d>
 8002d60:	a31b      	add	r3, pc, #108	@ (adr r3, 8002dd0 <fPidUpdateData+0x158>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fd99 	bl	800089c <__aeabi_ddiv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4620      	mov	r0, r4
 8002d70:	4629      	mov	r1, r5
 8002d72:	f7fd fab3 	bl	80002dc <__adddf3>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
	fOut = xPidConfig.fKp * fError
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd fe75 	bl	8000a6c <__aeabi_d2f>
 8002d82:	4603      	mov	r3, r0
 8002d84:	617b      	str	r3, [r7, #20]

	xPidConfig.fError_previous = fError;
 8002d86:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig.fOutputSaturation)
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002d8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	dd03      	ble.n	8002da8 <fPidUpdateData+0x130>
		fOut = xPidConfig.fOutputSaturation;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <fPidUpdateData+0x160>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <fPidUpdateData+0x144>
	else 
		if (fOut < 0)
 8002da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d502      	bpl.n	8002dbc <fPidUpdateData+0x144>
			fOut = 0;
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

	return fOut;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	ee07 3a90 	vmov	s15, r3
}
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdb0      	pop	{r4, r5, r7, pc}
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	9999999a 	.word	0x9999999a
 8002dd4:	3fb99999 	.word	0x3fb99999
 8002dd8:	20000638 	.word	0x20000638
 8002ddc:	20000670 	.word	0x20000670
 8002de0:	20000674 	.word	0x20000674

08002de4 <vPidInit2>:
void vPidInit2(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	ed87 0a05 	vstr	s0, [r7, #20]
 8002dee:	edc7 0a04 	vstr	s1, [r7, #16]
 8002df2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002df6:	4603      	mov	r3, r0
 8002df8:	edc7 1a01 	vstr	s3, [r7, #4]
 8002dfc:	817b      	strh	r3, [r7, #10]
	xPidConfig1.fKp = fKp;
 8002dfe:	4a15      	ldr	r2, [pc, #84]	@ (8002e54 <vPidInit2+0x70>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	6013      	str	r3, [r2, #0]
	xPidConfig1.fKd = fKd;
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <vPidInit2+0x70>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6093      	str	r3, [r2, #8]
	xPidConfig1.fKi = fKi;
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <vPidInit2+0x70>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6053      	str	r3, [r2, #4]
	xPidConfig1.fError_previous = 0;
 8002e10:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <vPidInit2+0x70>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	60da      	str	r2, [r3, #12]
	xPidConfig1.fError_sum = 0.0;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <vPidInit2+0x70>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002e20:	897b      	ldrh	r3, [r7, #10]
 8002e22:	f242 7273 	movw	r2, #10099	@ 0x2773
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d902      	bls.n	8002e30 <vPidInit2+0x4c>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8002e2a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e2e:	817b      	strh	r3, [r7, #10]

	xPidConfig1.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	4a09      	ldr	r2, [pc, #36]	@ (8002e58 <vPidInit2+0x74>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <vPidInit2+0x70>)
 8002e3e:	829a      	strh	r2, [r3, #20]

	xPidConfig1.fOutputSaturation = fOutputSaturation;
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <vPidInit2+0x70>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6193      	str	r3, [r2, #24]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000654 	.word	0x20000654
 8002e58:	51eb851f 	.word	0x51eb851f
 8002e5c:	00000000 	.word	0x00000000

08002e60 <fPidUpdateData2>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData2(float fvelocidadeAtual, float fVelocidadeDesejada)
{
 8002e60:	b5b0      	push	{r4, r5, r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e6a:	edc7 0a00 	vstr	s1, [r7]
	float fError, fDifference, fOut;

	// Proportional error
	fError = fVelocidadeDesejada - fvelocidadeAtual;
 8002e6e:	ed97 7a00 	vldr	s14, [r7]
 8002e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7a:	edc7 7a04 	vstr	s15, [r7, #16]

	//Ingtegral error
	xPidConfig1.fError_sum = xPidConfig1.fError_sum - fIntegratorBuffer[usIntegratorCount] + fError;
 8002e7e:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002e80:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e84:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc8 <fPidUpdateData2+0x168>)
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	4b48      	ldr	r3, [pc, #288]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002ea0:	edc3 7a04 	vstr	s15, [r3, #16]

	fIntegratorBuffer[usIntegratorCount] = fError;
 8002ea4:	4b47      	ldr	r3, [pc, #284]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4a47      	ldr	r2, [pc, #284]	@ (8002fc8 <fPidUpdateData2+0x168>)
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	601a      	str	r2, [r3, #0]

	if(++usIntegratorCount >= xPidConfig1.usIntegratorSize)
 8002eb2:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002ec4:	8a9b      	ldrh	r3, [r3, #20]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <fPidUpdateData2+0x70>
		usIntegratorCount = 0;
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <fPidUpdateData2+0x164>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]

	// Differential error
	fDifference = (fError - xPidConfig1.fError_previous);
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002ed2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ed6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ede:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = xPidConfig1.fKp * fError
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002ee4:	ed93 7a00 	vldr	s14, [r3]
 8002ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	ee17 0a90 	vmov	r0, s15
 8002ef4:	f7fd fb50 	bl	8000598 <__aeabi_f2d>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	460d      	mov	r5, r1
		 + xPidConfig1.fKi * xPidConfig1.fError_sum * UPDATE_RATE
 8002efc:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f02:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002f04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	ee17 0a90 	vmov	r0, s15
 8002f10:	f7fd fb42 	bl	8000598 <__aeabi_f2d>
 8002f14:	a328      	add	r3, pc, #160	@ (adr r3, 8002fb8 <fPidUpdateData2+0x158>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd fb95 	bl	8000648 <__aeabi_dmul>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4620      	mov	r0, r4
 8002f24:	4629      	mov	r1, r5
 8002f26:	f7fd f9d9 	bl	80002dc <__adddf3>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4614      	mov	r4, r2
 8002f30:	461d      	mov	r5, r3
		 + xPidConfig1.fKd * fDifference / UPDATE_RATE;
 8002f32:	4b23      	ldr	r3, [pc, #140]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002f34:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd fb28 	bl	8000598 <__aeabi_f2d>
 8002f48:	a31b      	add	r3, pc, #108	@ (adr r3, 8002fb8 <fPidUpdateData2+0x158>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fca5 	bl	800089c <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f7fd f9bf 	bl	80002dc <__adddf3>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
	fOut = xPidConfig1.fKp * fError
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7fd fd81 	bl	8000a6c <__aeabi_d2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	617b      	str	r3, [r7, #20]

	xPidConfig1.fError_previous = fError;
 8002f6e:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	60d3      	str	r3, [r2, #12]

    // Output Saturation
	if(fOut > xPidConfig1.fOutputSaturation)
 8002f74:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002f76:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f86:	dd03      	ble.n	8002f90 <fPidUpdateData2+0x130>
		fOut = xPidConfig1.fOutputSaturation;
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <fPidUpdateData2+0x160>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <fPidUpdateData2+0x144>
	else
		if (fOut < 0)
 8002f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	d502      	bpl.n	8002fa4 <fPidUpdateData2+0x144>
			fOut = 0;
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

	return fOut;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	ee07 3a90 	vmov	s15, r3
}
 8002faa:	eeb0 0a67 	vmov.f32	s0, s15
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	9999999a 	.word	0x9999999a
 8002fbc:	3fb99999 	.word	0x3fb99999
 8002fc0:	20000654 	.word	0x20000654
 8002fc4:	20000670 	.word	0x20000670
 8002fc8:	20000674 	.word	0x20000674

08002fcc <ajustaVelocidadeRodas>:
void ajustaVelocidadeRodas(){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	EsforcoD = fPidUpdateData(velocidadeRodaDireita,velocidadeDireita)/100;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <ajustaVelocidadeRodas+0x74>)
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <ajustaVelocidadeRodas+0x78>)
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	eef0 0a47 	vmov.f32	s1, s14
 8002fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe4:	f7ff fe48 	bl	8002c78 <fPidUpdateData>
 8002fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fec:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8003048 <ajustaVelocidadeRodas+0x7c>
 8002ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff4:	4b15      	ldr	r3, [pc, #84]	@ (800304c <ajustaVelocidadeRodas+0x80>)
 8002ff6:	edc3 7a00 	vstr	s15, [r3]
	EsforcoE = fPidUpdateData2(velocidadeRodaEsquerda,velocidadeEsquerda)/100;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <ajustaVelocidadeRodas+0x84>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <ajustaVelocidadeRodas+0x88>)
 8003002:	ed93 7a00 	vldr	s14, [r3]
 8003006:	eef0 0a47 	vmov.f32	s1, s14
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	f7ff ff27 	bl	8002e60 <fPidUpdateData2>
 8003012:	eeb0 7a40 	vmov.f32	s14, s0
 8003016:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003048 <ajustaVelocidadeRodas+0x7c>
 800301a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <ajustaVelocidadeRodas+0x8c>)
 8003020:	edc3 7a00 	vstr	s15, [r3]
	//	EsforcoD = 0.4;
	//}
	//if(EsforcoE < 0.4) {
	//		EsforcoE = 0.4;
	//	}
	vSetRodasDC(EsforcoE, EsforcoD);
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <ajustaVelocidadeRodas+0x8c>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <ajustaVelocidadeRodas+0x80>)
 800302c:	ed93 7a00 	vldr	s14, [r3]
 8003030:	eef0 0a47 	vmov.f32	s1, s14
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	f7ff fd86 	bl	8002b48 <vSetRodasDC>


}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200004ec 	.word	0x200004ec
 8003044:	20000840 	.word	0x20000840
 8003048:	42c80000 	.word	0x42c80000
 800304c:	20000808 	.word	0x20000808
 8003050:	200004e8 	.word	0x200004e8
 8003054:	2000083c 	.word	0x2000083c
 8003058:	20000804 	.word	0x20000804

0800305c <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8003064:	4a09      	ldr	r2, [pc, #36]	@ (800308c <vLineSensor1Init+0x30>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 800306a:	4b08      	ldr	r3, [pc, #32]	@ (800308c <vLineSensor1Init+0x30>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	217f      	movs	r1, #127	@ 0x7f
 8003070:	4618      	mov	r0, r3
 8003072:	f003 f867 	bl	8006144 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <vLineSensor1Init+0x30>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4904      	ldr	r1, [pc, #16]	@ (8003090 <vLineSensor1Init+0x34>)
 800307e:	4618      	mov	r0, r3
 8003080:	f002 f952 	bl	8005328 <HAL_ADC_Start_DMA>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2000080c 	.word	0x2000080c
 8003090:	20000820 	.word	0x20000820

08003094 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 800309c:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <vLineSensor2Init+0x30>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <vLineSensor2Init+0x30>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	217f      	movs	r1, #127	@ 0x7f
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 f84b 	bl	8006144 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <vLineSensor2Init+0x30>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	4904      	ldr	r1, [pc, #16]	@ (80030c8 <vLineSensor2Init+0x34>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 f936 	bl	8005328 <HAL_ADC_Start_DMA>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000810 	.word	0x20000810
 80030c8:	20000824 	.word	0x20000824

080030cc <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 80030d4:	4a09      	ldr	r2, [pc, #36]	@ (80030fc <vLineSensor3Init+0x30>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <vLineSensor3Init+0x30>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	217f      	movs	r1, #127	@ 0x7f
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 f82f 	bl	8006144 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <vLineSensor3Init+0x30>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4904      	ldr	r1, [pc, #16]	@ (8003100 <vLineSensor3Init+0x34>)
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 f91a 	bl	8005328 <HAL_ADC_Start_DMA>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000814 	.word	0x20000814
 8003100:	20000828 	.word	0x20000828

08003104 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 800310c:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <vLineSensor4Init+0x30>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <vLineSensor4Init+0x30>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	217f      	movs	r1, #127	@ 0x7f
 8003118:	4618      	mov	r0, r3
 800311a:	f003 f813 	bl	8006144 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <vLineSensor4Init+0x30>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	4904      	ldr	r1, [pc, #16]	@ (8003138 <vLineSensor4Init+0x34>)
 8003126:	4618      	mov	r0, r3
 8003128:	f002 f8fe 	bl	8005328 <HAL_ADC_Start_DMA>
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000818 	.word	0x20000818
 8003138:	2000082c 	.word	0x2000082c

0800313c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8003144:	4a09      	ldr	r2, [pc, #36]	@ (800316c <vLineSensor5Init+0x30>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <vLineSensor5Init+0x30>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	217f      	movs	r1, #127	@ 0x7f
 8003150:	4618      	mov	r0, r3
 8003152:	f002 fff7 	bl	8006144 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <vLineSensor5Init+0x30>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	4904      	ldr	r1, [pc, #16]	@ (8003170 <vLineSensor5Init+0x34>)
 800315e:	4618      	mov	r0, r3
 8003160:	f002 f8e2 	bl	8005328 <HAL_ADC_Start_DMA>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000081c 	.word	0x2000081c
 8003170:	20000830 	.word	0x20000830

08003174 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8003174:	b4b0      	push	{r4, r5, r7}
 8003176:	b091      	sub	sp, #68	@ 0x44
 8003178:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 800317a:	4b46      	ldr	r3, [pc, #280]	@ (8003294 <fLineSensorCalculatePosition+0x120>)
 800317c:	f107 0418 	add.w	r4, r7, #24
 8003180:	461d      	mov	r5, r3
 8003182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8003196:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <fLineSensorCalculatePosition+0x124>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	4b3f      	ldr	r3, [pc, #252]	@ (800329c <fLineSensorCalculatePosition+0x128>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <fLineSensorCalculatePosition+0x12c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <fLineSensorCalculatePosition+0x130>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <fLineSensorCalculatePosition+0x134>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 80031b4:	2300      	movs	r3, #0
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b8:	e04c      	b.n	8003254 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3340      	adds	r3, #64	@ 0x40
 80031c0:	443b      	add	r3, r7
 80031c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031c6:	4939      	ldr	r1, [pc, #228]	@ (80032ac <fLineSensorCalculatePosition+0x138>)
 80031c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d33d      	bcc.n	800324e <fLineSensorCalculatePosition+0xda>
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3340      	adds	r3, #64	@ 0x40
 80031d8:	443b      	add	r3, r7
 80031da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031de:	4934      	ldr	r1, [pc, #208]	@ (80032b0 <fLineSensorCalculatePosition+0x13c>)
 80031e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d831      	bhi.n	800324e <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 80031ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3340      	adds	r3, #64	@ 0x40
 80031f0:	443b      	add	r3, r7
 80031f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031f6:	492d      	ldr	r1, [pc, #180]	@ (80032ac <fLineSensorCalculatePosition+0x138>)
 80031f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	3301      	adds	r3, #1
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800320a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800320e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003212:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8003216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3340      	adds	r3, #64	@ 0x40
 800321c:	443b      	add	r3, r7
 800321e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 800323e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003242:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 800324e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003250:	3301      	adds	r3, #1
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
 8003254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003256:	2b04      	cmp	r3, #4
 8003258:	ddaf      	ble.n	80031ba <fLineSensorCalculatePosition+0x46>
        }
    }


    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 800325a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800325e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	d101      	bne.n	800326c <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <fLineSensorCalculatePosition+0x140>)
 800326a:	e00b      	b.n	8003284 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 800326c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8003270:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003278:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 800327c:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <fLineSensorCalculatePosition+0x144>)
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	6013      	str	r3, [r2, #0]
    return posicao;
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	3744      	adds	r7, #68	@ 0x44
 800328e:	46bd      	mov	sp, r7
 8003290:	bcb0      	pop	{r4, r5, r7}
 8003292:	4770      	bx	lr
 8003294:	0800e8c4 	.word	0x0800e8c4
 8003298:	20000820 	.word	0x20000820
 800329c:	20000824 	.word	0x20000824
 80032a0:	20000828 	.word	0x20000828
 80032a4:	2000082c 	.word	0x2000082c
 80032a8:	20000830 	.word	0x20000830
 80032ac:	20000004 	.word	0x20000004
 80032b0:	20000018 	.word	0x20000018
 80032b4:	42c60000 	.word	0x42c60000
 80032b8:	20000838 	.word	0x20000838

080032bc <vLineSensorPIDControl>:
// Definição das constantes do PID


// Função para ajustar a velocidade das rodas com base na saída do PID
// Função para ajustar a velocidade das rodas com base na saída do PID
void vLineSensorPIDControl(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80032c2:	f001 fc03 	bl	8004acc <HAL_GetTick>
 80032c6:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 80032c8:	4b66      	ldr	r3, [pc, #408]	@ (8003464 <vLineSensorPIDControl+0x1a8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d8:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8003468 <vLineSensorPIDControl+0x1ac>
 80032dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <vLineSensorPIDControl+0x1b0>)
 80032e2:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 80032e6:	4b61      	ldr	r3, [pc, #388]	@ (800346c <vLineSensorPIDControl+0x1b0>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d802      	bhi.n	80032fc <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <vLineSensorPIDControl+0x1b0>)
 80032f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003470 <vLineSensorPIDControl+0x1b4>)
 80032fa:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 80032fc:	f7ff ff3a 	bl	8003174 <fLineSensorCalculatePosition>
 8003300:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8003304:	edd7 7a00 	vldr	s15, [r7]
 8003308:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003474 <vLineSensorPIDControl+0x1b8>
 800330c:	eef4 7a47 	vcmp.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d106      	bne.n	8003324 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        // Aqui, vamos continuar em frente com velocidade base
        vSetRodasDC(0, 0);
 8003316:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8003478 <vLineSensorPIDControl+0x1bc>
 800331a:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8003478 <vLineSensorPIDControl+0x1bc>
 800331e:	f7ff fc13 	bl	8002b48 <vSetRodasDC>
    	//vSetRodaDireitaDC(0.5);
    	   // vSetRodaEsquerdaDC(0.5);
        return;
 8003322:	e09c      	b.n	800345e <vLineSensorPIDControl+0x1a2>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0-position; // Inverte o sinal para correção na direção oposta
 8003324:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003478 <vLineSensorPIDControl+0x1bc>
 8003328:	edd7 7a00 	vldr	s15, [r7]
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	4b52      	ldr	r3, [pc, #328]	@ (800347c <vLineSensorPIDControl+0x1c0>)
 8003332:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8003336:	4b51      	ldr	r3, [pc, #324]	@ (800347c <vLineSensorPIDControl+0x1c0>)
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <vLineSensorPIDControl+0x1b0>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003346:	4b4e      	ldr	r3, [pc, #312]	@ (8003480 <vLineSensorPIDControl+0x1c4>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003350:	4b4b      	ldr	r3, [pc, #300]	@ (8003480 <vLineSensorPIDControl+0x1c4>)
 8003352:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8003356:	4b49      	ldr	r3, [pc, #292]	@ (800347c <vLineSensorPIDControl+0x1c0>)
 8003358:	ed93 7a00 	vldr	s14, [r3]
 800335c:	4b49      	ldr	r3, [pc, #292]	@ (8003484 <vLineSensorPIDControl+0x1c8>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <vLineSensorPIDControl+0x1b0>)
 8003368:	ed93 7a00 	vldr	s14, [r3]
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	4b45      	ldr	r3, [pc, #276]	@ (8003488 <vLineSensorPIDControl+0x1cc>)
 8003372:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(kp * error + ki * integral_error + kd * derivative_error);
 8003376:	4b45      	ldr	r3, [pc, #276]	@ (800348c <vLineSensorPIDControl+0x1d0>)
 8003378:	ed93 7a00 	vldr	s14, [r3]
 800337c:	4b3f      	ldr	r3, [pc, #252]	@ (800347c <vLineSensorPIDControl+0x1c0>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003386:	4b42      	ldr	r3, [pc, #264]	@ (8003490 <vLineSensorPIDControl+0x1d4>)
 8003388:	edd3 6a00 	vldr	s13, [r3]
 800338c:	4b3c      	ldr	r3, [pc, #240]	@ (8003480 <vLineSensorPIDControl+0x1c4>)
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339a:	4b3e      	ldr	r3, [pc, #248]	@ (8003494 <vLineSensorPIDControl+0x1d8>)
 800339c:	edd3 6a00 	vldr	s13, [r3]
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <vLineSensorPIDControl+0x1cc>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	eef1 7a67 	vneg.f32	s15, s15
 80033b2:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <vLineSensorPIDControl+0x1dc>)
 80033b4:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha=control_output;
 80033b8:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <vLineSensorPIDControl+0x1dc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a37      	ldr	r2, [pc, #220]	@ (800349c <vLineSensorPIDControl+0x1e0>)
 80033be:	6013      	str	r3, [r2, #0]
    if (control_output == 0) {
 80033c0:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <vLineSensorPIDControl+0x1dc>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d112      	bne.n	80033f6 <vLineSensorPIDControl+0x13a>
            velocidadeEsquerda = velocidadeBase;
 80033d0:	4b33      	ldr	r3, [pc, #204]	@ (80034a0 <vLineSensorPIDControl+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033dc:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <vLineSensorPIDControl+0x1e8>)
 80033de:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase;
 80033e2:	4b2f      	ldr	r3, [pc, #188]	@ (80034a0 <vLineSensorPIDControl+0x1e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ee:	4b2e      	ldr	r3, [pc, #184]	@ (80034a8 <vLineSensorPIDControl+0x1ec>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]
 80033f4:	e033      	b.n	800345e <vLineSensorPIDControl+0x1a2>
        } else {
            // Caso contrário, ajusta a velocidade de cada roda com base no output do PID
            // Se o erro for positivo, roda esquerda acelera e a direita desacelera e vice-versa
            velocidadeEsquerda = velocidadeBase + control_output;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <vLineSensorPIDControl+0x1e4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003402:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <vLineSensorPIDControl+0x1dc>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <vLineSensorPIDControl+0x1e8>)
 800340e:	edc3 7a00 	vstr	s15, [r3]
            velocidadeDireita = velocidadeBase - control_output;
 8003412:	4b23      	ldr	r3, [pc, #140]	@ (80034a0 <vLineSensorPIDControl+0x1e4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341e:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <vLineSensorPIDControl+0x1dc>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003428:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <vLineSensorPIDControl+0x1ec>)
 800342a:	edc3 7a00 	vstr	s15, [r3]

            // Limitar a velocidade mínima para 0 (evita valores negativos nas rodas)
            if (velocidadeEsquerda < 0) {
 800342e:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <vLineSensorPIDControl+0x1e8>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	d503      	bpl.n	8003446 <vLineSensorPIDControl+0x18a>
                velocidadeEsquerda = 0;
 800343e:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <vLineSensorPIDControl+0x1e8>)
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
            }
            if (velocidadeDireita < 0) {
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <vLineSensorPIDControl+0x1ec>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003454:	d503      	bpl.n	800345e <vLineSensorPIDControl+0x1a2>
                velocidadeDireita = 0;
 8003456:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <vLineSensorPIDControl+0x1ec>)
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
            }
        }
}
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000085c 	.word	0x2000085c
 8003468:	447a0000 	.word	0x447a0000
 800346c:	20000038 	.word	0x20000038
 8003470:	3c23d70a 	.word	0x3c23d70a
 8003474:	42c60000 	.word	0x42c60000
 8003478:	00000000 	.word	0x00000000
 800347c:	20000848 	.word	0x20000848
 8003480:	20000850 	.word	0x20000850
 8003484:	2000084c 	.word	0x2000084c
 8003488:	20000854 	.word	0x20000854
 800348c:	2000002c 	.word	0x2000002c
 8003490:	20000844 	.word	0x20000844
 8003494:	20000030 	.word	0x20000030
 8003498:	20000858 	.word	0x20000858
 800349c:	20000834 	.word	0x20000834
 80034a0:	20000034 	.word	0x20000034
 80034a4:	2000083c 	.word	0x2000083c
 80034a8:	20000840 	.word	0x20000840
 80034ac:	00000000 	.word	0x00000000

080034b0 <fDistanceSensorGetSensorDistance>:


// Esse codigo foi modificado de https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
float fDistanceSensorGetSensorDistance(TIM_HandleTypeDef* htim, uint32_t uiChannel,
    uint8_t* Is_First_Captured, uint32_t* IC_Val1, uint32_t* IC_Val2)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]

  uint8_t isFirtsCaptured = *Is_First_Captured;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	77fb      	strb	r3, [r7, #31]
  uint32_t icVal1 = *IC_Val1;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
  uint32_t icVal2 = *IC_Val2;
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]

  if (isFirtsCaptured == 0) // if the first value is not captured
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d15f      	bne.n	8003596 <fDistanceSensorGetSensorDistance+0xe6>
  {
    icVal1 = HAL_TIM_ReadCapturedValue(htim, uiChannel); // read the first value
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f007 fc9b 	bl	800ae14 <HAL_TIM_ReadCapturedValue>
 80034de:	61b8      	str	r0, [r7, #24]
    isFirtsCaptured = 1;  // set the first captured as true
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
    // Now change the polarity to falling edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim, uiChannel,
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <fDistanceSensorGetSensorDistance+0x4c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 020a 	bic.w	r2, r2, #10
 80034f8:	621a      	str	r2, [r3, #32]
 80034fa:	e01f      	b.n	800353c <fDistanceSensorGetSensorDistance+0x8c>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d108      	bne.n	8003514 <fDistanceSensorGetSensorDistance+0x64>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	e013      	b.n	800353c <fDistanceSensorGetSensorDistance+0x8c>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b08      	cmp	r3, #8
 8003518:	d108      	bne.n	800352c <fDistanceSensorGetSensorDistance+0x7c>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	e007      	b.n	800353c <fDistanceSensorGetSensorDistance+0x8c>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <fDistanceSensorGetSensorDistance+0xa4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0202 	orr.w	r2, r2, #2
 8003550:	621a      	str	r2, [r3, #32]
 8003552:	e0c2      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d108      	bne.n	800356c <fDistanceSensorGetSensorDistance+0xbc>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	f043 0320 	orr.w	r3, r3, #32
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	e0b6      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b08      	cmp	r3, #8
 8003570:	d108      	bne.n	8003584 <fDistanceSensorGetSensorDistance+0xd4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	e0aa      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e0a1      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
        TIM_INPUTCHANNELPOLARITY_FALLING);
  }

  else if (isFirtsCaptured == 1)   // if the first is already captured
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 809e 	bne.w	80036da <fDistanceSensorGetSensorDistance+0x22a>
  {
    icVal2 = HAL_TIM_ReadCapturedValue(htim, uiChannel); // read second value
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f007 fc37 	bl	800ae14 <HAL_TIM_ReadCapturedValue>
 80035a6:	6178      	str	r0, [r7, #20]
    __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if (icVal2 > icVal1)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d90a      	bls.n	80035ce <fDistanceSensorGetSensorDistance+0x11e>
    {
      Difference = icVal2 - icVal1;
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <fDistanceSensorGetSensorDistance+0x258>)
 80035c8:	edc3 7a00 	vstr	s15, [r3]
 80035cc:	e010      	b.n	80035f0 <fDistanceSensorGetSensorDistance+0x140>
    }

    else if (icVal1 > icVal2)
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <fDistanceSensorGetSensorDistance+0x140>
    {
      Difference = (10000 - icVal1) + icVal2;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80035e0:	3310      	adds	r3, #16
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <fDistanceSensorGetSensorDistance+0x258>)
 80035ec:	edc3 7a00 	vstr	s15, [r3]
    }

    Distance = Difference * .034 / 2.0;
 80035f0:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <fDistanceSensorGetSensorDistance+0x258>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffcf 	bl	8000598 <__aeabi_f2d>
 80035fa:	a341      	add	r3, pc, #260	@ (adr r3, 8003700 <fDistanceSensorGetSensorDistance+0x250>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fd f822 	bl	8000648 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003614:	f7fd f942 	bl	800089c <__aeabi_ddiv>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f7fd fa24 	bl	8000a6c <__aeabi_d2f>
 8003624:	4603      	mov	r3, r0
 8003626:	4a39      	ldr	r2, [pc, #228]	@ (800370c <fDistanceSensorGetSensorDistance+0x25c>)
 8003628:	6013      	str	r3, [r2, #0]

    isFirtsCaptured = 0; // set it back to false
 800362a:	2300      	movs	r3, #0
 800362c:	77fb      	strb	r3, [r7, #31]

    // set polarity to rising edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim, uiDistanceSensorRightChannel,
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <fDistanceSensorGetSensorDistance+0x198>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020a 	bic.w	r2, r2, #10
 8003644:	621a      	str	r2, [r3, #32]
 8003646:	e021      	b.n	800368c <fDistanceSensorGetSensorDistance+0x1dc>
 8003648:	4b31      	ldr	r3, [pc, #196]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d108      	bne.n	8003662 <fDistanceSensorGetSensorDistance+0x1b2>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e014      	b.n	800368c <fDistanceSensorGetSensorDistance+0x1dc>
 8003662:	4b2b      	ldr	r3, [pc, #172]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d108      	bne.n	800367c <fDistanceSensorGetSensorDistance+0x1cc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	e007      	b.n	800368c <fDistanceSensorGetSensorDistance+0x1dc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <fDistanceSensorGetSensorDistance+0x1f2>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a12      	ldr	r2, [r2, #32]
 800369e:	621a      	str	r2, [r3, #32]
 80036a0:	e01b      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d106      	bne.n	80036b8 <fDistanceSensorGetSensorDistance+0x208>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	e010      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 80036b8:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <fDistanceSensorGetSensorDistance+0x260>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d106      	bne.n	80036ce <fDistanceSensorGetSensorDistance+0x21e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e005      	b.n	80036da <fDistanceSensorGetSensorDistance+0x22a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	6213      	str	r3, [r2, #32]
        TIM_INPUTCHANNELPOLARITY_RISING);
            //__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
  }

  *Is_First_Captured = isFirtsCaptured;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7ffa      	ldrb	r2, [r7, #31]
 80036de:	701a      	strb	r2, [r3, #0]
  *IC_Val1 = icVal1;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	601a      	str	r2, [r3, #0]
  *IC_Val2 = icVal2;
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]

  return Distance;
 80036ec:	4b07      	ldr	r3, [pc, #28]	@ (800370c <fDistanceSensorGetSensorDistance+0x25c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	ee07 3a90 	vmov	s15, r3
}
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	b020c49c 	.word	0xb020c49c
 8003704:	3fa16872 	.word	0x3fa16872
 8003708:	20000874 	.word	0x20000874
 800370c:	20000870 	.word	0x20000870
 8003710:	20000868 	.word	0x20000868

08003714 <vDistanceSensorInitSensors>:

void vDistanceSensorInitSensors(TIM_HandleTypeDef *htimTrigger, uint32_t uiTriggerChannel, TIM_HandleTypeDef *htimECOSensors,
     uint32_t uiChannelRight)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]

  pDistanceSensorTrigger = htimTrigger;
 8003722:	4a0f      	ldr	r2, [pc, #60]	@ (8003760 <vDistanceSensorInitSensors+0x4c>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6013      	str	r3, [r2, #0]
  pDistanceSensorTIM = htimECOSensors;
 8003728:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <vDistanceSensorInitSensors+0x50>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]

  uiDistanceSensorTriggerChannel = uiTriggerChannel;
 800372e:	4a0e      	ldr	r2, [pc, #56]	@ (8003768 <vDistanceSensorInitSensors+0x54>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6013      	str	r3, [r2, #0]

  uiDistanceSensorRightChannel = uiChannelRight;
 8003734:	4a0d      	ldr	r2, [pc, #52]	@ (800376c <vDistanceSensorInitSensors+0x58>)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6013      	str	r3, [r2, #0]


  HAL_TIM_IC_Start_IT(htimECOSensors, uiChannelRight);
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 fe03 	bl	800a348 <HAL_TIM_IC_Start_IT>


  // The PWM Trigger is set for a cycle of 100ms, so we have to set the duty cycle of the PWM to 1/10000 to get 10 us

  HAL_TIM_PWM_Start(pDistanceSensorTrigger, uiTriggerChannel);
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <vDistanceSensorInitSensors+0x4c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f006 fc89 	bl	800a060 <HAL_TIM_PWM_Start>
  pDistanceSensorTrigger->Instance->CCR1 = 1;
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <vDistanceSensorInitSensors+0x4c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000864 	.word	0x20000864
 8003764:	20000860 	.word	0x20000860
 8003768:	2000086c 	.word	0x2000086c
 800376c:	20000868 	.word	0x20000868

08003770 <vDistanceSensorSetRightDistance>:

void vDistanceSensorSetRightDistance(float fDistance)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	ed87 0a01 	vstr	s0, [r7, #4]
  fDistanceSensorRightDistance = fDistance;
 800377a:	4a04      	ldr	r2, [pc, #16]	@ (800378c <vDistanceSensorSetRightDistance+0x1c>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000878 	.word	0x20000878

08003790 <fDistanceSensorGetRightDistance>:


float fDistanceSensorGetRightDistance()
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return fDistanceSensorRightDistance;
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <fDistanceSensorGetRightDistance+0x18>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	ee07 3a90 	vmov	s15, r3
}
 800379c:	eeb0 0a67 	vmov.f32	s0, s15
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000878 	.word	0x20000878

080037ac <vDistanceSensorInputCaptureCallback>:


void vDistanceSensorInputCaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  float distancia;

  // Right Sensor
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7f1b      	ldrb	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d112      	bne.n	80037e2 <vDistanceSensorInputCaptureCallback+0x36>
  {
    distancia = fDistanceSensorGetSensorDistance(htim, uiDistanceSensorRightChannel,
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <vDistanceSensorInputCaptureCallback+0x40>)
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <vDistanceSensorInputCaptureCallback+0x44>)
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <vDistanceSensorInputCaptureCallback+0x48>)
 80037c6:	4a0c      	ldr	r2, [pc, #48]	@ (80037f8 <vDistanceSensorInputCaptureCallback+0x4c>)
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fe71 	bl	80034b0 <fDistanceSensorGetSensorDistance>
 80037ce:	ed87 0a03 	vstr	s0, [r7, #12]
        &uiIsFirstCapture_Right, &uiICVal1_Right, &uiICVal2_Right);
    if (uiIsFirstCapture_Right == 0)
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <vDistanceSensorInputCaptureCallback+0x4c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <vDistanceSensorInputCaptureCallback+0x36>
    {
      vDistanceSensorSetRightDistance(distancia);
 80037da:	ed97 0a03 	vldr	s0, [r7, #12]
 80037de:	f7ff ffc7 	bl	8003770 <vDistanceSensorSetRightDistance>
    }
  }

}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000868 	.word	0x20000868
 80037f0:	20000880 	.word	0x20000880
 80037f4:	2000087c 	.word	0x2000087c
 80037f8:	20000884 	.word	0x20000884

080037fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <HAL_MspInit+0x44>)
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	4a0e      	ldr	r2, [pc, #56]	@ (8003840 <HAL_MspInit+0x44>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6613      	str	r3, [r2, #96]	@ 0x60
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <HAL_MspInit+0x44>)
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_MspInit+0x44>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a08      	ldr	r2, [pc, #32]	@ (8003840 <HAL_MspInit+0x44>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	@ 0x58
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_MspInit+0x44>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003832:	f005 fb61 	bl	8008ef8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <NMI_Handler+0x4>

0800384c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <HardFault_Handler+0x4>

08003854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <MemManage_Handler+0x4>

0800385c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <BusFault_Handler+0x4>

08003864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <UsageFault_Handler+0x4>

0800386c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800389a:	f001 f905 	bl	8004aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <DMA1_Channel6_IRQHandler+0x10>)
 80038aa:	f003 f8a8 	bl	80069fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000544 	.word	0x20000544

080038b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80038bc:	4802      	ldr	r0, [pc, #8]	@ (80038c8 <DMA1_Channel7_IRQHandler+0x10>)
 80038be:	f003 f89e 	bl	80069fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200005a4 	.word	0x200005a4

080038cc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038d0:	4803      	ldr	r0, [pc, #12]	@ (80038e0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80038d2:	f006 fe89 	bl	800a5e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80038d6:	4803      	ldr	r0, [pc, #12]	@ (80038e4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80038d8:	f006 fe86 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	2000088c 	.word	0x2000088c
 80038e4:	20000a08 	.word	0x20000a08

080038e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038ec:	4803      	ldr	r0, [pc, #12]	@ (80038fc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80038ee:	f006 fe7b 	bl	800a5e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80038f2:	4803      	ldr	r0, [pc, #12]	@ (8003900 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80038f4:	f006 fe78 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	2000088c 	.word	0x2000088c
 8003900:	20000a54 	.word	0x20000a54

08003904 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003908:	4803      	ldr	r0, [pc, #12]	@ (8003918 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800390a:	f006 fe6d 	bl	800a5e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800390e:	4803      	ldr	r0, [pc, #12]	@ (800391c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003910:	f006 fe6a 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000088c 	.word	0x2000088c
 800391c:	20000aa0 	.word	0x20000aa0

08003920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003924:	4802      	ldr	r0, [pc, #8]	@ (8003930 <TIM2_IRQHandler+0x10>)
 8003926:	f006 fe5f 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200008d8 	.word	0x200008d8

08003934 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003938:	4802      	ldr	r0, [pc, #8]	@ (8003944 <TIM3_IRQHandler+0x10>)
 800393a:	f006 fe55 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000924 	.word	0x20000924

08003948 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800394c:	4802      	ldr	r0, [pc, #8]	@ (8003958 <I2C2_EV_IRQHandler+0x10>)
 800394e:	f003 fd37 	bl	80073c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200004f0 	.word	0x200004f0

0800395c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <I2C2_ER_IRQHandler+0x10>)
 8003962:	f003 fd47 	bl	80073f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200004f0 	.word	0x200004f0

08003970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003974:	4802      	ldr	r0, [pc, #8]	@ (8003980 <USART3_IRQHandler+0x10>)
 8003976:	f008 fa85 	bl	800be84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000bcc 	.word	0x20000bcc

08003984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003988:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800398c:	f003 fb46 	bl	800701c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <TIM20_BRK_IRQHandler>:

/**
  * @brief This function handles TIM20 break interrupt.
  */
void TIM20_BRK_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_BRK_IRQn 0 */

  /* USER CODE END TIM20_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <TIM20_BRK_IRQHandler+0x10>)
 800399a:	f006 fe25 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_BRK_IRQn 1 */

  /* USER CODE END TIM20_BRK_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000aec 	.word	0x20000aec

080039a8 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <TIM20_UP_IRQHandler+0x10>)
 80039ae:	f006 fe1b 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000aec 	.word	0x20000aec

080039bc <TIM20_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM20 trigger and commutation interrupts.
  */
void TIM20_TRG_COM_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_TRG_COM_IRQn 0 */

  /* USER CODE END TIM20_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <TIM20_TRG_COM_IRQHandler+0x10>)
 80039c2:	f006 fe11 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_TRG_COM_IRQn 1 */

  /* USER CODE END TIM20_TRG_COM_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000aec 	.word	0x20000aec

080039d0 <TIM20_CC_IRQHandler>:

/**
  * @brief This function handles TIM20 capture compare interrupt.
  */
void TIM20_CC_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_CC_IRQn 0 */

  /* USER CODE END TIM20_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <TIM20_CC_IRQHandler+0x10>)
 80039d6:	f006 fe07 	bl	800a5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_CC_IRQn 1 */

  /* USER CODE END TIM20_CC_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000aec 	.word	0x20000aec

080039e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <_sbrk+0x5c>)
 80039ee:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <_sbrk+0x60>)
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f8:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <_sbrk+0x64>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <_sbrk+0x68>)
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <_sbrk+0x64>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d207      	bcs.n	8003a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a14:	f00a fa74 	bl	800df00 <__errno>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e009      	b.n	8003a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a24:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <_sbrk+0x64>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <_sbrk+0x64>)
 8003a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a36:	68fb      	ldr	r3, [r7, #12]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20020000 	.word	0x20020000
 8003a44:	00000400 	.word	0x00000400
 8003a48:	20000888 	.word	0x20000888
 8003a4c:	20000db0 	.word	0x20000db0

08003a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <SystemInit+0x20>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <SystemInit+0x20>)
 8003a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09c      	sub	sp, #112	@ 0x70
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
 8003aa4:	615a      	str	r2, [r3, #20]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2234      	movs	r2, #52	@ 0x34
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00a fa0a 	bl	800dec8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8003be8 <MX_TIM1_Init+0x174>)
 8003ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8003aba:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003abc:	22a9      	movs	r2, #169	@ 0xa9
 8003abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac0:	4b48      	ldr	r3, [pc, #288]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003ac6:	4b47      	ldr	r3, [pc, #284]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ace:	4b45      	ldr	r3, [pc, #276]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ad4:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ada:	4b42      	ldr	r3, [pc, #264]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ae0:	4840      	ldr	r0, [pc, #256]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003ae2:	f006 f995 	bl	8009e10 <HAL_TIM_Base_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003aec:	f7fe fff2 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003af6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003afa:	4619      	mov	r1, r3
 8003afc:	4839      	ldr	r0, [pc, #228]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003afe:	f007 f873 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003b08:	f7fe ffe4 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b0c:	4835      	ldr	r0, [pc, #212]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003b0e:	f006 fa4f 	bl	8009fb0 <HAL_TIM_PWM_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003b18:	f7fe ffdc 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	482d      	ldr	r0, [pc, #180]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003b30:	f007 ff9c 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003b3a:	f7fe ffcb 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b3e:	2360      	movs	r3, #96	@ 0x60
 8003b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b46:	2300      	movs	r3, #0
 8003b48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4619      	mov	r1, r3
 8003b62:	4820      	ldr	r0, [pc, #128]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003b64:	f006 ff2c 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003b6e:	f7fe ffb1 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b76:	2204      	movs	r2, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	481a      	ldr	r0, [pc, #104]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003b7c:	f006 ff20 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003b86:	f7fe ffa5 	bl	8002ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4807      	ldr	r0, [pc, #28]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003bc8:	f007 ffe6 	bl	800bb98 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8003bd2:	f7fe ff7f 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003bd6:	4803      	ldr	r0, [pc, #12]	@ (8003be4 <MX_TIM1_Init+0x170>)
 8003bd8:	f000 fd30 	bl	800463c <HAL_TIM_MspPostInit>

}
 8003bdc:	bf00      	nop
 8003bde:	3770      	adds	r7, #112	@ 0x70
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000088c 	.word	0x2000088c
 8003be8:	40012c00 	.word	0x40012c00

08003bec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bf2:	f107 0310 	add.w	r3, r7, #16
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 8003c12:	4b1c      	ldr	r3, [pc, #112]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c14:	f244 2267 	movw	r2, #16999	@ 0x4267
 8003c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003c20:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c22:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c28:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c34:	4813      	ldr	r0, [pc, #76]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c36:	f006 f8eb 	bl	8009e10 <HAL_TIM_Base_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003c40:	f7fe ff48 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480c      	ldr	r0, [pc, #48]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c52:	f006 ffc9 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003c5c:	f7fe ff3a 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4805      	ldr	r0, [pc, #20]	@ (8003c84 <MX_TIM2_Init+0x98>)
 8003c6e:	f007 fefd 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003c78:	f7fe ff2c 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200008d8 	.word	0x200008d8

08003c88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	@ 0x30
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8e:	f107 0320 	add.w	r3, r7, #32
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8003db0 <MX_TIM3_Init+0x128>)
 8003cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8003cba:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cbc:	22a9      	movs	r2, #169	@ 0xa9
 8003cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003cc6:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003ccc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cce:	4b37      	ldr	r3, [pc, #220]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd4:	4b35      	ldr	r3, [pc, #212]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cda:	4834      	ldr	r0, [pc, #208]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cdc:	f006 f898 	bl	8009e10 <HAL_TIM_Base_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003ce6:	f7fe fef5 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cf0:	f107 0320 	add.w	r3, r7, #32
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	482d      	ldr	r0, [pc, #180]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003cf8:	f006 ff76 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003d02:	f7fe fee7 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003d06:	4829      	ldr	r0, [pc, #164]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d08:	f006 fabc 	bl	800a284 <HAL_TIM_IC_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003d12:	f7fe fedf 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	4821      	ldr	r0, [pc, #132]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d26:	f007 fea1 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003d30:	f7fe fed0 	bl	8002ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d34:	2300      	movs	r3, #0
 8003d36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4818      	ldr	r0, [pc, #96]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d4c:	f006 fd9b 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003d56:	f7fe febd 	bl	8002ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2204      	movs	r2, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4811      	ldr	r0, [pc, #68]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d66:	f006 fd8e 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003d70:	f7fe feb0 	bl	8002ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	480b      	ldr	r0, [pc, #44]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d80:	f006 fd81 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8003d8a:	f7fe fea3 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	220c      	movs	r2, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	@ (8003dac <MX_TIM3_Init+0x124>)
 8003d96:	f006 fd76 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8003da0:	f7fe fe98 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003da4:	bf00      	nop
 8003da6:	3730      	adds	r7, #48	@ 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000924 	.word	0x20000924
 8003db0:	40000400 	.word	0x40000400

08003db4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003dc6:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <MX_TIM6_Init+0x68>)
 8003dc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ddc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003de4:	480c      	ldr	r0, [pc, #48]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003de6:	f006 f813 	bl	8009e10 <HAL_TIM_Base_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003df0:	f7fe fe70 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	@ (8003e18 <MX_TIM6_Init+0x64>)
 8003e02:	f007 fe33 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003e0c:	f7fe fe62 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000970 	.word	0x20000970
 8003e1c:	40001000 	.word	0x40001000

08003e20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b09c      	sub	sp, #112	@ 0x70
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2234      	movs	r2, #52	@ 0x34
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f00a f834 	bl	800dec8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e60:	4b45      	ldr	r3, [pc, #276]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e62:	4a46      	ldr	r2, [pc, #280]	@ (8003f7c <MX_TIM8_Init+0x15c>)
 8003e64:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 8003e66:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e68:	22a9      	movs	r2, #169	@ 0xa9
 8003e6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6c:	4b42      	ldr	r3, [pc, #264]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e78:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e80:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e86:	4b3c      	ldr	r3, [pc, #240]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e8c:	483a      	ldr	r0, [pc, #232]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003e8e:	f005 ffbf 	bl	8009e10 <HAL_TIM_Base_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003e98:	f7fe fe1c 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ea2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4833      	ldr	r0, [pc, #204]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003eaa:	f006 fe9d 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003eb4:	f7fe fe0e 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003eb8:	482f      	ldr	r0, [pc, #188]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003eba:	f006 f879 	bl	8009fb0 <HAL_TIM_PWM_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003ec4:	f7fe fe06 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ed4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4827      	ldr	r0, [pc, #156]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003edc:	f007 fdc6 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003ee6:	f7fe fdf5 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eea:	2360      	movs	r3, #96	@ 0x60
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	481a      	ldr	r0, [pc, #104]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003f10:	f006 fd56 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003f1a:	f7fe fddb 	bl	8002ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4807      	ldr	r0, [pc, #28]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003f5c:	f007 fe1c 	bl	800bb98 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8003f66:	f7fe fdb5 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003f6a:	4803      	ldr	r0, [pc, #12]	@ (8003f78 <MX_TIM8_Init+0x158>)
 8003f6c:	f000 fb66 	bl	800463c <HAL_TIM_MspPostInit>

}
 8003f70:	bf00      	nop
 8003f72:	3770      	adds	r7, #112	@ 0x70
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200009bc 	.word	0x200009bc
 8003f7c:	40013400 	.word	0x40013400

08003f80 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <MX_TIM15_Init+0xa0>)
 8003fa2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fa6:	f244 2267 	movw	r2, #16999	@ 0x4267
 8003faa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fb8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fba:	4b18      	ldr	r3, [pc, #96]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003fc0:	4b16      	ldr	r3, [pc, #88]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc6:	4b15      	ldr	r3, [pc, #84]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003fcc:	4813      	ldr	r0, [pc, #76]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fce:	f005 ff1f 	bl	8009e10 <HAL_TIM_Base_Init>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8003fd8:	f7fe fd7c 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003fe2:	f107 0310 	add.w	r3, r7, #16
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	480c      	ldr	r0, [pc, #48]	@ (800401c <MX_TIM15_Init+0x9c>)
 8003fea:	f006 fdfd 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003ff4:	f7fe fd6e 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4805      	ldr	r0, [pc, #20]	@ (800401c <MX_TIM15_Init+0x9c>)
 8004006:	f007 fd31 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8004010:	f7fe fd60 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000a08 	.word	0x20000a08
 8004020:	40014000 	.word	0x40014000

08004024 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800402a:	463b      	mov	r3, r7
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004038:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <MX_TIM16_Init+0x94>)
 800403a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <MX_TIM16_Init+0x90>)
 800403e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004042:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 800404a:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <MX_TIM16_Init+0x90>)
 800404c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004050:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004052:	4b18      	ldr	r3, [pc, #96]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004058:	4b16      	ldr	r3, [pc, #88]	@ (80040b4 <MX_TIM16_Init+0x90>)
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004064:	4813      	ldr	r0, [pc, #76]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004066:	f005 fed3 	bl	8009e10 <HAL_TIM_Base_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8004070:	f7fe fd30 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8004074:	480f      	ldr	r0, [pc, #60]	@ (80040b4 <MX_TIM16_Init+0x90>)
 8004076:	f006 f905 	bl	800a284 <HAL_TIM_IC_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8004080:	f7fe fd28 	bl	8002ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004088:	2301      	movs	r3, #1
 800408a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800408c:	2300      	movs	r3, #0
 800408e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004090:	230f      	movs	r3, #15
 8004092:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004094:	463b      	mov	r3, r7
 8004096:	2200      	movs	r2, #0
 8004098:	4619      	mov	r1, r3
 800409a:	4806      	ldr	r0, [pc, #24]	@ (80040b4 <MX_TIM16_Init+0x90>)
 800409c:	f006 fbf3 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 80040a6:	f7fe fd15 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000a54 	.word	0x20000a54
 80040b8:	40014400 	.word	0x40014400

080040bc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80040c2:	463b      	mov	r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80040ce:	4b1f      	ldr	r3, [pc, #124]	@ (800414c <MX_TIM17_Init+0x90>)
 80040d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <MX_TIM17_Init+0x94>)
 80040d2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <MX_TIM17_Init+0x90>)
 80040d6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80040da:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040dc:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <MX_TIM17_Init+0x90>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49999;
 80040e2:	4b1a      	ldr	r3, [pc, #104]	@ (800414c <MX_TIM17_Init+0x90>)
 80040e4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80040e8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ea:	4b18      	ldr	r3, [pc, #96]	@ (800414c <MX_TIM17_Init+0x90>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80040f0:	4b16      	ldr	r3, [pc, #88]	@ (800414c <MX_TIM17_Init+0x90>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b15      	ldr	r3, [pc, #84]	@ (800414c <MX_TIM17_Init+0x90>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80040fc:	4813      	ldr	r0, [pc, #76]	@ (800414c <MX_TIM17_Init+0x90>)
 80040fe:	f005 fe87 	bl	8009e10 <HAL_TIM_Base_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8004108:	f7fe fce4 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800410c:	480f      	ldr	r0, [pc, #60]	@ (800414c <MX_TIM17_Init+0x90>)
 800410e:	f006 f8b9 	bl	800a284 <HAL_TIM_IC_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8004118:	f7fe fcdc 	bl	8002ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800411c:	2300      	movs	r3, #0
 800411e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004120:	2301      	movs	r3, #1
 8004122:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004128:	230f      	movs	r3, #15
 800412a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800412c:	463b      	mov	r3, r7
 800412e:	2200      	movs	r2, #0
 8004130:	4619      	mov	r1, r3
 8004132:	4806      	ldr	r0, [pc, #24]	@ (800414c <MX_TIM17_Init+0x90>)
 8004134:	f006 fba7 	bl	800a886 <HAL_TIM_IC_ConfigChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 800413e:	f7fe fcc9 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000aa0 	.word	0x20000aa0
 8004150:	40014800 	.word	0x40014800

08004154 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b098      	sub	sp, #96	@ 0x60
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004166:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	615a      	str	r2, [r3, #20]
 8004178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2234      	movs	r2, #52	@ 0x34
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f009 fea1 	bl	800dec8 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8004186:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <MX_TIM20_Init+0x120>)
 8004188:	4a3b      	ldr	r2, [pc, #236]	@ (8004278 <MX_TIM20_Init+0x124>)
 800418a:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 1700-1;
 800418c:	4b39      	ldr	r3, [pc, #228]	@ (8004274 <MX_TIM20_Init+0x120>)
 800418e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004192:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004194:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <MX_TIM20_Init+0x120>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 9999;
 800419a:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <MX_TIM20_Init+0x120>)
 800419c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041a0:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a2:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <MX_TIM20_Init+0x120>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80041a8:	4b32      	ldr	r3, [pc, #200]	@ (8004274 <MX_TIM20_Init+0x120>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <MX_TIM20_Init+0x120>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80041b4:	482f      	ldr	r0, [pc, #188]	@ (8004274 <MX_TIM20_Init+0x120>)
 80041b6:	f005 fefb 	bl	8009fb0 <HAL_TIM_PWM_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM20_Init+0x70>
  {
    Error_Handler();
 80041c0:	f7fe fc88 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80041d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80041d4:	4619      	mov	r1, r3
 80041d6:	4827      	ldr	r0, [pc, #156]	@ (8004274 <MX_TIM20_Init+0x120>)
 80041d8:	f007 fc48 	bl	800ba6c <HAL_TIMEx_MasterConfigSynchronization>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM20_Init+0x92>
  {
    Error_Handler();
 80041e2:	f7fe fc77 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e6:	2360      	movs	r3, #96	@ 0x60
 80041e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ee:	2300      	movs	r3, #0
 80041f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041f2:	2300      	movs	r3, #0
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004202:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004206:	2200      	movs	r2, #0
 8004208:	4619      	mov	r1, r3
 800420a:	481a      	ldr	r0, [pc, #104]	@ (8004274 <MX_TIM20_Init+0x120>)
 800420c:	f006 fbd8 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM20_Init+0xc6>
  {
    Error_Handler();
 8004216:	f7fe fc5d 	bl	8002ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800422e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004232:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004240:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800424a:	2300      	movs	r3, #0
 800424c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4807      	ldr	r0, [pc, #28]	@ (8004274 <MX_TIM20_Init+0x120>)
 8004258:	f007 fc9e 	bl	800bb98 <HAL_TIMEx_ConfigBreakDeadTime>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM20_Init+0x112>
  {
    Error_Handler();
 8004262:	f7fe fc37 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8004266:	4803      	ldr	r0, [pc, #12]	@ (8004274 <MX_TIM20_Init+0x120>)
 8004268:	f000 f9e8 	bl	800463c <HAL_TIM_MspPostInit>

}
 800426c:	bf00      	nop
 800426e:	3760      	adds	r7, #96	@ 0x60
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000aec 	.word	0x20000aec
 8004278:	40015000 	.word	0x40015000

0800427c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b096      	sub	sp, #88	@ 0x58
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4aa0      	ldr	r2, [pc, #640]	@ (800451c <HAL_TIM_Base_MspInit+0x2a0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d124      	bne.n	80042e8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800429e:	4ba0      	ldr	r3, [pc, #640]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	4a9f      	ldr	r2, [pc, #636]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80042a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80042aa:	4b9d      	ldr	r3, [pc, #628]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80042ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80042b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	2018      	movs	r0, #24
 80042bc:	f002 f987 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80042c0:	2018      	movs	r0, #24
 80042c2:	f002 f99e 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2104      	movs	r1, #4
 80042ca:	2019      	movs	r0, #25
 80042cc:	f002 f97f 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80042d0:	2019      	movs	r0, #25
 80042d2:	f002 f996 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 80042d6:	2200      	movs	r2, #0
 80042d8:	2104      	movs	r1, #4
 80042da:	201a      	movs	r0, #26
 80042dc:	f002 f977 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80042e0:	201a      	movs	r0, #26
 80042e2:	f002 f98e 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80042e6:	e160      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d114      	bne.n	800431c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f6:	4a8a      	ldr	r2, [pc, #552]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80042fe:	4b88      	ldr	r3, [pc, #544]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	201c      	movs	r0, #28
 8004310:	f002 f95d 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004314:	201c      	movs	r0, #28
 8004316:	f002 f974 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 800431a:	e146      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM3)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a80      	ldr	r2, [pc, #512]	@ (8004524 <HAL_TIM_Base_MspInit+0x2a8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d169      	bne.n	80043fa <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004326:	4b7e      	ldr	r3, [pc, #504]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	4a7d      	ldr	r2, [pc, #500]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6593      	str	r3, [r2, #88]	@ 0x58
 8004332:	4b7b      	ldr	r3, [pc, #492]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800433e:	4b78      	ldr	r3, [pc, #480]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	4a77      	ldr	r2, [pc, #476]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800434a:	4b75      	ldr	r3, [pc, #468]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	637b      	str	r3, [r7, #52]	@ 0x34
 8004354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004356:	4b72      	ldr	r3, [pc, #456]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	4a71      	ldr	r2, [pc, #452]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004362:	4b6f      	ldr	r3, [pc, #444]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	4b6c      	ldr	r3, [pc, #432]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004372:	4a6b      	ldr	r2, [pc, #428]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800437a:	4b69      	ldr	r3, [pc, #420]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = Ultra_Fr_Eco_TIM_Pin;
 8004386:	2310      	movs	r3, #16
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004396:	2302      	movs	r3, #2
 8004398:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(Ultra_Fr_Eco_TIM_GPIO_Port, &GPIO_InitStruct);
 800439a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800439e:	4619      	mov	r1, r3
 80043a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043a4:	f002 fc88 	bl	8006cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Ultra_Tr_Eco_TIM_Pin|Ultra_Es_Eco_TIM_Pin;
 80043a8:	2303      	movs	r3, #3
 80043aa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043b8:	2302      	movs	r3, #2
 80043ba:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80043c0:	4619      	mov	r1, r3
 80043c2:	4859      	ldr	r0, [pc, #356]	@ (8004528 <HAL_TIM_Base_MspInit+0x2ac>)
 80043c4:	f002 fc78 	bl	8006cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Ultra_Di_Eco_TIM_Pin;
 80043c8:	2340      	movs	r3, #64	@ 0x40
 80043ca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	2300      	movs	r3, #0
 80043d6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043d8:	2302      	movs	r3, #2
 80043da:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(Ultra_Di_Eco_TIM_GPIO_Port, &GPIO_InitStruct);
 80043dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80043e0:	4619      	mov	r1, r3
 80043e2:	4852      	ldr	r0, [pc, #328]	@ (800452c <HAL_TIM_Base_MspInit+0x2b0>)
 80043e4:	f002 fc68 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80043e8:	2200      	movs	r2, #0
 80043ea:	2101      	movs	r1, #1
 80043ec:	201d      	movs	r0, #29
 80043ee:	f002 f8ee 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043f2:	201d      	movs	r0, #29
 80043f4:	f002 f905 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 80043f8:	e0d7      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM6)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004530 <HAL_TIM_Base_MspInit+0x2b4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10c      	bne.n	800441e <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004404:	4b46      	ldr	r3, [pc, #280]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	4a45      	ldr	r2, [pc, #276]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800440a:	f043 0310 	orr.w	r3, r3, #16
 800440e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004410:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800441c:	e0c5      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a44      	ldr	r2, [pc, #272]	@ (8004534 <HAL_TIM_Base_MspInit+0x2b8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10c      	bne.n	8004442 <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004428:	4b3d      	ldr	r3, [pc, #244]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	4a3c      	ldr	r2, [pc, #240]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800442e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004432:	6613      	str	r3, [r2, #96]	@ 0x60
 8004434:	4b3a      	ldr	r3, [pc, #232]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004440:	e0b3      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM15)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a3c      	ldr	r2, [pc, #240]	@ (8004538 <HAL_TIM_Base_MspInit+0x2bc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d131      	bne.n	80044b0 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800444c:	4b34      	ldr	r3, [pc, #208]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800444e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004450:	4a33      	ldr	r2, [pc, #204]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004456:	6613      	str	r3, [r2, #96]	@ 0x60
 8004458:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004464:	4b2e      	ldr	r3, [pc, #184]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	4a2d      	ldr	r2, [pc, #180]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004470:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Ultra_Rot_Eco_TIM_Pin;
 800447c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800448e:	2301      	movs	r3, #1
 8004490:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(Ultra_Rot_Eco_TIM_GPIO_Port, &GPIO_InitStruct);
 8004492:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004496:	4619      	mov	r1, r3
 8004498:	4823      	ldr	r0, [pc, #140]	@ (8004528 <HAL_TIM_Base_MspInit+0x2ac>)
 800449a:	f002 fc0d 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	2018      	movs	r0, #24
 80044a4:	f002 f893 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80044a8:	2018      	movs	r0, #24
 80044aa:	f002 f8aa 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 80044ae:	e07c      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
  else if(tim_baseHandle->Instance==TIM16)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_TIM_Base_MspInit+0x2c0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d142      	bne.n	8004540 <HAL_TIM_Base_MspInit+0x2c4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d2:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d6:	4a12      	ldr	r2, [pc, #72]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <HAL_TIM_Base_MspInit+0x2a4>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 80044ea:	2310      	movs	r3, #16
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f6:	2300      	movs	r3, #0
 80044f8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80044fa:	2301      	movs	r3, #1
 80044fc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 80044fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004502:	4619      	mov	r1, r3
 8004504:	4808      	ldr	r0, [pc, #32]	@ (8004528 <HAL_TIM_Base_MspInit+0x2ac>)
 8004506:	f002 fbd7 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2104      	movs	r1, #4
 800450e:	2019      	movs	r0, #25
 8004510:	f002 f85d 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004514:	2019      	movs	r0, #25
 8004516:	f002 f874 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 800451a:	e046      	b.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40021000 	.word	0x40021000
 8004524:	40000400 	.word	0x40000400
 8004528:	48000400 	.word	0x48000400
 800452c:	48000800 	.word	0x48000800
 8004530:	40001000 	.word	0x40001000
 8004534:	40013400 	.word	0x40013400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
  else if(tim_baseHandle->Instance==TIM17)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1b      	ldr	r2, [pc, #108]	@ (80045b4 <HAL_TIM_Base_MspInit+0x338>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d12f      	bne.n	80045aa <HAL_TIM_Base_MspInit+0x32e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800454a:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	4a1a      	ldr	r2, [pc, #104]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004554:	6613      	str	r3, [r2, #96]	@ 0x60
 8004556:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 8004558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	4a14      	ldr	r2, [pc, #80]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456e:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_TIM_Base_MspInit+0x33c>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 800457a:	2320      	movs	r3, #32
 800457c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800458a:	230a      	movs	r3, #10
 800458c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800458e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004592:	4619      	mov	r1, r3
 8004594:	4809      	ldr	r0, [pc, #36]	@ (80045bc <HAL_TIM_Base_MspInit+0x340>)
 8004596:	f002 fb8f 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 4, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2104      	movs	r1, #4
 800459e:	201a      	movs	r0, #26
 80045a0:	f002 f815 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80045a4:	201a      	movs	r0, #26
 80045a6:	f002 f82c 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 80045aa:	bf00      	nop
 80045ac:	3758      	adds	r7, #88	@ 0x58
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40014800 	.word	0x40014800
 80045b8:	40021000 	.word	0x40021000
 80045bc:	48000400 	.word	0x48000400

080045c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM20)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	@ (8004634 <HAL_TIM_PWM_MspInit+0x74>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12b      	bne.n	800462a <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 80045d2:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_TIM_PWM_MspInit+0x78>)
 80045d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d6:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_TIM_PWM_MspInit+0x78>)
 80045d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80045de:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_TIM_PWM_MspInit+0x78>)
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM20 interrupt Init */
    HAL_NVIC_SetPriority(TIM20_BRK_IRQn, 0, 0);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2100      	movs	r1, #0
 80045ee:	204d      	movs	r0, #77	@ 0x4d
 80045f0:	f001 ffed 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_BRK_IRQn);
 80045f4:	204d      	movs	r0, #77	@ 0x4d
 80045f6:	f002 f804 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM20_UP_IRQn, 0, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	204e      	movs	r0, #78	@ 0x4e
 8004600:	f001 ffe5 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8004604:	204e      	movs	r0, #78	@ 0x4e
 8004606:	f001 fffc 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM20_TRG_COM_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	204f      	movs	r0, #79	@ 0x4f
 8004610:	f001 ffdd 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_TRG_COM_IRQn);
 8004614:	204f      	movs	r0, #79	@ 0x4f
 8004616:	f001 fff4 	bl	8006602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM20_CC_IRQn, 0, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	2100      	movs	r1, #0
 800461e:	2050      	movs	r0, #80	@ 0x50
 8004620:	f001 ffd5 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_CC_IRQn);
 8004624:	2050      	movs	r0, #80	@ 0x50
 8004626:	f001 ffec 	bl	8006602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40015000 	.word	0x40015000
 8004638:	40021000 	.word	0x40021000

0800463c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a34      	ldr	r2, [pc, #208]	@ (800472c <HAL_TIM_MspPostInit+0xf0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d11c      	bne.n	8004698 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	4a33      	ldr	r2, [pc, #204]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800466a:	4b31      	ldr	r3, [pc, #196]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8004676:	2303      	movs	r3, #3
 8004678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004686:	2302      	movs	r3, #2
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	4619      	mov	r1, r3
 8004690:	4828      	ldr	r0, [pc, #160]	@ (8004734 <HAL_TIM_MspPostInit+0xf8>)
 8004692:	f002 fb11 	bl	8006cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004696:	e044      	b.n	8004722 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a26      	ldr	r2, [pc, #152]	@ (8004738 <HAL_TIM_MspPostInit+0xfc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d11e      	bne.n	80046e0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	4a22      	ldr	r2, [pc, #136]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ae:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80046ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80046cc:	2302      	movs	r3, #2
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046da:	f002 faed 	bl	8006cb8 <HAL_GPIO_Init>
}
 80046de:	e020      	b.n	8004722 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM20)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_TIM_MspPostInit+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d11b      	bne.n	8004722 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ea:	4b11      	ldr	r3, [pc, #68]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	4a10      	ldr	r2, [pc, #64]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <HAL_TIM_MspPostInit+0xf4>)
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Ultra_All_Trig_PWM_Pin;
 8004702:	2304      	movs	r3, #4
 8004704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470e:	2300      	movs	r3, #0
 8004710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8004712:	2303      	movs	r3, #3
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Ultra_All_Trig_PWM_GPIO_Port, &GPIO_InitStruct);
 8004716:	f107 0314 	add.w	r3, r7, #20
 800471a:	4619      	mov	r1, r3
 800471c:	4808      	ldr	r0, [pc, #32]	@ (8004740 <HAL_TIM_MspPostInit+0x104>)
 800471e:	f002 facb 	bl	8006cb8 <HAL_GPIO_Init>
}
 8004722:	bf00      	nop
 8004724:	3728      	adds	r7, #40	@ 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40021000 	.word	0x40021000
 8004734:	48000800 	.word	0x48000800
 8004738:	40013400 	.word	0x40013400
 800473c:	40015000 	.word	0x40015000
 8004740:	48000400 	.word	0x48000400

08004744 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004748:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 800474a:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <MX_LPUART1_UART_Init+0x90>)
 800474c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800474e:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800475c:	4b1c      	ldr	r3, [pc, #112]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 800475e:	2200      	movs	r2, #0
 8004760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004764:	2200      	movs	r2, #0
 8004766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 800476a:	220c      	movs	r2, #12
 800476c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800476e:	4b18      	ldr	r3, [pc, #96]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004774:	4b16      	ldr	r3, [pc, #88]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004776:	2200      	movs	r2, #0
 8004778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 800477c:	2200      	movs	r2, #0
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004782:	2200      	movs	r2, #0
 8004784:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004786:	4812      	ldr	r0, [pc, #72]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 8004788:	f007 fae0 	bl	800bd4c <HAL_UART_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8004792:	f7fe f99f 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004796:	2100      	movs	r1, #0
 8004798:	480d      	ldr	r0, [pc, #52]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 800479a:	f009 faaa 	bl	800dcf2 <HAL_UARTEx_SetTxFifoThreshold>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80047a4:	f7fe f996 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047a8:	2100      	movs	r1, #0
 80047aa:	4809      	ldr	r0, [pc, #36]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 80047ac:	f009 fadf 	bl	800dd6e <HAL_UARTEx_SetRxFifoThreshold>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80047b6:	f7fe f98d 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80047ba:	4805      	ldr	r0, [pc, #20]	@ (80047d0 <MX_LPUART1_UART_Init+0x8c>)
 80047bc:	f009 fa60 	bl	800dc80 <HAL_UARTEx_DisableFifoMode>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80047c6:	f7fe f985 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000b38 	.word	0x20000b38
 80047d4:	40008000 	.word	0x40008000

080047d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047dc:	4b22      	ldr	r3, [pc, #136]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047de:	4a23      	ldr	r2, [pc, #140]	@ (800486c <MX_USART3_UART_Init+0x94>)
 80047e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80047e2:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80047e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 80047fe:	220c      	movs	r2, #12
 8004800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004802:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004804:	2200      	movs	r2, #0
 8004806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004808:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 800480a:	2200      	movs	r2, #0
 800480c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800480e:	4b16      	ldr	r3, [pc, #88]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004810:	2200      	movs	r2, #0
 8004812:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004816:	2200      	movs	r2, #0
 8004818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800481a:	4b13      	ldr	r3, [pc, #76]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 800481c:	2200      	movs	r2, #0
 800481e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004820:	4811      	ldr	r0, [pc, #68]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004822:	f007 fa93 	bl	800bd4c <HAL_UART_Init>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800482c:	f7fe f952 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004830:	2100      	movs	r1, #0
 8004832:	480d      	ldr	r0, [pc, #52]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004834:	f009 fa5d 	bl	800dcf2 <HAL_UARTEx_SetTxFifoThreshold>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800483e:	f7fe f949 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004842:	2100      	movs	r1, #0
 8004844:	4808      	ldr	r0, [pc, #32]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004846:	f009 fa92 	bl	800dd6e <HAL_UARTEx_SetRxFifoThreshold>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004850:	f7fe f940 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004854:	4804      	ldr	r0, [pc, #16]	@ (8004868 <MX_USART3_UART_Init+0x90>)
 8004856:	f009 fa13 	bl	800dc80 <HAL_UARTEx_DisableFifoMode>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004860:	f7fe f938 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000bcc 	.word	0x20000bcc
 800486c:	40004800 	.word	0x40004800

08004870 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0a0      	sub	sp, #128	@ 0x80
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004888:	f107 0318 	add.w	r3, r7, #24
 800488c:	2254      	movs	r2, #84	@ 0x54
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f009 fb19 	bl	800dec8 <memset>
  if(uartHandle->Instance==LPUART1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a41      	ldr	r2, [pc, #260]	@ (80049a0 <HAL_UART_MspInit+0x130>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d137      	bne.n	8004910 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80048a0:	2320      	movs	r3, #32
 80048a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80048a4:	2300      	movs	r3, #0
 80048a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a8:	f107 0318 	add.w	r3, r7, #24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f005 f861 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80048b8:	f7fe f90c 	bl	8002ad4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80048bc:	4b39      	ldr	r3, [pc, #228]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	4a38      	ldr	r2, [pc, #224]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80048c8:	4b36      	ldr	r3, [pc, #216]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d4:	4b33      	ldr	r3, [pc, #204]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d8:	4a32      	ldr	r2, [pc, #200]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048e0:	4b30      	ldr	r3, [pc, #192]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 80048e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80048ec:	230c      	movs	r3, #12
 80048ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f0:	2302      	movs	r3, #2
 80048f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f8:	2300      	movs	r3, #0
 80048fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80048fc:	230c      	movs	r3, #12
 80048fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004900:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800490a:	f002 f9d5 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800490e:	e043      	b.n	8004998 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a24      	ldr	r2, [pc, #144]	@ (80049a8 <HAL_UART_MspInit+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d13e      	bne.n	8004998 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800491a:	2304      	movs	r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004922:	f107 0318 	add.w	r3, r7, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f005 f824 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8004932:	f7fe f8cf 	bl	8002ad4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004936:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	4a1a      	ldr	r2, [pc, #104]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 800493c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004940:	6593      	str	r3, [r2, #88]	@ 0x58
 8004942:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800494e:	4b15      	ldr	r3, [pc, #84]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 8004950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004952:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800495a:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <HAL_UART_MspInit+0x134>)
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004966:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800496a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004974:	2300      	movs	r3, #0
 8004976:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004978:	2307      	movs	r3, #7
 800497a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004980:	4619      	mov	r1, r3
 8004982:	480a      	ldr	r0, [pc, #40]	@ (80049ac <HAL_UART_MspInit+0x13c>)
 8004984:	f002 f998 	bl	8006cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004988:	2200      	movs	r2, #0
 800498a:	2100      	movs	r1, #0
 800498c:	2027      	movs	r0, #39	@ 0x27
 800498e:	f001 fe1e 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004992:	2027      	movs	r0, #39	@ 0x27
 8004994:	f001 fe35 	bl	8006602 <HAL_NVIC_EnableIRQ>
}
 8004998:	bf00      	nop
 800499a:	3780      	adds	r7, #128	@ 0x80
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40008000 	.word	0x40008000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40004800 	.word	0x40004800
 80049ac:	48000400 	.word	0x48000400

080049b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049b0:	480d      	ldr	r0, [pc, #52]	@ (80049e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049b4:	f7ff f84c 	bl	8003a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049b8:	480c      	ldr	r0, [pc, #48]	@ (80049ec <LoopForever+0x6>)
  ldr r1, =_edata
 80049ba:	490d      	ldr	r1, [pc, #52]	@ (80049f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049bc:	4a0d      	ldr	r2, [pc, #52]	@ (80049f4 <LoopForever+0xe>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80049c0:	e002      	b.n	80049c8 <LoopCopyDataInit>

080049c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049c6:	3304      	adds	r3, #4

080049c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049cc:	d3f9      	bcc.n	80049c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049d0:	4c0a      	ldr	r4, [pc, #40]	@ (80049fc <LoopForever+0x16>)
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049d4:	e001      	b.n	80049da <LoopFillZerobss>

080049d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d8:	3204      	adds	r2, #4

080049da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049dc:	d3fb      	bcc.n	80049d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049de:	f009 fa95 	bl	800df0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049e2:	f7fd fd07 	bl	80023f4 <main>

080049e6 <LoopForever>:

LoopForever:
    b LoopForever
 80049e6:	e7fe      	b.n	80049e6 <LoopForever>
  ldr   r0, =_estack
 80049e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80049f4:	0800e960 	.word	0x0800e960
  ldr r2, =_sbss
 80049f8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80049fc:	20000dac 	.word	0x20000dac

08004a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC1_2_IRQHandler>

08004a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	f001 fdd3 	bl	80065b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a12:	2000      	movs	r0, #0
 8004a14:	f000 f80e 	bl	8004a34 <HAL_InitTick>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	71fb      	strb	r3, [r7, #7]
 8004a22:	e001      	b.n	8004a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a24:	f7fe feea 	bl	80037fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a28:	79fb      	ldrb	r3, [r7, #7]

}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a40:	4b16      	ldr	r3, [pc, #88]	@ (8004a9c <HAL_InitTick+0x68>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d022      	beq.n	8004a8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a48:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <HAL_InitTick+0x6c>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_InitTick+0x68>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 fdde 	bl	800661e <HAL_SYSTICK_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10f      	bne.n	8004a88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b0f      	cmp	r3, #15
 8004a6c:	d809      	bhi.n	8004a82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295
 8004a76:	f001 fdaa 	bl	80065ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <HAL_InitTick+0x70>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e007      	b.n	8004a92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	e004      	b.n	8004a92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e001      	b.n	8004a92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000044 	.word	0x20000044
 8004aa0:	2000003c 	.word	0x2000003c
 8004aa4:	20000040 	.word	0x20000040

08004aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_IncTick+0x1c>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_IncTick+0x20>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <HAL_IncTick+0x1c>)
 8004ab8:	6013      	str	r3, [r2, #0]
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000c60 	.word	0x20000c60
 8004ac8:	20000044 	.word	0x20000044

08004acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return uwTick;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	@ (8004ae0 <HAL_GetTick+0x14>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000c60 	.word	0x20000c60

08004ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004aec:	f7ff ffee 	bl	8004acc <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d004      	beq.n	8004b08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_Delay+0x40>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b08:	bf00      	nop
 8004b0a:	f7ff ffdf 	bl	8004acc <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d8f7      	bhi.n	8004b0a <HAL_Delay+0x26>
  {
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000044 	.word	0x20000044

08004b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	609a      	str	r2, [r3, #8]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3360      	adds	r3, #96	@ 0x60
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <LL_ADC_SetOffset+0x44>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	03fff000 	.word	0x03fff000

08004bd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3360      	adds	r3, #96	@ 0x60
 8004be6:	461a      	mov	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3360      	adds	r3, #96	@ 0x60
 8004c14:	461a      	mov	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3360      	adds	r3, #96	@ 0x60
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3360      	adds	r3, #96	@ 0x60
 8004c80:	461a      	mov	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	615a      	str	r2, [r3, #20]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3330      	adds	r3, #48	@ 0x30
 8004d02:	461a      	mov	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	4413      	add	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	211f      	movs	r1, #31
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	f003 011f 	and.w	r1, r3, #31
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	0e5b      	lsrs	r3, r3, #25
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	4413      	add	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	0d1b      	lsrs	r3, r3, #20
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2107      	movs	r1, #7
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	401a      	ands	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	0d1b      	lsrs	r3, r3, #20
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0318 	and.w	r3, r3, #24
 8004dc2:	4908      	ldr	r1, [pc, #32]	@ (8004de4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dc4:	40d9      	lsrs	r1, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	400b      	ands	r3, r1
 8004dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	0007ffff 	.word	0x0007ffff

08004de8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 031f 	and.w	r3, r3, #31
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004e14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6093      	str	r3, [r2, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3c:	d101      	bne.n	8004e42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e8c:	d101      	bne.n	8004e92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004eb4:	f043 0201 	orr.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004edc:	f043 0202 	orr.w	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <LL_ADC_IsEnabled+0x18>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <LL_ADC_IsEnabled+0x1a>
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d101      	bne.n	8004f2e <LL_ADC_IsDisableOngoing+0x18>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <LL_ADC_IsDisableOngoing+0x1a>
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d101      	bne.n	8004f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d101      	bne.n	8004fa2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b089      	sub	sp, #36	@ 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e1a9      	b.n	800531e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc f96d 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff19 	bl	8004e28 <LL_ADC_IsDeepPowerDownEnabled>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff feff 	bl	8004e04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff ff34 	bl	8004e78 <LL_ADC_IsInternalRegulatorEnabled>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d115      	bne.n	8005042 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ff18 	bl	8004e50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005020:	4b9c      	ldr	r3, [pc, #624]	@ (8005294 <HAL_ADC_Init+0x2e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	4a9c      	ldr	r2, [pc, #624]	@ (8005298 <HAL_ADC_Init+0x2e8>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	099b      	lsrs	r3, r3, #6
 800502e:	3301      	adds	r3, #1
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005034:	e002      	b.n	800503c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b01      	subs	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f9      	bne.n	8005036 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff ff16 	bl	8004e78 <LL_ADC_IsInternalRegulatorEnabled>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	f043 0210 	orr.w	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff76 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8142 	bne.w	800530c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 813e 	bne.w	800530c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005098:	f043 0202 	orr.w	r2, r3, #2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff23 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d141      	bne.n	8005134 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050b8:	d004      	beq.n	80050c4 <HAL_ADC_Init+0x114>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a77      	ldr	r2, [pc, #476]	@ (800529c <HAL_ADC_Init+0x2ec>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10f      	bne.n	80050e4 <HAL_ADC_Init+0x134>
 80050c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050c8:	f7ff ff12 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050cc:	4604      	mov	r4, r0
 80050ce:	4873      	ldr	r0, [pc, #460]	@ (800529c <HAL_ADC_Init+0x2ec>)
 80050d0:	f7ff ff0e 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4323      	orrs	r3, r4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e012      	b.n	800510a <HAL_ADC_Init+0x15a>
 80050e4:	486e      	ldr	r0, [pc, #440]	@ (80052a0 <HAL_ADC_Init+0x2f0>)
 80050e6:	f7ff ff03 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050ea:	4604      	mov	r4, r0
 80050ec:	486d      	ldr	r0, [pc, #436]	@ (80052a4 <HAL_ADC_Init+0x2f4>)
 80050ee:	f7ff feff 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050f2:	4603      	mov	r3, r0
 80050f4:	431c      	orrs	r4, r3
 80050f6:	486c      	ldr	r0, [pc, #432]	@ (80052a8 <HAL_ADC_Init+0x2f8>)
 80050f8:	f7ff fefa 	bl	8004ef0 <LL_ADC_IsEnabled>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4323      	orrs	r3, r4
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005116:	d004      	beq.n	8005122 <HAL_ADC_Init+0x172>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5f      	ldr	r2, [pc, #380]	@ (800529c <HAL_ADC_Init+0x2ec>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_ADC_Init+0x176>
 8005122:	4a62      	ldr	r2, [pc, #392]	@ (80052ac <HAL_ADC_Init+0x2fc>)
 8005124:	e000      	b.n	8005128 <HAL_ADC_Init+0x178>
 8005126:	4a62      	ldr	r2, [pc, #392]	@ (80052b0 <HAL_ADC_Init+0x300>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7ff fcfa 	bl	8004b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7f5b      	ldrb	r3, [r3, #29]
 8005138:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800513e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005144:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800514a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005152:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800515e:	2b01      	cmp	r3, #1
 8005160:	d106      	bne.n	8005170 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	045b      	lsls	r3, r3, #17
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	4b48      	ldr	r3, [pc, #288]	@ (80052b4 <HAL_ADC_Init+0x304>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fee5 	bl	8004f8a <LL_ADC_INJ_IsConversionOngoing>
 80051c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d17f      	bne.n	80052c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d17c      	bne.n	80052c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ea:	f023 0302 	bic.w	r3, r3, #2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	69b9      	ldr	r1, [r7, #24]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d017      	beq.n	8005230 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800520e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005218:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800521c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6911      	ldr	r1, [r2, #16]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	430b      	orrs	r3, r1
 800522a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800522e:	e013      	b.n	8005258 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800523e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005254:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800525e:	2b01      	cmp	r3, #1
 8005260:	d12a      	bne.n	80052b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005284:	430a      	orrs	r2, r1
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	611a      	str	r2, [r3, #16]
 8005292:	e019      	b.n	80052c8 <HAL_ADC_Init+0x318>
 8005294:	2000003c 	.word	0x2000003c
 8005298:	053e2d63 	.word	0x053e2d63
 800529c:	50000100 	.word	0x50000100
 80052a0:	50000400 	.word	0x50000400
 80052a4:	50000500 	.word	0x50000500
 80052a8:	50000600 	.word	0x50000600
 80052ac:	50000300 	.word	0x50000300
 80052b0:	50000700 	.word	0x50000700
 80052b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d10c      	bne.n	80052ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d6:	f023 010f 	bic.w	r1, r3, #15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80052e8:	e007      	b.n	80052fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 020f 	bic.w	r2, r2, #15
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	65da      	str	r2, [r3, #92]	@ 0x5c
 800530a:	e007      	b.n	800531c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	f043 0210 	orr.w	r2, r3, #16
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800531c:	7ffb      	ldrb	r3, [r7, #31]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	@ 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop

08005328 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533c:	d004      	beq.n	8005348 <HAL_ADC_Start_DMA+0x20>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a5a      	ldr	r2, [pc, #360]	@ (80054ac <HAL_ADC_Start_DMA+0x184>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_ADC_Start_DMA+0x24>
 8005348:	4b59      	ldr	r3, [pc, #356]	@ (80054b0 <HAL_ADC_Start_DMA+0x188>)
 800534a:	e000      	b.n	800534e <HAL_ADC_Start_DMA+0x26>
 800534c:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <HAL_ADC_Start_DMA+0x18c>)
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fd4a 	bl	8004de8 <LL_ADC_GetMultimode>
 8005354:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fe02 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 809b 	bne.w	800549e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_ADC_Start_DMA+0x4e>
 8005372:	2302      	movs	r3, #2
 8005374:	e096      	b.n	80054a4 <HAL_ADC_Start_DMA+0x17c>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a4d      	ldr	r2, [pc, #308]	@ (80054b8 <HAL_ADC_Start_DMA+0x190>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d008      	beq.n	800539a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b05      	cmp	r3, #5
 8005392:	d002      	beq.n	800539a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b09      	cmp	r3, #9
 8005398:	d17a      	bne.n	8005490 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fcf6 	bl	8005d8c <ADC_Enable>
 80053a0:	4603      	mov	r3, r0
 80053a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d16d      	bne.n	8005486 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <HAL_ADC_Start_DMA+0x184>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_ADC_Start_DMA+0xb4>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a3b      	ldr	r2, [pc, #236]	@ (80054bc <HAL_ADC_Start_DMA+0x194>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d002      	beq.n	80053d8 <HAL_ADC_Start_DMA+0xb0>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	e003      	b.n	80053e0 <HAL_ADC_Start_DMA+0xb8>
 80053d8:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <HAL_ADC_Start_DMA+0x198>)
 80053da:	e001      	b.n	80053e0 <HAL_ADC_Start_DMA+0xb8>
 80053dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d002      	beq.n	80053ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	f023 0206 	bic.w	r2, r3, #6
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	661a      	str	r2, [r3, #96]	@ 0x60
 8005412:	e002      	b.n	800541a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541e:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <HAL_ADC_Start_DMA+0x19c>)
 8005420:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	4a28      	ldr	r2, [pc, #160]	@ (80054c8 <HAL_ADC_Start_DMA+0x1a0>)
 8005428:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	4a27      	ldr	r2, [pc, #156]	@ (80054cc <HAL_ADC_Start_DMA+0x1a4>)
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	221c      	movs	r2, #28
 8005438:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0210 	orr.w	r2, r2, #16
 8005450:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3340      	adds	r3, #64	@ 0x40
 800546c:	4619      	mov	r1, r3
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f001 f989 	bl	8006788 <HAL_DMA_Start_IT>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fd5c 	bl	8004f3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005484:	e00d      	b.n	80054a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800548e:	e008      	b.n	80054a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800549c:	e001      	b.n	80054a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800549e:	2302      	movs	r3, #2
 80054a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	50000100 	.word	0x50000100
 80054b0:	50000300 	.word	0x50000300
 80054b4:	50000700 	.word	0x50000700
 80054b8:	50000600 	.word	0x50000600
 80054bc:	50000500 	.word	0x50000500
 80054c0:	50000400 	.word	0x50000400
 80054c4:	08005f77 	.word	0x08005f77
 80054c8:	0800604f 	.word	0x0800604f
 80054cc:	0800606b 	.word	0x0800606b

080054d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0b6      	sub	sp, #216	@ 0xd8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x24>
 800552a:	2302      	movs	r3, #2
 800552c:	f000 bc13 	b.w	8005d56 <HAL_ADC_ConfigChannel+0x84a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fd11 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 83f3 	bne.w	8005d30 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7ff fbcb 	bl	8004cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fcff 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005566:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fd0b 	bl	8004f8a <LL_ADC_INJ_IsConversionOngoing>
 8005574:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800557c:	2b00      	cmp	r3, #0
 800557e:	f040 81d9 	bne.w	8005934 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 81d4 	bne.w	8005934 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005594:	d10f      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	4619      	mov	r1, r3
 80055a2:	f7ff fbd2 	bl	8004d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fb79 	bl	8004ca6 <LL_ADC_SetSamplingTimeCommonConfig>
 80055b4:	e00e      	b.n	80055d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7ff fbc1 	bl	8004d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fb69 	bl	8004ca6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d022      	beq.n	800563c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6919      	ldr	r1, [r3, #16]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005606:	f7ff fac3 	bl	8004b90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6919      	ldr	r1, [r3, #16]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	461a      	mov	r2, r3
 8005618:	f7ff fb0f 	bl	8004c3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005628:	2b01      	cmp	r3, #1
 800562a:	d102      	bne.n	8005632 <HAL_ADC_ConfigChannel+0x126>
 800562c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005630:	e000      	b.n	8005634 <HAL_ADC_ConfigChannel+0x128>
 8005632:	2300      	movs	r3, #0
 8005634:	461a      	mov	r2, r3
 8005636:	f7ff fb1b 	bl	8004c70 <LL_ADC_SetOffsetSaturation>
 800563a:	e17b      	b.n	8005934 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fac8 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 8005648:	4603      	mov	r3, r0
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x15c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fabd 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 800565e:	4603      	mov	r3, r0
 8005660:	0e9b      	lsrs	r3, r3, #26
 8005662:	f003 021f 	and.w	r2, r3, #31
 8005666:	e01e      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x19a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fab2 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 8005674:	4603      	mov	r3, r0
 8005676:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800567e:	fa93 f3a3 	rbit	r3, r3
 8005682:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800568a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800568e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005696:	2320      	movs	r3, #32
 8005698:	e004      	b.n	80056a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800569a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d105      	bne.n	80056be <HAL_ADC_ConfigChannel+0x1b2>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	0e9b      	lsrs	r3, r3, #26
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	e018      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x1e4>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80056d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80056da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80056e2:	2320      	movs	r3, #32
 80056e4:	e004      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80056e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d106      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fa81 	bl	8004c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fa65 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 800570e:	4603      	mov	r3, r0
 8005710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <HAL_ADC_ConfigChannel+0x222>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fa5a 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 8005724:	4603      	mov	r3, r0
 8005726:	0e9b      	lsrs	r3, r3, #26
 8005728:	f003 021f 	and.w	r2, r3, #31
 800572c:	e01e      	b.n	800576c <HAL_ADC_ConfigChannel+0x260>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fa4f 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 800573a:	4603      	mov	r3, r0
 800573c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005744:	fa93 f3a3 	rbit	r3, r3
 8005748:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800574c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800575c:	2320      	movs	r3, #32
 800575e:	e004      	b.n	800576a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x278>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0e9b      	lsrs	r3, r3, #26
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	e018      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x2aa>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005790:	fa93 f3a3 	rbit	r3, r3
 8005794:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005798:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800579c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80057a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80057a8:	2320      	movs	r3, #32
 80057aa:	e004      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80057ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057b0:	fab3 f383 	clz	r3, r3
 80057b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d106      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	2101      	movs	r1, #1
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fa1e 	bl	8004c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2102      	movs	r1, #2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fa02 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x2e8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2102      	movs	r1, #2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff f9f7 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 80057ea:	4603      	mov	r3, r0
 80057ec:	0e9b      	lsrs	r3, r3, #26
 80057ee:	f003 021f 	and.w	r2, r3, #31
 80057f2:	e01e      	b.n	8005832 <HAL_ADC_ConfigChannel+0x326>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2102      	movs	r1, #2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f9ec 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 8005800:	4603      	mov	r3, r0
 8005802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005812:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800581a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005822:	2320      	movs	r3, #32
 8005824:	e004      	b.n	8005830 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800582a:	fab3 f383 	clz	r3, r3
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <HAL_ADC_ConfigChannel+0x33e>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0e9b      	lsrs	r3, r3, #26
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	e016      	b.n	8005878 <HAL_ADC_ConfigChannel+0x36c>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800585c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800585e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005862:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800586a:	2320      	movs	r3, #32
 800586c:	e004      	b.n	8005878 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800586e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005878:	429a      	cmp	r2, r3
 800587a:	d106      	bne.n	800588a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	2102      	movs	r1, #2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff f9bd 	bl	8004c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2103      	movs	r1, #3
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f9a1 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 8005896:	4603      	mov	r3, r0
 8005898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x3aa>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2103      	movs	r1, #3
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff f996 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 80058ac:	4603      	mov	r3, r0
 80058ae:	0e9b      	lsrs	r3, r3, #26
 80058b0:	f003 021f 	and.w	r2, r3, #31
 80058b4:	e017      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x3da>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2103      	movs	r1, #3
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f98b 	bl	8004bd8 <LL_ADC_GetOffsetChannel>
 80058c2:	4603      	mov	r3, r0
 80058c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80058ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80058d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80058d8:	2320      	movs	r3, #32
 80058da:	e003      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80058dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x3f2>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	0e9b      	lsrs	r3, r3, #26
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	e011      	b.n	8005922 <HAL_ADC_ConfigChannel+0x416>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800590c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800590e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005916:	2320      	movs	r3, #32
 8005918:	e003      	b.n	8005922 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800591a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591c:	fab3 f383 	clz	r3, r3
 8005920:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005922:	429a      	cmp	r2, r3
 8005924:	d106      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	2103      	movs	r1, #3
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff f968 	bl	8004c04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fad9 	bl	8004ef0 <LL_ADC_IsEnabled>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 813d 	bne.w	8005bc0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f7ff fa24 	bl	8004da0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4aa2      	ldr	r2, [pc, #648]	@ (8005be8 <HAL_ADC_ConfigChannel+0x6dc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f040 812e 	bne.w	8005bc0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <HAL_ADC_ConfigChannel+0x480>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	0e9b      	lsrs	r3, r3, #26
 800597a:	3301      	adds	r3, #1
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b09      	cmp	r3, #9
 8005982:	bf94      	ite	ls
 8005984:	2301      	movls	r3, #1
 8005986:	2300      	movhi	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e019      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x4b4>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800599a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800599c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800599e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e003      	b.n	80059b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80059a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	3301      	adds	r3, #1
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	bf94      	ite	ls
 80059ba:	2301      	movls	r3, #1
 80059bc:	2300      	movhi	r3, #0
 80059be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d079      	beq.n	8005ab8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x4d4>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	0e9b      	lsrs	r3, r3, #26
 80059d6:	3301      	adds	r3, #1
 80059d8:	069b      	lsls	r3, r3, #26
 80059da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059de:	e015      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x500>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e8:	fa93 f3a3 	rbit	r3, r3
 80059ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80059ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80059f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80059f8:	2320      	movs	r3, #32
 80059fa:	e003      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80059fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059fe:	fab3 f383 	clz	r3, r3
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	3301      	adds	r3, #1
 8005a06:	069b      	lsls	r3, r3, #26
 8005a08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x520>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	0e9b      	lsrs	r3, r3, #26
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	e017      	b.n	8005a5c <HAL_ADC_ConfigChannel+0x550>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a34:	fa93 f3a3 	rbit	r3, r3
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005a44:	2320      	movs	r3, #32
 8005a46:	e003      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4a:	fab3 f383 	clz	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	3301      	adds	r3, #1
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2101      	movs	r1, #1
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	ea42 0103 	orr.w	r1, r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x576>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	0e9b      	lsrs	r3, r3, #26
 8005a72:	3301      	adds	r3, #1
 8005a74:	f003 021f 	and.w	r2, r3, #31
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	051b      	lsls	r3, r3, #20
 8005a80:	e018      	b.n	8005ab4 <HAL_ADC_ConfigChannel+0x5a8>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	e003      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f003 021f 	and.w	r2, r3, #31
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	e07e      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x5c8>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0e9b      	lsrs	r3, r3, #26
 8005aca:	3301      	adds	r3, #1
 8005acc:	069b      	lsls	r3, r3, #26
 8005ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ad2:	e015      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x5f4>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	fa93 f3a3 	rbit	r3, r3
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005aec:	2320      	movs	r3, #32
 8005aee:	e003      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	fab3 f383 	clz	r3, r3
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	069b      	lsls	r3, r3, #26
 8005afc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_ADC_ConfigChannel+0x614>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	0e9b      	lsrs	r3, r3, #26
 8005b12:	3301      	adds	r3, #1
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	e017      	b.n	8005b50 <HAL_ADC_ConfigChannel+0x644>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	61fb      	str	r3, [r7, #28]
  return result;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	e003      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	ea42 0103 	orr.w	r1, r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <HAL_ADC_ConfigChannel+0x670>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0e9b      	lsrs	r3, r3, #26
 8005b66:	3301      	adds	r3, #1
 8005b68:	f003 021f 	and.w	r2, r3, #31
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	3b1e      	subs	r3, #30
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b7a:	e01b      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x6a8>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	fa93 f3a3 	rbit	r3, r3
 8005b88:	613b      	str	r3, [r7, #16]
  return result;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b94:	2320      	movs	r3, #32
 8005b96:	e003      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f003 021f 	and.w	r2, r3, #31
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4413      	add	r3, r2
 8005bac:	3b1e      	subs	r3, #30
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7ff f8c5 	bl	8004d4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <HAL_ADC_ConfigChannel+0x6e0>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80be 	beq.w	8005d4a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bd6:	d004      	beq.n	8005be2 <HAL_ADC_ConfigChannel+0x6d6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a04      	ldr	r2, [pc, #16]	@ (8005bf0 <HAL_ADC_ConfigChannel+0x6e4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10a      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x6ec>
 8005be2:	4b04      	ldr	r3, [pc, #16]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x6e8>)
 8005be4:	e009      	b.n	8005bfa <HAL_ADC_ConfigChannel+0x6ee>
 8005be6:	bf00      	nop
 8005be8:	407f0000 	.word	0x407f0000
 8005bec:	80080000 	.word	0x80080000
 8005bf0:	50000100 	.word	0x50000100
 8005bf4:	50000300 	.word	0x50000300
 8005bf8:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <HAL_ADC_ConfigChannel+0x854>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe ffba 	bl	8004b74 <LL_ADC_GetCommonPathInternalCh>
 8005c00:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a56      	ldr	r2, [pc, #344]	@ (8005d64 <HAL_ADC_ConfigChannel+0x858>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_ADC_ConfigChannel+0x70c>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a55      	ldr	r2, [pc, #340]	@ (8005d68 <HAL_ADC_ConfigChannel+0x85c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d13a      	bne.n	8005c8e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d134      	bne.n	8005c8e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c2c:	d005      	beq.n	8005c3a <HAL_ADC_ConfigChannel+0x72e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4e      	ldr	r2, [pc, #312]	@ (8005d6c <HAL_ADC_ConfigChannel+0x860>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f040 8085 	bne.w	8005d44 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c42:	d004      	beq.n	8005c4e <HAL_ADC_ConfigChannel+0x742>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a49      	ldr	r2, [pc, #292]	@ (8005d70 <HAL_ADC_ConfigChannel+0x864>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x746>
 8005c4e:	4a49      	ldr	r2, [pc, #292]	@ (8005d74 <HAL_ADC_ConfigChannel+0x868>)
 8005c50:	e000      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x748>
 8005c52:	4a43      	ldr	r2, [pc, #268]	@ (8005d60 <HAL_ADC_ConfigChannel+0x854>)
 8005c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe ff75 	bl	8004b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c64:	4b44      	ldr	r3, [pc, #272]	@ (8005d78 <HAL_ADC_ConfigChannel+0x86c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	4a44      	ldr	r2, [pc, #272]	@ (8005d7c <HAL_ADC_ConfigChannel+0x870>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	099b      	lsrs	r3, r3, #6
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c7e:	e002      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f9      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c8c:	e05a      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3b      	ldr	r2, [pc, #236]	@ (8005d80 <HAL_ADC_ConfigChannel+0x874>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d125      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11f      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a31      	ldr	r2, [pc, #196]	@ (8005d70 <HAL_ADC_ConfigChannel+0x864>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d104      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x7ac>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a34      	ldr	r2, [pc, #208]	@ (8005d84 <HAL_ADC_ConfigChannel+0x878>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d047      	beq.n	8005d48 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cc0:	d004      	beq.n	8005ccc <HAL_ADC_ConfigChannel+0x7c0>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d70 <HAL_ADC_ConfigChannel+0x864>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d101      	bne.n	8005cd0 <HAL_ADC_ConfigChannel+0x7c4>
 8005ccc:	4a29      	ldr	r2, [pc, #164]	@ (8005d74 <HAL_ADC_ConfigChannel+0x868>)
 8005cce:	e000      	b.n	8005cd2 <HAL_ADC_ConfigChannel+0x7c6>
 8005cd0:	4a23      	ldr	r2, [pc, #140]	@ (8005d60 <HAL_ADC_ConfigChannel+0x854>)
 8005cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fe ff36 	bl	8004b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ce2:	e031      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a27      	ldr	r2, [pc, #156]	@ (8005d88 <HAL_ADC_ConfigChannel+0x87c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d12d      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d127      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005d70 <HAL_ADC_ConfigChannel+0x864>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d0c:	d004      	beq.n	8005d18 <HAL_ADC_ConfigChannel+0x80c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a17      	ldr	r2, [pc, #92]	@ (8005d70 <HAL_ADC_ConfigChannel+0x864>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x810>
 8005d18:	4a16      	ldr	r2, [pc, #88]	@ (8005d74 <HAL_ADC_ConfigChannel+0x868>)
 8005d1a:	e000      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x812>
 8005d1c:	4a10      	ldr	r2, [pc, #64]	@ (8005d60 <HAL_ADC_ConfigChannel+0x854>)
 8005d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7fe ff10 	bl	8004b4e <LL_ADC_SetCommonPathInternalCh>
 8005d2e:	e00c      	b.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005d42:	e002      	b.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	37d8      	adds	r7, #216	@ 0xd8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	50000700 	.word	0x50000700
 8005d64:	c3210000 	.word	0xc3210000
 8005d68:	90c00010 	.word	0x90c00010
 8005d6c:	50000600 	.word	0x50000600
 8005d70:	50000100 	.word	0x50000100
 8005d74:	50000300 	.word	0x50000300
 8005d78:	2000003c 	.word	0x2000003c
 8005d7c:	053e2d63 	.word	0x053e2d63
 8005d80:	c7520000 	.word	0xc7520000
 8005d84:	50000500 	.word	0x50000500
 8005d88:	cb840000 	.word	0xcb840000

08005d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff f8a7 	bl	8004ef0 <LL_ADC_IsEnabled>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d176      	bne.n	8005e96 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	4b3c      	ldr	r3, [pc, #240]	@ (8005ea0 <ADC_Enable+0x114>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dba:	f043 0210 	orr.w	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e062      	b.n	8005e98 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff f862 	bl	8004ea0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005de4:	d004      	beq.n	8005df0 <ADC_Enable+0x64>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea4 <ADC_Enable+0x118>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <ADC_Enable+0x68>
 8005df0:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea8 <ADC_Enable+0x11c>)
 8005df2:	e000      	b.n	8005df6 <ADC_Enable+0x6a>
 8005df4:	4b2d      	ldr	r3, [pc, #180]	@ (8005eac <ADC_Enable+0x120>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe febc 	bl	8004b74 <LL_ADC_GetCommonPathInternalCh>
 8005dfc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e06:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb0 <ADC_Enable+0x124>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	4a29      	ldr	r2, [pc, #164]	@ (8005eb4 <ADC_Enable+0x128>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	099b      	lsrs	r3, r3, #6
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e20:	e002      	b.n	8005e28 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f9      	bne.n	8005e22 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e2e:	f7fe fe4d 	bl	8004acc <HAL_GetTick>
 8005e32:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e34:	e028      	b.n	8005e88 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff f858 	bl	8004ef0 <LL_ADC_IsEnabled>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff f828 	bl	8004ea0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e50:	f7fe fe3c 	bl	8004acc <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d914      	bls.n	8005e88 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d00d      	beq.n	8005e88 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e70:	f043 0210 	orr.w	r2, r3, #16
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e007      	b.n	8005e98 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d1cf      	bne.n	8005e36 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	8000003f 	.word	0x8000003f
 8005ea4:	50000100 	.word	0x50000100
 8005ea8:	50000300 	.word	0x50000300
 8005eac:	50000700 	.word	0x50000700
 8005eb0:	2000003c 	.word	0x2000003c
 8005eb4:	053e2d63 	.word	0x053e2d63

08005eb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff f826 	bl	8004f16 <LL_ADC_IsDisableOngoing>
 8005eca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff f80d 	bl	8004ef0 <LL_ADC_IsEnabled>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d047      	beq.n	8005f6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d144      	bne.n	8005f6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030d 	and.w	r3, r3, #13
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d10c      	bne.n	8005f0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe ffe7 	bl	8004ec8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2203      	movs	r2, #3
 8005f00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f02:	f7fe fde3 	bl	8004acc <HAL_GetTick>
 8005f06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f08:	e029      	b.n	8005f5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0e:	f043 0210 	orr.w	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e023      	b.n	8005f6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f26:	f7fe fdd1 	bl	8004acc <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d914      	bls.n	8005f5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f46:	f043 0210 	orr.w	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e007      	b.n	8005f6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1dc      	bne.n	8005f26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d14b      	bne.n	8006028 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d021      	beq.n	8005fee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fe8c 	bl	8004ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d032      	beq.n	8006020 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d12b      	bne.n	8006020 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11f      	bne.n	8006020 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe4:	f043 0201 	orr.w	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fec:	e018      	b.n	8006020 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d111      	bne.n	8006020 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006018:	f043 0201 	orr.w	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fa55 	bl	80054d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006026:	e00e      	b.n	8006046 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fa5f 	bl	80054f8 <HAL_ADC_ErrorCallback>
}
 800603a:	e004      	b.n	8006046 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fa41 	bl	80054e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006088:	f043 0204 	orr.w	r2, r3, #4
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fa31 	bl	80054f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <LL_ADC_IsEnabled>:
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <LL_ADC_IsEnabled+0x18>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <LL_ADC_IsEnabled+0x1a>
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_ADC_StartCalibration>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80060d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_ADC_IsCalibrationOnGoing>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800610a:	d101      	bne.n	8006110 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_ADC_REG_IsConversionOngoing>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b04      	cmp	r3, #4
 8006130:	d101      	bne.n	8006136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_ADCEx_Calibration_Start+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e04d      	b.n	80061fc <HAL_ADCEx_Calibration_Start+0xb8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fea5 	bl	8005eb8 <ADC_Disable>
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d136      	bne.n	80061e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006180:	f023 0302 	bic.w	r3, r3, #2
 8006184:	f043 0202 	orr.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ff96 	bl	80060c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006198:	e014      	b.n	80061c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3301      	adds	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <HAL_ADCEx_Calibration_Start+0xc0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d90d      	bls.n	80061c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ac:	f023 0312 	bic.w	r3, r3, #18
 80061b0:	f043 0210 	orr.w	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e01b      	b.n	80061fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff ff94 	bl	80060f6 <LL_ADC_IsCalibrationOnGoing>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e2      	bne.n	800619a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061e4:	e005      	b.n	80061f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ea:	f043 0210 	orr.w	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	0004de01 	.word	0x0004de01

08006208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b0a1      	sub	sp, #132	@ 0x84
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006222:	2302      	movs	r3, #2
 8006224:	e0e7      	b.n	80063f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800622e:	2300      	movs	r3, #0
 8006230:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006232:	2300      	movs	r3, #0
 8006234:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800623e:	d102      	bne.n	8006246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006240:	4b6f      	ldr	r3, [pc, #444]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	e009      	b.n	800625a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a6e      	ldr	r2, [pc, #440]	@ (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d102      	bne.n	8006256 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006250:	4b6d      	ldr	r3, [pc, #436]	@ (8006408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	e001      	b.n	800625a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0be      	b.n	80063f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff4f 	bl	800611e <LL_ADC_REG_IsConversionOngoing>
 8006280:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff ff49 	bl	800611e <LL_ADC_REG_IsConversionOngoing>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 80a0 	bne.w	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 809c 	bne.w	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a4:	d004      	beq.n	80062b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a55      	ldr	r2, [pc, #340]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d101      	bne.n	80062b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80062b0:	4b56      	ldr	r3, [pc, #344]	@ (800640c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80062b2:	e000      	b.n	80062b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80062b4:	4b56      	ldr	r3, [pc, #344]	@ (8006410 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80062b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d04b      	beq.n	8006358 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80062c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062d2:	035b      	lsls	r3, r3, #13
 80062d4:	430b      	orrs	r3, r1
 80062d6:	431a      	orrs	r2, r3
 80062d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062e4:	d004      	beq.n	80062f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a45      	ldr	r2, [pc, #276]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10f      	bne.n	8006310 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80062f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80062f4:	f7ff fed3 	bl	800609e <LL_ADC_IsEnabled>
 80062f8:	4604      	mov	r4, r0
 80062fa:	4841      	ldr	r0, [pc, #260]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062fc:	f7ff fecf 	bl	800609e <LL_ADC_IsEnabled>
 8006300:	4603      	mov	r3, r0
 8006302:	4323      	orrs	r3, r4
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf0c      	ite	eq
 8006308:	2301      	moveq	r3, #1
 800630a:	2300      	movne	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e012      	b.n	8006336 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006310:	483c      	ldr	r0, [pc, #240]	@ (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006312:	f7ff fec4 	bl	800609e <LL_ADC_IsEnabled>
 8006316:	4604      	mov	r4, r0
 8006318:	483b      	ldr	r0, [pc, #236]	@ (8006408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800631a:	f7ff fec0 	bl	800609e <LL_ADC_IsEnabled>
 800631e:	4603      	mov	r3, r0
 8006320:	431c      	orrs	r4, r3
 8006322:	483c      	ldr	r0, [pc, #240]	@ (8006414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006324:	f7ff febb 	bl	800609e <LL_ADC_IsEnabled>
 8006328:	4603      	mov	r3, r0
 800632a:	4323      	orrs	r3, r4
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d056      	beq.n	80063e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800633a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006342:	f023 030f 	bic.w	r3, r3, #15
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	6811      	ldr	r1, [r2, #0]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	6892      	ldr	r2, [r2, #8]
 800634e:	430a      	orrs	r2, r1
 8006350:	431a      	orrs	r2, r3
 8006352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006354:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006356:	e047      	b.n	80063e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006362:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800636c:	d004      	beq.n	8006378 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a23      	ldr	r2, [pc, #140]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10f      	bne.n	8006398 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006378:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800637c:	f7ff fe8f 	bl	800609e <LL_ADC_IsEnabled>
 8006380:	4604      	mov	r4, r0
 8006382:	481f      	ldr	r0, [pc, #124]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006384:	f7ff fe8b 	bl	800609e <LL_ADC_IsEnabled>
 8006388:	4603      	mov	r3, r0
 800638a:	4323      	orrs	r3, r4
 800638c:	2b00      	cmp	r3, #0
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e012      	b.n	80063be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006398:	481a      	ldr	r0, [pc, #104]	@ (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800639a:	f7ff fe80 	bl	800609e <LL_ADC_IsEnabled>
 800639e:	4604      	mov	r4, r0
 80063a0:	4819      	ldr	r0, [pc, #100]	@ (8006408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80063a2:	f7ff fe7c 	bl	800609e <LL_ADC_IsEnabled>
 80063a6:	4603      	mov	r3, r0
 80063a8:	431c      	orrs	r4, r3
 80063aa:	481a      	ldr	r0, [pc, #104]	@ (8006414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80063ac:	f7ff fe77 	bl	800609e <LL_ADC_IsEnabled>
 80063b0:	4603      	mov	r3, r0
 80063b2:	4323      	orrs	r3, r4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80063c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80063ca:	f023 030f 	bic.w	r3, r3, #15
 80063ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80063d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063d2:	e009      	b.n	80063e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d8:	f043 0220 	orr.w	r2, r3, #32
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80063e6:	e000      	b.n	80063ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80063f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3784      	adds	r7, #132	@ 0x84
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}
 80063fe:	bf00      	nop
 8006400:	50000100 	.word	0x50000100
 8006404:	50000400 	.word	0x50000400
 8006408:	50000500 	.word	0x50000500
 800640c:	50000300 	.word	0x50000300
 8006410:	50000700 	.word	0x50000700
 8006414:	50000600 	.word	0x50000600

08006418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006428:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <__NVIC_SetPriorityGrouping+0x44>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006434:	4013      	ands	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800644a:	4a04      	ldr	r2, [pc, #16]	@ (800645c <__NVIC_SetPriorityGrouping+0x44>)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	60d3      	str	r3, [r2, #12]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006464:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <__NVIC_GetPriorityGrouping+0x18>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	f003 0307 	and.w	r3, r3, #7
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000ed00 	.word	0xe000ed00

0800647c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	db0b      	blt.n	80064a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	f003 021f 	and.w	r2, r3, #31
 8006494:	4907      	ldr	r1, [pc, #28]	@ (80064b4 <__NVIC_EnableIRQ+0x38>)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2001      	movs	r0, #1
 800649e:	fa00 f202 	lsl.w	r2, r0, r2
 80064a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	e000e100 	.word	0xe000e100

080064b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db0a      	blt.n	80064e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	490c      	ldr	r1, [pc, #48]	@ (8006504 <__NVIC_SetPriority+0x4c>)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	0112      	lsls	r2, r2, #4
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	440b      	add	r3, r1
 80064dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064e0:	e00a      	b.n	80064f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4908      	ldr	r1, [pc, #32]	@ (8006508 <__NVIC_SetPriority+0x50>)
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	3b04      	subs	r3, #4
 80064f0:	0112      	lsls	r2, r2, #4
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	440b      	add	r3, r1
 80064f6:	761a      	strb	r2, [r3, #24]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	e000e100 	.word	0xe000e100
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f1c3 0307 	rsb	r3, r3, #7
 8006526:	2b04      	cmp	r3, #4
 8006528:	bf28      	it	cs
 800652a:	2304      	movcs	r3, #4
 800652c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3304      	adds	r3, #4
 8006532:	2b06      	cmp	r3, #6
 8006534:	d902      	bls.n	800653c <NVIC_EncodePriority+0x30>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3b03      	subs	r3, #3
 800653a:	e000      	b.n	800653e <NVIC_EncodePriority+0x32>
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006540:	f04f 32ff 	mov.w	r2, #4294967295
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43da      	mvns	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	401a      	ands	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006554:	f04f 31ff 	mov.w	r1, #4294967295
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	fa01 f303 	lsl.w	r3, r1, r3
 800655e:	43d9      	mvns	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006564:	4313      	orrs	r3, r2
         );
}
 8006566:	4618      	mov	r0, r3
 8006568:	3724      	adds	r7, #36	@ 0x24
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3b01      	subs	r3, #1
 8006580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006584:	d301      	bcc.n	800658a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006586:	2301      	movs	r3, #1
 8006588:	e00f      	b.n	80065aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800658a:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <SysTick_Config+0x40>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006592:	210f      	movs	r1, #15
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	f7ff ff8e 	bl	80064b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800659c:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <SysTick_Config+0x40>)
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065a2:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <SysTick_Config+0x40>)
 80065a4:	2207      	movs	r2, #7
 80065a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	e000e010 	.word	0xe000e010

080065b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff29 	bl	8006418 <__NVIC_SetPriorityGrouping>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	4603      	mov	r3, r0
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065dc:	f7ff ff40 	bl	8006460 <__NVIC_GetPriorityGrouping>
 80065e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f7ff ff90 	bl	800650c <NVIC_EncodePriority>
 80065ec:	4602      	mov	r2, r0
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff ff5f 	bl	80064b8 <__NVIC_SetPriority>
}
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	4603      	mov	r3, r0
 800660a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800660c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff ff33 	bl	800647c <__NVIC_EnableIRQ>
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ffa4 	bl	8006574 <SysTick_Config>
 800662c:	4603      	mov	r3, r0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e08d      	b.n	8006766 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	4b47      	ldr	r3, [pc, #284]	@ (8006770 <HAL_DMA_Init+0x138>)
 8006652:	429a      	cmp	r2, r3
 8006654:	d80f      	bhi.n	8006676 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	4b45      	ldr	r3, [pc, #276]	@ (8006774 <HAL_DMA_Init+0x13c>)
 800665e:	4413      	add	r3, r2
 8006660:	4a45      	ldr	r2, [pc, #276]	@ (8006778 <HAL_DMA_Init+0x140>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	009a      	lsls	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a42      	ldr	r2, [pc, #264]	@ (800677c <HAL_DMA_Init+0x144>)
 8006672:	641a      	str	r2, [r3, #64]	@ 0x40
 8006674:	e00e      	b.n	8006694 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	4b40      	ldr	r3, [pc, #256]	@ (8006780 <HAL_DMA_Init+0x148>)
 800667e:	4413      	add	r3, r2
 8006680:	4a3d      	ldr	r2, [pc, #244]	@ (8006778 <HAL_DMA_Init+0x140>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	009a      	lsls	r2, r3, #2
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <HAL_DMA_Init+0x14c>)
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80066b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa84 	bl	8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f4:	d102      	bne.n	80066fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006710:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d010      	beq.n	800673c <HAL_DMA_Init+0x104>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b04      	cmp	r3, #4
 8006720:	d80c      	bhi.n	800673c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 faa4 	bl	8006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e008      	b.n	800674e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40020407 	.word	0x40020407
 8006774:	bffdfff8 	.word	0xbffdfff8
 8006778:	cccccccd 	.word	0xcccccccd
 800677c:	40020000 	.word	0x40020000
 8006780:	bffdfbf8 	.word	0xbffdfbf8
 8006784:	40020400 	.word	0x40020400

08006788 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_DMA_Start_IT+0x20>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e066      	b.n	8006876 <HAL_DMA_Start_IT+0xee>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d155      	bne.n	8006868 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f9c9 	bl	8006b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 020e 	orr.w	r2, r2, #14
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e00f      	b.n	8006820 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0204 	bic.w	r2, r2, #4
 800680e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 020a 	orr.w	r2, r2, #10
 800681e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800683c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006854:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e005      	b.n	8006874 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006870:	2302      	movs	r3, #2
 8006872:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d005      	beq.n	80068a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2204      	movs	r2, #4
 800689a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e037      	b.n	8006912 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 020e 	bic.w	r2, r2, #14
 80068b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d6:	f003 021f 	and.w	r2, r3, #31
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f202 	lsl.w	r2, r1, r2
 80068e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00c      	beq.n	8006912 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006906:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006910:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d00d      	beq.n	8006964 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	e047      	b.n	80069f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 020e 	bic.w	r2, r2, #14
 8006972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006998:	f003 021f 	and.w	r2, r3, #31
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	2101      	movs	r1, #1
 80069a2:	fa01 f202 	lsl.w	r2, r1, r2
 80069a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80069d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
    }
  }
  return status;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2204      	movs	r2, #4
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4013      	ands	r3, r2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d026      	beq.n	8006a78 <HAL_DMA_IRQHandler+0x7a>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d021      	beq.n	8006a78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d107      	bne.n	8006a52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0204 	bic.w	r2, r2, #4
 8006a50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	f003 021f 	and.w	r2, r3, #31
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	2104      	movs	r1, #4
 8006a60:	fa01 f202 	lsl.w	r2, r1, r2
 8006a64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d071      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006a76:	e06c      	b.n	8006b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2202      	movs	r2, #2
 8006a82:	409a      	lsls	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d02e      	beq.n	8006aea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d029      	beq.n	8006aea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 020a 	bic.w	r2, r2, #10
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac0:	f003 021f 	and.w	r2, r3, #31
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	2102      	movs	r1, #2
 8006aca:	fa01 f202 	lsl.w	r2, r1, r2
 8006ace:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d038      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006ae8:	e033      	b.n	8006b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2208      	movs	r2, #8
 8006af4:	409a      	lsls	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d02a      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d025      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 020e 	bic.w	r2, r2, #14
 8006b16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1c:	f003 021f 	and.w	r2, r3, #31
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	2101      	movs	r1, #1
 8006b26:	fa01 f202 	lsl.w	r2, r1, r2
 8006b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
}
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b6a:	b2db      	uxtb	r3, r3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006ba0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba6:	f003 021f 	and.w	r2, r3, #31
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bae:	2101      	movs	r1, #1
 8006bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d108      	bne.n	8006bd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006bd6:	e007      	b.n	8006be8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d802      	bhi.n	8006c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006c08:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e001      	b.n	8006c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006c0e:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006c10:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	3b08      	subs	r3, #8
 8006c1e:	4a12      	ldr	r2, [pc, #72]	@ (8006c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006c20:	fba2 2303 	umull	r2, r3, r2, r3
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2c:	089b      	lsrs	r3, r3, #2
 8006c2e:	009a      	lsls	r2, r3, #2
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	2201      	movs	r2, #1
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40020407 	.word	0x40020407
 8006c60:	40020800 	.word	0x40020800
 8006c64:	40020820 	.word	0x40020820
 8006c68:	cccccccd 	.word	0xcccccccd
 8006c6c:	40020880 	.word	0x40020880

08006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a08      	ldr	r2, [pc, #32]	@ (8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c92:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	1000823f 	.word	0x1000823f
 8006cb4:	40020940 	.word	0x40020940

08006cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006cc6:	e15a      	b.n	8006f7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	2101      	movs	r1, #1
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 814c 	beq.w	8006f78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d005      	beq.n	8006cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d130      	bne.n	8006d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	2203      	movs	r2, #3
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d2e:	2201      	movs	r2, #1
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	43db      	mvns	r3, r3
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	f003 0201 	and.w	r2, r3, #1
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d017      	beq.n	8006d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	2203      	movs	r2, #3
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43db      	mvns	r3, r3
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d123      	bne.n	8006dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	08da      	lsrs	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3208      	adds	r2, #8
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	220f      	movs	r2, #15
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	08da      	lsrs	r2, r3, #3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3208      	adds	r2, #8
 8006de4:	6939      	ldr	r1, [r7, #16]
 8006de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	2203      	movs	r2, #3
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 0203 	and.w	r2, r3, #3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80a6 	beq.w	8006f78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8006f9c <HAL_GPIO_Init+0x2e4>)
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e30:	4a5a      	ldr	r2, [pc, #360]	@ (8006f9c <HAL_GPIO_Init+0x2e4>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e38:	4b58      	ldr	r3, [pc, #352]	@ (8006f9c <HAL_GPIO_Init+0x2e4>)
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e44:	4a56      	ldr	r2, [pc, #344]	@ (8006fa0 <HAL_GPIO_Init+0x2e8>)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	089b      	lsrs	r3, r3, #2
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	220f      	movs	r2, #15
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4013      	ands	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006e6e:	d01f      	beq.n	8006eb0 <HAL_GPIO_Init+0x1f8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a4c      	ldr	r2, [pc, #304]	@ (8006fa4 <HAL_GPIO_Init+0x2ec>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d019      	beq.n	8006eac <HAL_GPIO_Init+0x1f4>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa8 <HAL_GPIO_Init+0x2f0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <HAL_GPIO_Init+0x1f0>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a4a      	ldr	r2, [pc, #296]	@ (8006fac <HAL_GPIO_Init+0x2f4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00d      	beq.n	8006ea4 <HAL_GPIO_Init+0x1ec>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a49      	ldr	r2, [pc, #292]	@ (8006fb0 <HAL_GPIO_Init+0x2f8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d007      	beq.n	8006ea0 <HAL_GPIO_Init+0x1e8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a48      	ldr	r2, [pc, #288]	@ (8006fb4 <HAL_GPIO_Init+0x2fc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d101      	bne.n	8006e9c <HAL_GPIO_Init+0x1e4>
 8006e98:	2305      	movs	r3, #5
 8006e9a:	e00a      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006e9c:	2306      	movs	r3, #6
 8006e9e:	e008      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	e006      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e004      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e002      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <HAL_GPIO_Init+0x1fa>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	f002 0203 	and.w	r2, r2, #3
 8006eb8:	0092      	lsls	r2, r2, #2
 8006eba:	4093      	lsls	r3, r2
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ec2:	4937      	ldr	r1, [pc, #220]	@ (8006fa0 <HAL_GPIO_Init+0x2e8>)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	3302      	adds	r3, #2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ed0:	4b39      	ldr	r3, [pc, #228]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ef4:	4a30      	ldr	r2, [pc, #192]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006efa:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	43db      	mvns	r3, r3
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4013      	ands	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f1e:	4a26      	ldr	r2, [pc, #152]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006f24:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4013      	ands	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f48:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f72:	4a11      	ldr	r2, [pc, #68]	@ (8006fb8 <HAL_GPIO_Init+0x300>)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f47f ae9d 	bne.w	8006cc8 <HAL_GPIO_Init+0x10>
  }
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	48000400 	.word	0x48000400
 8006fa8:	48000800 	.word	0x48000800
 8006fac:	48000c00 	.word	0x48000c00
 8006fb0:	48001000 	.word	0x48001000
 8006fb4:	48001400 	.word	0x48001400
 8006fb8:	40010400 	.word	0x40010400

08006fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e001      	b.n	8006fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	807b      	strh	r3, [r7, #2]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ffc:	787b      	ldrb	r3, [r7, #1]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007002:	887a      	ldrh	r2, [r7, #2]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007008:	e002      	b.n	8007010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007026:	4b08      	ldr	r3, [pc, #32]	@ (8007048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	4013      	ands	r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d006      	beq.n	8007040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007032:	4a05      	ldr	r2, [pc, #20]	@ (8007048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f806 	bl	800704c <HAL_GPIO_EXTI_Callback>
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40010400 	.word	0x40010400

0800704c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e08d      	b.n	8007190 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fa fd99 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	@ 0x24
 8007092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80070b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d107      	bne.n	80070dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070d8:	609a      	str	r2, [r3, #8]
 80070da:	e006      	b.n	80070ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80070e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d108      	bne.n	8007104 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	e007      	b.n	8007114 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007112:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007126:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007136:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69d9      	ldr	r1, [r3, #28]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	@ 0x28
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	460b      	mov	r3, r1
 80071a6:	817b      	strh	r3, [r7, #10]
 80071a8:	4613      	mov	r3, r2
 80071aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	f040 80ef 	bne.w	800739c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071cc:	d101      	bne.n	80071d2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80071ce:	2302      	movs	r3, #2
 80071d0:	e0e5      	b.n	800739e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_I2C_Master_Transmit_DMA+0x48>
 80071dc:	2302      	movs	r3, #2
 80071de:	e0de      	b.n	800739e <HAL_I2C_Master_Transmit_DMA+0x206>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2221      	movs	r2, #33	@ 0x21
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2210      	movs	r2, #16
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	893a      	ldrh	r2, [r7, #8]
 8007208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a66      	ldr	r2, [pc, #408]	@ (80073a8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800720e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a66      	ldr	r2, [pc, #408]	@ (80073ac <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007214:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721a:	b29b      	uxth	r3, r3
 800721c:	2bff      	cmp	r3, #255	@ 0xff
 800721e:	d906      	bls.n	800722e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	22ff      	movs	r2, #255	@ 0xff
 8007224:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007226:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e007      	b.n	800723e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800723c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01a      	beq.n	800727c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007260:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007280:	2b00      	cmp	r3, #0
 8007282:	d074      	beq.n	800736e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d022      	beq.n	80072d2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	4a47      	ldr	r2, [pc, #284]	@ (80073b0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007292:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	4a46      	ldr	r2, [pc, #280]	@ (80073b4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800729a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	2200      	movs	r2, #0
 80072aa:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80072bc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80072c2:	f7ff fa61 	bl	8006788 <HAL_DMA_Start_IT>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d13a      	bne.n	8007346 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80072d0:	e013      	b.n	80072fa <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e051      	b.n	800739e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	3301      	adds	r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	8979      	ldrh	r1, [r7, #10]
 8007306:	4b2c      	ldr	r3, [pc, #176]	@ (80073b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f001 fba3 	bl	8008a58 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800732c:	2110      	movs	r1, #16
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f001 fbc4 	bl	8008abc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e028      	b.n	8007398 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735a:	f043 0210 	orr.w	r2, r3, #16
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e017      	b.n	800739e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a12      	ldr	r2, [pc, #72]	@ (80073bc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007372:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	b2da      	uxtb	r2, r3
 8007378:	8979      	ldrh	r1, [r7, #10]
 800737a:	4b0f      	ldr	r3, [pc, #60]	@ (80073b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f001 fb68 	bl	8008a58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007390:	2101      	movs	r1, #1
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f001 fb92 	bl	8008abc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	ffff0000 	.word	0xffff0000
 80073ac:	080079d7 	.word	0x080079d7
 80073b0:	08008957 	.word	0x08008957
 80073b4:	080089ed 	.word	0x080089ed
 80073b8:	80002000 	.word	0x80002000
 80073bc:	08007597 	.word	0x08007597

080073c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
  }
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00f      	beq.n	8007436 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007424:	f043 0201 	orr.w	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007434:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00f      	beq.n	8007460 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744e:	f043 0208 	orr.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800745e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00f      	beq.n	800748a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007478:	f043 0202 	orr.w	r2, r3, #2
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007488:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 030b 	and.w	r3, r3, #11
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f91f 	bl	80086e0 <I2C_ITError>
  }
}
 80074a2:	bf00      	nop
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
 8007506:	4613      	mov	r3, r2
 8007508:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007588:	b2db      	uxtb	r3, r3
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af02      	add	r7, sp, #8
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <I2C_Master_ISR_IT+0x1e>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e113      	b.n	80077dc <I2C_Master_ISR_IT+0x246>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d012      	beq.n	80075ec <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2210      	movs	r2, #16
 80075d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 f992 	bl	800890e <I2C_Flush_TXDR>
 80075ea:	e0e4      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d022      	beq.n	800763c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01d      	beq.n	800763c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 0304 	bic.w	r3, r3, #4
 8007606:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800763a:	e0bc      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d128      	bne.n	8007698 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800764c:	2b00      	cmp	r3, #0
 800764e:	d023      	beq.n	8007698 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01e      	beq.n	8007698 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80a8 	beq.w	80077b6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007696:	e08e      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d05c      	beq.n	800775c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d057      	beq.n	800775c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d040      	beq.n	8007738 <I2C_Master_ISR_IT+0x1a2>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d13c      	bne.n	8007738 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ca:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2bff      	cmp	r3, #255	@ 0xff
 80076d4:	d90e      	bls.n	80076f4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	22ff      	movs	r2, #255	@ 0xff
 80076da:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	8a79      	ldrh	r1, [r7, #18]
 80076e4:	2300      	movs	r3, #0
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 f9b3 	bl	8008a58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f2:	e032      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007706:	d00b      	beq.n	8007720 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800770c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007712:	8a79      	ldrh	r1, [r7, #18]
 8007714:	2000      	movs	r0, #0
 8007716:	9000      	str	r0, [sp, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f001 f99d 	bl	8008a58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771e:	e01c      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007724:	b2da      	uxtb	r2, r3
 8007726:	8a79      	ldrh	r1, [r7, #18]
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 f991 	bl	8008a58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007736:	e010      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007746:	d003      	beq.n	8007750 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fcb0 	bl	80080ae <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800774e:	e032      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007750:	2140      	movs	r1, #64	@ 0x40
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 ffc4 	bl	80086e0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007758:	e02d      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
 800775a:	e02c      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d027      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800776c:	2b00      	cmp	r3, #0
 800776e:	d022      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d119      	bne.n	80077ae <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007788:	d015      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007792:	d108      	bne.n	80077a6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	e007      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fc81 	bl	80080ae <I2C_ITMasterSeqCplt>
 80077ac:	e003      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80077ae:	2140      	movs	r1, #64	@ 0x40
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 ff95 	bl	80086e0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80077ca:	6979      	ldr	r1, [r7, #20]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fd07 	bl	80081e0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <I2C_Slave_ISR_IT+0x24>
 8007804:	2302      	movs	r3, #2
 8007806:	e0e2      	b.n	80079ce <I2C_Slave_ISR_IT+0x1ea>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007824:	6939      	ldr	r1, [r7, #16]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fda2 	bl	8008370 <I2C_ITSlaveCplt>
 800782c:	e0ca      	b.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d04b      	beq.n	80078d0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800783e:	2b00      	cmp	r3, #0
 8007840:	d046      	beq.n	80078d0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d128      	bne.n	800789e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b28      	cmp	r3, #40	@ 0x28
 8007856:	d108      	bne.n	800786a <I2C_Slave_ISR_IT+0x86>
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800785e:	d104      	bne.n	800786a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007860:	6939      	ldr	r1, [r7, #16]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fee8 	bl	8008638 <I2C_ITListenCplt>
 8007868:	e031      	b.n	80078ce <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b29      	cmp	r3, #41	@ 0x29
 8007874:	d10e      	bne.n	8007894 <I2C_Slave_ISR_IT+0xb0>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800787c:	d00a      	beq.n	8007894 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f001 f841 	bl	800890e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fc4b 	bl	8008128 <I2C_ITSlaveSeqCplt>
 8007892:	e01c      	b.n	80078ce <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2210      	movs	r2, #16
 800789a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800789c:	e08f      	b.n	80079be <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2210      	movs	r2, #16
 80078a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078aa:	f043 0204 	orr.w	r2, r3, #4
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <I2C_Slave_ISR_IT+0xdc>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078be:	d17e      	bne.n	80079be <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c4:	4619      	mov	r1, r3
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 ff0a 	bl	80086e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80078cc:	e077      	b.n	80079be <I2C_Slave_ISR_IT+0x1da>
 80078ce:	e076      	b.n	80079be <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02f      	beq.n	800793a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02a      	beq.n	800793a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d018      	beq.n	8007920 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d14b      	bne.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007930:	d047      	beq.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fbf8 	bl	8008128 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007938:	e043      	b.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800794e:	6939      	ldr	r1, [r7, #16]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb28 	bl	8007fa6 <I2C_ITAddrCplt>
 8007956:	e035      	b.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d030      	beq.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007968:	2b00      	cmp	r3, #0
 800796a:	d02b      	beq.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d018      	beq.n	80079a8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80079a6:	e00d      	b.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079ae:	d002      	beq.n	80079b6 <I2C_Slave_ISR_IT+0x1d2>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fbb6 	bl	8008128 <I2C_ITSlaveSeqCplt>
 80079bc:	e002      	b.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80079be:	bf00      	nop
 80079c0:	e000      	b.n	80079c4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80079c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b088      	sub	sp, #32
 80079da:	af02      	add	r7, sp, #8
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <I2C_Master_ISR_DMA+0x1a>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e0d9      	b.n	8007ba4 <I2C_Master_ISR_DMA+0x1ce>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d016      	beq.n	8007a30 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2210      	movs	r2, #16
 8007a12:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a18:	f043 0204 	orr.w	r2, r3, #4
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a20:	2120      	movs	r1, #32
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f001 f84a 	bl	8008abc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 ff70 	bl	800890e <I2C_Flush_TXDR>
 8007a2e:	e0b4      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d071      	beq.n	8007b1e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d06c      	beq.n	8007b1e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a52:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d04e      	beq.n	8007afc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a6a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2bff      	cmp	r3, #255	@ 0xff
 8007a74:	d906      	bls.n	8007a84 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	22ff      	movs	r2, #255	@ 0xff
 8007a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e010      	b.n	8007aa6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a96:	d003      	beq.n	8007aa0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	e002      	b.n	8007aa6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007aa4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	8a79      	ldrh	r1, [r7, #18]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 ffcf 	bl	8008a58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b22      	cmp	r3, #34	@ 0x22
 8007ad6:	d108      	bne.n	8007aea <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ae6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ae8:	e057      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007af8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007afa:	e04e      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b0a:	d003      	beq.n	8007b14 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 face 	bl	80080ae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007b12:	e042      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b14:	2140      	movs	r1, #64	@ 0x40
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fde2 	bl	80086e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007b1c:	e03d      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d028      	beq.n	8007b7a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d023      	beq.n	8007b7a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d119      	bne.n	8007b70 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b4a:	d025      	beq.n	8007b98 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b54:	d108      	bne.n	8007b68 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b64:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007b66:	e017      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 faa0 	bl	80080ae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007b6e:	e013      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b70:	2140      	movs	r1, #64	@ 0x40
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fdb4 	bl	80086e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b78:	e00e      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fb25 	bl	80081e0 <I2C_ITMasterCplt>
 8007b96:	e000      	b.n	8007b9a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007b98:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8007df0 <I2C_Mem_ISR_DMA+0x244>)
 8007bba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <I2C_Mem_ISR_DMA+0x1e>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e10e      	b.n	8007de8 <I2C_Mem_ISR_DMA+0x23c>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d011      	beq.n	8007c0a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2210      	movs	r2, #16
 8007bec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007bfa:	2120      	movs	r1, #32
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 ff5d 	bl	8008abc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fe83 	bl	800890e <I2C_Flush_TXDR>
 8007c08:	e0e9      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c30:	e0d5      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d05f      	beq.n	8007cfc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d05a      	beq.n	8007cfc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c46:	2101      	movs	r1, #1
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 ffbb 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c4e:	2110      	movs	r1, #16
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 ff33 	bl	8008abc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d048      	beq.n	8007cf2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2bff      	cmp	r3, #255	@ 0xff
 8007c68:	d910      	bls.n	8007c8c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	22ff      	movs	r2, #255	@ 0xff
 8007c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c74:	b299      	uxth	r1, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fee7 	bl	8008a58 <I2C_TransferConfig>
 8007c8a:	e011      	b.n	8007cb0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fed4 	bl	8008a58 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b22      	cmp	r3, #34	@ 0x22
 8007ccc:	d108      	bne.n	8007ce0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cdc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007cde:	e07e      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007cf0:	e075      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007cf2:	2140      	movs	r1, #64	@ 0x40
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fcf3 	bl	80086e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007cfa:	e070      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d05d      	beq.n	8007dc2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d058      	beq.n	8007dc2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d10:	2101      	movs	r1, #1
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 ff56 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007d18:	2110      	movs	r1, #16
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fece 	bl	8008abc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b22      	cmp	r3, #34	@ 0x22
 8007d2a:	d101      	bne.n	8007d30 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007d2c:	4b31      	ldr	r3, [pc, #196]	@ (8007df4 <I2C_Mem_ISR_DMA+0x248>)
 8007d2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2bff      	cmp	r3, #255	@ 0xff
 8007d38:	d910      	bls.n	8007d5c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	@ 0xff
 8007d3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d44:	b299      	uxth	r1, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fe7f 	bl	8008a58 <I2C_TransferConfig>
 8007d5a:	e011      	b.n	8007d80 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d6a:	b299      	uxth	r1, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fe6c 	bl	8008a58 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b22      	cmp	r3, #34	@ 0x22
 8007d9c:	d108      	bne.n	8007db0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dae:	e016      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dbe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dc0:	e00d      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fa01 	bl	80081e0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	80002000 	.word	0x80002000
 8007df4:	80002400 	.word	0x80002400

08007df8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <I2C_Slave_ISR_DMA+0x24>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0c0      	b.n	8007f9e <I2C_Slave_ISR_DMA+0x1a6>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fa98 	bl	8008370 <I2C_ITSlaveCplt>
 8007e40:	e0a8      	b.n	8007f94 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8095 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 808f 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d07d      	beq.n	8007f6a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00c      	beq.n	8007e90 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d128      	bne.n	8007f0a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b28      	cmp	r3, #40	@ 0x28
 8007ec2:	d108      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0xde>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eca:	d104      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fbb2 	bl	8008638 <I2C_ITListenCplt>
 8007ed4:	e048      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b29      	cmp	r3, #41	@ 0x29
 8007ee0:	d10e      	bne.n	8007f00 <I2C_Slave_ISR_DMA+0x108>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ee8:	d00a      	beq.n	8007f00 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2210      	movs	r2, #16
 8007ef0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fd0b 	bl	800890e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f915 	bl	8008128 <I2C_ITSlaveSeqCplt>
 8007efe:	e033      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2210      	movs	r2, #16
 8007f06:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f08:	e034      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f24:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <I2C_Slave_ISR_DMA+0x13c>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f32:	d11f      	bne.n	8007f74 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b21      	cmp	r3, #33	@ 0x21
 8007f38:	d002      	beq.n	8007f40 <I2C_Slave_ISR_DMA+0x148>
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b29      	cmp	r3, #41	@ 0x29
 8007f3e:	d103      	bne.n	8007f48 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2221      	movs	r2, #33	@ 0x21
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f46:	e008      	b.n	8007f5a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b22      	cmp	r3, #34	@ 0x22
 8007f4c:	d002      	beq.n	8007f54 <I2C_Slave_ISR_DMA+0x15c>
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f52:	d102      	bne.n	8007f5a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	@ 0x22
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fbbd 	bl	80086e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f66:	e005      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x17c>
 8007f68:	e004      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f72:	e00f      	b.n	8007f94 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8007f74:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f76:	e00d      	b.n	8007f94 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f809 	bl	8007fa6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fbc:	2b28      	cmp	r3, #40	@ 0x28
 8007fbe:	d16a      	bne.n	8008096 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fde:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fec:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ffa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d138      	bne.n	8008076 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008004:	897b      	ldrh	r3, [r7, #10]
 8008006:	09db      	lsrs	r3, r3, #7
 8008008:	b29a      	uxth	r2, r3
 800800a:	89bb      	ldrh	r3, [r7, #12]
 800800c:	4053      	eors	r3, r2
 800800e:	b29b      	uxth	r3, r3
 8008010:	f003 0306 	and.w	r3, r3, #6
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11c      	bne.n	8008052 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008018:	897b      	ldrh	r3, [r7, #10]
 800801a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800802a:	2b02      	cmp	r3, #2
 800802c:	d13b      	bne.n	80080a6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2208      	movs	r2, #8
 800803a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008044:	89ba      	ldrh	r2, [r7, #12]
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff fa55 	bl	80074fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008050:	e029      	b.n	80080a6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008052:	893b      	ldrh	r3, [r7, #8]
 8008054:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fdb2 	bl	8008bc4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008068:	89ba      	ldrh	r2, [r7, #12]
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fa43 	bl	80074fa <HAL_I2C_AddrCallback>
}
 8008074:	e017      	b.n	80080a6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fda2 	bl	8008bc4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008088:	89ba      	ldrh	r2, [r7, #12]
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fa33 	bl	80074fa <HAL_I2C_AddrCallback>
}
 8008094:	e007      	b.n	80080a6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b21      	cmp	r3, #33	@ 0x21
 80080c8:	d115      	bne.n	80080f6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2211      	movs	r2, #17
 80080d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080de:	2101      	movs	r1, #1
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fd6f 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff f9db 	bl	80074aa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080f4:	e014      	b.n	8008120 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2212      	movs	r2, #18
 8008102:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800810a:	2102      	movs	r1, #2
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fd59 	bl	8008bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f9cf 	bl	80074be <HAL_I2C_MasterRxCpltCallback>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e00c      	b.n	8008176 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008174:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b29      	cmp	r3, #41	@ 0x29
 8008180:	d112      	bne.n	80081a8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2228      	movs	r2, #40	@ 0x28
 8008186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2221      	movs	r2, #33	@ 0x21
 800818e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008190:	2101      	movs	r1, #1
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fd16 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff f996 	bl	80074d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081a6:	e017      	b.n	80081d8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b2:	d111      	bne.n	80081d8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2228      	movs	r2, #40	@ 0x28
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2222      	movs	r2, #34	@ 0x22
 80081c0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081c2:	2102      	movs	r1, #2
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fcfd 	bl	8008bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff f987 	bl	80074e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2220      	movs	r2, #32
 80081f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b21      	cmp	r3, #33	@ 0x21
 8008200:	d107      	bne.n	8008212 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008202:	2101      	movs	r1, #1
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fcdd 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2211      	movs	r2, #17
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008210:	e00c      	b.n	800822c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b22      	cmp	r3, #34	@ 0x22
 800821c:	d106      	bne.n	800822c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800821e:	2102      	movs	r1, #2
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fccf 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2212      	movs	r2, #18
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6859      	ldr	r1, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b4c      	ldr	r3, [pc, #304]	@ (8008368 <I2C_ITMasterCplt+0x188>)
 8008238:	400b      	ands	r3, r1
 800823a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a49      	ldr	r2, [pc, #292]	@ (800836c <I2C_ITMasterCplt+0x18c>)
 8008246:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2210      	movs	r2, #16
 8008258:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825e:	f043 0204 	orr.w	r2, r3, #4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b60      	cmp	r3, #96	@ 0x60
 8008270:	d10a      	bne.n	8008288 <I2C_ITMasterCplt+0xa8>
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	b2db      	uxtb	r3, r3
 8008284:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008286:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb40 	bl	800890e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008292:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b60      	cmp	r3, #96	@ 0x60
 800829e:	d002      	beq.n	80082a6 <I2C_ITMasterCplt+0xc6>
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d006      	beq.n	80082b4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa17 	bl	80086e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082b2:	e054      	b.n	800835e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b21      	cmp	r3, #33	@ 0x21
 80082be:	d124      	bne.n	800830a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b40      	cmp	r3, #64	@ 0x40
 80082d8:	d10b      	bne.n	80082f2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff f91d 	bl	800752a <HAL_I2C_MemTxCpltCallback>
}
 80082f0:	e035      	b.n	800835e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff f8d1 	bl	80074aa <HAL_I2C_MasterTxCpltCallback>
}
 8008308:	e029      	b.n	800835e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b22      	cmp	r3, #34	@ 0x22
 8008314:	d123      	bne.n	800835e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b40      	cmp	r3, #64	@ 0x40
 800832e:	d10b      	bne.n	8008348 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff f8fc 	bl	800753e <HAL_I2C_MemRxCpltCallback>
}
 8008346:	e00a      	b.n	800835e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff f8b0 	bl	80074be <HAL_I2C_MasterRxCpltCallback>
}
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	fe00e800 	.word	0xfe00e800
 800836c:	ffff0000 	.word	0xffff0000

08008370 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008392:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2220      	movs	r2, #32
 800839a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	2b21      	cmp	r3, #33	@ 0x21
 80083a0:	d002      	beq.n	80083a8 <I2C_ITSlaveCplt+0x38>
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	2b29      	cmp	r3, #41	@ 0x29
 80083a6:	d108      	bne.n	80083ba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80083a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc09 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2221      	movs	r2, #33	@ 0x21
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80083b8:	e019      	b.n	80083ee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	2b22      	cmp	r3, #34	@ 0x22
 80083be:	d002      	beq.n	80083c6 <I2C_ITSlaveCplt+0x56>
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c4:	d108      	bne.n	80083d8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80083c6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbfa 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2222      	movs	r2, #34	@ 0x22
 80083d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80083d6:	e00a      	b.n	80083ee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	2b28      	cmp	r3, #40	@ 0x28
 80083dc:	d107      	bne.n	80083ee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80083de:	f248 0103 	movw	r1, #32771	@ 0x8003
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fbee 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6859      	ldr	r1, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	4b89      	ldr	r3, [pc, #548]	@ (8008630 <I2C_ITSlaveCplt+0x2c0>)
 800840a:	400b      	ands	r3, r1
 800840c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa7d 	bl	800890e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d013      	beq.n	8008446 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800842c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01f      	beq.n	8008476 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b29a      	uxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008444:	e017      	b.n	8008476 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d012      	beq.n	8008476 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800845e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d020      	beq.n	80084c2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f023 0304 	bic.w	r3, r3, #4
 8008486:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d0:	f043 0204 	orr.w	r2, r3, #4
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f003 0310 	and.w	r3, r3, #16
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d049      	beq.n	8008576 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d044      	beq.n	8008576 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d128      	bne.n	8008548 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b28      	cmp	r3, #40	@ 0x28
 8008500:	d108      	bne.n	8008514 <I2C_ITSlaveCplt+0x1a4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008508:	d104      	bne.n	8008514 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800850a:	6979      	ldr	r1, [r7, #20]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f893 	bl	8008638 <I2C_ITListenCplt>
 8008512:	e030      	b.n	8008576 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b29      	cmp	r3, #41	@ 0x29
 800851e:	d10e      	bne.n	800853e <I2C_ITSlaveCplt+0x1ce>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008526:	d00a      	beq.n	800853e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2210      	movs	r2, #16
 800852e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9ec 	bl	800890e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fdf6 	bl	8008128 <I2C_ITSlaveSeqCplt>
 800853c:	e01b      	b.n	8008576 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2210      	movs	r2, #16
 8008544:	61da      	str	r2, [r3, #28]
 8008546:	e016      	b.n	8008576 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2210      	movs	r2, #16
 800854e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008554:	f043 0204 	orr.w	r2, r3, #4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <I2C_ITSlaveCplt+0x1fa>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008568:	d105      	bne.n	8008576 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f8b5 	bl	80086e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008588:	2b00      	cmp	r3, #0
 800858a:	d010      	beq.n	80085ae <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8a4 	bl	80086e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b28      	cmp	r3, #40	@ 0x28
 80085a2:	d141      	bne.n	8008628 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f846 	bl	8008638 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085ac:	e03c      	b.n	8008628 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085b6:	d014      	beq.n	80085e2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fdb5 	bl	8008128 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008634 <I2C_ITSlaveCplt+0x2c4>)
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe ff9b 	bl	8007516 <HAL_I2C_ListenCpltCallback>
}
 80085e0:	e022      	b.n	8008628 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b22      	cmp	r3, #34	@ 0x22
 80085ec:	d10e      	bne.n	800860c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fe ff6e 	bl	80074e6 <HAL_I2C_SlaveRxCpltCallback>
}
 800860a:	e00d      	b.n	8008628 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe ff55 	bl	80074d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008628:	bf00      	nop
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	fe00e800 	.word	0xfe00e800
 8008634:	ffff0000 	.word	0xffff0000

08008638 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a25      	ldr	r2, [pc, #148]	@ (80086dc <I2C_ITListenCplt+0xa4>)
 8008646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d022      	beq.n	80086b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d012      	beq.n	80086b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008692:	3b01      	subs	r3, #1
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ac:	f043 0204 	orr.w	r2, r3, #4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa83 	bl	8008bc4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2210      	movs	r2, #16
 80086c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fe ff21 	bl	8007516 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	ffff0000 	.word	0xffff0000

080086e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a6d      	ldr	r2, [pc, #436]	@ (80088b4 <I2C_ITError+0x1d4>)
 80086fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b28      	cmp	r3, #40	@ 0x28
 8008716:	d005      	beq.n	8008724 <I2C_ITError+0x44>
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b29      	cmp	r3, #41	@ 0x29
 800871c:	d002      	beq.n	8008724 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	2b2a      	cmp	r3, #42	@ 0x2a
 8008722:	d10b      	bne.n	800873c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008724:	2103      	movs	r1, #3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa4c 	bl	8008bc4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2228      	movs	r2, #40	@ 0x28
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a60      	ldr	r2, [pc, #384]	@ (80088b8 <I2C_ITError+0x1d8>)
 8008738:	635a      	str	r2, [r3, #52]	@ 0x34
 800873a:	e030      	b.n	800879e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800873c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa3f 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8e1 	bl	800890e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b60      	cmp	r3, #96	@ 0x60
 8008756:	d01f      	beq.n	8008798 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b20      	cmp	r3, #32
 800876c:	d114      	bne.n	8008798 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b10      	cmp	r3, #16
 800877a:	d109      	bne.n	8008790 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2210      	movs	r2, #16
 8008782:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008788:	f043 0204 	orr.w	r2, r3, #4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2220      	movs	r2, #32
 8008796:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d039      	beq.n	8008820 <I2C_ITError+0x140>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b11      	cmp	r3, #17
 80087b0:	d002      	beq.n	80087b8 <I2C_ITError+0xd8>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b21      	cmp	r3, #33	@ 0x21
 80087b6:	d133      	bne.n	8008820 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c6:	d107      	bne.n	80087d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe f9bd 	bl	8006b5c <HAL_DMA_GetState>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d017      	beq.n	8008818 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	4a33      	ldr	r2, [pc, #204]	@ (80088bc <I2C_ITError+0x1dc>)
 80087ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe f897 	bl	8006930 <HAL_DMA_Abort_IT>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d04d      	beq.n	80088a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008812:	4610      	mov	r0, r2
 8008814:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008816:	e045      	b.n	80088a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f851 	bl	80088c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800881e:	e041      	b.n	80088a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d039      	beq.n	800889c <I2C_ITError+0x1bc>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b12      	cmp	r3, #18
 800882c:	d002      	beq.n	8008834 <I2C_ITError+0x154>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b22      	cmp	r3, #34	@ 0x22
 8008832:	d133      	bne.n	800889c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800883e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008842:	d107      	bne.n	8008854 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008852:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe f97f 	bl	8006b5c <HAL_DMA_GetState>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d017      	beq.n	8008894 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008868:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <I2C_ITError+0x1dc>)
 800886a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe f859 	bl	8006930 <HAL_DMA_Abort_IT>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d011      	beq.n	80088a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800888e:	4610      	mov	r0, r2
 8008890:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008892:	e009      	b.n	80088a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f813 	bl	80088c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800889a:	e005      	b.n	80088a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f80f 	bl	80088c0 <I2C_TreatErrorCallback>
  }
}
 80088a2:	e002      	b.n	80088aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088a8:	bf00      	nop
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	ffff0000 	.word	0xffff0000
 80088b8:	080077e5 	.word	0x080077e5
 80088bc:	08008a1b 	.word	0x08008a1b

080088c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b60      	cmp	r3, #96	@ 0x60
 80088d2:	d10e      	bne.n	80088f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fe fe3b 	bl	8007566 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088f0:	e009      	b.n	8008906 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fe fe26 	bl	8007552 <HAL_I2C_ErrorCallback>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b02      	cmp	r3, #2
 8008922:	d103      	bne.n	800892c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2200      	movs	r2, #0
 800892a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d007      	beq.n	800894a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	619a      	str	r2, [r3, #24]
  }
}
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008972:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800897e:	2120      	movs	r1, #32
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f89b 	bl	8008abc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008986:	e02d      	b.n	80089e4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899a:	b29b      	uxth	r3, r3
 800899c:	2bff      	cmp	r3, #255	@ 0xff
 800899e:	d903      	bls.n	80089a8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	22ff      	movs	r2, #255	@ 0xff
 80089a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80089a6:	e004      	b.n	80089b2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	4619      	mov	r1, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3328      	adds	r3, #40	@ 0x28
 80089c2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80089c8:	f7fd fede 	bl	8006788 <HAL_DMA_Start_IT>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80089d2:	2110      	movs	r1, #16
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff fe83 	bl	80086e0 <I2C_ITError>
}
 80089da:	e003      	b.n	80089e4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80089dc:	2140      	movs	r1, #64	@ 0x40
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f86c 	bl	8008abc <I2C_Enable_IRQ>
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a08:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a0a:	2110      	movs	r1, #16
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff fe67 	bl	80086e0 <I2C_ITError>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	2200      	movs	r2, #0
 8008a36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a44:	2200      	movs	r2, #0
 8008a46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff ff39 	bl	80088c0 <I2C_TreatErrorCallback>
}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	607b      	str	r3, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	817b      	strh	r3, [r7, #10]
 8008a66:	4613      	mov	r3, r2
 8008a68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a6a:	897b      	ldrh	r3, [r7, #10]
 8008a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a70:	7a7b      	ldrb	r3, [r7, #9]
 8008a72:	041b      	lsls	r3, r3, #16
 8008a74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	0d5b      	lsrs	r3, r3, #21
 8008a92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008a96:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <I2C_TransferConfig+0x60>)
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	ea02 0103 	and.w	r1, r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	03ff63ff 	.word	0x03ff63ff

08008abc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad0:	4a39      	ldr	r2, [pc, #228]	@ (8008bb8 <I2C_Enable_IRQ+0xfc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d032      	beq.n	8008b3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008ada:	4a38      	ldr	r2, [pc, #224]	@ (8008bbc <I2C_Enable_IRQ+0x100>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d02d      	beq.n	8008b3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008ae4:	4a36      	ldr	r2, [pc, #216]	@ (8008bc0 <I2C_Enable_IRQ+0x104>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d028      	beq.n	8008b3c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da03      	bge.n	8008afa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008af8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008afa:	887b      	ldrh	r3, [r7, #2]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008b0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b0c:	887b      	ldrh	r3, [r7, #2]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008b1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b1e:	887b      	ldrh	r3, [r7, #2]
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d103      	bne.n	8008b2c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008b2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b2c:	887b      	ldrh	r3, [r7, #2]
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d133      	bne.n	8008b9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f043 0320 	orr.w	r3, r3, #32
 8008b38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b3a:	e02e      	b.n	8008b9a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da03      	bge.n	8008b4c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008b4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b4c:	887b      	ldrh	r3, [r7, #2]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008b5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b5e:	887b      	ldrh	r3, [r7, #2]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d103      	bne.n	8008b7e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008b7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d103      	bne.n	8008b8c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008b8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	2b40      	cmp	r3, #64	@ 0x40
 8008b90:	d103      	bne.n	8008b9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6819      	ldr	r1, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	080079d7 	.word	0x080079d7
 8008bbc:	08007df9 	.word	0x08007df9
 8008bc0:	08007bad 	.word	0x08007bad

08008bc4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008be4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bf2:	2b28      	cmp	r3, #40	@ 0x28
 8008bf4:	d003      	beq.n	8008bfe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008bfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00f      	beq.n	8008c28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008c0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c1c:	2b28      	cmp	r3, #40	@ 0x28
 8008c1e:	d003      	beq.n	8008c28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da03      	bge.n	8008c38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c38:	887b      	ldrh	r3, [r7, #2]
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d103      	bne.n	8008c46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c46:	887b      	ldrh	r3, [r7, #2]
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d103      	bne.n	8008c54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f043 0320 	orr.w	r3, r3, #32
 8008c52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d103      	bne.n	8008c62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6819      	ldr	r1, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	400a      	ands	r2, r1
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d138      	bne.n	8008d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e032      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	@ 0x24
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d139      	bne.n	8008da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e033      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2224      	movs	r2, #36	@ 0x24
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d141      	bne.n	8008e42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dca:	d131      	bne.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dcc:	4b47      	ldr	r3, [pc, #284]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd2:	4a46      	ldr	r2, [pc, #280]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ddc:	4b43      	ldr	r3, [pc, #268]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008de4:	4a41      	ldr	r2, [pc, #260]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008dec:	4b40      	ldr	r3, [pc, #256]	@ (8008ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2232      	movs	r2, #50	@ 0x32
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008df8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfc:	0c9b      	lsrs	r3, r3, #18
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e02:	e002      	b.n	8008e0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e0a:	4b38      	ldr	r3, [pc, #224]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e16:	d102      	bne.n	8008e1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1f2      	bne.n	8008e04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e1e:	4b33      	ldr	r3, [pc, #204]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2a:	d158      	bne.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e057      	b.n	8008ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e30:	4b2e      	ldr	r3, [pc, #184]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e36:	4a2d      	ldr	r2, [pc, #180]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008e40:	e04d      	b.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e48:	d141      	bne.n	8008ece <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e4a:	4b28      	ldr	r3, [pc, #160]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e56:	d131      	bne.n	8008ebc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e58:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5e:	4a23      	ldr	r2, [pc, #140]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e68:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e70:	4a1e      	ldr	r2, [pc, #120]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2232      	movs	r2, #50	@ 0x32
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e84:	fba2 2303 	umull	r2, r3, r2, r3
 8008e88:	0c9b      	lsrs	r3, r3, #18
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e8e:	e002      	b.n	8008e96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e96:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea2:	d102      	bne.n	8008eaa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f2      	bne.n	8008e90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008eaa:	4b10      	ldr	r3, [pc, #64]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eb6:	d112      	bne.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e011      	b.n	8008ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ecc:	e007      	b.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ece:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ed6:	4a05      	ldr	r2, [pc, #20]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008edc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40007000 	.word	0x40007000
 8008ef0:	2000003c 	.word	0x2000003c
 8008ef4:	431bde83 	.word	0x431bde83

08008ef8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	4a04      	ldr	r2, [pc, #16]	@ (8008f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f06:	6093      	str	r3, [r2, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40007000 	.word	0x40007000

08008f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e2fe      	b.n	8009528 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d075      	beq.n	8009022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f36:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 030c 	and.w	r3, r3, #12
 8008f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f40:	4b94      	ldr	r3, [pc, #592]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b0c      	cmp	r3, #12
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCC_OscConfig+0x3e>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d002      	beq.n	8008f5c <HAL_RCC_OscConfig+0x44>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d10b      	bne.n	8008f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d05b      	beq.n	8009020 <HAL_RCC_OscConfig+0x108>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d157      	bne.n	8009020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e2d9      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f7c:	d106      	bne.n	8008f8c <HAL_RCC_OscConfig+0x74>
 8008f7e:	4b85      	ldr	r3, [pc, #532]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a84      	ldr	r2, [pc, #528]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	e01d      	b.n	8008fc8 <HAL_RCC_OscConfig+0xb0>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f94:	d10c      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x98>
 8008f96:	4b7f      	ldr	r3, [pc, #508]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	e00b      	b.n	8008fc8 <HAL_RCC_OscConfig+0xb0>
 8008fb0:	4b78      	ldr	r3, [pc, #480]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a77      	ldr	r2, [pc, #476]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b75      	ldr	r3, [pc, #468]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a74      	ldr	r2, [pc, #464]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d013      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd0:	f7fb fd7c 	bl	8004acc <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd8:	f7fb fd78 	bl	8004acc <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b64      	cmp	r3, #100	@ 0x64
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e29e      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fea:	4b6a      	ldr	r3, [pc, #424]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f0      	beq.n	8008fd8 <HAL_RCC_OscConfig+0xc0>
 8008ff6:	e014      	b.n	8009022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff8:	f7fb fd68 	bl	8004acc <HAL_GetTick>
 8008ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009000:	f7fb fd64 	bl	8004acc <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b64      	cmp	r3, #100	@ 0x64
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e28a      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009012:	4b60      	ldr	r3, [pc, #384]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f0      	bne.n	8009000 <HAL_RCC_OscConfig+0xe8>
 800901e:	e000      	b.n	8009022 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d075      	beq.n	800911a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800902e:	4b59      	ldr	r3, [pc, #356]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 030c 	and.w	r3, r3, #12
 8009036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009038:	4b56      	ldr	r3, [pc, #344]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b0c      	cmp	r3, #12
 8009046:	d102      	bne.n	800904e <HAL_RCC_OscConfig+0x136>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d002      	beq.n	8009054 <HAL_RCC_OscConfig+0x13c>
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b04      	cmp	r3, #4
 8009052:	d11f      	bne.n	8009094 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009054:	4b4f      	ldr	r3, [pc, #316]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_RCC_OscConfig+0x154>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e25d      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906c:	4b49      	ldr	r3, [pc, #292]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	4946      	ldr	r1, [pc, #280]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009080:	4b45      	ldr	r3, [pc, #276]	@ (8009198 <HAL_RCC_OscConfig+0x280>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f7fb fcd5 	bl	8004a34 <HAL_InitTick>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d043      	beq.n	8009118 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e249      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d023      	beq.n	80090e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800909c:	4b3d      	ldr	r3, [pc, #244]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a8:	f7fb fd10 	bl	8004acc <HAL_GetTick>
 80090ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090ae:	e008      	b.n	80090c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090b0:	f7fb fd0c 	bl	8004acc <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e232      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090c2:	4b34      	ldr	r3, [pc, #208]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0f0      	beq.n	80090b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ce:	4b31      	ldr	r3, [pc, #196]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	492d      	ldr	r1, [pc, #180]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	604b      	str	r3, [r1, #4]
 80090e2:	e01a      	b.n	800911a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a2a      	ldr	r2, [pc, #168]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fb fcec 	bl	8004acc <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090f8:	f7fb fce8 	bl	8004acc <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e20e      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800910a:	4b22      	ldr	r3, [pc, #136]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x1e0>
 8009116:	e000      	b.n	800911a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009118:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d041      	beq.n	80091aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01c      	beq.n	8009168 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800912e:	4b19      	ldr	r3, [pc, #100]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009134:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913e:	f7fb fcc5 	bl	8004acc <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009146:	f7fb fcc1 	bl	8004acc <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e1e7      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009158:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800915a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0ef      	beq.n	8009146 <HAL_RCC_OscConfig+0x22e>
 8009166:	e020      	b.n	80091aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800916a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800916e:	4a09      	ldr	r2, [pc, #36]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009178:	f7fb fca8 	bl	8004acc <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800917e:	e00d      	b.n	800919c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009180:	f7fb fca4 	bl	8004acc <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d906      	bls.n	800919c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e1ca      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
 8009192:	bf00      	nop
 8009194:	40021000 	.word	0x40021000
 8009198:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800919c:	4b8c      	ldr	r3, [pc, #560]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800919e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1ea      	bne.n	8009180 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80a6 	beq.w	8009304 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091b8:	2300      	movs	r3, #0
 80091ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091bc:	4b84      	ldr	r3, [pc, #528]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCC_OscConfig+0x2b4>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <HAL_RCC_OscConfig+0x2b6>
 80091cc:	2300      	movs	r3, #0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00d      	beq.n	80091ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d2:	4b7f      	ldr	r3, [pc, #508]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d6:	4a7e      	ldr	r2, [pc, #504]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80091de:	4b7c      	ldr	r3, [pc, #496]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80091ea:	2301      	movs	r3, #1
 80091ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091ee:	4b79      	ldr	r3, [pc, #484]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d118      	bne.n	800922c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091fa:	4b76      	ldr	r3, [pc, #472]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a75      	ldr	r2, [pc, #468]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 8009200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009206:	f7fb fc61 	bl	8004acc <HAL_GetTick>
 800920a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920e:	f7fb fc5d 	bl	8004acc <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e183      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009220:	4b6c      	ldr	r3, [pc, #432]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0f0      	beq.n	800920e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d108      	bne.n	8009246 <HAL_RCC_OscConfig+0x32e>
 8009234:	4b66      	ldr	r3, [pc, #408]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	4a65      	ldr	r2, [pc, #404]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009244:	e024      	b.n	8009290 <HAL_RCC_OscConfig+0x378>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b05      	cmp	r3, #5
 800924c:	d110      	bne.n	8009270 <HAL_RCC_OscConfig+0x358>
 800924e:	4b60      	ldr	r3, [pc, #384]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009254:	4a5e      	ldr	r2, [pc, #376]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009256:	f043 0304 	orr.w	r3, r3, #4
 800925a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800925e:	4b5c      	ldr	r3, [pc, #368]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	4a5a      	ldr	r2, [pc, #360]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800926e:	e00f      	b.n	8009290 <HAL_RCC_OscConfig+0x378>
 8009270:	4b57      	ldr	r3, [pc, #348]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009276:	4a56      	ldr	r2, [pc, #344]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009280:	4b53      	ldr	r3, [pc, #332]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	4a52      	ldr	r2, [pc, #328]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009288:	f023 0304 	bic.w	r3, r3, #4
 800928c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d016      	beq.n	80092c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009298:	f7fb fc18 	bl	8004acc <HAL_GetTick>
 800929c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800929e:	e00a      	b.n	80092b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a0:	f7fb fc14 	bl	8004acc <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e138      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092b6:	4b46      	ldr	r3, [pc, #280]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ed      	beq.n	80092a0 <HAL_RCC_OscConfig+0x388>
 80092c4:	e015      	b.n	80092f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c6:	f7fb fc01 	bl	8004acc <HAL_GetTick>
 80092ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092cc:	e00a      	b.n	80092e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ce:	f7fb fbfd 	bl	8004acc <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092dc:	4293      	cmp	r3, r2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e121      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092e4:	4b3a      	ldr	r3, [pc, #232]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1ed      	bne.n	80092ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092f2:	7ffb      	ldrb	r3, [r7, #31]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d105      	bne.n	8009304 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092f8:	4b35      	ldr	r3, [pc, #212]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	4a34      	ldr	r2, [pc, #208]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009302:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d03c      	beq.n	800938a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01c      	beq.n	8009352 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009318:	4b2d      	ldr	r3, [pc, #180]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800931a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800931e:	4a2c      	ldr	r2, [pc, #176]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009328:	f7fb fbd0 	bl	8004acc <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009330:	f7fb fbcc 	bl	8004acc <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e0f2      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009342:	4b23      	ldr	r3, [pc, #140]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0ef      	beq.n	8009330 <HAL_RCC_OscConfig+0x418>
 8009350:	e01b      	b.n	800938a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009352:	4b1f      	ldr	r3, [pc, #124]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009358:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800935a:	f023 0301 	bic.w	r3, r3, #1
 800935e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009362:	f7fb fbb3 	bl	8004acc <HAL_GetTick>
 8009366:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009368:	e008      	b.n	800937c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800936a:	f7fb fbaf 	bl	8004acc <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e0d5      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800937c:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800937e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ef      	bne.n	800936a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80c9 	beq.w	8009526 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009394:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 030c 	and.w	r3, r3, #12
 800939c:	2b0c      	cmp	r3, #12
 800939e:	f000 8083 	beq.w	80094a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d15e      	bne.n	8009468 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093aa:	4b09      	ldr	r3, [pc, #36]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a08      	ldr	r2, [pc, #32]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80093b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b6:	f7fb fb89 	bl	8004acc <HAL_GetTick>
 80093ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093bc:	e00c      	b.n	80093d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093be:	f7fb fb85 	bl	8004acc <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d905      	bls.n	80093d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e0ab      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
 80093d0:	40021000 	.word	0x40021000
 80093d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093d8:	4b55      	ldr	r3, [pc, #340]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1ec      	bne.n	80093be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093e4:	4b52      	ldr	r3, [pc, #328]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	4b52      	ldr	r3, [pc, #328]	@ (8009534 <HAL_RCC_OscConfig+0x61c>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6a11      	ldr	r1, [r2, #32]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80093f4:	3a01      	subs	r2, #1
 80093f6:	0112      	lsls	r2, r2, #4
 80093f8:	4311      	orrs	r1, r2
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80093fe:	0212      	lsls	r2, r2, #8
 8009400:	4311      	orrs	r1, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009406:	0852      	lsrs	r2, r2, #1
 8009408:	3a01      	subs	r2, #1
 800940a:	0552      	lsls	r2, r2, #21
 800940c:	4311      	orrs	r1, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009412:	0852      	lsrs	r2, r2, #1
 8009414:	3a01      	subs	r2, #1
 8009416:	0652      	lsls	r2, r2, #25
 8009418:	4311      	orrs	r1, r2
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800941e:	06d2      	lsls	r2, r2, #27
 8009420:	430a      	orrs	r2, r1
 8009422:	4943      	ldr	r1, [pc, #268]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009424:	4313      	orrs	r3, r2
 8009426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009428:	4b41      	ldr	r3, [pc, #260]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a40      	ldr	r2, [pc, #256]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800942e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009434:	4b3e      	ldr	r3, [pc, #248]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4a3d      	ldr	r2, [pc, #244]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800943a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800943e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009440:	f7fb fb44 	bl	8004acc <HAL_GetTick>
 8009444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009446:	e008      	b.n	800945a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009448:	f7fb fb40 	bl	8004acc <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e066      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800945a:	4b35      	ldr	r3, [pc, #212]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x530>
 8009466:	e05e      	b.n	8009526 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009468:	4b31      	ldr	r3, [pc, #196]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a30      	ldr	r2, [pc, #192]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800946e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009474:	f7fb fb2a 	bl	8004acc <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800947c:	f7fb fb26 	bl	8004acc <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e04c      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800949a:	4b25      	ldr	r3, [pc, #148]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	4924      	ldr	r1, [pc, #144]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80094a0:	4b25      	ldr	r3, [pc, #148]	@ (8009538 <HAL_RCC_OscConfig+0x620>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	60cb      	str	r3, [r1, #12]
 80094a6:	e03e      	b.n	8009526 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e039      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80094b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f003 0203 	and.w	r2, r3, #3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d12c      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d2:	3b01      	subs	r3, #1
 80094d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d123      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d11b      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d113      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	3b01      	subs	r3, #1
 8009508:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800950a:	429a      	cmp	r2, r3
 800950c:	d109      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	3b01      	subs	r3, #1
 800951c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800951e:	429a      	cmp	r2, r3
 8009520:	d001      	beq.n	8009526 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40021000 	.word	0x40021000
 8009534:	019f800c 	.word	0x019f800c
 8009538:	feeefffc 	.word	0xfeeefffc

0800953c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009546:	2300      	movs	r3, #0
 8009548:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e11e      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009554:	4b91      	ldr	r3, [pc, #580]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d910      	bls.n	8009584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009562:	4b8e      	ldr	r3, [pc, #568]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 020f 	bic.w	r2, r3, #15
 800956a:	498c      	ldr	r1, [pc, #560]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4313      	orrs	r3, r2
 8009570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b8a      	ldr	r3, [pc, #552]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e106      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d073      	beq.n	8009678 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2b03      	cmp	r3, #3
 8009596:	d129      	bne.n	80095ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009598:	4b81      	ldr	r3, [pc, #516]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0f4      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80095a8:	f000 f99e 	bl	80098e8 <RCC_GetSysClockFreqFromPLLSource>
 80095ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	4a7c      	ldr	r2, [pc, #496]	@ (80097a4 <HAL_RCC_ClockConfig+0x268>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d93f      	bls.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80095b6:	4b7a      	ldr	r3, [pc, #488]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d009      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d033      	beq.n	8009636 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d12f      	bne.n	8009636 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095d6:	4b72      	ldr	r3, [pc, #456]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095de:	4a70      	ldr	r2, [pc, #448]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e024      	b.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d107      	bne.n	8009604 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095f4:	4b6a      	ldr	r3, [pc, #424]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0c6      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009604:	4b66      	ldr	r3, [pc, #408]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0be      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009614:	f000 f8ce 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 8009618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	4a61      	ldr	r2, [pc, #388]	@ (80097a4 <HAL_RCC_ClockConfig+0x268>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d909      	bls.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009622:	4b5f      	ldr	r3, [pc, #380]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800962a:	4a5d      	ldr	r2, [pc, #372]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800962c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009632:	2380      	movs	r3, #128	@ 0x80
 8009634:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009636:	4b5a      	ldr	r3, [pc, #360]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 0203 	bic.w	r2, r3, #3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4957      	ldr	r1, [pc, #348]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009644:	4313      	orrs	r3, r2
 8009646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009648:	f7fb fa40 	bl	8004acc <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964e:	e00a      	b.n	8009666 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009650:	f7fb fa3c 	bl	8004acc <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965e:	4293      	cmp	r3, r2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e095      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009666:	4b4e      	ldr	r3, [pc, #312]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 020c 	and.w	r2, r3, #12
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	429a      	cmp	r2, r3
 8009676:	d1eb      	bne.n	8009650 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d023      	beq.n	80096cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009690:	4b43      	ldr	r3, [pc, #268]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a42      	ldr	r2, [pc, #264]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800969a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80096a8:	4b3d      	ldr	r3, [pc, #244]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096b0:	4a3b      	ldr	r2, [pc, #236]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80096b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b8:	4b39      	ldr	r3, [pc, #228]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4936      	ldr	r1, [pc, #216]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	608b      	str	r3, [r1, #8]
 80096ca:	e008      	b.n	80096de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d105      	bne.n	80096de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80096d2:	4b33      	ldr	r3, [pc, #204]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	4a32      	ldr	r2, [pc, #200]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096de:	4b2f      	ldr	r3, [pc, #188]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d21d      	bcs.n	8009728 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ec:	4b2b      	ldr	r3, [pc, #172]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f023 020f 	bic.w	r2, r3, #15
 80096f4:	4929      	ldr	r1, [pc, #164]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80096fc:	f7fb f9e6 	bl	8004acc <HAL_GetTick>
 8009700:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009702:	e00a      	b.n	800971a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009704:	f7fb f9e2 	bl	8004acc <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009712:	4293      	cmp	r3, r2
 8009714:	d901      	bls.n	800971a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e03b      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800971a:	4b20      	ldr	r3, [pc, #128]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d1ed      	bne.n	8009704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d008      	beq.n	8009746 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009734:	4b1a      	ldr	r3, [pc, #104]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4917      	ldr	r1, [pc, #92]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009742:	4313      	orrs	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	490f      	ldr	r1, [pc, #60]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009762:	4313      	orrs	r3, r2
 8009764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009766:	f000 f825 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	490c      	ldr	r1, [pc, #48]	@ (80097a8 <HAL_RCC_ClockConfig+0x26c>)
 8009778:	5ccb      	ldrb	r3, [r1, r3]
 800977a:	f003 031f 	and.w	r3, r3, #31
 800977e:	fa22 f303 	lsr.w	r3, r2, r3
 8009782:	4a0a      	ldr	r2, [pc, #40]	@ (80097ac <HAL_RCC_ClockConfig+0x270>)
 8009784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009786:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <HAL_RCC_ClockConfig+0x274>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f7fb f952 	bl	8004a34 <HAL_InitTick>
 8009790:	4603      	mov	r3, r0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40022000 	.word	0x40022000
 80097a0:	40021000 	.word	0x40021000
 80097a4:	04c4b400 	.word	0x04c4b400
 80097a8:	0800e8dc 	.word	0x0800e8dc
 80097ac:	2000003c 	.word	0x2000003c
 80097b0:	20000040 	.word	0x20000040

080097b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80097ba:	4b2c      	ldr	r3, [pc, #176]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f003 030c 	and.w	r3, r3, #12
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d102      	bne.n	80097cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80097c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	e047      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80097cc:	4b27      	ldr	r3, [pc, #156]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 030c 	and.w	r3, r3, #12
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d102      	bne.n	80097de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80097d8:	4b26      	ldr	r3, [pc, #152]	@ (8009874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	e03e      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80097de:	4b23      	ldr	r3, [pc, #140]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 030c 	and.w	r3, r3, #12
 80097e6:	2b0c      	cmp	r3, #12
 80097e8:	d136      	bne.n	8009858 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80097ea:	4b20      	ldr	r3, [pc, #128]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80097f4:	4b1d      	ldr	r3, [pc, #116]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	091b      	lsrs	r3, r3, #4
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	3301      	adds	r3, #1
 8009800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d10c      	bne.n	8009822 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009808:	4a1a      	ldr	r2, [pc, #104]	@ (8009874 <HAL_RCC_GetSysClockFreq+0xc0>)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009810:	4a16      	ldr	r2, [pc, #88]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009812:	68d2      	ldr	r2, [r2, #12]
 8009814:	0a12      	lsrs	r2, r2, #8
 8009816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	617b      	str	r3, [r7, #20]
      break;
 8009820:	e00c      	b.n	800983c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009822:	4a13      	ldr	r2, [pc, #76]	@ (8009870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	fbb2 f3f3 	udiv	r3, r2, r3
 800982a:	4a10      	ldr	r2, [pc, #64]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 800982c:	68d2      	ldr	r2, [r2, #12]
 800982e:	0a12      	lsrs	r2, r2, #8
 8009830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]
      break;
 800983a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	0e5b      	lsrs	r3, r3, #25
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	3301      	adds	r3, #1
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	e001      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800985c:	693b      	ldr	r3, [r7, #16]
}
 800985e:	4618      	mov	r0, r3
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	40021000 	.word	0x40021000
 8009870:	00f42400 	.word	0x00f42400
 8009874:	016e3600 	.word	0x016e3600

08009878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800987c:	4b03      	ldr	r3, [pc, #12]	@ (800988c <HAL_RCC_GetHCLKFreq+0x14>)
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	2000003c 	.word	0x2000003c

08009890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009894:	f7ff fff0 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 8009898:	4602      	mov	r2, r0
 800989a:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	4904      	ldr	r1, [pc, #16]	@ (80098b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40021000 	.word	0x40021000
 80098b8:	0800e8ec 	.word	0x0800e8ec

080098bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80098c0:	f7ff ffda 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 80098c4:	4602      	mov	r2, r0
 80098c6:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	0adb      	lsrs	r3, r3, #11
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	4904      	ldr	r1, [pc, #16]	@ (80098e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80098d2:	5ccb      	ldrb	r3, [r1, r3]
 80098d4:	f003 031f 	and.w	r3, r3, #31
 80098d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	0800e8ec 	.word	0x0800e8ec

080098e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	3301      	adds	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b03      	cmp	r3, #3
 800990a:	d10c      	bne.n	8009926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800990c:	4a17      	ldr	r2, [pc, #92]	@ (800996c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009916:	68d2      	ldr	r2, [r2, #12]
 8009918:	0a12      	lsrs	r2, r2, #8
 800991a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	617b      	str	r3, [r7, #20]
    break;
 8009924:	e00c      	b.n	8009940 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009926:	4a12      	ldr	r2, [pc, #72]	@ (8009970 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	fbb2 f3f3 	udiv	r3, r2, r3
 800992e:	4a0e      	ldr	r2, [pc, #56]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009930:	68d2      	ldr	r2, [r2, #12]
 8009932:	0a12      	lsrs	r2, r2, #8
 8009934:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]
    break;
 800993e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009940:	4b09      	ldr	r3, [pc, #36]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	0e5b      	lsrs	r3, r3, #25
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	3301      	adds	r3, #1
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800995a:	687b      	ldr	r3, [r7, #4]
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	40021000 	.word	0x40021000
 800996c:	016e3600 	.word	0x016e3600
 8009970:	00f42400 	.word	0x00f42400

08009974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800997c:	2300      	movs	r3, #0
 800997e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009980:	2300      	movs	r3, #0
 8009982:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8098 	beq.w	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009992:	2300      	movs	r3, #0
 8009994:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009996:	4b43      	ldr	r3, [pc, #268]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10d      	bne.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099a2:	4b40      	ldr	r3, [pc, #256]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	4a3f      	ldr	r2, [pc, #252]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ae:	4b3d      	ldr	r3, [pc, #244]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099b6:	60bb      	str	r3, [r7, #8]
 80099b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ba:	2301      	movs	r3, #1
 80099bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099be:	4b3a      	ldr	r3, [pc, #232]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a39      	ldr	r2, [pc, #228]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099ca:	f7fb f87f 	bl	8004acc <HAL_GetTick>
 80099ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099d0:	e009      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099d2:	f7fb f87b 	bl	8004acc <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d902      	bls.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	74fb      	strb	r3, [r7, #19]
        break;
 80099e4:	e005      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099e6:	4b30      	ldr	r3, [pc, #192]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ef      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d159      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80099f8:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01e      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d019      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a14:	4b23      	ldr	r3, [pc, #140]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a20:	4b20      	ldr	r3, [pc, #128]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a26:	4a1f      	ldr	r2, [pc, #124]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a30:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a36:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a40:	4a18      	ldr	r2, [pc, #96]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a52:	f7fb f83b 	bl	8004acc <HAL_GetTick>
 8009a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a58:	e00b      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a5a:	f7fb f837 	bl	8004acc <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d902      	bls.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a72:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0ec      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009a80:	7cfb      	ldrb	r3, [r7, #19]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a86:	4b07      	ldr	r3, [pc, #28]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a94:	4903      	ldr	r1, [pc, #12]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a9e:	7cfb      	ldrb	r3, [r7, #19]
 8009aa0:	74bb      	strb	r3, [r7, #18]
 8009aa2:	e005      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aac:	7cfb      	ldrb	r3, [r7, #19]
 8009aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ab0:	7c7b      	ldrb	r3, [r7, #17]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d105      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab6:	4ba7      	ldr	r3, [pc, #668]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aba:	4aa6      	ldr	r2, [pc, #664]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ac0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ace:	4ba1      	ldr	r3, [pc, #644]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad4:	f023 0203 	bic.w	r2, r3, #3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	499d      	ldr	r1, [pc, #628]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009af0:	4b98      	ldr	r3, [pc, #608]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af6:	f023 020c 	bic.w	r2, r3, #12
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	4995      	ldr	r1, [pc, #596]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b12:	4b90      	ldr	r3, [pc, #576]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	498c      	ldr	r1, [pc, #560]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b34:	4b87      	ldr	r3, [pc, #540]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	4984      	ldr	r1, [pc, #528]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0310 	and.w	r3, r3, #16
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b56:	4b7f      	ldr	r3, [pc, #508]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	497b      	ldr	r1, [pc, #492]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b78:	4b76      	ldr	r3, [pc, #472]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	4973      	ldr	r1, [pc, #460]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	496a      	ldr	r1, [pc, #424]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bbc:	4b65      	ldr	r3, [pc, #404]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	4962      	ldr	r1, [pc, #392]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bde:	4b5d      	ldr	r3, [pc, #372]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	4959      	ldr	r1, [pc, #356]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c00:	4b54      	ldr	r3, [pc, #336]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c06:	f023 0203 	bic.w	r2, r3, #3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	4951      	ldr	r1, [pc, #324]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c22:	4b4c      	ldr	r3, [pc, #304]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	4948      	ldr	r1, [pc, #288]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d015      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c44:	4b43      	ldr	r3, [pc, #268]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c52:	4940      	ldr	r1, [pc, #256]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c62:	d105      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c64:	4b3b      	ldr	r3, [pc, #236]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	4a3a      	ldr	r2, [pc, #232]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d015      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c7c:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8a:	4932      	ldr	r1, [pc, #200]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c9a:	d105      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d015      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cb4:	4b27      	ldr	r3, [pc, #156]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc2:	4924      	ldr	r1, [pc, #144]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cd2:	d105      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d015      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cec:	4b19      	ldr	r3, [pc, #100]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cfa:	4916      	ldr	r1, [pc, #88]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d0a:	d105      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d0c:	4b11      	ldr	r3, [pc, #68]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	4a10      	ldr	r2, [pc, #64]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d019      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d24:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d32:	4908      	ldr	r1, [pc, #32]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d42:	d109      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d44:	4b03      	ldr	r3, [pc, #12]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	4a02      	ldr	r2, [pc, #8]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d4e:	60d3      	str	r3, [r2, #12]
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009d52:	bf00      	nop
 8009d54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d015      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009d64:	4b29      	ldr	r3, [pc, #164]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d72:	4926      	ldr	r1, [pc, #152]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d82:	d105      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d84:	4b21      	ldr	r3, [pc, #132]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a20      	ldr	r2, [pc, #128]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009daa:	4918      	ldr	r1, [pc, #96]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dba:	d105      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009dbc:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a12      	ldr	r2, [pc, #72]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de2:	490a      	ldr	r1, [pc, #40]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df2:	d105      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009df4:	4b05      	ldr	r3, [pc, #20]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a04      	ldr	r2, [pc, #16]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e00:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	40021000 	.word	0x40021000

08009e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e049      	b.n	8009eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fa fa20 	bl	800427c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f001 f842 	bl	800aed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d001      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e054      	b.n	8009f82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a26      	ldr	r2, [pc, #152]	@ (8009f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d022      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f02:	d01d      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a22      	ldr	r2, [pc, #136]	@ (8009f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d018      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a21      	ldr	r2, [pc, #132]	@ (8009f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8009f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00e      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1e      	ldr	r2, [pc, #120]	@ (8009fa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d009      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIM_Base_Start_IT+0x80>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d115      	bne.n	8009f6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	4b19      	ldr	r3, [pc, #100]	@ (8009fac <HAL_TIM_Base_Start_IT+0xec>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	d015      	beq.n	8009f7e <HAL_TIM_Base_Start_IT+0xbe>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f58:	d011      	beq.n	8009f7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0201 	orr.w	r2, r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	e008      	b.n	8009f7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e000      	b.n	8009f80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40012c00 	.word	0x40012c00
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	40013400 	.word	0x40013400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40015000 	.word	0x40015000
 8009fac:	00010007 	.word	0x00010007

08009fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e049      	b.n	800a056 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fa faf2 	bl	80045c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3304      	adds	r3, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f000 ff72 	bl	800aed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <HAL_TIM_PWM_Start+0x24>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b01      	cmp	r3, #1
 800a07a:	bf14      	ite	ne
 800a07c:	2301      	movne	r3, #1
 800a07e:	2300      	moveq	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	e03c      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d109      	bne.n	800a09e <HAL_TIM_PWM_Start+0x3e>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b01      	cmp	r3, #1
 800a094:	bf14      	ite	ne
 800a096:	2301      	movne	r3, #1
 800a098:	2300      	moveq	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e02f      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d109      	bne.n	800a0b8 <HAL_TIM_PWM_Start+0x58>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	e022      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b0c      	cmp	r3, #12
 800a0bc:	d109      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0x72>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	bf14      	ite	ne
 800a0ca:	2301      	movne	r3, #1
 800a0cc:	2300      	moveq	r3, #0
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	e015      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b10      	cmp	r3, #16
 800a0d6:	d109      	bne.n	800a0ec <HAL_TIM_PWM_Start+0x8c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	bf14      	ite	ne
 800a0e4:	2301      	movne	r3, #1
 800a0e6:	2300      	moveq	r3, #0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	e008      	b.n	800a0fe <HAL_TIM_PWM_Start+0x9e>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	bf14      	ite	ne
 800a0f8:	2301      	movne	r3, #1
 800a0fa:	2300      	moveq	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e0a6      	b.n	800a254 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d104      	bne.n	800a116 <HAL_TIM_PWM_Start+0xb6>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a114:	e023      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d104      	bne.n	800a126 <HAL_TIM_PWM_Start+0xc6>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a124:	e01b      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d104      	bne.n	800a136 <HAL_TIM_PWM_Start+0xd6>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a134:	e013      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b0c      	cmp	r3, #12
 800a13a:	d104      	bne.n	800a146 <HAL_TIM_PWM_Start+0xe6>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a144:	e00b      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b10      	cmp	r3, #16
 800a14a:	d104      	bne.n	800a156 <HAL_TIM_PWM_Start+0xf6>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a154:	e003      	b.n	800a15e <HAL_TIM_PWM_Start+0xfe>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2202      	movs	r2, #2
 800a15a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2201      	movs	r2, #1
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f001 fc5a 	bl	800ba20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a3a      	ldr	r2, [pc, #232]	@ (800a25c <HAL_TIM_PWM_Start+0x1fc>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d018      	beq.n	800a1a8 <HAL_TIM_PWM_Start+0x148>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a39      	ldr	r2, [pc, #228]	@ (800a260 <HAL_TIM_PWM_Start+0x200>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <HAL_TIM_PWM_Start+0x148>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a37      	ldr	r2, [pc, #220]	@ (800a264 <HAL_TIM_PWM_Start+0x204>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d00e      	beq.n	800a1a8 <HAL_TIM_PWM_Start+0x148>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a36      	ldr	r2, [pc, #216]	@ (800a268 <HAL_TIM_PWM_Start+0x208>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d009      	beq.n	800a1a8 <HAL_TIM_PWM_Start+0x148>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a34      	ldr	r2, [pc, #208]	@ (800a26c <HAL_TIM_PWM_Start+0x20c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <HAL_TIM_PWM_Start+0x148>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a33      	ldr	r2, [pc, #204]	@ (800a270 <HAL_TIM_PWM_Start+0x210>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d101      	bne.n	800a1ac <HAL_TIM_PWM_Start+0x14c>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <HAL_TIM_PWM_Start+0x14e>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a25      	ldr	r2, [pc, #148]	@ (800a25c <HAL_TIM_PWM_Start+0x1fc>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d022      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d4:	d01d      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a26      	ldr	r2, [pc, #152]	@ (800a274 <HAL_TIM_PWM_Start+0x214>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d018      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a24      	ldr	r2, [pc, #144]	@ (800a278 <HAL_TIM_PWM_Start+0x218>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d013      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a23      	ldr	r2, [pc, #140]	@ (800a27c <HAL_TIM_PWM_Start+0x21c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d00e      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a19      	ldr	r2, [pc, #100]	@ (800a260 <HAL_TIM_PWM_Start+0x200>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d009      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a18      	ldr	r2, [pc, #96]	@ (800a264 <HAL_TIM_PWM_Start+0x204>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d004      	beq.n	800a212 <HAL_TIM_PWM_Start+0x1b2>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a18      	ldr	r2, [pc, #96]	@ (800a270 <HAL_TIM_PWM_Start+0x210>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d115      	bne.n	800a23e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	4b19      	ldr	r3, [pc, #100]	@ (800a280 <HAL_TIM_PWM_Start+0x220>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b06      	cmp	r3, #6
 800a222:	d015      	beq.n	800a250 <HAL_TIM_PWM_Start+0x1f0>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a22a:	d011      	beq.n	800a250 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23c:	e008      	b.n	800a250 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e000      	b.n	800a252 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40012c00 	.word	0x40012c00
 800a260:	40013400 	.word	0x40013400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800
 800a270:	40015000 	.word	0x40015000
 800a274:	40000400 	.word	0x40000400
 800a278:	40000800 	.word	0x40000800
 800a27c:	40000c00 	.word	0x40000c00
 800a280:	00010007 	.word	0x00010007

0800a284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e049      	b.n	800a32a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f841 	bl	800a332 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 fe08 	bl	800aed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <HAL_TIM_IC_Start_IT+0x1e>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a362:	b2db      	uxtb	r3, r3
 800a364:	e023      	b.n	800a3ae <HAL_TIM_IC_Start_IT+0x66>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d104      	bne.n	800a376 <HAL_TIM_IC_Start_IT+0x2e>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a372:	b2db      	uxtb	r3, r3
 800a374:	e01b      	b.n	800a3ae <HAL_TIM_IC_Start_IT+0x66>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b08      	cmp	r3, #8
 800a37a:	d104      	bne.n	800a386 <HAL_TIM_IC_Start_IT+0x3e>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a382:	b2db      	uxtb	r3, r3
 800a384:	e013      	b.n	800a3ae <HAL_TIM_IC_Start_IT+0x66>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b0c      	cmp	r3, #12
 800a38a:	d104      	bne.n	800a396 <HAL_TIM_IC_Start_IT+0x4e>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a392:	b2db      	uxtb	r3, r3
 800a394:	e00b      	b.n	800a3ae <HAL_TIM_IC_Start_IT+0x66>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b10      	cmp	r3, #16
 800a39a:	d104      	bne.n	800a3a6 <HAL_TIM_IC_Start_IT+0x5e>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	e003      	b.n	800a3ae <HAL_TIM_IC_Start_IT+0x66>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d104      	bne.n	800a3c0 <HAL_TIM_IC_Start_IT+0x78>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	e013      	b.n	800a3e8 <HAL_TIM_IC_Start_IT+0xa0>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d104      	bne.n	800a3d0 <HAL_TIM_IC_Start_IT+0x88>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	e00b      	b.n	800a3e8 <HAL_TIM_IC_Start_IT+0xa0>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b08      	cmp	r3, #8
 800a3d4:	d104      	bne.n	800a3e0 <HAL_TIM_IC_Start_IT+0x98>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	e003      	b.n	800a3e8 <HAL_TIM_IC_Start_IT+0xa0>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d102      	bne.n	800a3f6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a3f0:	7b7b      	ldrb	r3, [r7, #13]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d001      	beq.n	800a3fa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e0e2      	b.n	800a5c0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <HAL_TIM_IC_Start_IT+0xc2>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a408:	e023      	b.n	800a452 <HAL_TIM_IC_Start_IT+0x10a>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d104      	bne.n	800a41a <HAL_TIM_IC_Start_IT+0xd2>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a418:	e01b      	b.n	800a452 <HAL_TIM_IC_Start_IT+0x10a>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d104      	bne.n	800a42a <HAL_TIM_IC_Start_IT+0xe2>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a428:	e013      	b.n	800a452 <HAL_TIM_IC_Start_IT+0x10a>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b0c      	cmp	r3, #12
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_IC_Start_IT+0xf2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a438:	e00b      	b.n	800a452 <HAL_TIM_IC_Start_IT+0x10a>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d104      	bne.n	800a44a <HAL_TIM_IC_Start_IT+0x102>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a448:	e003      	b.n	800a452 <HAL_TIM_IC_Start_IT+0x10a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <HAL_TIM_IC_Start_IT+0x11a>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a460:	e013      	b.n	800a48a <HAL_TIM_IC_Start_IT+0x142>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b04      	cmp	r3, #4
 800a466:	d104      	bne.n	800a472 <HAL_TIM_IC_Start_IT+0x12a>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a470:	e00b      	b.n	800a48a <HAL_TIM_IC_Start_IT+0x142>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b08      	cmp	r3, #8
 800a476:	d104      	bne.n	800a482 <HAL_TIM_IC_Start_IT+0x13a>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a480:	e003      	b.n	800a48a <HAL_TIM_IC_Start_IT+0x142>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2202      	movs	r2, #2
 800a486:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b0c      	cmp	r3, #12
 800a48e:	d841      	bhi.n	800a514 <HAL_TIM_IC_Start_IT+0x1cc>
 800a490:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <HAL_TIM_IC_Start_IT+0x150>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4cd 	.word	0x0800a4cd
 800a49c:	0800a515 	.word	0x0800a515
 800a4a0:	0800a515 	.word	0x0800a515
 800a4a4:	0800a515 	.word	0x0800a515
 800a4a8:	0800a4df 	.word	0x0800a4df
 800a4ac:	0800a515 	.word	0x0800a515
 800a4b0:	0800a515 	.word	0x0800a515
 800a4b4:	0800a515 	.word	0x0800a515
 800a4b8:	0800a4f1 	.word	0x0800a4f1
 800a4bc:	0800a515 	.word	0x0800a515
 800a4c0:	0800a515 	.word	0x0800a515
 800a4c4:	0800a515 	.word	0x0800a515
 800a4c8:	0800a503 	.word	0x0800a503
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f042 0202 	orr.w	r2, r2, #2
 800a4da:	60da      	str	r2, [r3, #12]
      break;
 800a4dc:	e01d      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68da      	ldr	r2, [r3, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0204 	orr.w	r2, r2, #4
 800a4ec:	60da      	str	r2, [r3, #12]
      break;
 800a4ee:	e014      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0208 	orr.w	r2, r2, #8
 800a4fe:	60da      	str	r2, [r3, #12]
      break;
 800a500:	e00b      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0210 	orr.w	r2, r2, #16
 800a510:	60da      	str	r2, [r3, #12]
      break;
 800a512:	e002      	b.n	800a51a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	bf00      	nop
  }

  if (status == HAL_OK)
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d14e      	bne.n	800a5be <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2201      	movs	r2, #1
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 fa79 	bl	800ba20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a25      	ldr	r2, [pc, #148]	@ (800a5c8 <HAL_TIM_IC_Start_IT+0x280>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d022      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a540:	d01d      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a21      	ldr	r2, [pc, #132]	@ (800a5cc <HAL_TIM_IC_Start_IT+0x284>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d018      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d0 <HAL_TIM_IC_Start_IT+0x288>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d4 <HAL_TIM_IC_Start_IT+0x28c>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00e      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d8 <HAL_TIM_IC_Start_IT+0x290>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d009      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5dc <HAL_TIM_IC_Start_IT+0x294>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d004      	beq.n	800a57e <HAL_TIM_IC_Start_IT+0x236>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a19      	ldr	r2, [pc, #100]	@ (800a5e0 <HAL_TIM_IC_Start_IT+0x298>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d115      	bne.n	800a5aa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	4b17      	ldr	r3, [pc, #92]	@ (800a5e4 <HAL_TIM_IC_Start_IT+0x29c>)
 800a586:	4013      	ands	r3, r2
 800a588:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b06      	cmp	r3, #6
 800a58e:	d015      	beq.n	800a5bc <HAL_TIM_IC_Start_IT+0x274>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a596:	d011      	beq.n	800a5bc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0201 	orr.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a8:	e008      	b.n	800a5bc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f042 0201 	orr.w	r2, r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	e000      	b.n	800a5be <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40012c00 	.word	0x40012c00
 800a5cc:	40000400 	.word	0x40000400
 800a5d0:	40000800 	.word	0x40000800
 800a5d4:	40000c00 	.word	0x40000c00
 800a5d8:	40013400 	.word	0x40013400
 800a5dc:	40014000 	.word	0x40014000
 800a5e0:	40015000 	.word	0x40015000
 800a5e4:	00010007 	.word	0x00010007

0800a5e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d020      	beq.n	800a64c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01b      	beq.n	800a64c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f06f 0202 	mvn.w	r2, #2
 800a61c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7f8 f950 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 800a638:	e005      	b.n	800a646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc2e 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fc35 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d020      	beq.n	800a698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01b      	beq.n	800a698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f06f 0204 	mvn.w	r2, #4
 800a668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2202      	movs	r2, #2
 800a66e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7f8 f92a 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 800a684:	e005      	b.n	800a692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fc08 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fc0f 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d020      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01b      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f06f 0208 	mvn.w	r2, #8
 800a6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7f8 f904 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 800a6d0:	e005      	b.n	800a6de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fbe2 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fbe9 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f003 0310 	and.w	r3, r3, #16
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d020      	beq.n	800a730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d01b      	beq.n	800a730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0210 	mvn.w	r2, #16
 800a700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2208      	movs	r2, #8
 800a706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7f8 f8de 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 800a71c:	e005      	b.n	800a72a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fbbc 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fbc3 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00c      	beq.n	800a754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f06f 0201 	mvn.w	r2, #1
 800a74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7f8 f838 	bl	80027c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d104      	bne.n	800a768 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00c      	beq.n	800a782 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 faa9 	bl	800bcd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00c      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a792:	2b00      	cmp	r3, #0
 800a794:	d007      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 faa1 	bl	800bce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00c      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d007      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fb7d 	bl	800aec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00c      	beq.n	800a7ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f06f 0220 	mvn.w	r2, #32
 800a7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 fa69 	bl	800bcc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00c      	beq.n	800a812 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d007      	beq.n	800a812 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 fa75 	bl	800bcfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00c      	beq.n	800a836 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d007      	beq.n	800a836 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fa6d 	bl	800bd10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00c      	beq.n	800a85a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 fa65 	bl	800bd24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00c      	beq.n	800a87e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 fa5d 	bl	800bd38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a87e:	bf00      	nop
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b086      	sub	sp, #24
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d101      	bne.n	800a8a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e088      	b.n	800a9b6 <HAL_TIM_IC_ConfigChannel+0x130>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d11b      	bne.n	800a8ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a8c2:	f000 fee7 	bl	800b694 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	699a      	ldr	r2, [r3, #24]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 020c 	bic.w	r2, r2, #12
 800a8d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6999      	ldr	r1, [r3, #24]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	430a      	orrs	r2, r1
 800a8e6:	619a      	str	r2, [r3, #24]
 800a8e8:	e060      	b.n	800a9ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d11c      	bne.n	800a92a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a900:	f000 ff6b 	bl	800b7da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	699a      	ldr	r2, [r3, #24]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a912:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6999      	ldr	r1, [r3, #24]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	021a      	lsls	r2, r3, #8
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	619a      	str	r2, [r3, #24]
 800a928:	e040      	b.n	800a9ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d11b      	bne.n	800a968 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a940:	f000 ffb8 	bl	800b8b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	69da      	ldr	r2, [r3, #28]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 020c 	bic.w	r2, r2, #12
 800a952:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69d9      	ldr	r1, [r3, #28]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	689a      	ldr	r2, [r3, #8]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	61da      	str	r2, [r3, #28]
 800a966:	e021      	b.n	800a9ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b0c      	cmp	r3, #12
 800a96c:	d11c      	bne.n	800a9a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a97e:	f000 ffd5 	bl	800b92c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a990:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69d9      	ldr	r1, [r3, #28]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	021a      	lsls	r2, r3, #8
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	61da      	str	r2, [r3, #28]
 800a9a6:	e001      	b.n	800a9ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d101      	bne.n	800a9de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9da:	2302      	movs	r3, #2
 800a9dc:	e0ff      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b14      	cmp	r3, #20
 800a9ea:	f200 80f0 	bhi.w	800abce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa49 	.word	0x0800aa49
 800a9f8:	0800abcf 	.word	0x0800abcf
 800a9fc:	0800abcf 	.word	0x0800abcf
 800aa00:	0800abcf 	.word	0x0800abcf
 800aa04:	0800aa89 	.word	0x0800aa89
 800aa08:	0800abcf 	.word	0x0800abcf
 800aa0c:	0800abcf 	.word	0x0800abcf
 800aa10:	0800abcf 	.word	0x0800abcf
 800aa14:	0800aacb 	.word	0x0800aacb
 800aa18:	0800abcf 	.word	0x0800abcf
 800aa1c:	0800abcf 	.word	0x0800abcf
 800aa20:	0800abcf 	.word	0x0800abcf
 800aa24:	0800ab0b 	.word	0x0800ab0b
 800aa28:	0800abcf 	.word	0x0800abcf
 800aa2c:	0800abcf 	.word	0x0800abcf
 800aa30:	0800abcf 	.word	0x0800abcf
 800aa34:	0800ab4d 	.word	0x0800ab4d
 800aa38:	0800abcf 	.word	0x0800abcf
 800aa3c:	0800abcf 	.word	0x0800abcf
 800aa40:	0800abcf 	.word	0x0800abcf
 800aa44:	0800ab8d 	.word	0x0800ab8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 faf6 	bl	800b040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699a      	ldr	r2, [r3, #24]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0204 	bic.w	r2, r2, #4
 800aa72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6999      	ldr	r1, [r3, #24]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	619a      	str	r2, [r3, #24]
      break;
 800aa86:	e0a5      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fb70 	bl	800b174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aaa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	699a      	ldr	r2, [r3, #24]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6999      	ldr	r1, [r3, #24]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	021a      	lsls	r2, r3, #8
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	619a      	str	r2, [r3, #24]
      break;
 800aac8:	e084      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fbe3 	bl	800b29c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69da      	ldr	r2, [r3, #28]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f042 0208 	orr.w	r2, r2, #8
 800aae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 0204 	bic.w	r2, r2, #4
 800aaf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69d9      	ldr	r1, [r3, #28]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	61da      	str	r2, [r3, #28]
      break;
 800ab08:	e064      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fc55 	bl	800b3c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69da      	ldr	r2, [r3, #28]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69d9      	ldr	r1, [r3, #28]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	021a      	lsls	r2, r3, #8
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	61da      	str	r2, [r3, #28]
      break;
 800ab4a:	e043      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fcc8 	bl	800b4e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0208 	orr.w	r2, r2, #8
 800ab66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0204 	bic.w	r2, r2, #4
 800ab76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ab8a:	e023      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fd12 	bl	800b5bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	021a      	lsls	r2, r3, #8
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800abcc:	e002      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	75fb      	strb	r3, [r7, #23]
      break;
 800abd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop

0800abe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <HAL_TIM_ConfigClockSource+0x1c>
 800ac00:	2302      	movs	r3, #2
 800ac02:	e0f6      	b.n	800adf2 <HAL_TIM_ConfigClockSource+0x20a>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ac22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ac26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a6f      	ldr	r2, [pc, #444]	@ (800adfc <HAL_TIM_ConfigClockSource+0x214>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	f000 80c1 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac44:	4a6d      	ldr	r2, [pc, #436]	@ (800adfc <HAL_TIM_ConfigClockSource+0x214>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	f200 80c6 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac4c:	4a6c      	ldr	r2, [pc, #432]	@ (800ae00 <HAL_TIM_ConfigClockSource+0x218>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	f000 80b9 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac54:	4a6a      	ldr	r2, [pc, #424]	@ (800ae00 <HAL_TIM_ConfigClockSource+0x218>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	f200 80be 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac5c:	4a69      	ldr	r2, [pc, #420]	@ (800ae04 <HAL_TIM_ConfigClockSource+0x21c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	f000 80b1 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac64:	4a67      	ldr	r2, [pc, #412]	@ (800ae04 <HAL_TIM_ConfigClockSource+0x21c>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	f200 80b6 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac6c:	4a66      	ldr	r2, [pc, #408]	@ (800ae08 <HAL_TIM_ConfigClockSource+0x220>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	f000 80a9 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac74:	4a64      	ldr	r2, [pc, #400]	@ (800ae08 <HAL_TIM_ConfigClockSource+0x220>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	f200 80ae 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac7c:	4a63      	ldr	r2, [pc, #396]	@ (800ae0c <HAL_TIM_ConfigClockSource+0x224>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	f000 80a1 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac84:	4a61      	ldr	r2, [pc, #388]	@ (800ae0c <HAL_TIM_ConfigClockSource+0x224>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	f200 80a6 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac8c:	4a60      	ldr	r2, [pc, #384]	@ (800ae10 <HAL_TIM_ConfigClockSource+0x228>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	f000 8099 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ac94:	4a5e      	ldr	r2, [pc, #376]	@ (800ae10 <HAL_TIM_ConfigClockSource+0x228>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	f200 809e 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aca0:	f000 8091 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800aca4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aca8:	f200 8096 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acb0:	f000 8089 	beq.w	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800acb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acb8:	f200 808e 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acc0:	d03e      	beq.n	800ad40 <HAL_TIM_ConfigClockSource+0x158>
 800acc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acc6:	f200 8087 	bhi.w	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acce:	f000 8086 	beq.w	800adde <HAL_TIM_ConfigClockSource+0x1f6>
 800acd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acd6:	d87f      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acd8:	2b70      	cmp	r3, #112	@ 0x70
 800acda:	d01a      	beq.n	800ad12 <HAL_TIM_ConfigClockSource+0x12a>
 800acdc:	2b70      	cmp	r3, #112	@ 0x70
 800acde:	d87b      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ace0:	2b60      	cmp	r3, #96	@ 0x60
 800ace2:	d050      	beq.n	800ad86 <HAL_TIM_ConfigClockSource+0x19e>
 800ace4:	2b60      	cmp	r3, #96	@ 0x60
 800ace6:	d877      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ace8:	2b50      	cmp	r3, #80	@ 0x50
 800acea:	d03c      	beq.n	800ad66 <HAL_TIM_ConfigClockSource+0x17e>
 800acec:	2b50      	cmp	r3, #80	@ 0x50
 800acee:	d873      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acf0:	2b40      	cmp	r3, #64	@ 0x40
 800acf2:	d058      	beq.n	800ada6 <HAL_TIM_ConfigClockSource+0x1be>
 800acf4:	2b40      	cmp	r3, #64	@ 0x40
 800acf6:	d86f      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800acf8:	2b30      	cmp	r3, #48	@ 0x30
 800acfa:	d064      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800acfc:	2b30      	cmp	r3, #48	@ 0x30
 800acfe:	d86b      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d060      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad04:	2b20      	cmp	r3, #32
 800ad06:	d867      	bhi.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d05c      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad0c:	2b10      	cmp	r3, #16
 800ad0e:	d05a      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad10:	e062      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad22:	f000 fe5d 	bl	800b9e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ad34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	609a      	str	r2, [r3, #8]
      break;
 800ad3e:	e04f      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad50:	f000 fe46 	bl	800b9e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad62:	609a      	str	r2, [r3, #8]
      break;
 800ad64:	e03c      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad72:	461a      	mov	r2, r3
 800ad74:	f000 fd02 	bl	800b77c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2150      	movs	r1, #80	@ 0x50
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fe11 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800ad84:	e02c      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad92:	461a      	mov	r2, r3
 800ad94:	f000 fd5e 	bl	800b854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2160      	movs	r1, #96	@ 0x60
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fe01 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800ada4:	e01c      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adb2:	461a      	mov	r2, r3
 800adb4:	f000 fce2 	bl	800b77c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2140      	movs	r1, #64	@ 0x40
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fdf1 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800adc4:	e00c      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f000 fde8 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800add6:	e003      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e000      	b.n	800ade0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800adde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	00100070 	.word	0x00100070
 800ae00:	00100060 	.word	0x00100060
 800ae04:	00100050 	.word	0x00100050
 800ae08:	00100040 	.word	0x00100040
 800ae0c:	00100030 	.word	0x00100030
 800ae10:	00100020 	.word	0x00100020

0800ae14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b0c      	cmp	r3, #12
 800ae26:	d831      	bhi.n	800ae8c <HAL_TIM_ReadCapturedValue+0x78>
 800ae28:	a201      	add	r2, pc, #4	@ (adr r2, 800ae30 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2e:	bf00      	nop
 800ae30:	0800ae65 	.word	0x0800ae65
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae6f 	.word	0x0800ae6f
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800ae8d 	.word	0x0800ae8d
 800ae4c:	0800ae8d 	.word	0x0800ae8d
 800ae50:	0800ae79 	.word	0x0800ae79
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800ae8d 	.word	0x0800ae8d
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae83 	.word	0x0800ae83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6a:	60fb      	str	r3, [r7, #12]

      break;
 800ae6c:	e00f      	b.n	800ae8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae74:	60fb      	str	r3, [r7, #12]

      break;
 800ae76:	e00a      	b.n	800ae8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae7e:	60fb      	str	r3, [r7, #12]

      break;
 800ae80:	e005      	b.n	800ae8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae88:	60fb      	str	r3, [r7, #12]

      break;
 800ae8a:	e000      	b.n	800ae8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ae8c:	bf00      	nop
  }

  return tmpreg;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a4c      	ldr	r2, [pc, #304]	@ (800b01c <TIM_Base_SetConfig+0x144>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d017      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aef6:	d013      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a49      	ldr	r2, [pc, #292]	@ (800b020 <TIM_Base_SetConfig+0x148>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d00f      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a48      	ldr	r2, [pc, #288]	@ (800b024 <TIM_Base_SetConfig+0x14c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d00b      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a47      	ldr	r2, [pc, #284]	@ (800b028 <TIM_Base_SetConfig+0x150>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d007      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a46      	ldr	r2, [pc, #280]	@ (800b02c <TIM_Base_SetConfig+0x154>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d003      	beq.n	800af20 <TIM_Base_SetConfig+0x48>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a45      	ldr	r2, [pc, #276]	@ (800b030 <TIM_Base_SetConfig+0x158>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d108      	bne.n	800af32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a39      	ldr	r2, [pc, #228]	@ (800b01c <TIM_Base_SetConfig+0x144>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d023      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af40:	d01f      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a36      	ldr	r2, [pc, #216]	@ (800b020 <TIM_Base_SetConfig+0x148>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d01b      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a35      	ldr	r2, [pc, #212]	@ (800b024 <TIM_Base_SetConfig+0x14c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d017      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a34      	ldr	r2, [pc, #208]	@ (800b028 <TIM_Base_SetConfig+0x150>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d013      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a33      	ldr	r2, [pc, #204]	@ (800b02c <TIM_Base_SetConfig+0x154>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00f      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a33      	ldr	r2, [pc, #204]	@ (800b034 <TIM_Base_SetConfig+0x15c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d00b      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a32      	ldr	r2, [pc, #200]	@ (800b038 <TIM_Base_SetConfig+0x160>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d007      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a31      	ldr	r2, [pc, #196]	@ (800b03c <TIM_Base_SetConfig+0x164>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d003      	beq.n	800af82 <TIM_Base_SetConfig+0xaa>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a2c      	ldr	r2, [pc, #176]	@ (800b030 <TIM_Base_SetConfig+0x158>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d108      	bne.n	800af94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a18      	ldr	r2, [pc, #96]	@ (800b01c <TIM_Base_SetConfig+0x144>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d013      	beq.n	800afe8 <TIM_Base_SetConfig+0x110>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a1a      	ldr	r2, [pc, #104]	@ (800b02c <TIM_Base_SetConfig+0x154>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00f      	beq.n	800afe8 <TIM_Base_SetConfig+0x110>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a1a      	ldr	r2, [pc, #104]	@ (800b034 <TIM_Base_SetConfig+0x15c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00b      	beq.n	800afe8 <TIM_Base_SetConfig+0x110>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a19      	ldr	r2, [pc, #100]	@ (800b038 <TIM_Base_SetConfig+0x160>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_Base_SetConfig+0x110>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a18      	ldr	r2, [pc, #96]	@ (800b03c <TIM_Base_SetConfig+0x164>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_Base_SetConfig+0x110>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a13      	ldr	r2, [pc, #76]	@ (800b030 <TIM_Base_SetConfig+0x158>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d103      	bne.n	800aff0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b01      	cmp	r3, #1
 800b000:	d105      	bne.n	800b00e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	f023 0201 	bic.w	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	611a      	str	r2, [r3, #16]
  }
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	40012c00 	.word	0x40012c00
 800b020:	40000400 	.word	0x40000400
 800b024:	40000800 	.word	0x40000800
 800b028:	40000c00 	.word	0x40000c00
 800b02c:	40013400 	.word	0x40013400
 800b030:	40015000 	.word	0x40015000
 800b034:	40014000 	.word	0x40014000
 800b038:	40014400 	.word	0x40014400
 800b03c:	40014800 	.word	0x40014800

0800b040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	f023 0201 	bic.w	r2, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0303 	bic.w	r3, r3, #3
 800b07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f023 0302 	bic.w	r3, r3, #2
 800b08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4313      	orrs	r3, r2
 800b096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a30      	ldr	r2, [pc, #192]	@ (800b15c <TIM_OC1_SetConfig+0x11c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d013      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x88>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a2f      	ldr	r2, [pc, #188]	@ (800b160 <TIM_OC1_SetConfig+0x120>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00f      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x88>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a2e      	ldr	r2, [pc, #184]	@ (800b164 <TIM_OC1_SetConfig+0x124>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00b      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x88>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a2d      	ldr	r2, [pc, #180]	@ (800b168 <TIM_OC1_SetConfig+0x128>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d007      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x88>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b16c <TIM_OC1_SetConfig+0x12c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x88>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b170 <TIM_OC1_SetConfig+0x130>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d10c      	bne.n	800b0e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 0308 	bic.w	r3, r3, #8
 800b0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f023 0304 	bic.w	r3, r3, #4
 800b0e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b15c <TIM_OC1_SetConfig+0x11c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d013      	beq.n	800b112 <TIM_OC1_SetConfig+0xd2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b160 <TIM_OC1_SetConfig+0x120>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00f      	beq.n	800b112 <TIM_OC1_SetConfig+0xd2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b164 <TIM_OC1_SetConfig+0x124>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00b      	beq.n	800b112 <TIM_OC1_SetConfig+0xd2>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b168 <TIM_OC1_SetConfig+0x128>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d007      	beq.n	800b112 <TIM_OC1_SetConfig+0xd2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a19      	ldr	r2, [pc, #100]	@ (800b16c <TIM_OC1_SetConfig+0x12c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d003      	beq.n	800b112 <TIM_OC1_SetConfig+0xd2>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a18      	ldr	r2, [pc, #96]	@ (800b170 <TIM_OC1_SetConfig+0x130>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d111      	bne.n	800b136 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	621a      	str	r2, [r3, #32]
}
 800b150:	bf00      	nop
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40012c00 	.word	0x40012c00
 800b160:	40013400 	.word	0x40013400
 800b164:	40014000 	.word	0x40014000
 800b168:	40014400 	.word	0x40014400
 800b16c:	40014800 	.word	0x40014800
 800b170:	40015000 	.word	0x40015000

0800b174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	f023 0210 	bic.w	r2, r3, #16
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f023 0320 	bic.w	r3, r3, #32
 800b1c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	011b      	lsls	r3, r3, #4
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2c      	ldr	r2, [pc, #176]	@ (800b284 <TIM_OC2_SetConfig+0x110>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d007      	beq.n	800b1e8 <TIM_OC2_SetConfig+0x74>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a2b      	ldr	r2, [pc, #172]	@ (800b288 <TIM_OC2_SetConfig+0x114>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d003      	beq.n	800b1e8 <TIM_OC2_SetConfig+0x74>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b28c <TIM_OC2_SetConfig+0x118>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d10d      	bne.n	800b204 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a1f      	ldr	r2, [pc, #124]	@ (800b284 <TIM_OC2_SetConfig+0x110>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d013      	beq.n	800b234 <TIM_OC2_SetConfig+0xc0>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a1e      	ldr	r2, [pc, #120]	@ (800b288 <TIM_OC2_SetConfig+0x114>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00f      	beq.n	800b234 <TIM_OC2_SetConfig+0xc0>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a1e      	ldr	r2, [pc, #120]	@ (800b290 <TIM_OC2_SetConfig+0x11c>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d00b      	beq.n	800b234 <TIM_OC2_SetConfig+0xc0>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a1d      	ldr	r2, [pc, #116]	@ (800b294 <TIM_OC2_SetConfig+0x120>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d007      	beq.n	800b234 <TIM_OC2_SetConfig+0xc0>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a1c      	ldr	r2, [pc, #112]	@ (800b298 <TIM_OC2_SetConfig+0x124>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d003      	beq.n	800b234 <TIM_OC2_SetConfig+0xc0>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a17      	ldr	r2, [pc, #92]	@ (800b28c <TIM_OC2_SetConfig+0x118>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d113      	bne.n	800b25c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b23a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	621a      	str	r2, [r3, #32]
}
 800b276:	bf00      	nop
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	40012c00 	.word	0x40012c00
 800b288:	40013400 	.word	0x40013400
 800b28c:	40015000 	.word	0x40015000
 800b290:	40014000 	.word	0x40014000
 800b294:	40014400 	.word	0x40014400
 800b298:	40014800 	.word	0x40014800

0800b29c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f023 0303 	bic.w	r3, r3, #3
 800b2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b2e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a2b      	ldr	r2, [pc, #172]	@ (800b3a8 <TIM_OC3_SetConfig+0x10c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d007      	beq.n	800b30e <TIM_OC3_SetConfig+0x72>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a2a      	ldr	r2, [pc, #168]	@ (800b3ac <TIM_OC3_SetConfig+0x110>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_OC3_SetConfig+0x72>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a29      	ldr	r2, [pc, #164]	@ (800b3b0 <TIM_OC3_SetConfig+0x114>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d10d      	bne.n	800b32a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	021b      	lsls	r3, r3, #8
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	4313      	orrs	r3, r2
 800b320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a8 <TIM_OC3_SetConfig+0x10c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d013      	beq.n	800b35a <TIM_OC3_SetConfig+0xbe>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a1d      	ldr	r2, [pc, #116]	@ (800b3ac <TIM_OC3_SetConfig+0x110>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00f      	beq.n	800b35a <TIM_OC3_SetConfig+0xbe>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3b4 <TIM_OC3_SetConfig+0x118>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00b      	beq.n	800b35a <TIM_OC3_SetConfig+0xbe>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a1c      	ldr	r2, [pc, #112]	@ (800b3b8 <TIM_OC3_SetConfig+0x11c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d007      	beq.n	800b35a <TIM_OC3_SetConfig+0xbe>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a1b      	ldr	r2, [pc, #108]	@ (800b3bc <TIM_OC3_SetConfig+0x120>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d003      	beq.n	800b35a <TIM_OC3_SetConfig+0xbe>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a16      	ldr	r2, [pc, #88]	@ (800b3b0 <TIM_OC3_SetConfig+0x114>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d113      	bne.n	800b382 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	621a      	str	r2, [r3, #32]
}
 800b39c:	bf00      	nop
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	40012c00 	.word	0x40012c00
 800b3ac:	40013400 	.word	0x40013400
 800b3b0:	40015000 	.word	0x40015000
 800b3b4:	40014000 	.word	0x40014000
 800b3b8:	40014400 	.word	0x40014400
 800b3bc:	40014800 	.word	0x40014800

0800b3c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	69db      	ldr	r3, [r3, #28]
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b40e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	031b      	lsls	r3, r3, #12
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	4313      	orrs	r3, r2
 800b41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a2c      	ldr	r2, [pc, #176]	@ (800b4d0 <TIM_OC4_SetConfig+0x110>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d007      	beq.n	800b434 <TIM_OC4_SetConfig+0x74>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a2b      	ldr	r2, [pc, #172]	@ (800b4d4 <TIM_OC4_SetConfig+0x114>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d003      	beq.n	800b434 <TIM_OC4_SetConfig+0x74>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d8 <TIM_OC4_SetConfig+0x118>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d10d      	bne.n	800b450 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b43a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	031b      	lsls	r3, r3, #12
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	4313      	orrs	r3, r2
 800b446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b44e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a1f      	ldr	r2, [pc, #124]	@ (800b4d0 <TIM_OC4_SetConfig+0x110>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d013      	beq.n	800b480 <TIM_OC4_SetConfig+0xc0>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d4 <TIM_OC4_SetConfig+0x114>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d00f      	beq.n	800b480 <TIM_OC4_SetConfig+0xc0>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a1e      	ldr	r2, [pc, #120]	@ (800b4dc <TIM_OC4_SetConfig+0x11c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00b      	beq.n	800b480 <TIM_OC4_SetConfig+0xc0>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e0 <TIM_OC4_SetConfig+0x120>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d007      	beq.n	800b480 <TIM_OC4_SetConfig+0xc0>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e4 <TIM_OC4_SetConfig+0x124>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d003      	beq.n	800b480 <TIM_OC4_SetConfig+0xc0>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a17      	ldr	r2, [pc, #92]	@ (800b4d8 <TIM_OC4_SetConfig+0x118>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d113      	bne.n	800b4a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b486:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b48e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	019b      	lsls	r3, r3, #6
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4313      	orrs	r3, r2
 800b49a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	019b      	lsls	r3, r3, #6
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40012c00 	.word	0x40012c00
 800b4d4:	40013400 	.word	0x40013400
 800b4d8:	40015000 	.word	0x40015000
 800b4dc:	40014000 	.word	0x40014000
 800b4e0:	40014400 	.word	0x40014400
 800b4e4:	40014800 	.word	0x40014800

0800b4e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b52c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a19      	ldr	r2, [pc, #100]	@ (800b5a4 <TIM_OC5_SetConfig+0xbc>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d013      	beq.n	800b56a <TIM_OC5_SetConfig+0x82>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a18      	ldr	r2, [pc, #96]	@ (800b5a8 <TIM_OC5_SetConfig+0xc0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00f      	beq.n	800b56a <TIM_OC5_SetConfig+0x82>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a17      	ldr	r2, [pc, #92]	@ (800b5ac <TIM_OC5_SetConfig+0xc4>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d00b      	beq.n	800b56a <TIM_OC5_SetConfig+0x82>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a16      	ldr	r2, [pc, #88]	@ (800b5b0 <TIM_OC5_SetConfig+0xc8>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d007      	beq.n	800b56a <TIM_OC5_SetConfig+0x82>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a15      	ldr	r2, [pc, #84]	@ (800b5b4 <TIM_OC5_SetConfig+0xcc>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d003      	beq.n	800b56a <TIM_OC5_SetConfig+0x82>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a14      	ldr	r2, [pc, #80]	@ (800b5b8 <TIM_OC5_SetConfig+0xd0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d109      	bne.n	800b57e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	621a      	str	r2, [r3, #32]
}
 800b598:	bf00      	nop
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	40013400 	.word	0x40013400
 800b5ac:	40014000 	.word	0x40014000
 800b5b0:	40014400 	.word	0x40014400
 800b5b4:	40014800 	.word	0x40014800
 800b5b8:	40015000 	.word	0x40015000

0800b5bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b5ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	051b      	lsls	r3, r3, #20
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a1a      	ldr	r2, [pc, #104]	@ (800b67c <TIM_OC6_SetConfig+0xc0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d013      	beq.n	800b640 <TIM_OC6_SetConfig+0x84>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a19      	ldr	r2, [pc, #100]	@ (800b680 <TIM_OC6_SetConfig+0xc4>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00f      	beq.n	800b640 <TIM_OC6_SetConfig+0x84>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a18      	ldr	r2, [pc, #96]	@ (800b684 <TIM_OC6_SetConfig+0xc8>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d00b      	beq.n	800b640 <TIM_OC6_SetConfig+0x84>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a17      	ldr	r2, [pc, #92]	@ (800b688 <TIM_OC6_SetConfig+0xcc>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d007      	beq.n	800b640 <TIM_OC6_SetConfig+0x84>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a16      	ldr	r2, [pc, #88]	@ (800b68c <TIM_OC6_SetConfig+0xd0>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d003      	beq.n	800b640 <TIM_OC6_SetConfig+0x84>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a15      	ldr	r2, [pc, #84]	@ (800b690 <TIM_OC6_SetConfig+0xd4>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d109      	bne.n	800b654 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	029b      	lsls	r3, r3, #10
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	4313      	orrs	r3, r2
 800b652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	621a      	str	r2, [r3, #32]
}
 800b66e:	bf00      	nop
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40013400 	.word	0x40013400
 800b684:	40014000 	.word	0x40014000
 800b688:	40014400 	.word	0x40014400
 800b68c:	40014800 	.word	0x40014800
 800b690:	40015000 	.word	0x40015000

0800b694 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6a1b      	ldr	r3, [r3, #32]
 800b6ac:	f023 0201 	bic.w	r2, r3, #1
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4a28      	ldr	r2, [pc, #160]	@ (800b760 <TIM_TI1_SetConfig+0xcc>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d01b      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6c8:	d017      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	4a25      	ldr	r2, [pc, #148]	@ (800b764 <TIM_TI1_SetConfig+0xd0>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d013      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4a24      	ldr	r2, [pc, #144]	@ (800b768 <TIM_TI1_SetConfig+0xd4>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00f      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a23      	ldr	r2, [pc, #140]	@ (800b76c <TIM_TI1_SetConfig+0xd8>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00b      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4a22      	ldr	r2, [pc, #136]	@ (800b770 <TIM_TI1_SetConfig+0xdc>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d007      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4a21      	ldr	r2, [pc, #132]	@ (800b774 <TIM_TI1_SetConfig+0xe0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d003      	beq.n	800b6fa <TIM_TI1_SetConfig+0x66>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	4a20      	ldr	r2, [pc, #128]	@ (800b778 <TIM_TI1_SetConfig+0xe4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d101      	bne.n	800b6fe <TIM_TI1_SetConfig+0x6a>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e000      	b.n	800b700 <TIM_TI1_SetConfig+0x6c>
 800b6fe:	2300      	movs	r3, #0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d008      	beq.n	800b716 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4313      	orrs	r3, r2
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e003      	b.n	800b71e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f043 0301 	orr.w	r3, r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f023 030a 	bic.w	r3, r3, #10
 800b738:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f003 030a 	and.w	r3, r3, #10
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	621a      	str	r2, [r3, #32]
}
 800b752:	bf00      	nop
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	40012c00 	.word	0x40012c00
 800b764:	40000400 	.word	0x40000400
 800b768:	40000800 	.word	0x40000800
 800b76c:	40000c00 	.word	0x40000c00
 800b770:	40013400 	.word	0x40013400
 800b774:	40014000 	.word	0x40014000
 800b778:	40015000 	.word	0x40015000

0800b77c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f023 030a 	bic.w	r3, r3, #10
 800b7b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	621a      	str	r2, [r3, #32]
}
 800b7ce:	bf00      	nop
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b087      	sub	sp, #28
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	60b9      	str	r1, [r7, #8]
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	f023 0210 	bic.w	r2, r3, #16
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	021b      	lsls	r3, r3, #8
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	031b      	lsls	r3, r3, #12
 800b81e:	b29b      	uxth	r3, r3
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4313      	orrs	r3, r2
 800b824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b82c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	621a      	str	r2, [r3, #32]
}
 800b848:	bf00      	nop
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	f023 0210 	bic.w	r2, r3, #16
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b87e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	031b      	lsls	r3, r3, #12
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	4313      	orrs	r3, r2
 800b888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	4313      	orrs	r3, r2
 800b89a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	621a      	str	r2, [r3, #32]
}
 800b8a8:	bf00      	nop
 800b8aa:	371c      	adds	r7, #28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b904:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	021b      	lsls	r3, r3, #8
 800b90a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	621a      	str	r2, [r3, #32]
}
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a1b      	ldr	r3, [r3, #32]
 800b944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	69db      	ldr	r3, [r3, #28]
 800b950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b958:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b96a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	031b      	lsls	r3, r3, #12
 800b970:	b29b      	uxth	r3, r3
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4313      	orrs	r3, r2
 800b976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b97e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	031b      	lsls	r3, r3, #12
 800b984:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	621a      	str	r2, [r3, #32]
}
 800b99a:	bf00      	nop
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b9bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	f043 0307 	orr.w	r3, r3, #7
 800b9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	609a      	str	r2, [r3, #8]
}
 800b9d4:	bf00      	nop
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	021a      	lsls	r2, r3, #8
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	431a      	orrs	r2, r3
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	609a      	str	r2, [r3, #8]
}
 800ba14:	bf00      	nop
 800ba16:	371c      	adds	r7, #28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b087      	sub	sp, #28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 031f 	and.w	r3, r3, #31
 800ba32:	2201      	movs	r2, #1
 800ba34:	fa02 f303 	lsl.w	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	401a      	ands	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a1a      	ldr	r2, [r3, #32]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	fa01 f303 	lsl.w	r3, r1, r3
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	621a      	str	r2, [r3, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
	...

0800ba6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e074      	b.n	800bb6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a34      	ldr	r2, [pc, #208]	@ (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d009      	beq.n	800bac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a33      	ldr	r2, [pc, #204]	@ (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d004      	beq.n	800bac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a31      	ldr	r2, [pc, #196]	@ (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d108      	bne.n	800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a21      	ldr	r2, [pc, #132]	@ (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d022      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb04:	d01d      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d018      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1d      	ldr	r2, [pc, #116]	@ (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d013      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1c      	ldr	r2, [pc, #112]	@ (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00e      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a15      	ldr	r2, [pc, #84]	@ (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d009      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a18      	ldr	r2, [pc, #96]	@ (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d004      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d10c      	bne.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40012c00 	.word	0x40012c00
 800bb80:	40013400 	.word	0x40013400
 800bb84:	40015000 	.word	0x40015000
 800bb88:	40000400 	.word	0x40000400
 800bb8c:	40000800 	.word	0x40000800
 800bb90:	40000c00 	.word	0x40000c00
 800bb94:	40014000 	.word	0x40014000

0800bb98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d101      	bne.n	800bbb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	e078      	b.n	800bca6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	041b      	lsls	r3, r3, #16
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d009      	beq.n	800bc5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d004      	beq.n	800bc5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a19      	ldr	r2, [pc, #100]	@ (800bcbc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d11c      	bne.n	800bc94 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc64:	051b      	lsls	r3, r3, #20
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	6a1b      	ldr	r3, [r3, #32]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc82:	4313      	orrs	r3, r2
 800bc84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	40012c00 	.word	0x40012c00
 800bcb8:	40013400 	.word	0x40013400
 800bcbc:	40015000 	.word	0x40015000

0800bcc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e042      	b.n	800bde4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7f8 fd7d 	bl	8004870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2224      	movs	r2, #36	@ 0x24
 800bd7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0201 	bic.w	r2, r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 feb4 	bl	800cb04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fbb5 	bl	800c50c <UART_SetConfig>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d101      	bne.n	800bdac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e01b      	b.n	800bde4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bdba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689a      	ldr	r2, [r3, #8]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f042 0201 	orr.w	r2, r2, #1
 800bdda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 ff33 	bl	800cc48 <UART_CheckIdleState>
 800bde2:	4603      	mov	r3, r0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08a      	sub	sp, #40	@ 0x28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be00:	2b20      	cmp	r3, #32
 800be02:	d137      	bne.n	800be74 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <HAL_UART_Receive_IT+0x24>
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e030      	b.n	800be76 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a18      	ldr	r2, [pc, #96]	@ (800be80 <HAL_UART_Receive_IT+0x94>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d01f      	beq.n	800be64 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d018      	beq.n	800be64 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	613b      	str	r3, [r7, #16]
   return(result);
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be46:	627b      	str	r3, [r7, #36]	@ 0x24
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	623b      	str	r3, [r7, #32]
 800be52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	69f9      	ldr	r1, [r7, #28]
 800be56:	6a3a      	ldr	r2, [r7, #32]
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e6      	bne.n	800be32 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800be64:	88fb      	ldrh	r3, [r7, #6]
 800be66:	461a      	mov	r2, r3
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f001 f804 	bl	800ce78 <UART_Start_Receive_IT>
 800be70:	4603      	mov	r3, r0
 800be72:	e000      	b.n	800be76 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be74:	2302      	movs	r3, #2
  }
}
 800be76:	4618      	mov	r0, r3
 800be78:	3728      	adds	r7, #40	@ 0x28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	40008000 	.word	0x40008000

0800be84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b0ba      	sub	sp, #232	@ 0xe8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800beaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800beae:	f640 030f 	movw	r3, #2063	@ 0x80f
 800beb2:	4013      	ands	r3, r2
 800beb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800beb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d11b      	bne.n	800bef8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d015      	beq.n	800bef8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800becc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bed0:	f003 0320 	and.w	r3, r3, #32
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d105      	bne.n	800bee4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bedc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 82e3 	beq.w	800c4b4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
      }
      return;
 800bef6:	e2dd      	b.n	800c4b4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 8123 	beq.w	800c148 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bf06:	4b8d      	ldr	r3, [pc, #564]	@ (800c13c <HAL_UART_IRQHandler+0x2b8>)
 800bf08:	4013      	ands	r3, r2
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bf12:	4b8b      	ldr	r3, [pc, #556]	@ (800c140 <HAL_UART_IRQHandler+0x2bc>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8116 	beq.w	800c148 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d011      	beq.n	800bf4c <HAL_UART_IRQHandler+0xc8>
 800bf28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00b      	beq.n	800bf4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf42:	f043 0201 	orr.w	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d011      	beq.n	800bf7c <HAL_UART_IRQHandler+0xf8>
 800bf58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf72:	f043 0204 	orr.w	r2, r3, #4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d011      	beq.n	800bfac <HAL_UART_IRQHandler+0x128>
 800bf88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00b      	beq.n	800bfac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa2:	f043 0202 	orr.w	r2, r3, #2
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bfac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d017      	beq.n	800bfe8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfbc:	f003 0320 	and.w	r3, r3, #32
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d105      	bne.n	800bfd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bfc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bfc8:	4b5c      	ldr	r3, [pc, #368]	@ (800c13c <HAL_UART_IRQHandler+0x2b8>)
 800bfca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfde:	f043 0208 	orr.w	r2, r3, #8
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d012      	beq.n	800c01a <HAL_UART_IRQHandler+0x196>
 800bff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00c      	beq.n	800c01a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c010:	f043 0220 	orr.w	r2, r3, #32
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 8249 	beq.w	800c4b8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c02a:	f003 0320 	and.w	r3, r3, #32
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d013      	beq.n	800c05a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c036:	f003 0320 	and.w	r3, r3, #32
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d105      	bne.n	800c04a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d007      	beq.n	800c05a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c06e:	2b40      	cmp	r3, #64	@ 0x40
 800c070:	d005      	beq.n	800c07e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c076:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d054      	beq.n	800c128 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 f81c 	bl	800d0bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08e:	2b40      	cmp	r3, #64	@ 0x40
 800c090:	d146      	bne.n	800c120 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3308      	adds	r3, #8
 800c098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c0a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c0be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c0c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c0ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c0d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1d9      	bne.n	800c092 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d017      	beq.n	800c118 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ee:	4a15      	ldr	r2, [pc, #84]	@ (800c144 <HAL_UART_IRQHandler+0x2c0>)
 800c0f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fa fc19 	bl	8006930 <HAL_DMA_Abort_IT>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d019      	beq.n	800c138 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c112:	4610      	mov	r0, r2
 800c114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c116:	e00f      	b.n	800c138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f9e1 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c11e:	e00b      	b.n	800c138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f9dd 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c126:	e007      	b.n	800c138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f9d9 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c136:	e1bf      	b.n	800c4b8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c138:	bf00      	nop
    return;
 800c13a:	e1bd      	b.n	800c4b8 <HAL_UART_IRQHandler+0x634>
 800c13c:	10000001 	.word	0x10000001
 800c140:	04000120 	.word	0x04000120
 800c144:	0800d189 	.word	0x0800d189

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	f040 8153 	bne.w	800c3f8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c156:	f003 0310 	and.w	r3, r3, #16
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 814c 	beq.w	800c3f8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c164:	f003 0310 	and.w	r3, r3, #16
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 8145 	beq.w	800c3f8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2210      	movs	r2, #16
 800c174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c180:	2b40      	cmp	r3, #64	@ 0x40
 800c182:	f040 80bb 	bne.w	800c2fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 818f 	beq.w	800c4bc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	f080 8187 	bcs.w	800c4bc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f040 8087 	bne.w	800c2da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c1d8:	e853 3f00 	ldrex	r3, [r3]
 800c1dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c1e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c1f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c20e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1da      	bne.n	800c1cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c228:	f023 0301 	bic.w	r3, r3, #1
 800c22c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3308      	adds	r3, #8
 800c236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c23a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c23e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c242:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c24c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e1      	bne.n	800c216 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3308      	adds	r3, #8
 800c258:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c25c:	e853 3f00 	ldrex	r3, [r3]
 800c260:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3308      	adds	r3, #8
 800c272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c278:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c27c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e3      	bne.n	800c252 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2a8:	f023 0310 	bic.w	r3, r3, #16
 800c2ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c2c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1e4      	bne.n	800c298 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fa fad2 	bl	800687e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f8fd 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2fa:	e0df      	b.n	800c4bc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c308:	b29b      	uxth	r3, r3
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c316:	b29b      	uxth	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80d1 	beq.w	800c4c0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c31e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 80cc 	beq.w	800c4c0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c33c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c34a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c34c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e4      	bne.n	800c328 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	623b      	str	r3, [r7, #32]
   return(result);
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c374:	f023 0301 	bic.w	r3, r3, #1
 800c378:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3308      	adds	r3, #8
 800c382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c386:	633a      	str	r2, [r7, #48]	@ 0x30
 800c388:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e1      	bne.n	800c35e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	e853 3f00 	ldrex	r3, [r3]
 800c3ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f023 0310 	bic.w	r3, r3, #16
 800c3c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d4:	69b9      	ldr	r1, [r7, #24]
 800c3d6:	69fa      	ldr	r2, [r7, #28]
 800c3d8:	e841 2300 	strex	r3, r2, [r1]
 800c3dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1e4      	bne.n	800c3ae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f87f 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3f6:	e063      	b.n	800c4c0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <HAL_UART_IRQHandler+0x59e>
 800c404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d008      	beq.n	800c422 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f001 fc12 	bl	800dc44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c420:	e051      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d014      	beq.n	800c458 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d008      	beq.n	800c458 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d03a      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	4798      	blx	r3
    }
    return;
 800c456:	e035      	b.n	800c4c4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d009      	beq.n	800c478 <HAL_UART_IRQHandler+0x5f4>
 800c464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d003      	beq.n	800c478 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fe9f 	bl	800d1b4 <UART_EndTransmit_IT>
    return;
 800c476:	e026      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c47c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <HAL_UART_IRQHandler+0x614>
 800c484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c488:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fbeb 	bl	800dc6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c496:	e016      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d010      	beq.n	800c4c6 <HAL_UART_IRQHandler+0x642>
 800c4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	da0c      	bge.n	800c4c6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 fbd3 	bl	800dc58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4b2:	e008      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
      return;
 800c4b4:	bf00      	nop
 800c4b6:	e006      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
    return;
 800c4b8:	bf00      	nop
 800c4ba:	e004      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
      return;
 800c4bc:	bf00      	nop
 800c4be:	e002      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
      return;
 800c4c0:	bf00      	nop
 800c4c2:	e000      	b.n	800c4c6 <HAL_UART_IRQHandler+0x642>
    return;
 800c4c4:	bf00      	nop
  }
}
 800c4c6:	37e8      	adds	r7, #232	@ 0xe8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c50c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c510:	b08c      	sub	sp, #48	@ 0x30
 800c512:	af00      	add	r7, sp, #0
 800c514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	431a      	orrs	r2, r3
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	4313      	orrs	r3, r2
 800c532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4baa      	ldr	r3, [pc, #680]	@ (800c7e4 <UART_SetConfig+0x2d8>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	6812      	ldr	r2, [r2, #0]
 800c542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c544:	430b      	orrs	r3, r1
 800c546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a9f      	ldr	r2, [pc, #636]	@ (800c7e8 <UART_SetConfig+0x2dc>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d004      	beq.n	800c578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c574:	4313      	orrs	r3, r2
 800c576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c582:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c58c:	430b      	orrs	r3, r1
 800c58e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c596:	f023 010f 	bic.w	r1, r3, #15
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a90      	ldr	r2, [pc, #576]	@ (800c7ec <UART_SetConfig+0x2e0>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d125      	bne.n	800c5fc <UART_SetConfig+0xf0>
 800c5b0:	4b8f      	ldr	r3, [pc, #572]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d81a      	bhi.n	800c5f4 <UART_SetConfig+0xe8>
 800c5be:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <UART_SetConfig+0xb8>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5d5 	.word	0x0800c5d5
 800c5c8:	0800c5e5 	.word	0x0800c5e5
 800c5cc:	0800c5dd 	.word	0x0800c5dd
 800c5d0:	0800c5ed 	.word	0x0800c5ed
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5da:	e116      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5e2:	e112      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c5e4:	2304      	movs	r3, #4
 800c5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ea:	e10e      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5f2:	e10a      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5fa:	e106      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a7c      	ldr	r2, [pc, #496]	@ (800c7f4 <UART_SetConfig+0x2e8>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d138      	bne.n	800c678 <UART_SetConfig+0x16c>
 800c606:	4b7a      	ldr	r3, [pc, #488]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c60c:	f003 030c 	and.w	r3, r3, #12
 800c610:	2b0c      	cmp	r3, #12
 800c612:	d82d      	bhi.n	800c670 <UART_SetConfig+0x164>
 800c614:	a201      	add	r2, pc, #4	@ (adr r2, 800c61c <UART_SetConfig+0x110>)
 800c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61a:	bf00      	nop
 800c61c:	0800c651 	.word	0x0800c651
 800c620:	0800c671 	.word	0x0800c671
 800c624:	0800c671 	.word	0x0800c671
 800c628:	0800c671 	.word	0x0800c671
 800c62c:	0800c661 	.word	0x0800c661
 800c630:	0800c671 	.word	0x0800c671
 800c634:	0800c671 	.word	0x0800c671
 800c638:	0800c671 	.word	0x0800c671
 800c63c:	0800c659 	.word	0x0800c659
 800c640:	0800c671 	.word	0x0800c671
 800c644:	0800c671 	.word	0x0800c671
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c669 	.word	0x0800c669
 800c650:	2300      	movs	r3, #0
 800c652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c656:	e0d8      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c658:	2302      	movs	r3, #2
 800c65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c65e:	e0d4      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c660:	2304      	movs	r3, #4
 800c662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c666:	e0d0      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c668:	2308      	movs	r3, #8
 800c66a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c66e:	e0cc      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c670:	2310      	movs	r3, #16
 800c672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c676:	e0c8      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a5e      	ldr	r2, [pc, #376]	@ (800c7f8 <UART_SetConfig+0x2ec>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d125      	bne.n	800c6ce <UART_SetConfig+0x1c2>
 800c682:	4b5b      	ldr	r3, [pc, #364]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c688:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c68c:	2b30      	cmp	r3, #48	@ 0x30
 800c68e:	d016      	beq.n	800c6be <UART_SetConfig+0x1b2>
 800c690:	2b30      	cmp	r3, #48	@ 0x30
 800c692:	d818      	bhi.n	800c6c6 <UART_SetConfig+0x1ba>
 800c694:	2b20      	cmp	r3, #32
 800c696:	d00a      	beq.n	800c6ae <UART_SetConfig+0x1a2>
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d814      	bhi.n	800c6c6 <UART_SetConfig+0x1ba>
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <UART_SetConfig+0x19a>
 800c6a0:	2b10      	cmp	r3, #16
 800c6a2:	d008      	beq.n	800c6b6 <UART_SetConfig+0x1aa>
 800c6a4:	e00f      	b.n	800c6c6 <UART_SetConfig+0x1ba>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6ac:	e0ad      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6b4:	e0a9      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c6b6:	2304      	movs	r3, #4
 800c6b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6bc:	e0a5      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c6be:	2308      	movs	r3, #8
 800c6c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6c4:	e0a1      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c6c6:	2310      	movs	r3, #16
 800c6c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6cc:	e09d      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a4a      	ldr	r2, [pc, #296]	@ (800c7fc <UART_SetConfig+0x2f0>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d125      	bne.n	800c724 <UART_SetConfig+0x218>
 800c6d8:	4b45      	ldr	r3, [pc, #276]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c6e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6e4:	d016      	beq.n	800c714 <UART_SetConfig+0x208>
 800c6e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6e8:	d818      	bhi.n	800c71c <UART_SetConfig+0x210>
 800c6ea:	2b80      	cmp	r3, #128	@ 0x80
 800c6ec:	d00a      	beq.n	800c704 <UART_SetConfig+0x1f8>
 800c6ee:	2b80      	cmp	r3, #128	@ 0x80
 800c6f0:	d814      	bhi.n	800c71c <UART_SetConfig+0x210>
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <UART_SetConfig+0x1f0>
 800c6f6:	2b40      	cmp	r3, #64	@ 0x40
 800c6f8:	d008      	beq.n	800c70c <UART_SetConfig+0x200>
 800c6fa:	e00f      	b.n	800c71c <UART_SetConfig+0x210>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c702:	e082      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c704:	2302      	movs	r3, #2
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c70a:	e07e      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c70c:	2304      	movs	r3, #4
 800c70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c712:	e07a      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c714:	2308      	movs	r3, #8
 800c716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c71a:	e076      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c71c:	2310      	movs	r3, #16
 800c71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c722:	e072      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a35      	ldr	r2, [pc, #212]	@ (800c800 <UART_SetConfig+0x2f4>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d12a      	bne.n	800c784 <UART_SetConfig+0x278>
 800c72e:	4b30      	ldr	r3, [pc, #192]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c73c:	d01a      	beq.n	800c774 <UART_SetConfig+0x268>
 800c73e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c742:	d81b      	bhi.n	800c77c <UART_SetConfig+0x270>
 800c744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c748:	d00c      	beq.n	800c764 <UART_SetConfig+0x258>
 800c74a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c74e:	d815      	bhi.n	800c77c <UART_SetConfig+0x270>
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <UART_SetConfig+0x250>
 800c754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c758:	d008      	beq.n	800c76c <UART_SetConfig+0x260>
 800c75a:	e00f      	b.n	800c77c <UART_SetConfig+0x270>
 800c75c:	2300      	movs	r3, #0
 800c75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c762:	e052      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c764:	2302      	movs	r3, #2
 800c766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c76a:	e04e      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c76c:	2304      	movs	r3, #4
 800c76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c772:	e04a      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c774:	2308      	movs	r3, #8
 800c776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c77a:	e046      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c77c:	2310      	movs	r3, #16
 800c77e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c782:	e042      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a17      	ldr	r2, [pc, #92]	@ (800c7e8 <UART_SetConfig+0x2dc>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d13a      	bne.n	800c804 <UART_SetConfig+0x2f8>
 800c78e:	4b18      	ldr	r3, [pc, #96]	@ (800c7f0 <UART_SetConfig+0x2e4>)
 800c790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c794:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c79c:	d01a      	beq.n	800c7d4 <UART_SetConfig+0x2c8>
 800c79e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7a2:	d81b      	bhi.n	800c7dc <UART_SetConfig+0x2d0>
 800c7a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7a8:	d00c      	beq.n	800c7c4 <UART_SetConfig+0x2b8>
 800c7aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7ae:	d815      	bhi.n	800c7dc <UART_SetConfig+0x2d0>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d003      	beq.n	800c7bc <UART_SetConfig+0x2b0>
 800c7b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7b8:	d008      	beq.n	800c7cc <UART_SetConfig+0x2c0>
 800c7ba:	e00f      	b.n	800c7dc <UART_SetConfig+0x2d0>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7c2:	e022      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ca:	e01e      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7d2:	e01a      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c7d4:	2308      	movs	r3, #8
 800c7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7da:	e016      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7e2:	e012      	b.n	800c80a <UART_SetConfig+0x2fe>
 800c7e4:	cfff69f3 	.word	0xcfff69f3
 800c7e8:	40008000 	.word	0x40008000
 800c7ec:	40013800 	.word	0x40013800
 800c7f0:	40021000 	.word	0x40021000
 800c7f4:	40004400 	.word	0x40004400
 800c7f8:	40004800 	.word	0x40004800
 800c7fc:	40004c00 	.word	0x40004c00
 800c800:	40005000 	.word	0x40005000
 800c804:	2310      	movs	r3, #16
 800c806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4aae      	ldr	r2, [pc, #696]	@ (800cac8 <UART_SetConfig+0x5bc>)
 800c810:	4293      	cmp	r3, r2
 800c812:	f040 8097 	bne.w	800c944 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c816:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c81a:	2b08      	cmp	r3, #8
 800c81c:	d823      	bhi.n	800c866 <UART_SetConfig+0x35a>
 800c81e:	a201      	add	r2, pc, #4	@ (adr r2, 800c824 <UART_SetConfig+0x318>)
 800c820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c824:	0800c849 	.word	0x0800c849
 800c828:	0800c867 	.word	0x0800c867
 800c82c:	0800c851 	.word	0x0800c851
 800c830:	0800c867 	.word	0x0800c867
 800c834:	0800c857 	.word	0x0800c857
 800c838:	0800c867 	.word	0x0800c867
 800c83c:	0800c867 	.word	0x0800c867
 800c840:	0800c867 	.word	0x0800c867
 800c844:	0800c85f 	.word	0x0800c85f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c848:	f7fd f822 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800c84c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c84e:	e010      	b.n	800c872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c850:	4b9e      	ldr	r3, [pc, #632]	@ (800cacc <UART_SetConfig+0x5c0>)
 800c852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c854:	e00d      	b.n	800c872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c856:	f7fc ffad 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800c85a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c85c:	e009      	b.n	800c872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c85e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c864:	e005      	b.n	800c872 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c870:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 8130 	beq.w	800cada <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87e:	4a94      	ldr	r2, [pc, #592]	@ (800cad0 <UART_SetConfig+0x5c4>)
 800c880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c884:	461a      	mov	r2, r3
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	fbb3 f3f2 	udiv	r3, r3, r2
 800c88c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	4613      	mov	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	4413      	add	r3, r2
 800c898:	69ba      	ldr	r2, [r7, #24]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d305      	bcc.n	800c8aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8a4:	69ba      	ldr	r2, [r7, #24]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d903      	bls.n	800c8b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c8b0:	e113      	b.n	800cada <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	60bb      	str	r3, [r7, #8]
 800c8b8:	60fa      	str	r2, [r7, #12]
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8be:	4a84      	ldr	r2, [pc, #528]	@ (800cad0 <UART_SetConfig+0x5c4>)
 800c8c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	603b      	str	r3, [r7, #0]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8d4:	f7f4 f91a 	bl	8000b0c <__aeabi_uldivmod>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f04f 0200 	mov.w	r2, #0
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	020b      	lsls	r3, r1, #8
 800c8ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8ee:	0202      	lsls	r2, r0, #8
 800c8f0:	6979      	ldr	r1, [r7, #20]
 800c8f2:	6849      	ldr	r1, [r1, #4]
 800c8f4:	0849      	lsrs	r1, r1, #1
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	eb12 0804 	adds.w	r8, r2, r4
 800c900:	eb43 0905 	adc.w	r9, r3, r5
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	469a      	mov	sl, r3
 800c90c:	4693      	mov	fp, r2
 800c90e:	4652      	mov	r2, sl
 800c910:	465b      	mov	r3, fp
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	f7f4 f8f9 	bl	8000b0c <__aeabi_uldivmod>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4613      	mov	r3, r2
 800c920:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c928:	d308      	bcc.n	800c93c <UART_SetConfig+0x430>
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c930:	d204      	bcs.n	800c93c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6a3a      	ldr	r2, [r7, #32]
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	e0ce      	b.n	800cada <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c942:	e0ca      	b.n	800cada <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c94c:	d166      	bne.n	800ca1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c94e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c952:	2b08      	cmp	r3, #8
 800c954:	d827      	bhi.n	800c9a6 <UART_SetConfig+0x49a>
 800c956:	a201      	add	r2, pc, #4	@ (adr r2, 800c95c <UART_SetConfig+0x450>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c981 	.word	0x0800c981
 800c960:	0800c989 	.word	0x0800c989
 800c964:	0800c991 	.word	0x0800c991
 800c968:	0800c9a7 	.word	0x0800c9a7
 800c96c:	0800c997 	.word	0x0800c997
 800c970:	0800c9a7 	.word	0x0800c9a7
 800c974:	0800c9a7 	.word	0x0800c9a7
 800c978:	0800c9a7 	.word	0x0800c9a7
 800c97c:	0800c99f 	.word	0x0800c99f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c980:	f7fc ff86 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800c984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c986:	e014      	b.n	800c9b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c988:	f7fc ff98 	bl	80098bc <HAL_RCC_GetPCLK2Freq>
 800c98c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c98e:	e010      	b.n	800c9b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c990:	4b4e      	ldr	r3, [pc, #312]	@ (800cacc <UART_SetConfig+0x5c0>)
 800c992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c994:	e00d      	b.n	800c9b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c996:	f7fc ff0d 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800c99a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c99c:	e009      	b.n	800c9b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c99e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9a4:	e005      	b.n	800c9b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c9b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8090 	beq.w	800cada <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9be:	4a44      	ldr	r2, [pc, #272]	@ (800cad0 <UART_SetConfig+0x5c4>)
 800c9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9cc:	005a      	lsls	r2, r3, #1
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	441a      	add	r2, r3
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	2b0f      	cmp	r3, #15
 800c9e4:	d916      	bls.n	800ca14 <UART_SetConfig+0x508>
 800c9e6:	6a3b      	ldr	r3, [r7, #32]
 800c9e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ec:	d212      	bcs.n	800ca14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	f023 030f 	bic.w	r3, r3, #15
 800c9f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9f8:	6a3b      	ldr	r3, [r7, #32]
 800c9fa:	085b      	lsrs	r3, r3, #1
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	f003 0307 	and.w	r3, r3, #7
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	8bfb      	ldrh	r3, [r7, #30]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	8bfa      	ldrh	r2, [r7, #30]
 800ca10:	60da      	str	r2, [r3, #12]
 800ca12:	e062      	b.n	800cada <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca1a:	e05e      	b.n	800cada <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca20:	2b08      	cmp	r3, #8
 800ca22:	d828      	bhi.n	800ca76 <UART_SetConfig+0x56a>
 800ca24:	a201      	add	r2, pc, #4	@ (adr r2, 800ca2c <UART_SetConfig+0x520>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca51 	.word	0x0800ca51
 800ca30:	0800ca59 	.word	0x0800ca59
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	0800ca77 	.word	0x0800ca77
 800ca3c:	0800ca67 	.word	0x0800ca67
 800ca40:	0800ca77 	.word	0x0800ca77
 800ca44:	0800ca77 	.word	0x0800ca77
 800ca48:	0800ca77 	.word	0x0800ca77
 800ca4c:	0800ca6f 	.word	0x0800ca6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca50:	f7fc ff1e 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800ca54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca56:	e014      	b.n	800ca82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca58:	f7fc ff30 	bl	80098bc <HAL_RCC_GetPCLK2Freq>
 800ca5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca5e:	e010      	b.n	800ca82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca60:	4b1a      	ldr	r3, [pc, #104]	@ (800cacc <UART_SetConfig+0x5c0>)
 800ca62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca64:	e00d      	b.n	800ca82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca66:	f7fc fea5 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800ca6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca6c:	e009      	b.n	800ca82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca74:	e005      	b.n	800ca82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ca76:	2300      	movs	r3, #0
 800ca78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ca80:	bf00      	nop
    }

    if (pclk != 0U)
 800ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d028      	beq.n	800cada <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8c:	4a10      	ldr	r2, [pc, #64]	@ (800cad0 <UART_SetConfig+0x5c4>)
 800ca8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	085b      	lsrs	r3, r3, #1
 800caa0:	441a      	add	r2, r3
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caac:	6a3b      	ldr	r3, [r7, #32]
 800caae:	2b0f      	cmp	r3, #15
 800cab0:	d910      	bls.n	800cad4 <UART_SetConfig+0x5c8>
 800cab2:	6a3b      	ldr	r3, [r7, #32]
 800cab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cab8:	d20c      	bcs.n	800cad4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800caba:	6a3b      	ldr	r3, [r7, #32]
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	60da      	str	r2, [r3, #12]
 800cac4:	e009      	b.n	800cada <UART_SetConfig+0x5ce>
 800cac6:	bf00      	nop
 800cac8:	40008000 	.word	0x40008000
 800cacc:	00f42400 	.word	0x00f42400
 800cad0:	0800e8f4 	.word	0x0800e8f4
      }
      else
      {
        ret = HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	2201      	movs	r2, #1
 800cade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	2200      	movs	r2, #0
 800caee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2200      	movs	r2, #0
 800caf4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800caf6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3730      	adds	r7, #48	@ 0x30
 800cafe:	46bd      	mov	sp, r7
 800cb00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb10:	f003 0308 	and.w	r3, r3, #8
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00a      	beq.n	800cb72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb76:	f003 0304 	and.w	r3, r3, #4
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb98:	f003 0310 	and.w	r3, r3, #16
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00a      	beq.n	800cbb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d01a      	beq.n	800cc1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc02:	d10a      	bne.n	800cc1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	430a      	orrs	r2, r1
 800cc3a:	605a      	str	r2, [r3, #4]
  }
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b098      	sub	sp, #96	@ 0x60
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc58:	f7f7 ff38 	bl	8004acc <HAL_GetTick>
 800cc5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0308 	and.w	r3, r3, #8
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d12f      	bne.n	800cccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc74:	2200      	movs	r2, #0
 800cc76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f88e 	bl	800cd9c <UART_WaitOnFlagUntilTimeout>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d022      	beq.n	800cccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8e:	e853 3f00 	ldrex	r3, [r3]
 800cc92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cca4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccac:	e841 2300 	strex	r3, r2, [r1]
 800ccb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1e6      	bne.n	800cc86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e063      	b.n	800cd94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0304 	and.w	r3, r3, #4
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d149      	bne.n	800cd6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce2:	2200      	movs	r2, #0
 800cce4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f857 	bl	800cd9c <UART_WaitOnFlagUntilTimeout>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d03c      	beq.n	800cd6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	623b      	str	r3, [r7, #32]
   return(result);
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd1a:	e841 2300 	strex	r3, r2, [r1]
 800cd1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e6      	bne.n	800ccf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	e853 3f00 	ldrex	r3, [r3]
 800cd34:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f023 0301 	bic.w	r3, r3, #1
 800cd3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3308      	adds	r3, #8
 800cd44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd46:	61fa      	str	r2, [r7, #28]
 800cd48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	69fa      	ldr	r2, [r7, #28]
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	617b      	str	r3, [r7, #20]
   return(result);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e5      	bne.n	800cd26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2220      	movs	r2, #32
 800cd5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e012      	b.n	800cd94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2220      	movs	r2, #32
 800cd72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2220      	movs	r2, #32
 800cd7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3758      	adds	r7, #88	@ 0x58
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdac:	e04f      	b.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb4:	d04b      	beq.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdb6:	f7f7 fe89 	bl	8004acc <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	69ba      	ldr	r2, [r7, #24]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d302      	bcc.n	800cdcc <UART_WaitOnFlagUntilTimeout+0x30>
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e04e      	b.n	800ce6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 0304 	and.w	r3, r3, #4
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d037      	beq.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b80      	cmp	r3, #128	@ 0x80
 800cde2:	d034      	beq.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b40      	cmp	r3, #64	@ 0x40
 800cde8:	d031      	beq.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	69db      	ldr	r3, [r3, #28]
 800cdf0:	f003 0308 	and.w	r3, r3, #8
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d110      	bne.n	800ce1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f000 f95b 	bl	800d0bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2208      	movs	r2, #8
 800ce0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e029      	b.n	800ce6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce28:	d111      	bne.n	800ce4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f000 f941 	bl	800d0bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2220      	movs	r2, #32
 800ce3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e00f      	b.n	800ce6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69da      	ldr	r2, [r3, #28]
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	4013      	ands	r3, r2
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	bf0c      	ite	eq
 800ce5e:	2301      	moveq	r3, #1
 800ce60:	2300      	movne	r3, #0
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	461a      	mov	r2, r3
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d0a0      	beq.n	800cdae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b0a3      	sub	sp, #140	@ 0x8c
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	88fa      	ldrh	r2, [r7, #6]
 800ce90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	88fa      	ldrh	r2, [r7, #6]
 800ce98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ceaa:	d10e      	bne.n	800ceca <UART_Start_Receive_IT+0x52>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d105      	bne.n	800cec0 <UART_Start_Receive_IT+0x48>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ceba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cebe:	e02d      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	22ff      	movs	r2, #255	@ 0xff
 800cec4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cec8:	e028      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10d      	bne.n	800ceee <UART_Start_Receive_IT+0x76>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <UART_Start_Receive_IT+0x6c>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	22ff      	movs	r2, #255	@ 0xff
 800cede:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cee2:	e01b      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	227f      	movs	r2, #127	@ 0x7f
 800cee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ceec:	e016      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cef6:	d10d      	bne.n	800cf14 <UART_Start_Receive_IT+0x9c>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d104      	bne.n	800cf0a <UART_Start_Receive_IT+0x92>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	227f      	movs	r2, #127	@ 0x7f
 800cf04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf08:	e008      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	223f      	movs	r2, #63	@ 0x3f
 800cf0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf12:	e003      	b.n	800cf1c <UART_Start_Receive_IT+0xa4>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2222      	movs	r2, #34	@ 0x22
 800cf28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3308      	adds	r3, #8
 800cf32:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cf3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf3e:	f043 0301 	orr.w	r3, r3, #1
 800cf42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cf50:	673a      	str	r2, [r7, #112]	@ 0x70
 800cf52:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cf56:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cf58:	e841 2300 	strex	r3, r2, [r1]
 800cf5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cf5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e3      	bne.n	800cf2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf6c:	d14f      	bne.n	800d00e <UART_Start_Receive_IT+0x196>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf74:	88fa      	ldrh	r2, [r7, #6]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d349      	bcc.n	800d00e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf82:	d107      	bne.n	800cf94 <UART_Start_Receive_IT+0x11c>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d103      	bne.n	800cf94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	4a47      	ldr	r2, [pc, #284]	@ (800d0ac <UART_Start_Receive_IT+0x234>)
 800cf90:	675a      	str	r2, [r3, #116]	@ 0x74
 800cf92:	e002      	b.n	800cf9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4a46      	ldr	r2, [pc, #280]	@ (800d0b0 <UART_Start_Receive_IT+0x238>)
 800cf98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d01a      	beq.n	800cfd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfaa:	e853 3f00 	ldrex	r3, [r3]
 800cfae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cfb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cfc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfc6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cfca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cfcc:	e841 2300 	strex	r3, r2, [r1]
 800cfd0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cfd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1e4      	bne.n	800cfa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe2:	e853 3f00 	ldrex	r3, [r3]
 800cfe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3308      	adds	r3, #8
 800cff6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cff8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cffa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d000:	e841 2300 	strex	r3, r2, [r1]
 800d004:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1e5      	bne.n	800cfd8 <UART_Start_Receive_IT+0x160>
 800d00c:	e046      	b.n	800d09c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d016:	d107      	bne.n	800d028 <UART_Start_Receive_IT+0x1b0>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4a24      	ldr	r2, [pc, #144]	@ (800d0b4 <UART_Start_Receive_IT+0x23c>)
 800d024:	675a      	str	r2, [r3, #116]	@ 0x74
 800d026:	e002      	b.n	800d02e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4a23      	ldr	r2, [pc, #140]	@ (800d0b8 <UART_Start_Receive_IT+0x240>)
 800d02c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d019      	beq.n	800d06a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03e:	e853 3f00 	ldrex	r3, [r3]
 800d042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d046:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d04a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	461a      	mov	r2, r3
 800d052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
 800d056:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d058:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d05a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d05c:	e841 2300 	strex	r3, r2, [r1]
 800d060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1e6      	bne.n	800d036 <UART_Start_Receive_IT+0x1be>
 800d068:	e018      	b.n	800d09c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	e853 3f00 	ldrex	r3, [r3]
 800d076:	613b      	str	r3, [r7, #16]
   return(result);
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	f043 0320 	orr.w	r3, r3, #32
 800d07e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	461a      	mov	r2, r3
 800d086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d088:	623b      	str	r3, [r7, #32]
 800d08a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08c:	69f9      	ldr	r1, [r7, #28]
 800d08e:	6a3a      	ldr	r2, [r7, #32]
 800d090:	e841 2300 	strex	r3, r2, [r1]
 800d094:	61bb      	str	r3, [r7, #24]
   return(result);
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e6      	bne.n	800d06a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	378c      	adds	r7, #140	@ 0x8c
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	0800d8dd 	.word	0x0800d8dd
 800d0b0:	0800d57d 	.word	0x0800d57d
 800d0b4:	0800d3c5 	.word	0x0800d3c5
 800d0b8:	0800d20d 	.word	0x0800d20d

0800d0bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b095      	sub	sp, #84	@ 0x54
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0cc:	e853 3f00 	ldrex	r3, [r3]
 800d0d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d0e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0ea:	e841 2300 	strex	r3, r2, [r1]
 800d0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1e6      	bne.n	800d0c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	e853 3f00 	ldrex	r3, [r3]
 800d104:	61fb      	str	r3, [r7, #28]
   return(result);
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d10c:	f023 0301 	bic.w	r3, r3, #1
 800d110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3308      	adds	r3, #8
 800d118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d11a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d11c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e3      	bne.n	800d0f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d132:	2b01      	cmp	r3, #1
 800d134:	d118      	bne.n	800d168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	e853 3f00 	ldrex	r3, [r3]
 800d142:	60bb      	str	r3, [r7, #8]
   return(result);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f023 0310 	bic.w	r3, r3, #16
 800d14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	461a      	mov	r2, r3
 800d152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d158:	6979      	ldr	r1, [r7, #20]
 800d15a:	69ba      	ldr	r2, [r7, #24]
 800d15c:	e841 2300 	strex	r3, r2, [r1]
 800d160:	613b      	str	r3, [r7, #16]
   return(result);
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e6      	bne.n	800d136 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2220      	movs	r2, #32
 800d16c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d17c:	bf00      	nop
 800d17e:	3754      	adds	r7, #84	@ 0x54
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7ff f99a 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1ac:	bf00      	nop
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	e853 3f00 	ldrex	r3, [r3]
 800d1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1d0:	61fb      	str	r3, [r7, #28]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	61bb      	str	r3, [r7, #24]
 800d1dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e6      	bne.n	800d1bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff f965 	bl	800c4cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d202:	bf00      	nop
 800d204:	3720      	adds	r7, #32
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
	...

0800d20c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b09c      	sub	sp, #112	@ 0x70
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d21a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d224:	2b22      	cmp	r3, #34	@ 0x22
 800d226:	f040 80be 	bne.w	800d3a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d230:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d238:	b2d9      	uxtb	r1, r3
 800d23a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d244:	400a      	ands	r2, r1
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3b01      	subs	r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f040 80a1 	bne.w	800d3b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d27c:	e853 3f00 	ldrex	r3, [r3]
 800d280:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	461a      	mov	r2, r3
 800d290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d292:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d294:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e6      	bne.n	800d274 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b0:	e853 3f00 	ldrex	r3, [r3]
 800d2b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b8:	f023 0301 	bic.w	r3, r3, #1
 800d2bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d2c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2ce:	e841 2300 	strex	r3, r2, [r1]
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1e5      	bne.n	800d2a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2220      	movs	r2, #32
 800d2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a33      	ldr	r2, [pc, #204]	@ (800d3c0 <UART_RxISR_8BIT+0x1b4>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d01f      	beq.n	800d338 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d018      	beq.n	800d338 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	e853 3f00 	ldrex	r3, [r3]
 800d312:	623b      	str	r3, [r7, #32]
   return(result);
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d31a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	461a      	mov	r2, r3
 800d322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d324:	633b      	str	r3, [r7, #48]	@ 0x30
 800d326:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d32c:	e841 2300 	strex	r3, r2, [r1]
 800d330:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1e6      	bne.n	800d306 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d12e      	bne.n	800d39e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	e853 3f00 	ldrex	r3, [r3]
 800d352:	60fb      	str	r3, [r7, #12]
   return(result);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0310 	bic.w	r3, r3, #16
 800d35a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	461a      	mov	r2, r3
 800d362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d364:	61fb      	str	r3, [r7, #28]
 800d366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d368:	69b9      	ldr	r1, [r7, #24]
 800d36a:	69fa      	ldr	r2, [r7, #28]
 800d36c:	e841 2300 	strex	r3, r2, [r1]
 800d370:	617b      	str	r3, [r7, #20]
   return(result);
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1e6      	bne.n	800d346 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	f003 0310 	and.w	r3, r3, #16
 800d382:	2b10      	cmp	r3, #16
 800d384:	d103      	bne.n	800d38e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2210      	movs	r2, #16
 800d38c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff f8ac 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d39c:	e00b      	b.n	800d3b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f5 fabe 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 800d3a4:	e007      	b.n	800d3b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	699a      	ldr	r2, [r3, #24]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f042 0208 	orr.w	r2, r2, #8
 800d3b4:	619a      	str	r2, [r3, #24]
}
 800d3b6:	bf00      	nop
 800d3b8:	3770      	adds	r7, #112	@ 0x70
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	40008000 	.word	0x40008000

0800d3c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b09c      	sub	sp, #112	@ 0x70
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3dc:	2b22      	cmp	r3, #34	@ 0x22
 800d3de:	f040 80be 	bne.w	800d55e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d3f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d3f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d400:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d406:	1c9a      	adds	r2, r3, #2
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d412:	b29b      	uxth	r3, r3
 800d414:	3b01      	subs	r3, #1
 800d416:	b29a      	uxth	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d424:	b29b      	uxth	r3, r3
 800d426:	2b00      	cmp	r3, #0
 800d428:	f040 80a1 	bne.w	800d56e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d43c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d440:	667b      	str	r3, [r7, #100]	@ 0x64
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d44a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d44c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d452:	e841 2300 	strex	r3, r2, [r1]
 800d456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e6      	bne.n	800d42c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3308      	adds	r3, #8
 800d464:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d468:	e853 3f00 	ldrex	r3, [r3]
 800d46c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	663b      	str	r3, [r7, #96]	@ 0x60
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d47e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d482:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d486:	e841 2300 	strex	r3, r2, [r1]
 800d48a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1e5      	bne.n	800d45e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2220      	movs	r2, #32
 800d496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a33      	ldr	r2, [pc, #204]	@ (800d578 <UART_RxISR_16BIT+0x1b4>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d01f      	beq.n	800d4f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d018      	beq.n	800d4f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d12e      	bne.n	800d556 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	e853 3f00 	ldrex	r3, [r3]
 800d50a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f023 0310 	bic.w	r3, r3, #16
 800d512:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	461a      	mov	r2, r3
 800d51a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d51c:	61bb      	str	r3, [r7, #24]
 800d51e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d520:	6979      	ldr	r1, [r7, #20]
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	e841 2300 	strex	r3, r2, [r1]
 800d528:	613b      	str	r3, [r7, #16]
   return(result);
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e6      	bne.n	800d4fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	f003 0310 	and.w	r3, r3, #16
 800d53a:	2b10      	cmp	r3, #16
 800d53c:	d103      	bne.n	800d546 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2210      	movs	r2, #16
 800d544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7fe ffd0 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d554:	e00b      	b.n	800d56e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7f5 f9e2 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 800d55c:	e007      	b.n	800d56e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	699a      	ldr	r2, [r3, #24]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f042 0208 	orr.w	r2, r2, #8
 800d56c:	619a      	str	r2, [r3, #24]
}
 800d56e:	bf00      	nop
 800d570:	3770      	adds	r7, #112	@ 0x70
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	40008000 	.word	0x40008000

0800d57c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b0ac      	sub	sp, #176	@ 0xb0
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d58a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5b2:	2b22      	cmp	r3, #34	@ 0x22
 800d5b4:	f040 8182 	bne.w	800d8bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5be:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5c2:	e125      	b.n	800d810 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d5d2:	b2d9      	uxtb	r1, r3
 800d5d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5de:	400a      	ands	r2, r1
 800d5e0:	b2d2      	uxtb	r2, r2
 800d5e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	69db      	ldr	r3, [r3, #28]
 800d606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b00      	cmp	r3, #0
 800d614:	d053      	beq.n	800d6be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d011      	beq.n	800d646 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2201      	movs	r2, #1
 800d634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d63c:	f043 0201 	orr.w	r2, r3, #1
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d011      	beq.n	800d676 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00b      	beq.n	800d676 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2202      	movs	r2, #2
 800d664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d66c:	f043 0204 	orr.w	r2, r3, #4
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d67a:	f003 0304 	and.w	r3, r3, #4
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d011      	beq.n	800d6a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00b      	beq.n	800d6a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2204      	movs	r2, #4
 800d694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d69c:	f043 0202 	orr.w	r2, r3, #2
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7fe ff15 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f040 80a2 	bne.w	800d810 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6d4:	e853 3f00 	ldrex	r3, [r3]
 800d6d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d6da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d6ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d6f0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d6f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d6f6:	e841 2300 	strex	r3, r2, [r1]
 800d6fa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d6fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1e4      	bne.n	800d6cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3308      	adds	r3, #8
 800d708:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d718:	f023 0301 	bic.w	r3, r3, #1
 800d71c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3308      	adds	r3, #8
 800d726:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d72a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d72c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d730:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d732:	e841 2300 	strex	r3, r2, [r1]
 800d736:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1e1      	bne.n	800d702 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2220      	movs	r2, #32
 800d742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a5f      	ldr	r2, [pc, #380]	@ (800d8d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d021      	beq.n	800d7a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d01a      	beq.n	800d7a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d772:	e853 3f00 	ldrex	r3, [r3]
 800d776:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d77a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d77e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d78c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d78e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d790:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d792:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d794:	e841 2300 	strex	r3, r2, [r1]
 800d798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d79a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1e4      	bne.n	800d76a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d130      	bne.n	800d80a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7be:	f023 0310 	bic.w	r3, r3, #16
 800d7c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e4      	bne.n	800d7ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	69db      	ldr	r3, [r3, #28]
 800d7ea:	f003 0310 	and.w	r3, r3, #16
 800d7ee:	2b10      	cmp	r3, #16
 800d7f0:	d103      	bne.n	800d7fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7fe fe76 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800d808:	e002      	b.n	800d810 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7f5 f888 	bl	8002920 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d810:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800d818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d81c:	f003 0320 	and.w	r3, r3, #32
 800d820:	2b00      	cmp	r3, #0
 800d822:	f47f aecf 	bne.w	800d5c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d82c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d830:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d834:	2b00      	cmp	r3, #0
 800d836:	d049      	beq.n	800d8cc <UART_RxISR_8BIT_FIFOEN+0x350>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d83e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d842:	429a      	cmp	r2, r3
 800d844:	d242      	bcs.n	800d8cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3308      	adds	r3, #8
 800d84c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84e:	6a3b      	ldr	r3, [r7, #32]
 800d850:	e853 3f00 	ldrex	r3, [r3]
 800d854:	61fb      	str	r3, [r7, #28]
   return(result);
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d85c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3308      	adds	r3, #8
 800d866:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d86a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d86c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e3      	bne.n	800d846 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a15      	ldr	r2, [pc, #84]	@ (800d8d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d882:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	e853 3f00 	ldrex	r3, [r3]
 800d890:	60bb      	str	r3, [r7, #8]
   return(result);
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f043 0320 	orr.w	r3, r3, #32
 800d898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8a6:	61bb      	str	r3, [r7, #24]
 800d8a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	6979      	ldr	r1, [r7, #20]
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e4      	bne.n	800d884 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8ba:	e007      	b.n	800d8cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f042 0208 	orr.w	r2, r2, #8
 800d8ca:	619a      	str	r2, [r3, #24]
}
 800d8cc:	bf00      	nop
 800d8ce:	37b0      	adds	r7, #176	@ 0xb0
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	40008000 	.word	0x40008000
 800d8d8:	0800d20d 	.word	0x0800d20d

0800d8dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b0ae      	sub	sp, #184	@ 0xb8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d8ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d912:	2b22      	cmp	r3, #34	@ 0x22
 800d914:	f040 8186 	bne.w	800dc24 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d91e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d922:	e129      	b.n	800db78 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d92a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d936:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d93a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d93e:	4013      	ands	r3, r2
 800d940:	b29a      	uxth	r2, r3
 800d942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d946:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d94c:	1c9a      	adds	r2, r3, #2
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d958:	b29b      	uxth	r3, r3
 800d95a:	3b01      	subs	r3, #1
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d96e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b00      	cmp	r3, #0
 800d978:	d053      	beq.n	800da22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d97a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800d986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d98a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00b      	beq.n	800d9aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2201      	movs	r2, #1
 800d998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9a0:	f043 0201 	orr.w	r2, r3, #1
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9ae:	f003 0302 	and.w	r3, r3, #2
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d011      	beq.n	800d9da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d9b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00b      	beq.n	800d9da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d0:	f043 0204 	orr.w	r2, r3, #4
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9de:	f003 0304 	and.w	r3, r3, #4
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d011      	beq.n	800da0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d9e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00b      	beq.n	800da0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2204      	movs	r2, #4
 800d9f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da00:	f043 0202 	orr.w	r2, r3, #2
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da10:	2b00      	cmp	r3, #0
 800da12:	d006      	beq.n	800da22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7fe fd63 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da28:	b29b      	uxth	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f040 80a4 	bne.w	800db78 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da56:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800da5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da5e:	e841 2300 	strex	r3, r2, [r1]
 800da62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800da64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1e2      	bne.n	800da30 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800da7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da80:	f023 0301 	bic.w	r3, r3, #1
 800da84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3308      	adds	r3, #8
 800da8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800da92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800da94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800da98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800da9a:	e841 2300 	strex	r3, r2, [r1]
 800da9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800daa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1e1      	bne.n	800da6a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2220      	movs	r2, #32
 800daaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a5f      	ldr	r2, [pc, #380]	@ (800dc3c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d021      	beq.n	800db08 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01a      	beq.n	800db08 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dada:	e853 3f00 	ldrex	r3, [r3]
 800dade:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800daf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800daf6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dafa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dafc:	e841 2300 	strex	r3, r2, [r1]
 800db00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1e4      	bne.n	800dad2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d130      	bne.n	800db72 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	e853 3f00 	ldrex	r3, [r3]
 800db22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db26:	f023 0310 	bic.w	r3, r3, #16
 800db2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db38:	647b      	str	r3, [r7, #68]	@ 0x44
 800db3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e4      	bne.n	800db16 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	f003 0310 	and.w	r3, r3, #16
 800db56:	2b10      	cmp	r3, #16
 800db58:	d103      	bne.n	800db62 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2210      	movs	r2, #16
 800db60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7fe fcc2 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800db70:	e002      	b.n	800db78 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f4 fed4 	bl	8002920 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d006      	beq.n	800db8e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800db80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800db84:	f003 0320 	and.w	r3, r3, #32
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f47f aecb 	bne.w	800d924 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db94:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800db98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d049      	beq.n	800dc34 <UART_RxISR_16BIT_FIFOEN+0x358>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dba6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d242      	bcs.n	800dc34 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3308      	adds	r3, #8
 800dbb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb8:	e853 3f00 	ldrex	r3, [r3]
 800dbbc:	623b      	str	r3, [r7, #32]
   return(result);
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3308      	adds	r3, #8
 800dbce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dbd2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbda:	e841 2300 	strex	r3, r2, [r1]
 800dbde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1e3      	bne.n	800dbae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a15      	ldr	r2, [pc, #84]	@ (800dc40 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dbea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	e853 3f00 	ldrex	r3, [r3]
 800dbf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f043 0320 	orr.w	r3, r3, #32
 800dc00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc0e:	61fb      	str	r3, [r7, #28]
 800dc10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc12:	69b9      	ldr	r1, [r7, #24]
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	e841 2300 	strex	r3, r2, [r1]
 800dc1a:	617b      	str	r3, [r7, #20]
   return(result);
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1e4      	bne.n	800dbec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc22:	e007      	b.n	800dc34 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	699a      	ldr	r2, [r3, #24]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f042 0208 	orr.w	r2, r2, #8
 800dc32:	619a      	str	r2, [r3, #24]
}
 800dc34:	bf00      	nop
 800dc36:	37b8      	adds	r7, #184	@ 0xb8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	40008000 	.word	0x40008000
 800dc40:	0800d3c5 	.word	0x0800d3c5

0800dc44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d101      	bne.n	800dc96 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc92:	2302      	movs	r3, #2
 800dc94:	e027      	b.n	800dce6 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2224      	movs	r2, #36	@ 0x24
 800dca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f022 0201 	bic.w	r2, r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dcc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d101      	bne.n	800dd0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd06:	2302      	movs	r3, #2
 800dd08:	e02d      	b.n	800dd66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2224      	movs	r2, #36	@ 0x24
 800dd16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f022 0201 	bic.w	r2, r2, #1
 800dd30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	683a      	ldr	r2, [r7, #0]
 800dd42:	430a      	orrs	r2, r1
 800dd44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f850 	bl	800ddec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2220      	movs	r2, #32
 800dd58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d101      	bne.n	800dd86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd82:	2302      	movs	r3, #2
 800dd84:	e02d      	b.n	800dde2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2224      	movs	r2, #36	@ 0x24
 800dd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f022 0201 	bic.w	r2, r2, #1
 800ddac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f812 	bl	800ddec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d108      	bne.n	800de0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de0c:	e031      	b.n	800de72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de0e:	2308      	movs	r3, #8
 800de10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de12:	2308      	movs	r3, #8
 800de14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	0e5b      	lsrs	r3, r3, #25
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	f003 0307 	and.w	r3, r3, #7
 800de24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	0f5b      	lsrs	r3, r3, #29
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	f003 0307 	and.w	r3, r3, #7
 800de34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de36:	7bbb      	ldrb	r3, [r7, #14]
 800de38:	7b3a      	ldrb	r2, [r7, #12]
 800de3a:	4911      	ldr	r1, [pc, #68]	@ (800de80 <UARTEx_SetNbDataToProcess+0x94>)
 800de3c:	5c8a      	ldrb	r2, [r1, r2]
 800de3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de42:	7b3a      	ldrb	r2, [r7, #12]
 800de44:	490f      	ldr	r1, [pc, #60]	@ (800de84 <UARTEx_SetNbDataToProcess+0x98>)
 800de46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de48:	fb93 f3f2 	sdiv	r3, r3, r2
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	7b7a      	ldrb	r2, [r7, #13]
 800de58:	4909      	ldr	r1, [pc, #36]	@ (800de80 <UARTEx_SetNbDataToProcess+0x94>)
 800de5a:	5c8a      	ldrb	r2, [r1, r2]
 800de5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de60:	7b7a      	ldrb	r2, [r7, #13]
 800de62:	4908      	ldr	r1, [pc, #32]	@ (800de84 <UARTEx_SetNbDataToProcess+0x98>)
 800de64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de66:	fb93 f3f2 	sdiv	r3, r3, r2
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800de72:	bf00      	nop
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	0800e90c 	.word	0x0800e90c
 800de84:	0800e914 	.word	0x0800e914

0800de88 <siprintf>:
 800de88:	b40e      	push	{r1, r2, r3}
 800de8a:	b500      	push	{lr}
 800de8c:	b09c      	sub	sp, #112	@ 0x70
 800de8e:	ab1d      	add	r3, sp, #116	@ 0x74
 800de90:	9002      	str	r0, [sp, #8]
 800de92:	9006      	str	r0, [sp, #24]
 800de94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de98:	4809      	ldr	r0, [pc, #36]	@ (800dec0 <siprintf+0x38>)
 800de9a:	9107      	str	r1, [sp, #28]
 800de9c:	9104      	str	r1, [sp, #16]
 800de9e:	4909      	ldr	r1, [pc, #36]	@ (800dec4 <siprintf+0x3c>)
 800dea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea4:	9105      	str	r1, [sp, #20]
 800dea6:	6800      	ldr	r0, [r0, #0]
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	a902      	add	r1, sp, #8
 800deac:	f000 f9a8 	bl	800e200 <_svfiprintf_r>
 800deb0:	9b02      	ldr	r3, [sp, #8]
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	b01c      	add	sp, #112	@ 0x70
 800deb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800debc:	b003      	add	sp, #12
 800debe:	4770      	bx	lr
 800dec0:	20000048 	.word	0x20000048
 800dec4:	ffff0208 	.word	0xffff0208

0800dec8 <memset>:
 800dec8:	4402      	add	r2, r0
 800deca:	4603      	mov	r3, r0
 800decc:	4293      	cmp	r3, r2
 800dece:	d100      	bne.n	800ded2 <memset+0xa>
 800ded0:	4770      	bx	lr
 800ded2:	f803 1b01 	strb.w	r1, [r3], #1
 800ded6:	e7f9      	b.n	800decc <memset+0x4>

0800ded8 <strncpy>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	3901      	subs	r1, #1
 800dedc:	4603      	mov	r3, r0
 800dede:	b132      	cbz	r2, 800deee <strncpy+0x16>
 800dee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dee4:	f803 4b01 	strb.w	r4, [r3], #1
 800dee8:	3a01      	subs	r2, #1
 800deea:	2c00      	cmp	r4, #0
 800deec:	d1f7      	bne.n	800dede <strncpy+0x6>
 800deee:	441a      	add	r2, r3
 800def0:	2100      	movs	r1, #0
 800def2:	4293      	cmp	r3, r2
 800def4:	d100      	bne.n	800def8 <strncpy+0x20>
 800def6:	bd10      	pop	{r4, pc}
 800def8:	f803 1b01 	strb.w	r1, [r3], #1
 800defc:	e7f9      	b.n	800def2 <strncpy+0x1a>
	...

0800df00 <__errno>:
 800df00:	4b01      	ldr	r3, [pc, #4]	@ (800df08 <__errno+0x8>)
 800df02:	6818      	ldr	r0, [r3, #0]
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	20000048 	.word	0x20000048

0800df0c <__libc_init_array>:
 800df0c:	b570      	push	{r4, r5, r6, lr}
 800df0e:	4d0d      	ldr	r5, [pc, #52]	@ (800df44 <__libc_init_array+0x38>)
 800df10:	4c0d      	ldr	r4, [pc, #52]	@ (800df48 <__libc_init_array+0x3c>)
 800df12:	1b64      	subs	r4, r4, r5
 800df14:	10a4      	asrs	r4, r4, #2
 800df16:	2600      	movs	r6, #0
 800df18:	42a6      	cmp	r6, r4
 800df1a:	d109      	bne.n	800df30 <__libc_init_array+0x24>
 800df1c:	4d0b      	ldr	r5, [pc, #44]	@ (800df4c <__libc_init_array+0x40>)
 800df1e:	4c0c      	ldr	r4, [pc, #48]	@ (800df50 <__libc_init_array+0x44>)
 800df20:	f000 fc66 	bl	800e7f0 <_init>
 800df24:	1b64      	subs	r4, r4, r5
 800df26:	10a4      	asrs	r4, r4, #2
 800df28:	2600      	movs	r6, #0
 800df2a:	42a6      	cmp	r6, r4
 800df2c:	d105      	bne.n	800df3a <__libc_init_array+0x2e>
 800df2e:	bd70      	pop	{r4, r5, r6, pc}
 800df30:	f855 3b04 	ldr.w	r3, [r5], #4
 800df34:	4798      	blx	r3
 800df36:	3601      	adds	r6, #1
 800df38:	e7ee      	b.n	800df18 <__libc_init_array+0xc>
 800df3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800df3e:	4798      	blx	r3
 800df40:	3601      	adds	r6, #1
 800df42:	e7f2      	b.n	800df2a <__libc_init_array+0x1e>
 800df44:	0800e958 	.word	0x0800e958
 800df48:	0800e958 	.word	0x0800e958
 800df4c:	0800e958 	.word	0x0800e958
 800df50:	0800e95c 	.word	0x0800e95c

0800df54 <__retarget_lock_acquire_recursive>:
 800df54:	4770      	bx	lr

0800df56 <__retarget_lock_release_recursive>:
 800df56:	4770      	bx	lr

0800df58 <_free_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4605      	mov	r5, r0
 800df5c:	2900      	cmp	r1, #0
 800df5e:	d041      	beq.n	800dfe4 <_free_r+0x8c>
 800df60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df64:	1f0c      	subs	r4, r1, #4
 800df66:	2b00      	cmp	r3, #0
 800df68:	bfb8      	it	lt
 800df6a:	18e4      	addlt	r4, r4, r3
 800df6c:	f000 f8e0 	bl	800e130 <__malloc_lock>
 800df70:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe8 <_free_r+0x90>)
 800df72:	6813      	ldr	r3, [r2, #0]
 800df74:	b933      	cbnz	r3, 800df84 <_free_r+0x2c>
 800df76:	6063      	str	r3, [r4, #4]
 800df78:	6014      	str	r4, [r2, #0]
 800df7a:	4628      	mov	r0, r5
 800df7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df80:	f000 b8dc 	b.w	800e13c <__malloc_unlock>
 800df84:	42a3      	cmp	r3, r4
 800df86:	d908      	bls.n	800df9a <_free_r+0x42>
 800df88:	6820      	ldr	r0, [r4, #0]
 800df8a:	1821      	adds	r1, r4, r0
 800df8c:	428b      	cmp	r3, r1
 800df8e:	bf01      	itttt	eq
 800df90:	6819      	ldreq	r1, [r3, #0]
 800df92:	685b      	ldreq	r3, [r3, #4]
 800df94:	1809      	addeq	r1, r1, r0
 800df96:	6021      	streq	r1, [r4, #0]
 800df98:	e7ed      	b.n	800df76 <_free_r+0x1e>
 800df9a:	461a      	mov	r2, r3
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	b10b      	cbz	r3, 800dfa4 <_free_r+0x4c>
 800dfa0:	42a3      	cmp	r3, r4
 800dfa2:	d9fa      	bls.n	800df9a <_free_r+0x42>
 800dfa4:	6811      	ldr	r1, [r2, #0]
 800dfa6:	1850      	adds	r0, r2, r1
 800dfa8:	42a0      	cmp	r0, r4
 800dfaa:	d10b      	bne.n	800dfc4 <_free_r+0x6c>
 800dfac:	6820      	ldr	r0, [r4, #0]
 800dfae:	4401      	add	r1, r0
 800dfb0:	1850      	adds	r0, r2, r1
 800dfb2:	4283      	cmp	r3, r0
 800dfb4:	6011      	str	r1, [r2, #0]
 800dfb6:	d1e0      	bne.n	800df7a <_free_r+0x22>
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	6053      	str	r3, [r2, #4]
 800dfbe:	4408      	add	r0, r1
 800dfc0:	6010      	str	r0, [r2, #0]
 800dfc2:	e7da      	b.n	800df7a <_free_r+0x22>
 800dfc4:	d902      	bls.n	800dfcc <_free_r+0x74>
 800dfc6:	230c      	movs	r3, #12
 800dfc8:	602b      	str	r3, [r5, #0]
 800dfca:	e7d6      	b.n	800df7a <_free_r+0x22>
 800dfcc:	6820      	ldr	r0, [r4, #0]
 800dfce:	1821      	adds	r1, r4, r0
 800dfd0:	428b      	cmp	r3, r1
 800dfd2:	bf04      	itt	eq
 800dfd4:	6819      	ldreq	r1, [r3, #0]
 800dfd6:	685b      	ldreq	r3, [r3, #4]
 800dfd8:	6063      	str	r3, [r4, #4]
 800dfda:	bf04      	itt	eq
 800dfdc:	1809      	addeq	r1, r1, r0
 800dfde:	6021      	streq	r1, [r4, #0]
 800dfe0:	6054      	str	r4, [r2, #4]
 800dfe2:	e7ca      	b.n	800df7a <_free_r+0x22>
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000da8 	.word	0x20000da8

0800dfec <sbrk_aligned>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	4e0f      	ldr	r6, [pc, #60]	@ (800e02c <sbrk_aligned+0x40>)
 800dff0:	460c      	mov	r4, r1
 800dff2:	6831      	ldr	r1, [r6, #0]
 800dff4:	4605      	mov	r5, r0
 800dff6:	b911      	cbnz	r1, 800dffe <sbrk_aligned+0x12>
 800dff8:	f000 fba6 	bl	800e748 <_sbrk_r>
 800dffc:	6030      	str	r0, [r6, #0]
 800dffe:	4621      	mov	r1, r4
 800e000:	4628      	mov	r0, r5
 800e002:	f000 fba1 	bl	800e748 <_sbrk_r>
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	d103      	bne.n	800e012 <sbrk_aligned+0x26>
 800e00a:	f04f 34ff 	mov.w	r4, #4294967295
 800e00e:	4620      	mov	r0, r4
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	1cc4      	adds	r4, r0, #3
 800e014:	f024 0403 	bic.w	r4, r4, #3
 800e018:	42a0      	cmp	r0, r4
 800e01a:	d0f8      	beq.n	800e00e <sbrk_aligned+0x22>
 800e01c:	1a21      	subs	r1, r4, r0
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 fb92 	bl	800e748 <_sbrk_r>
 800e024:	3001      	adds	r0, #1
 800e026:	d1f2      	bne.n	800e00e <sbrk_aligned+0x22>
 800e028:	e7ef      	b.n	800e00a <sbrk_aligned+0x1e>
 800e02a:	bf00      	nop
 800e02c:	20000da4 	.word	0x20000da4

0800e030 <_malloc_r>:
 800e030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e034:	1ccd      	adds	r5, r1, #3
 800e036:	f025 0503 	bic.w	r5, r5, #3
 800e03a:	3508      	adds	r5, #8
 800e03c:	2d0c      	cmp	r5, #12
 800e03e:	bf38      	it	cc
 800e040:	250c      	movcc	r5, #12
 800e042:	2d00      	cmp	r5, #0
 800e044:	4606      	mov	r6, r0
 800e046:	db01      	blt.n	800e04c <_malloc_r+0x1c>
 800e048:	42a9      	cmp	r1, r5
 800e04a:	d904      	bls.n	800e056 <_malloc_r+0x26>
 800e04c:	230c      	movs	r3, #12
 800e04e:	6033      	str	r3, [r6, #0]
 800e050:	2000      	movs	r0, #0
 800e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e12c <_malloc_r+0xfc>
 800e05a:	f000 f869 	bl	800e130 <__malloc_lock>
 800e05e:	f8d8 3000 	ldr.w	r3, [r8]
 800e062:	461c      	mov	r4, r3
 800e064:	bb44      	cbnz	r4, 800e0b8 <_malloc_r+0x88>
 800e066:	4629      	mov	r1, r5
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff ffbf 	bl	800dfec <sbrk_aligned>
 800e06e:	1c43      	adds	r3, r0, #1
 800e070:	4604      	mov	r4, r0
 800e072:	d158      	bne.n	800e126 <_malloc_r+0xf6>
 800e074:	f8d8 4000 	ldr.w	r4, [r8]
 800e078:	4627      	mov	r7, r4
 800e07a:	2f00      	cmp	r7, #0
 800e07c:	d143      	bne.n	800e106 <_malloc_r+0xd6>
 800e07e:	2c00      	cmp	r4, #0
 800e080:	d04b      	beq.n	800e11a <_malloc_r+0xea>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	4639      	mov	r1, r7
 800e086:	4630      	mov	r0, r6
 800e088:	eb04 0903 	add.w	r9, r4, r3
 800e08c:	f000 fb5c 	bl	800e748 <_sbrk_r>
 800e090:	4581      	cmp	r9, r0
 800e092:	d142      	bne.n	800e11a <_malloc_r+0xea>
 800e094:	6821      	ldr	r1, [r4, #0]
 800e096:	1a6d      	subs	r5, r5, r1
 800e098:	4629      	mov	r1, r5
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7ff ffa6 	bl	800dfec <sbrk_aligned>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d03a      	beq.n	800e11a <_malloc_r+0xea>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	442b      	add	r3, r5
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	bb62      	cbnz	r2, 800e10c <_malloc_r+0xdc>
 800e0b2:	f8c8 7000 	str.w	r7, [r8]
 800e0b6:	e00f      	b.n	800e0d8 <_malloc_r+0xa8>
 800e0b8:	6822      	ldr	r2, [r4, #0]
 800e0ba:	1b52      	subs	r2, r2, r5
 800e0bc:	d420      	bmi.n	800e100 <_malloc_r+0xd0>
 800e0be:	2a0b      	cmp	r2, #11
 800e0c0:	d917      	bls.n	800e0f2 <_malloc_r+0xc2>
 800e0c2:	1961      	adds	r1, r4, r5
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	6025      	str	r5, [r4, #0]
 800e0c8:	bf18      	it	ne
 800e0ca:	6059      	strne	r1, [r3, #4]
 800e0cc:	6863      	ldr	r3, [r4, #4]
 800e0ce:	bf08      	it	eq
 800e0d0:	f8c8 1000 	streq.w	r1, [r8]
 800e0d4:	5162      	str	r2, [r4, r5]
 800e0d6:	604b      	str	r3, [r1, #4]
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f000 f82f 	bl	800e13c <__malloc_unlock>
 800e0de:	f104 000b 	add.w	r0, r4, #11
 800e0e2:	1d23      	adds	r3, r4, #4
 800e0e4:	f020 0007 	bic.w	r0, r0, #7
 800e0e8:	1ac2      	subs	r2, r0, r3
 800e0ea:	bf1c      	itt	ne
 800e0ec:	1a1b      	subne	r3, r3, r0
 800e0ee:	50a3      	strne	r3, [r4, r2]
 800e0f0:	e7af      	b.n	800e052 <_malloc_r+0x22>
 800e0f2:	6862      	ldr	r2, [r4, #4]
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	bf0c      	ite	eq
 800e0f8:	f8c8 2000 	streq.w	r2, [r8]
 800e0fc:	605a      	strne	r2, [r3, #4]
 800e0fe:	e7eb      	b.n	800e0d8 <_malloc_r+0xa8>
 800e100:	4623      	mov	r3, r4
 800e102:	6864      	ldr	r4, [r4, #4]
 800e104:	e7ae      	b.n	800e064 <_malloc_r+0x34>
 800e106:	463c      	mov	r4, r7
 800e108:	687f      	ldr	r7, [r7, #4]
 800e10a:	e7b6      	b.n	800e07a <_malloc_r+0x4a>
 800e10c:	461a      	mov	r2, r3
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	42a3      	cmp	r3, r4
 800e112:	d1fb      	bne.n	800e10c <_malloc_r+0xdc>
 800e114:	2300      	movs	r3, #0
 800e116:	6053      	str	r3, [r2, #4]
 800e118:	e7de      	b.n	800e0d8 <_malloc_r+0xa8>
 800e11a:	230c      	movs	r3, #12
 800e11c:	6033      	str	r3, [r6, #0]
 800e11e:	4630      	mov	r0, r6
 800e120:	f000 f80c 	bl	800e13c <__malloc_unlock>
 800e124:	e794      	b.n	800e050 <_malloc_r+0x20>
 800e126:	6005      	str	r5, [r0, #0]
 800e128:	e7d6      	b.n	800e0d8 <_malloc_r+0xa8>
 800e12a:	bf00      	nop
 800e12c:	20000da8 	.word	0x20000da8

0800e130 <__malloc_lock>:
 800e130:	4801      	ldr	r0, [pc, #4]	@ (800e138 <__malloc_lock+0x8>)
 800e132:	f7ff bf0f 	b.w	800df54 <__retarget_lock_acquire_recursive>
 800e136:	bf00      	nop
 800e138:	20000da0 	.word	0x20000da0

0800e13c <__malloc_unlock>:
 800e13c:	4801      	ldr	r0, [pc, #4]	@ (800e144 <__malloc_unlock+0x8>)
 800e13e:	f7ff bf0a 	b.w	800df56 <__retarget_lock_release_recursive>
 800e142:	bf00      	nop
 800e144:	20000da0 	.word	0x20000da0

0800e148 <__ssputs_r>:
 800e148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e14c:	688e      	ldr	r6, [r1, #8]
 800e14e:	461f      	mov	r7, r3
 800e150:	42be      	cmp	r6, r7
 800e152:	680b      	ldr	r3, [r1, #0]
 800e154:	4682      	mov	sl, r0
 800e156:	460c      	mov	r4, r1
 800e158:	4690      	mov	r8, r2
 800e15a:	d82d      	bhi.n	800e1b8 <__ssputs_r+0x70>
 800e15c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e164:	d026      	beq.n	800e1b4 <__ssputs_r+0x6c>
 800e166:	6965      	ldr	r5, [r4, #20]
 800e168:	6909      	ldr	r1, [r1, #16]
 800e16a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e16e:	eba3 0901 	sub.w	r9, r3, r1
 800e172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e176:	1c7b      	adds	r3, r7, #1
 800e178:	444b      	add	r3, r9
 800e17a:	106d      	asrs	r5, r5, #1
 800e17c:	429d      	cmp	r5, r3
 800e17e:	bf38      	it	cc
 800e180:	461d      	movcc	r5, r3
 800e182:	0553      	lsls	r3, r2, #21
 800e184:	d527      	bpl.n	800e1d6 <__ssputs_r+0x8e>
 800e186:	4629      	mov	r1, r5
 800e188:	f7ff ff52 	bl	800e030 <_malloc_r>
 800e18c:	4606      	mov	r6, r0
 800e18e:	b360      	cbz	r0, 800e1ea <__ssputs_r+0xa2>
 800e190:	6921      	ldr	r1, [r4, #16]
 800e192:	464a      	mov	r2, r9
 800e194:	f000 fae8 	bl	800e768 <memcpy>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	6126      	str	r6, [r4, #16]
 800e1a6:	6165      	str	r5, [r4, #20]
 800e1a8:	444e      	add	r6, r9
 800e1aa:	eba5 0509 	sub.w	r5, r5, r9
 800e1ae:	6026      	str	r6, [r4, #0]
 800e1b0:	60a5      	str	r5, [r4, #8]
 800e1b2:	463e      	mov	r6, r7
 800e1b4:	42be      	cmp	r6, r7
 800e1b6:	d900      	bls.n	800e1ba <__ssputs_r+0x72>
 800e1b8:	463e      	mov	r6, r7
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	4632      	mov	r2, r6
 800e1be:	4641      	mov	r1, r8
 800e1c0:	f000 faa8 	bl	800e714 <memmove>
 800e1c4:	68a3      	ldr	r3, [r4, #8]
 800e1c6:	1b9b      	subs	r3, r3, r6
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	4433      	add	r3, r6
 800e1ce:	6023      	str	r3, [r4, #0]
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	f000 fad4 	bl	800e784 <_realloc_r>
 800e1dc:	4606      	mov	r6, r0
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d1e0      	bne.n	800e1a4 <__ssputs_r+0x5c>
 800e1e2:	6921      	ldr	r1, [r4, #16]
 800e1e4:	4650      	mov	r0, sl
 800e1e6:	f7ff feb7 	bl	800df58 <_free_r>
 800e1ea:	230c      	movs	r3, #12
 800e1ec:	f8ca 3000 	str.w	r3, [sl]
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1f6:	81a3      	strh	r3, [r4, #12]
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	e7e9      	b.n	800e1d2 <__ssputs_r+0x8a>
	...

0800e200 <_svfiprintf_r>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4698      	mov	r8, r3
 800e206:	898b      	ldrh	r3, [r1, #12]
 800e208:	061b      	lsls	r3, r3, #24
 800e20a:	b09d      	sub	sp, #116	@ 0x74
 800e20c:	4607      	mov	r7, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	4614      	mov	r4, r2
 800e212:	d510      	bpl.n	800e236 <_svfiprintf_r+0x36>
 800e214:	690b      	ldr	r3, [r1, #16]
 800e216:	b973      	cbnz	r3, 800e236 <_svfiprintf_r+0x36>
 800e218:	2140      	movs	r1, #64	@ 0x40
 800e21a:	f7ff ff09 	bl	800e030 <_malloc_r>
 800e21e:	6028      	str	r0, [r5, #0]
 800e220:	6128      	str	r0, [r5, #16]
 800e222:	b930      	cbnz	r0, 800e232 <_svfiprintf_r+0x32>
 800e224:	230c      	movs	r3, #12
 800e226:	603b      	str	r3, [r7, #0]
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	b01d      	add	sp, #116	@ 0x74
 800e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	2340      	movs	r3, #64	@ 0x40
 800e234:	616b      	str	r3, [r5, #20]
 800e236:	2300      	movs	r3, #0
 800e238:	9309      	str	r3, [sp, #36]	@ 0x24
 800e23a:	2320      	movs	r3, #32
 800e23c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e240:	f8cd 800c 	str.w	r8, [sp, #12]
 800e244:	2330      	movs	r3, #48	@ 0x30
 800e246:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3e4 <_svfiprintf_r+0x1e4>
 800e24a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e24e:	f04f 0901 	mov.w	r9, #1
 800e252:	4623      	mov	r3, r4
 800e254:	469a      	mov	sl, r3
 800e256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e25a:	b10a      	cbz	r2, 800e260 <_svfiprintf_r+0x60>
 800e25c:	2a25      	cmp	r2, #37	@ 0x25
 800e25e:	d1f9      	bne.n	800e254 <_svfiprintf_r+0x54>
 800e260:	ebba 0b04 	subs.w	fp, sl, r4
 800e264:	d00b      	beq.n	800e27e <_svfiprintf_r+0x7e>
 800e266:	465b      	mov	r3, fp
 800e268:	4622      	mov	r2, r4
 800e26a:	4629      	mov	r1, r5
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7ff ff6b 	bl	800e148 <__ssputs_r>
 800e272:	3001      	adds	r0, #1
 800e274:	f000 80a7 	beq.w	800e3c6 <_svfiprintf_r+0x1c6>
 800e278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e27a:	445a      	add	r2, fp
 800e27c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e27e:	f89a 3000 	ldrb.w	r3, [sl]
 800e282:	2b00      	cmp	r3, #0
 800e284:	f000 809f 	beq.w	800e3c6 <_svfiprintf_r+0x1c6>
 800e288:	2300      	movs	r3, #0
 800e28a:	f04f 32ff 	mov.w	r2, #4294967295
 800e28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e292:	f10a 0a01 	add.w	sl, sl, #1
 800e296:	9304      	str	r3, [sp, #16]
 800e298:	9307      	str	r3, [sp, #28]
 800e29a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e29e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2a0:	4654      	mov	r4, sl
 800e2a2:	2205      	movs	r2, #5
 800e2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a8:	484e      	ldr	r0, [pc, #312]	@ (800e3e4 <_svfiprintf_r+0x1e4>)
 800e2aa:	f7f1 ffc1 	bl	8000230 <memchr>
 800e2ae:	9a04      	ldr	r2, [sp, #16]
 800e2b0:	b9d8      	cbnz	r0, 800e2ea <_svfiprintf_r+0xea>
 800e2b2:	06d0      	lsls	r0, r2, #27
 800e2b4:	bf44      	itt	mi
 800e2b6:	2320      	movmi	r3, #32
 800e2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2bc:	0711      	lsls	r1, r2, #28
 800e2be:	bf44      	itt	mi
 800e2c0:	232b      	movmi	r3, #43	@ 0x2b
 800e2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2cc:	d015      	beq.n	800e2fa <_svfiprintf_r+0xfa>
 800e2ce:	9a07      	ldr	r2, [sp, #28]
 800e2d0:	4654      	mov	r4, sl
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	f04f 0c0a 	mov.w	ip, #10
 800e2d8:	4621      	mov	r1, r4
 800e2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2de:	3b30      	subs	r3, #48	@ 0x30
 800e2e0:	2b09      	cmp	r3, #9
 800e2e2:	d94b      	bls.n	800e37c <_svfiprintf_r+0x17c>
 800e2e4:	b1b0      	cbz	r0, 800e314 <_svfiprintf_r+0x114>
 800e2e6:	9207      	str	r2, [sp, #28]
 800e2e8:	e014      	b.n	800e314 <_svfiprintf_r+0x114>
 800e2ea:	eba0 0308 	sub.w	r3, r0, r8
 800e2ee:	fa09 f303 	lsl.w	r3, r9, r3
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	9304      	str	r3, [sp, #16]
 800e2f6:	46a2      	mov	sl, r4
 800e2f8:	e7d2      	b.n	800e2a0 <_svfiprintf_r+0xa0>
 800e2fa:	9b03      	ldr	r3, [sp, #12]
 800e2fc:	1d19      	adds	r1, r3, #4
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	9103      	str	r1, [sp, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	bfbb      	ittet	lt
 800e306:	425b      	neglt	r3, r3
 800e308:	f042 0202 	orrlt.w	r2, r2, #2
 800e30c:	9307      	strge	r3, [sp, #28]
 800e30e:	9307      	strlt	r3, [sp, #28]
 800e310:	bfb8      	it	lt
 800e312:	9204      	strlt	r2, [sp, #16]
 800e314:	7823      	ldrb	r3, [r4, #0]
 800e316:	2b2e      	cmp	r3, #46	@ 0x2e
 800e318:	d10a      	bne.n	800e330 <_svfiprintf_r+0x130>
 800e31a:	7863      	ldrb	r3, [r4, #1]
 800e31c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e31e:	d132      	bne.n	800e386 <_svfiprintf_r+0x186>
 800e320:	9b03      	ldr	r3, [sp, #12]
 800e322:	1d1a      	adds	r2, r3, #4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	9203      	str	r2, [sp, #12]
 800e328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e32c:	3402      	adds	r4, #2
 800e32e:	9305      	str	r3, [sp, #20]
 800e330:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3f4 <_svfiprintf_r+0x1f4>
 800e334:	7821      	ldrb	r1, [r4, #0]
 800e336:	2203      	movs	r2, #3
 800e338:	4650      	mov	r0, sl
 800e33a:	f7f1 ff79 	bl	8000230 <memchr>
 800e33e:	b138      	cbz	r0, 800e350 <_svfiprintf_r+0x150>
 800e340:	9b04      	ldr	r3, [sp, #16]
 800e342:	eba0 000a 	sub.w	r0, r0, sl
 800e346:	2240      	movs	r2, #64	@ 0x40
 800e348:	4082      	lsls	r2, r0
 800e34a:	4313      	orrs	r3, r2
 800e34c:	3401      	adds	r4, #1
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e354:	4824      	ldr	r0, [pc, #144]	@ (800e3e8 <_svfiprintf_r+0x1e8>)
 800e356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e35a:	2206      	movs	r2, #6
 800e35c:	f7f1 ff68 	bl	8000230 <memchr>
 800e360:	2800      	cmp	r0, #0
 800e362:	d036      	beq.n	800e3d2 <_svfiprintf_r+0x1d2>
 800e364:	4b21      	ldr	r3, [pc, #132]	@ (800e3ec <_svfiprintf_r+0x1ec>)
 800e366:	bb1b      	cbnz	r3, 800e3b0 <_svfiprintf_r+0x1b0>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	3307      	adds	r3, #7
 800e36c:	f023 0307 	bic.w	r3, r3, #7
 800e370:	3308      	adds	r3, #8
 800e372:	9303      	str	r3, [sp, #12]
 800e374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e376:	4433      	add	r3, r6
 800e378:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37a:	e76a      	b.n	800e252 <_svfiprintf_r+0x52>
 800e37c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e380:	460c      	mov	r4, r1
 800e382:	2001      	movs	r0, #1
 800e384:	e7a8      	b.n	800e2d8 <_svfiprintf_r+0xd8>
 800e386:	2300      	movs	r3, #0
 800e388:	3401      	adds	r4, #1
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	4619      	mov	r1, r3
 800e38e:	f04f 0c0a 	mov.w	ip, #10
 800e392:	4620      	mov	r0, r4
 800e394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e398:	3a30      	subs	r2, #48	@ 0x30
 800e39a:	2a09      	cmp	r2, #9
 800e39c:	d903      	bls.n	800e3a6 <_svfiprintf_r+0x1a6>
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0c6      	beq.n	800e330 <_svfiprintf_r+0x130>
 800e3a2:	9105      	str	r1, [sp, #20]
 800e3a4:	e7c4      	b.n	800e330 <_svfiprintf_r+0x130>
 800e3a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e7f0      	b.n	800e392 <_svfiprintf_r+0x192>
 800e3b0:	ab03      	add	r3, sp, #12
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	462a      	mov	r2, r5
 800e3b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f0 <_svfiprintf_r+0x1f0>)
 800e3b8:	a904      	add	r1, sp, #16
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	1c42      	adds	r2, r0, #1
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	d1d6      	bne.n	800e374 <_svfiprintf_r+0x174>
 800e3c6:	89ab      	ldrh	r3, [r5, #12]
 800e3c8:	065b      	lsls	r3, r3, #25
 800e3ca:	f53f af2d 	bmi.w	800e228 <_svfiprintf_r+0x28>
 800e3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3d0:	e72c      	b.n	800e22c <_svfiprintf_r+0x2c>
 800e3d2:	ab03      	add	r3, sp, #12
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	462a      	mov	r2, r5
 800e3d8:	4b05      	ldr	r3, [pc, #20]	@ (800e3f0 <_svfiprintf_r+0x1f0>)
 800e3da:	a904      	add	r1, sp, #16
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f000 f879 	bl	800e4d4 <_printf_i>
 800e3e2:	e7ed      	b.n	800e3c0 <_svfiprintf_r+0x1c0>
 800e3e4:	0800e91c 	.word	0x0800e91c
 800e3e8:	0800e926 	.word	0x0800e926
 800e3ec:	00000000 	.word	0x00000000
 800e3f0:	0800e149 	.word	0x0800e149
 800e3f4:	0800e922 	.word	0x0800e922

0800e3f8 <_printf_common>:
 800e3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fc:	4616      	mov	r6, r2
 800e3fe:	4698      	mov	r8, r3
 800e400:	688a      	ldr	r2, [r1, #8]
 800e402:	690b      	ldr	r3, [r1, #16]
 800e404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e408:	4293      	cmp	r3, r2
 800e40a:	bfb8      	it	lt
 800e40c:	4613      	movlt	r3, r2
 800e40e:	6033      	str	r3, [r6, #0]
 800e410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e414:	4607      	mov	r7, r0
 800e416:	460c      	mov	r4, r1
 800e418:	b10a      	cbz	r2, 800e41e <_printf_common+0x26>
 800e41a:	3301      	adds	r3, #1
 800e41c:	6033      	str	r3, [r6, #0]
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	0699      	lsls	r1, r3, #26
 800e422:	bf42      	ittt	mi
 800e424:	6833      	ldrmi	r3, [r6, #0]
 800e426:	3302      	addmi	r3, #2
 800e428:	6033      	strmi	r3, [r6, #0]
 800e42a:	6825      	ldr	r5, [r4, #0]
 800e42c:	f015 0506 	ands.w	r5, r5, #6
 800e430:	d106      	bne.n	800e440 <_printf_common+0x48>
 800e432:	f104 0a19 	add.w	sl, r4, #25
 800e436:	68e3      	ldr	r3, [r4, #12]
 800e438:	6832      	ldr	r2, [r6, #0]
 800e43a:	1a9b      	subs	r3, r3, r2
 800e43c:	42ab      	cmp	r3, r5
 800e43e:	dc26      	bgt.n	800e48e <_printf_common+0x96>
 800e440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e444:	6822      	ldr	r2, [r4, #0]
 800e446:	3b00      	subs	r3, #0
 800e448:	bf18      	it	ne
 800e44a:	2301      	movne	r3, #1
 800e44c:	0692      	lsls	r2, r2, #26
 800e44e:	d42b      	bmi.n	800e4a8 <_printf_common+0xb0>
 800e450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e454:	4641      	mov	r1, r8
 800e456:	4638      	mov	r0, r7
 800e458:	47c8      	blx	r9
 800e45a:	3001      	adds	r0, #1
 800e45c:	d01e      	beq.n	800e49c <_printf_common+0xa4>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	f003 0306 	and.w	r3, r3, #6
 800e466:	2b04      	cmp	r3, #4
 800e468:	bf02      	ittt	eq
 800e46a:	68e5      	ldreq	r5, [r4, #12]
 800e46c:	6833      	ldreq	r3, [r6, #0]
 800e46e:	1aed      	subeq	r5, r5, r3
 800e470:	68a3      	ldr	r3, [r4, #8]
 800e472:	bf0c      	ite	eq
 800e474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e478:	2500      	movne	r5, #0
 800e47a:	4293      	cmp	r3, r2
 800e47c:	bfc4      	itt	gt
 800e47e:	1a9b      	subgt	r3, r3, r2
 800e480:	18ed      	addgt	r5, r5, r3
 800e482:	2600      	movs	r6, #0
 800e484:	341a      	adds	r4, #26
 800e486:	42b5      	cmp	r5, r6
 800e488:	d11a      	bne.n	800e4c0 <_printf_common+0xc8>
 800e48a:	2000      	movs	r0, #0
 800e48c:	e008      	b.n	800e4a0 <_printf_common+0xa8>
 800e48e:	2301      	movs	r3, #1
 800e490:	4652      	mov	r2, sl
 800e492:	4641      	mov	r1, r8
 800e494:	4638      	mov	r0, r7
 800e496:	47c8      	blx	r9
 800e498:	3001      	adds	r0, #1
 800e49a:	d103      	bne.n	800e4a4 <_printf_common+0xac>
 800e49c:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a4:	3501      	adds	r5, #1
 800e4a6:	e7c6      	b.n	800e436 <_printf_common+0x3e>
 800e4a8:	18e1      	adds	r1, r4, r3
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	2030      	movs	r0, #48	@ 0x30
 800e4ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4b2:	4422      	add	r2, r4
 800e4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4bc:	3302      	adds	r3, #2
 800e4be:	e7c7      	b.n	800e450 <_printf_common+0x58>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	4641      	mov	r1, r8
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	47c8      	blx	r9
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	d0e6      	beq.n	800e49c <_printf_common+0xa4>
 800e4ce:	3601      	adds	r6, #1
 800e4d0:	e7d9      	b.n	800e486 <_printf_common+0x8e>
	...

0800e4d4 <_printf_i>:
 800e4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	7e0f      	ldrb	r7, [r1, #24]
 800e4da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4dc:	2f78      	cmp	r7, #120	@ 0x78
 800e4de:	4691      	mov	r9, r2
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	469a      	mov	sl, r3
 800e4e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e4ea:	d807      	bhi.n	800e4fc <_printf_i+0x28>
 800e4ec:	2f62      	cmp	r7, #98	@ 0x62
 800e4ee:	d80a      	bhi.n	800e506 <_printf_i+0x32>
 800e4f0:	2f00      	cmp	r7, #0
 800e4f2:	f000 80d2 	beq.w	800e69a <_printf_i+0x1c6>
 800e4f6:	2f58      	cmp	r7, #88	@ 0x58
 800e4f8:	f000 80b9 	beq.w	800e66e <_printf_i+0x19a>
 800e4fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e504:	e03a      	b.n	800e57c <_printf_i+0xa8>
 800e506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e50a:	2b15      	cmp	r3, #21
 800e50c:	d8f6      	bhi.n	800e4fc <_printf_i+0x28>
 800e50e:	a101      	add	r1, pc, #4	@ (adr r1, 800e514 <_printf_i+0x40>)
 800e510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e514:	0800e56d 	.word	0x0800e56d
 800e518:	0800e581 	.word	0x0800e581
 800e51c:	0800e4fd 	.word	0x0800e4fd
 800e520:	0800e4fd 	.word	0x0800e4fd
 800e524:	0800e4fd 	.word	0x0800e4fd
 800e528:	0800e4fd 	.word	0x0800e4fd
 800e52c:	0800e581 	.word	0x0800e581
 800e530:	0800e4fd 	.word	0x0800e4fd
 800e534:	0800e4fd 	.word	0x0800e4fd
 800e538:	0800e4fd 	.word	0x0800e4fd
 800e53c:	0800e4fd 	.word	0x0800e4fd
 800e540:	0800e681 	.word	0x0800e681
 800e544:	0800e5ab 	.word	0x0800e5ab
 800e548:	0800e63b 	.word	0x0800e63b
 800e54c:	0800e4fd 	.word	0x0800e4fd
 800e550:	0800e4fd 	.word	0x0800e4fd
 800e554:	0800e6a3 	.word	0x0800e6a3
 800e558:	0800e4fd 	.word	0x0800e4fd
 800e55c:	0800e5ab 	.word	0x0800e5ab
 800e560:	0800e4fd 	.word	0x0800e4fd
 800e564:	0800e4fd 	.word	0x0800e4fd
 800e568:	0800e643 	.word	0x0800e643
 800e56c:	6833      	ldr	r3, [r6, #0]
 800e56e:	1d1a      	adds	r2, r3, #4
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6032      	str	r2, [r6, #0]
 800e574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e57c:	2301      	movs	r3, #1
 800e57e:	e09d      	b.n	800e6bc <_printf_i+0x1e8>
 800e580:	6833      	ldr	r3, [r6, #0]
 800e582:	6820      	ldr	r0, [r4, #0]
 800e584:	1d19      	adds	r1, r3, #4
 800e586:	6031      	str	r1, [r6, #0]
 800e588:	0606      	lsls	r6, r0, #24
 800e58a:	d501      	bpl.n	800e590 <_printf_i+0xbc>
 800e58c:	681d      	ldr	r5, [r3, #0]
 800e58e:	e003      	b.n	800e598 <_printf_i+0xc4>
 800e590:	0645      	lsls	r5, r0, #25
 800e592:	d5fb      	bpl.n	800e58c <_printf_i+0xb8>
 800e594:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e598:	2d00      	cmp	r5, #0
 800e59a:	da03      	bge.n	800e5a4 <_printf_i+0xd0>
 800e59c:	232d      	movs	r3, #45	@ 0x2d
 800e59e:	426d      	negs	r5, r5
 800e5a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5a4:	4859      	ldr	r0, [pc, #356]	@ (800e70c <_printf_i+0x238>)
 800e5a6:	230a      	movs	r3, #10
 800e5a8:	e011      	b.n	800e5ce <_printf_i+0xfa>
 800e5aa:	6821      	ldr	r1, [r4, #0]
 800e5ac:	6833      	ldr	r3, [r6, #0]
 800e5ae:	0608      	lsls	r0, r1, #24
 800e5b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5b4:	d402      	bmi.n	800e5bc <_printf_i+0xe8>
 800e5b6:	0649      	lsls	r1, r1, #25
 800e5b8:	bf48      	it	mi
 800e5ba:	b2ad      	uxthmi	r5, r5
 800e5bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5be:	4853      	ldr	r0, [pc, #332]	@ (800e70c <_printf_i+0x238>)
 800e5c0:	6033      	str	r3, [r6, #0]
 800e5c2:	bf14      	ite	ne
 800e5c4:	230a      	movne	r3, #10
 800e5c6:	2308      	moveq	r3, #8
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5ce:	6866      	ldr	r6, [r4, #4]
 800e5d0:	60a6      	str	r6, [r4, #8]
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	bfa2      	ittt	ge
 800e5d6:	6821      	ldrge	r1, [r4, #0]
 800e5d8:	f021 0104 	bicge.w	r1, r1, #4
 800e5dc:	6021      	strge	r1, [r4, #0]
 800e5de:	b90d      	cbnz	r5, 800e5e4 <_printf_i+0x110>
 800e5e0:	2e00      	cmp	r6, #0
 800e5e2:	d04b      	beq.n	800e67c <_printf_i+0x1a8>
 800e5e4:	4616      	mov	r6, r2
 800e5e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5ea:	fb03 5711 	mls	r7, r3, r1, r5
 800e5ee:	5dc7      	ldrb	r7, [r0, r7]
 800e5f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5f4:	462f      	mov	r7, r5
 800e5f6:	42bb      	cmp	r3, r7
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	d9f4      	bls.n	800e5e6 <_printf_i+0x112>
 800e5fc:	2b08      	cmp	r3, #8
 800e5fe:	d10b      	bne.n	800e618 <_printf_i+0x144>
 800e600:	6823      	ldr	r3, [r4, #0]
 800e602:	07df      	lsls	r7, r3, #31
 800e604:	d508      	bpl.n	800e618 <_printf_i+0x144>
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	6861      	ldr	r1, [r4, #4]
 800e60a:	4299      	cmp	r1, r3
 800e60c:	bfde      	ittt	le
 800e60e:	2330      	movle	r3, #48	@ 0x30
 800e610:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e614:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e618:	1b92      	subs	r2, r2, r6
 800e61a:	6122      	str	r2, [r4, #16]
 800e61c:	f8cd a000 	str.w	sl, [sp]
 800e620:	464b      	mov	r3, r9
 800e622:	aa03      	add	r2, sp, #12
 800e624:	4621      	mov	r1, r4
 800e626:	4640      	mov	r0, r8
 800e628:	f7ff fee6 	bl	800e3f8 <_printf_common>
 800e62c:	3001      	adds	r0, #1
 800e62e:	d14a      	bne.n	800e6c6 <_printf_i+0x1f2>
 800e630:	f04f 30ff 	mov.w	r0, #4294967295
 800e634:	b004      	add	sp, #16
 800e636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	f043 0320 	orr.w	r3, r3, #32
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	4833      	ldr	r0, [pc, #204]	@ (800e710 <_printf_i+0x23c>)
 800e644:	2778      	movs	r7, #120	@ 0x78
 800e646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	6831      	ldr	r1, [r6, #0]
 800e64e:	061f      	lsls	r7, r3, #24
 800e650:	f851 5b04 	ldr.w	r5, [r1], #4
 800e654:	d402      	bmi.n	800e65c <_printf_i+0x188>
 800e656:	065f      	lsls	r7, r3, #25
 800e658:	bf48      	it	mi
 800e65a:	b2ad      	uxthmi	r5, r5
 800e65c:	6031      	str	r1, [r6, #0]
 800e65e:	07d9      	lsls	r1, r3, #31
 800e660:	bf44      	itt	mi
 800e662:	f043 0320 	orrmi.w	r3, r3, #32
 800e666:	6023      	strmi	r3, [r4, #0]
 800e668:	b11d      	cbz	r5, 800e672 <_printf_i+0x19e>
 800e66a:	2310      	movs	r3, #16
 800e66c:	e7ac      	b.n	800e5c8 <_printf_i+0xf4>
 800e66e:	4827      	ldr	r0, [pc, #156]	@ (800e70c <_printf_i+0x238>)
 800e670:	e7e9      	b.n	800e646 <_printf_i+0x172>
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	f023 0320 	bic.w	r3, r3, #32
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	e7f6      	b.n	800e66a <_printf_i+0x196>
 800e67c:	4616      	mov	r6, r2
 800e67e:	e7bd      	b.n	800e5fc <_printf_i+0x128>
 800e680:	6833      	ldr	r3, [r6, #0]
 800e682:	6825      	ldr	r5, [r4, #0]
 800e684:	6961      	ldr	r1, [r4, #20]
 800e686:	1d18      	adds	r0, r3, #4
 800e688:	6030      	str	r0, [r6, #0]
 800e68a:	062e      	lsls	r6, r5, #24
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	d501      	bpl.n	800e694 <_printf_i+0x1c0>
 800e690:	6019      	str	r1, [r3, #0]
 800e692:	e002      	b.n	800e69a <_printf_i+0x1c6>
 800e694:	0668      	lsls	r0, r5, #25
 800e696:	d5fb      	bpl.n	800e690 <_printf_i+0x1bc>
 800e698:	8019      	strh	r1, [r3, #0]
 800e69a:	2300      	movs	r3, #0
 800e69c:	6123      	str	r3, [r4, #16]
 800e69e:	4616      	mov	r6, r2
 800e6a0:	e7bc      	b.n	800e61c <_printf_i+0x148>
 800e6a2:	6833      	ldr	r3, [r6, #0]
 800e6a4:	1d1a      	adds	r2, r3, #4
 800e6a6:	6032      	str	r2, [r6, #0]
 800e6a8:	681e      	ldr	r6, [r3, #0]
 800e6aa:	6862      	ldr	r2, [r4, #4]
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7f1 fdbe 	bl	8000230 <memchr>
 800e6b4:	b108      	cbz	r0, 800e6ba <_printf_i+0x1e6>
 800e6b6:	1b80      	subs	r0, r0, r6
 800e6b8:	6060      	str	r0, [r4, #4]
 800e6ba:	6863      	ldr	r3, [r4, #4]
 800e6bc:	6123      	str	r3, [r4, #16]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6c4:	e7aa      	b.n	800e61c <_printf_i+0x148>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	4632      	mov	r2, r6
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	47d0      	blx	sl
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	d0ad      	beq.n	800e630 <_printf_i+0x15c>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	079b      	lsls	r3, r3, #30
 800e6d8:	d413      	bmi.n	800e702 <_printf_i+0x22e>
 800e6da:	68e0      	ldr	r0, [r4, #12]
 800e6dc:	9b03      	ldr	r3, [sp, #12]
 800e6de:	4298      	cmp	r0, r3
 800e6e0:	bfb8      	it	lt
 800e6e2:	4618      	movlt	r0, r3
 800e6e4:	e7a6      	b.n	800e634 <_printf_i+0x160>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	4640      	mov	r0, r8
 800e6ee:	47d0      	blx	sl
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d09d      	beq.n	800e630 <_printf_i+0x15c>
 800e6f4:	3501      	adds	r5, #1
 800e6f6:	68e3      	ldr	r3, [r4, #12]
 800e6f8:	9903      	ldr	r1, [sp, #12]
 800e6fa:	1a5b      	subs	r3, r3, r1
 800e6fc:	42ab      	cmp	r3, r5
 800e6fe:	dcf2      	bgt.n	800e6e6 <_printf_i+0x212>
 800e700:	e7eb      	b.n	800e6da <_printf_i+0x206>
 800e702:	2500      	movs	r5, #0
 800e704:	f104 0619 	add.w	r6, r4, #25
 800e708:	e7f5      	b.n	800e6f6 <_printf_i+0x222>
 800e70a:	bf00      	nop
 800e70c:	0800e92d 	.word	0x0800e92d
 800e710:	0800e93e 	.word	0x0800e93e

0800e714 <memmove>:
 800e714:	4288      	cmp	r0, r1
 800e716:	b510      	push	{r4, lr}
 800e718:	eb01 0402 	add.w	r4, r1, r2
 800e71c:	d902      	bls.n	800e724 <memmove+0x10>
 800e71e:	4284      	cmp	r4, r0
 800e720:	4623      	mov	r3, r4
 800e722:	d807      	bhi.n	800e734 <memmove+0x20>
 800e724:	1e43      	subs	r3, r0, #1
 800e726:	42a1      	cmp	r1, r4
 800e728:	d008      	beq.n	800e73c <memmove+0x28>
 800e72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e732:	e7f8      	b.n	800e726 <memmove+0x12>
 800e734:	4402      	add	r2, r0
 800e736:	4601      	mov	r1, r0
 800e738:	428a      	cmp	r2, r1
 800e73a:	d100      	bne.n	800e73e <memmove+0x2a>
 800e73c:	bd10      	pop	{r4, pc}
 800e73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e746:	e7f7      	b.n	800e738 <memmove+0x24>

0800e748 <_sbrk_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4d06      	ldr	r5, [pc, #24]	@ (800e764 <_sbrk_r+0x1c>)
 800e74c:	2300      	movs	r3, #0
 800e74e:	4604      	mov	r4, r0
 800e750:	4608      	mov	r0, r1
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	f7f5 f946 	bl	80039e4 <_sbrk>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_sbrk_r+0x1a>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_sbrk_r+0x1a>
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	20000d9c 	.word	0x20000d9c

0800e768 <memcpy>:
 800e768:	440a      	add	r2, r1
 800e76a:	4291      	cmp	r1, r2
 800e76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e770:	d100      	bne.n	800e774 <memcpy+0xc>
 800e772:	4770      	bx	lr
 800e774:	b510      	push	{r4, lr}
 800e776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e77e:	4291      	cmp	r1, r2
 800e780:	d1f9      	bne.n	800e776 <memcpy+0xe>
 800e782:	bd10      	pop	{r4, pc}

0800e784 <_realloc_r>:
 800e784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e788:	4680      	mov	r8, r0
 800e78a:	4615      	mov	r5, r2
 800e78c:	460c      	mov	r4, r1
 800e78e:	b921      	cbnz	r1, 800e79a <_realloc_r+0x16>
 800e790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	4611      	mov	r1, r2
 800e796:	f7ff bc4b 	b.w	800e030 <_malloc_r>
 800e79a:	b92a      	cbnz	r2, 800e7a8 <_realloc_r+0x24>
 800e79c:	f7ff fbdc 	bl	800df58 <_free_r>
 800e7a0:	2400      	movs	r4, #0
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	f000 f81a 	bl	800e7e0 <_malloc_usable_size_r>
 800e7ac:	4285      	cmp	r5, r0
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	d802      	bhi.n	800e7b8 <_realloc_r+0x34>
 800e7b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7b6:	d8f4      	bhi.n	800e7a2 <_realloc_r+0x1e>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4640      	mov	r0, r8
 800e7bc:	f7ff fc38 	bl	800e030 <_malloc_r>
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0ec      	beq.n	800e7a0 <_realloc_r+0x1c>
 800e7c6:	42b5      	cmp	r5, r6
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	bf28      	it	cs
 800e7ce:	4632      	movcs	r2, r6
 800e7d0:	f7ff ffca 	bl	800e768 <memcpy>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4640      	mov	r0, r8
 800e7d8:	f7ff fbbe 	bl	800df58 <_free_r>
 800e7dc:	463c      	mov	r4, r7
 800e7de:	e7e0      	b.n	800e7a2 <_realloc_r+0x1e>

0800e7e0 <_malloc_usable_size_r>:
 800e7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7e4:	1f18      	subs	r0, r3, #4
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfbc      	itt	lt
 800e7ea:	580b      	ldrlt	r3, [r1, r0]
 800e7ec:	18c0      	addlt	r0, r0, r3
 800e7ee:	4770      	bx	lr

0800e7f0 <_init>:
 800e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f2:	bf00      	nop
 800e7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7f6:	bc08      	pop	{r3}
 800e7f8:	469e      	mov	lr, r3
 800e7fa:	4770      	bx	lr

0800e7fc <_fini>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	bf00      	nop
 800e800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e802:	bc08      	pop	{r3}
 800e804:	469e      	mov	lr, r3
 800e806:	4770      	bx	lr
