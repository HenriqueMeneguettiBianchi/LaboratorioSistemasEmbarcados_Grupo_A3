
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b49c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b67c  0800b67c  0000c67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b738  0800b738  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b738  0800b738  0000c738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b73c  0800b73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800b740  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  20000098  0800b7d8  0000d098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800b7d8  0000da14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffd6  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418a  00000000  00000000  0002d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00031228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001421  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae93  00000000  00000000  00034031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222b1  00000000  00000000  0005eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116ced  00000000  00000000  00081175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007298  00000000  00000000  00197ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0019f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b664 	.word	0x0800b664

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800b664 	.word	0x0800b664

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00a fbc3 	bl	800ad64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e6:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000608:	2204      	movs	r2, #4
 800060a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800060e:	2200      	movs	r2, #0
 8000610:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000614:	2201      	movs	r2, #1
 8000616:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800061a:	2201      	movs	r2, #1
 800061c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000642:	2201      	movs	r2, #1
 8000644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800064a:	220c      	movs	r2, #12
 800064c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800065c:	2201      	movs	r2, #1
 800065e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0x100>)
 8000662:	f002 fecd 	bl	8003400 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800066c:	f001 fade 	bl	8001c2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_ADC1_Init+0x100>)
 800067c:	f003 ffec 	bl	8004658 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000686:	f001 fad1 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_ADC1_Init+0x104>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_ADC1_Init+0x100>)
 80006a8:	f003 f958 	bl	800395c <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006b2:	f001 fabb 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000b4 	.word	0x200000b4
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fb45 	bl	800ad64 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006dc:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <MX_ADC2_Init+0xdc>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000702:	2204      	movs	r2, #4
 8000704:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800070e:	2201      	movs	r2, #1
 8000710:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000714:	2201      	movs	r2, #1
 8000716:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000744:	220c      	movs	r2, #12
 8000746:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000756:	2201      	movs	r2, #1
 8000758:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 800075c:	f002 fe50 	bl	8003400 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000766:	f001 fa61 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC2_Init+0xe0>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC2_Init+0xd8>)
 8000788:	f003 f8e8 	bl	800395c <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000792:	f001 fa4b 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000120 	.word	0x20000120
 80007a4:	50000100 	.word	0x50000100
 80007a8:	0c900008 	.word	0x0c900008

080007ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00a facd 	bl	800ad64 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007cc:	4a37      	ldr	r2, [pc, #220]	@ (80008ac <MX_ADC3_Init+0x100>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007d0:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007d2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80007d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d8:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800082c:	2201      	movs	r2, #1
 800082e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000834:	220c      	movs	r2, #12
 8000836:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000846:	2201      	movs	r2, #1
 8000848:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800084a:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 800084c:	f002 fdd8 	bl	8003400 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000856:	f001 f9e9 	bl	8001c2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000866:	f003 fef7 	bl	8004658 <HAL_ADCEx_MultiModeConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000870:	f001 f9dc 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_ADC3_Init+0x104>)
 8000876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000878:	2306      	movs	r3, #6
 800087a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000880:	237f      	movs	r3, #127	@ 0x7f
 8000882:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000884:	2304      	movs	r3, #4
 8000886:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC3_Init+0xfc>)
 8000892:	f003 f863 	bl	800395c <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 800089c:	f001 f9c6 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	@ 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000018c 	.word	0x2000018c
 80008ac:	50000400 	.word	0x50000400
 80008b0:	14f00020 	.word	0x14f00020

080008b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2220      	movs	r2, #32
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a fa4f 	bl	800ad64 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008c6:	4b31      	ldr	r3, [pc, #196]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008c8:	4a31      	ldr	r2, [pc, #196]	@ (8000990 <MX_ADC4_Init+0xdc>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ce:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <MX_ADC4_Init+0xd8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000900:	2201      	movs	r2, #1
 8000902:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ADC4_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_ADC4_Init+0xd8>)
 800091a:	2201      	movs	r2, #1
 800091c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000930:	220c      	movs	r2, #12
 8000932:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_ADC4_Init+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000942:	2201      	movs	r2, #1
 8000944:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000948:	f002 fd5a 	bl	8003400 <HAL_ADC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000952:	f001 f96b 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_ADC4_Init+0xe0>)
 8000958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000962:	237f      	movs	r3, #127	@ 0x7f
 8000964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000966:	2304      	movs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <MX_ADC4_Init+0xd8>)
 8000974:	f002 fff2 	bl	800395c <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 800097e:	f001 f955 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001f8 	.word	0x200001f8
 8000990:	50000500 	.word	0x50000500
 8000994:	14f00020 	.word	0x14f00020

08000998 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a f9dd 	bl	800ad64 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ac:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_ADC5_Init+0xdc>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009b2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a14:	220c      	movs	r2, #12
 8000a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a2a:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a2c:	f002 fce8 	bl	8003400 <HAL_ADC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000a36:	f001 f8f9 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_ADC5_Init+0xe0>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	@ 0x7f
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_ADC5_Init+0xd8>)
 8000a58:	f002 ff80 	bl	800395c <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000a62:	f001 f8e3 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000264 	.word	0x20000264
 8000a74:	50000600 	.word	0x50000600
 8000a78:	08600004 	.word	0x08600004

08000a7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a6      	sub	sp, #152	@ 0x98
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a98:	2254      	movs	r2, #84	@ 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00a f961 	bl	800ad64 <memset>
  if(adcHandle->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aaa:	d16c      	bne.n	8000b86 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ab2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ab6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f911 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ac8:	f001 f8b0 	bl	8001c2c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000acc:	4ba0      	ldr	r3, [pc, #640]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10b      	bne.n	8000af6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ade:	4b9d      	ldr	r3, [pc, #628]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a9c      	ldr	r2, [pc, #624]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b9a      	ldr	r3, [pc, #616]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b97      	ldr	r3, [pc, #604]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a96      	ldr	r2, [pc, #600]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b94      	ldr	r3, [pc, #592]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f004 fa95 	bl	8005058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b30:	4a8a      	ldr	r2, [pc, #552]	@ (8000d5c <HAL_ADC_MspInit+0x2e0>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b34:	4b88      	ldr	r3, [pc, #544]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b87      	ldr	r3, [pc, #540]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b84      	ldr	r3, [pc, #528]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4c:	4b82      	ldr	r3, [pc, #520]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b54:	4b80      	ldr	r3, [pc, #512]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b7d      	ldr	r3, [pc, #500]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b68:	487b      	ldr	r0, [pc, #492]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b6a:	f003 ff8d 	bl	8004a88 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000b74:	f001 f85a 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b7e:	4a76      	ldr	r2, [pc, #472]	@ (8000d58 <HAL_ADC_MspInit+0x2dc>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b84:	e1e0      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a75      	ldr	r2, [pc, #468]	@ (8000d60 <HAL_ADC_MspInit+0x2e4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d16c      	bne.n	8000c6a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b9a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f007 f89f 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000bac:	f001 f83e 	bl	8001c2c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bb0:	4b67      	ldr	r3, [pc, #412]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a66      	ldr	r2, [pc, #408]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bba:	4b65      	ldr	r3, [pc, #404]	@ (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10b      	bne.n	8000bda <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bc2:	4b64      	ldr	r3, [pc, #400]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a63      	ldr	r2, [pc, #396]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b61      	ldr	r3, [pc, #388]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b5e      	ldr	r3, [pc, #376]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a5d      	ldr	r2, [pc, #372]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0e:	f004 fa23 	bl	8005058 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c12:	4b54      	ldr	r3, [pc, #336]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c14:	4a54      	ldr	r2, [pc, #336]	@ (8000d68 <HAL_ADC_MspInit+0x2ec>)
 8000c16:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c18:	4b52      	ldr	r3, [pc, #328]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c1a:	2224      	movs	r2, #36	@ 0x24
 8000c1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1e:	4b51      	ldr	r3, [pc, #324]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c24:	4b4f      	ldr	r3, [pc, #316]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c30:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c40:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c4c:	4845      	ldr	r0, [pc, #276]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c4e:	f003 ff1b 	bl	8004a88 <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000c58:	f000 ffe8 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a41      	ldr	r2, [pc, #260]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <HAL_ADC_MspInit+0x2e8>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c68:	e16e      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <HAL_ADC_MspInit+0x2f0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f040 8085 	bne.w	8000d80 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c86:	4618      	mov	r0, r3
 8000c88:	f007 f82c 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000c92:	f000 ffcb 	bl	8001c2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c96:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a34      	ldr	r2, [pc, #208]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000c9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ca0:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <HAL_ADC_MspInit+0x2f4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cac:	4a29      	ldr	r2, [pc, #164]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a23      	ldr	r2, [pc, #140]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <HAL_ADC_MspInit+0x2d8>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <HAL_ADC_MspInit+0x2f8>)
 8000cf4:	f004 f9b0 	bl	8005058 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <HAL_ADC_MspInit+0x300>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d00:	2225      	movs	r2, #37	@ 0x25
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d28:	2220      	movs	r2, #32
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d34:	f003 fea8 	bl	8004a88 <HAL_DMA_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000d3e:	f000 ff75 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d48:	4a0b      	ldr	r2, [pc, #44]	@ (8000d78 <HAL_ADC_MspInit+0x2fc>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d4e:	e0fb      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
 8000d50:	200004b0 	.word	0x200004b0
 8000d54:	40021000 	.word	0x40021000
 8000d58:	200002d0 	.word	0x200002d0
 8000d5c:	40020008 	.word	0x40020008
 8000d60:	50000100 	.word	0x50000100
 8000d64:	20000330 	.word	0x20000330
 8000d68:	4002001c 	.word	0x4002001c
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	200004b4 	.word	0x200004b4
 8000d74:	48000400 	.word	0x48000400
 8000d78:	20000390 	.word	0x20000390
 8000d7c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a72      	ldr	r2, [pc, #456]	@ (8000f50 <HAL_ADC_MspInit+0x4d4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d16c      	bne.n	8000e64 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d94:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 ffa2 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000da6:	f000 ff41 	bl	8001c2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000daa:	4b6a      	ldr	r3, [pc, #424]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000db4:	4b67      	ldr	r3, [pc, #412]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10b      	bne.n	8000dd4 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000dbc:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a65      	ldr	r2, [pc, #404]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e04:	4619      	mov	r1, r3
 8000e06:	4855      	ldr	r0, [pc, #340]	@ (8000f5c <HAL_ADC_MspInit+0x4e0>)
 8000e08:	f004 f926 	bl	8005058 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000e0c:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e0e:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <HAL_ADC_MspInit+0x4e8>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000e12:	4b53      	ldr	r3, [pc, #332]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e14:	2226      	movs	r2, #38	@ 0x26
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e18:	4b51      	ldr	r3, [pc, #324]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1e:	4b50      	ldr	r3, [pc, #320]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e24:	4b4e      	ldr	r3, [pc, #312]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e32:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e3a:	4b49      	ldr	r3, [pc, #292]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e40:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e46:	4846      	ldr	r0, [pc, #280]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e48:	f003 fe1e 	bl	8004a88 <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000e52:	f000 feeb 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a41      	ldr	r2, [pc, #260]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e5c:	4a40      	ldr	r2, [pc, #256]	@ (8000f60 <HAL_ADC_MspInit+0x4e4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e62:	e071      	b.n	8000f48 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <HAL_ADC_MspInit+0x4ec>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d16c      	bne.n	8000f48 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e78:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 ff30 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000e8a:	f000 fecf 	bl	8001c2c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_ADC_MspInit+0x4d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <HAL_ADC_MspInit+0x4dc>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f004 f8b3 	bl	8005058 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_ADC_MspInit+0x4f4>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000efa:	2227      	movs	r2, #39	@ 0x27
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000f2c:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f2e:	f003 fdab 	bl	8004a88 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000f38:	f000 fe78 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f40:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_ADC_MspInit+0x4f0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	3798      	adds	r7, #152	@ 0x98
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	50000500 	.word	0x50000500
 8000f54:	200004b4 	.word	0x200004b4
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	200003f0 	.word	0x200003f0
 8000f64:	40020044 	.word	0x40020044
 8000f68:	50000600 	.word	0x50000600
 8000f6c:	20000450 	.word	0x20000450
 8000f70:	40020058 	.word	0x40020058

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_DMA_Init+0x60>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f003 fd35 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f003 fd4c 	bl	8004a52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f003 fd2d 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f003 fd44 	bl	8004a52 <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f007 fb71 	bl	80086cc <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8000fea:	2100      	movs	r1, #0
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f007 fb6d 	bl	80086cc <HAL_TIM_IC_Start_IT>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <processarCaptura+0x94>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d108      	bne.n	8001022 <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <processarCaptura+0x98>)
 8001018:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <processarCaptura+0x94>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001020:	e02f      	b.n	8001082 <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <processarCaptura+0x9c>)
 800102a:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <processarCaptura+0x9c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <processarCaptura+0x98>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a19      	ldr	r2, [pc, #100]	@ (800109c <processarCaptura+0xa0>)
 8001038:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <processarCaptura+0xa4>)
 800103c:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <processarCaptura+0xa0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104a:	edd7 6a05 	vldr	s13, [r7, #20]
 800104e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010a4 <processarCaptura+0xa8>
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <processarCaptura+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200004cc 	.word	0x200004cc
 8001094:	200004b8 	.word	0x200004b8
 8001098:	200004bc 	.word	0x200004bc
 800109c:	200004c8 	.word	0x200004c8
 80010a0:	49742400 	.word	0x49742400
 80010a4:	41a347ae 	.word	0x41a347ae

080010a8 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <processarCaptura2+0x94>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d108      	bne.n	80010ce <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001140 <processarCaptura2+0x98>)
 80010c4:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <processarCaptura2+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 80010cc:	e02f      	b.n	800112e <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <processarCaptura2+0x9c>)
 80010d6:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <processarCaptura2+0x9c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <processarCaptura2+0x98>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <processarCaptura2+0xa0>)
 80010e4:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <processarCaptura2+0xa4>)
 80010e8:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <processarCaptura2+0xa0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001150 <processarCaptura2+0xa8>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <processarCaptura2+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200004d4 	.word	0x200004d4
 8001140:	200004c0 	.word	0x200004c0
 8001144:	200004c4 	.word	0x200004c4
 8001148:	200004d0 	.word	0x200004d0
 800114c:	49742400 	.word	0x49742400
 8001150:	41a347ae 	.word	0x41a347ae

08001154 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d105      	bne.n	8001170 <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001166:	490b      	ldr	r1, [pc, #44]	@ (8001194 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff47 	bl	8000ffc <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);

    }
}
 800116e:	e008      	b.n	8001182 <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <HAL_TIM_IC_CaptureCallback+0x48>)
 800117a:	4909      	ldr	r1, [pc, #36]	@ (80011a0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff93 	bl	80010a8 <processarCaptura2>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000079c 	.word	0x2000079c
 8001190:	200004e0 	.word	0x200004e0
 8001194:	200004d8 	.word	0x200004d8
 8001198:	200007e8 	.word	0x200007e8
 800119c:	200004e4 	.word	0x200004e4
 80011a0:	200004dc 	.word	0x200004dc

080011a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	4b35      	ldr	r3, [pc, #212]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a34      	ldr	r2, [pc, #208]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_GPIO_Init+0x104>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_GPIO_Init+0x104>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001220:	4822      	ldr	r0, [pc, #136]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001222:	f004 f89b 	bl	800535c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f004 f894 	bl	800535c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <MX_GPIO_Init+0x10c>)
 800124c:	f003 ff04 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001250:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	@ (80012ac <MX_GPIO_Init+0x108>)
 800126a:	f003 fef5 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 800126e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f003 fee5 	bl	8005058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2028      	movs	r0, #40	@ 0x28
 8001294:	f003 fbc3 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001298:	2028      	movs	r0, #40	@ 0x28
 800129a:	f003 fbda 	bl	8004a52 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000800 	.word	0x48000800

080012b4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <MX_I2C2_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <MX_I2C2_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	@ (8001328 <MX_I2C2_Init+0x74>)
 80012f0:	f004 f86f 	bl	80053d2 <HAL_I2C_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012fa:	f000 fc97 	bl	8001c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <MX_I2C2_Init+0x74>)
 8001302:	f005 fe75 	bl	8006ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800130c:	f000 fc8e 	bl	8001c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_I2C2_Init+0x74>)
 8001314:	f005 feb7 	bl	8007086 <HAL_I2CEx_ConfigDigitalFilter>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 fc85 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200004e8 	.word	0x200004e8
 800132c:	40005800 	.word	0x40005800
 8001330:	40b285c2 	.word	0x40b285c2

08001334 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0a0      	sub	sp, #128	@ 0x80
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	2254      	movs	r2, #84	@ 0x54
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f009 fd05 	bl	800ad64 <memset>
  if(i2cHandle->Instance==I2C2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a5f      	ldr	r2, [pc, #380]	@ (80014dc <HAL_I2C_MspInit+0x1a8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f040 80b6 	bne.w	80014d2 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fcb6 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f000 fc55 	bl	8001c2c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 80013b2:	2310      	movs	r3, #16
 80013b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	2312      	movs	r3, #18
 80013b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4845      	ldr	r0, [pc, #276]	@ (80014e4 <HAL_I2C_MspInit+0x1b0>)
 80013ce:	f003 fe43 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 80013d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e4:	2304      	movs	r3, #4
 80013e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f003 fe31 	bl	8005058 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013f6:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	4a39      	ldr	r2, [pc, #228]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6593      	str	r3, [r2, #88]	@ 0x58
 8001402:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <HAL_I2C_MspInit+0x1ac>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel6;
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001410:	4a36      	ldr	r2, [pc, #216]	@ (80014ec <HAL_I2C_MspInit+0x1b8>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001416:	2212      	movs	r2, #18
 8001418:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001444:	4828      	ldr	r0, [pc, #160]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001446:	f003 fb1f 	bl	8004a88 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001450:	f000 fbec 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 8001458:	63da      	str	r2, [r3, #60]	@ 0x3c
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_I2C_MspInit+0x1b4>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel7;
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001462:	4a24      	ldr	r2, [pc, #144]	@ (80014f4 <HAL_I2C_MspInit+0x1c0>)
 8001464:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001468:	2213      	movs	r2, #19
 800146a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800146e:	2210      	movs	r2, #16
 8001470:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 8001498:	f003 faf6 	bl	8004a88 <HAL_DMA_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80014a2:	f000 fbc3 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ac:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <HAL_I2C_MspInit+0x1bc>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2021      	movs	r0, #33	@ 0x21
 80014b8:	f003 fab1 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80014bc:	2021      	movs	r0, #33	@ 0x21
 80014be:	f003 fac8 	bl	8004a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2022      	movs	r0, #34	@ 0x22
 80014c8:	f003 faa9 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80014cc:	2022      	movs	r0, #34	@ 0x22
 80014ce:	f003 fac0 	bl	8004a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3780      	adds	r7, #128	@ 0x80
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005800 	.word	0x40005800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800
 80014e8:	2000053c 	.word	0x2000053c
 80014ec:	4002006c 	.word	0x4002006c
 80014f0:	2000059c 	.word	0x2000059c
 80014f4:	40020080 	.word	0x40020080

080014f8 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4603      	mov	r3, r0
 8001508:	70fb      	strb	r3, [r7, #3]
 800150a:	460b      	mov	r3, r1
 800150c:	70bb      	strb	r3, [r7, #2]
 800150e:	4613      	mov	r3, r2
 8001510:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001512:	2300      	movs	r3, #0
 8001514:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001516:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <lcdInit+0x16c>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b50      	ldr	r3, [pc, #320]	@ (8001664 <lcdInit+0x16c>)
 8001524:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001526:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <lcdInit+0x16c>)
 8001528:	78bb      	ldrb	r3, [r7, #2]
 800152a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 800152c:	4a4d      	ldr	r2, [pc, #308]	@ (8001664 <lcdInit+0x16c>)
 800152e:	787b      	ldrb	r3, [r7, #1]
 8001530:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001532:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <lcdInit+0x16c>)
 8001534:	2208      	movs	r2, #8
 8001536:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001538:	4b4b      	ldr	r3, [pc, #300]	@ (8001668 <lcdInit+0x170>)
 800153a:	2234      	movs	r2, #52	@ 0x34
 800153c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <lcdInit+0x170>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <lcdInit+0x170>)
 8001544:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001546:	4b48      	ldr	r3, [pc, #288]	@ (8001668 <lcdInit+0x170>)
 8001548:	2230      	movs	r2, #48	@ 0x30
 800154a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 800154c:	2300      	movs	r3, #0
 800154e:	737b      	strb	r3, [r7, #13]
 8001550:	e02f      	b.n	80015b2 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001552:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <lcdInit+0x16c>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <lcdInit+0x16c>)
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	4619      	mov	r1, r3
 800155c:	2303      	movs	r3, #3
 800155e:	4a42      	ldr	r2, [pc, #264]	@ (8001668 <lcdInit+0x170>)
 8001560:	f003 ffd2 	bl	8005508 <HAL_I2C_Master_Transmit_DMA>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <lcdInit+0x76>
            return -1;
 800156a:	23ff      	movs	r3, #255	@ 0xff
 800156c:	e076      	b.n	800165c <lcdInit+0x164>
        }

        usCont = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001572:	e009      	b.n	8001588 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	81fa      	strh	r2, [r7, #14]
 800157a:	2bc8      	cmp	r3, #200	@ 0xc8
 800157c:	d101      	bne.n	8001582 <lcdInit+0x8a>
        		return -1;
 800157e:	23ff      	movs	r3, #255	@ 0xff
 8001580:	e06c      	b.n	800165c <lcdInit+0x164>
        	HAL_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f001 fcd6 	bl	8002f34 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <lcdInit+0x16c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f004 f9ac 	bl	80058ea <HAL_I2C_GetState>
 8001592:	4603      	mov	r3, r0
 8001594:	2b20      	cmp	r3, #32
 8001596:	d1ed      	bne.n	8001574 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d103      	bne.n	80015a6 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f001 fcc8 	bl	8002f34 <HAL_Delay>
 80015a4:	e002      	b.n	80015ac <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 80015a6:	2005      	movs	r0, #5
 80015a8:	f001 fcc4 	bl	8002f34 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	3301      	adds	r3, #1
 80015b0:	737b      	strb	r3, [r7, #13]
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d9cc      	bls.n	8001552 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <lcdInit+0x170>)
 80015ba:	222c      	movs	r2, #44	@ 0x2c
 80015bc:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <lcdInit+0x170>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <lcdInit+0x170>)
 80015c4:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <lcdInit+0x170>)
 80015c8:	2228      	movs	r2, #40	@ 0x28
 80015ca:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <lcdInit+0x16c>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <lcdInit+0x16c>)
 80015d2:	799b      	ldrb	r3, [r3, #6]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2303      	movs	r3, #3
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <lcdInit+0x170>)
 80015da:	f003 ff95 	bl	8005508 <HAL_I2C_Master_Transmit_DMA>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <lcdInit+0xf0>
        return -1;
 80015e4:	23ff      	movs	r3, #255	@ 0xff
 80015e6:	e039      	b.n	800165c <lcdInit+0x164>
    }

    usCont = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80015ec:	e009      	b.n	8001602 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	81fa      	strh	r2, [r7, #14]
 80015f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80015f6:	d101      	bne.n	80015fc <lcdInit+0x104>
    		return -1;
 80015f8:	23ff      	movs	r3, #255	@ 0xff
 80015fa:	e02f      	b.n	800165c <lcdInit+0x164>
    	HAL_Delay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f001 fc99 	bl	8002f34 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <lcdInit+0x16c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f96f 	bl	80058ea <HAL_I2C_GetState>
 800160c:	4603      	mov	r3, r0
 800160e:	2b20      	cmp	r3, #32
 8001610:	d1ed      	bne.n	80015ee <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <lcdInit+0x16c>)
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d904      	bls.n	800162e <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f945 	bl	80018c4 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f000 f815 	bl	800166c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001642:	2101      	movs	r1, #1
 8001644:	2007      	movs	r0, #7
 8001646:	f000 f811 	bl	800166c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f000 f80d 	bl	800166c <lcdCommand>
    lcdCursorHome();
 8001652:	2101      	movs	r1, #1
 8001654:	2005      	movs	r0, #5
 8001656:	f000 f809 	bl	800166c <lcdCommand>

    return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000604 	.word	0x20000604
 8001668:	200005fc 	.word	0x200005fc

0800166c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <lcdCommand+0xe4>
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 80aa 	bne.w	80017e0 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	3b01      	subs	r3, #1
 8001690:	2b07      	cmp	r3, #7
 8001692:	d85a      	bhi.n	800174a <lcdCommand+0xde>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <lcdCommand+0x30>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016bd 	.word	0x080016bd
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	080016dd 	.word	0x080016dd
 80016ac:	08001707 	.word	0x08001707
 80016b0:	08001731 	.word	0x08001731
 80016b4:	08001721 	.word	0x08001721
 80016b8:	0800173b 	.word	0x0800173b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80016bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <lcdCommand+0x1c4>)
 80016be:	7a1b      	ldrb	r3, [r3, #8]
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <lcdCommand+0x1c4>)
 80016c8:	721a      	strb	r2, [r3, #8]
                    break;
 80016ca:	e040      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80016cc:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <lcdCommand+0x1c4>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <lcdCommand+0x1c4>)
 80016d8:	721a      	strb	r2, [r3, #8]
                    break;
 80016da:	e038      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80016dc:	4b54      	ldr	r3, [pc, #336]	@ (8001830 <lcdCommand+0x1c4>)
 80016de:	7a1b      	ldrb	r3, [r3, #8]
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b52      	ldr	r3, [pc, #328]	@ (8001830 <lcdCommand+0x1c4>)
 80016e8:	721a      	strb	r2, [r3, #8]
                    break;
 80016ea:	e030      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80016f0:	f107 030f 	add.w	r3, r7, #15
 80016f4:	4619      	mov	r1, r3
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f8e4 	bl	80018c4 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f001 fc19 	bl	8002f34 <HAL_Delay>
                        return 0;
 8001702:	2300      	movs	r3, #0
 8001704:	e090      	b.n	8001828 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001706:	2302      	movs	r3, #2
 8001708:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 800170a:	f107 030f 	add.w	r3, r7, #15
 800170e:	4619      	mov	r1, r3
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f8d7 	bl	80018c4 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(2);
 8001716:	2002      	movs	r0, #2
 8001718:	f001 fc0c 	bl	8002f34 <HAL_Delay>
                        return 0;
 800171c:	2300      	movs	r3, #0
 800171e:	e083      	b.n	8001828 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <lcdCommand+0x1c4>)
 8001722:	7a5b      	ldrb	r3, [r3, #9]
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <lcdCommand+0x1c4>)
 800172c:	725a      	strb	r2, [r3, #9]
                    break;
 800172e:	e00e      	b.n	800174e <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001730:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <lcdCommand+0x1c4>)
 8001732:	7a5a      	ldrb	r2, [r3, #9]
 8001734:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <lcdCommand+0x1c4>)
 8001736:	725a      	strb	r2, [r3, #9]
                    break;
 8001738:	e009      	b.n	800174e <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <lcdCommand+0x1c4>)
 800173c:	7a5b      	ldrb	r3, [r3, #9]
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <lcdCommand+0x1c4>)
 8001746:	725a      	strb	r2, [r3, #9]
                    break;
 8001748:	e001      	b.n	800174e <lcdCommand+0xe2>

                default:
                    return -1;
 800174a:	23ff      	movs	r3, #255	@ 0xff
 800174c:	e06c      	b.n	8001828 <lcdCommand+0x1bc>
            }

            break;
 800174e:	e049      	b.n	80017e4 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3b01      	subs	r3, #1
 8001754:	2b07      	cmp	r3, #7
 8001756:	d840      	bhi.n	80017da <lcdCommand+0x16e>
 8001758:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <lcdCommand+0xf4>)
 800175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175e:	bf00      	nop
 8001760:	08001781 	.word	0x08001781
 8001764:	080017db 	.word	0x080017db
 8001768:	08001791 	.word	0x08001791
 800176c:	080017a1 	.word	0x080017a1
 8001770:	080017db 	.word	0x080017db
 8001774:	080017c1 	.word	0x080017c1
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017cb 	.word	0x080017cb
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <lcdCommand+0x1c4>)
 8001782:	7a1b      	ldrb	r3, [r3, #8]
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <lcdCommand+0x1c4>)
 800178c:	721a      	strb	r2, [r3, #8]
                    break;
 800178e:	e026      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <lcdCommand+0x1c4>)
 8001792:	7a1b      	ldrb	r3, [r3, #8]
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <lcdCommand+0x1c4>)
 800179c:	721a      	strb	r2, [r3, #8]
                    break;
 800179e:	e01e      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80017a0:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <lcdCommand+0x1c4>)
 80017a2:	7a1b      	ldrb	r3, [r3, #8]
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <lcdCommand+0x1c4>)
 80017ac:	721a      	strb	r2, [r3, #8]
                    break;
 80017ae:	e016      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <lcdCommand+0x1c4>)
 80017b2:	7a5b      	ldrb	r3, [r3, #9]
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <lcdCommand+0x1c4>)
 80017bc:	725a      	strb	r2, [r3, #9]
                    break;
 80017be:	e00e      	b.n	80017de <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <lcdCommand+0x1c4>)
 80017c2:	7a5a      	ldrb	r2, [r3, #9]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <lcdCommand+0x1c4>)
 80017c6:	725a      	strb	r2, [r3, #9]
                    break;
 80017c8:	e009      	b.n	80017de <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <lcdCommand+0x1c4>)
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <lcdCommand+0x1c4>)
 80017d6:	725a      	strb	r2, [r3, #9]
                    break;
 80017d8:	e001      	b.n	80017de <lcdCommand+0x172>

                default:
                    return -1;
 80017da:	23ff      	movs	r3, #255	@ 0xff
 80017dc:	e024      	b.n	8001828 <lcdCommand+0x1bc>
            }

            break;
 80017de:	e001      	b.n	80017e4 <lcdCommand+0x178>

        default:
            return -1;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	e021      	b.n	8001828 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	dc16      	bgt.n	8001818 <lcdCommand+0x1ac>
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	da0d      	bge.n	800180a <lcdCommand+0x19e>
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d004      	beq.n	80017fc <lcdCommand+0x190>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dd10      	ble.n	8001818 <lcdCommand+0x1ac>
 80017f6:	3b03      	subs	r3, #3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d80d      	bhi.n	8001818 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <lcdCommand+0x1c4>)
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73fb      	strb	r3, [r7, #15]
            break;
 8001808:	e007      	b.n	800181a <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <lcdCommand+0x1c4>)
 800180c:	7a5b      	ldrb	r3, [r3, #9]
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	b2db      	uxtb	r3, r3
 8001814:	73fb      	strb	r3, [r7, #15]
            break;
 8001816:	e000      	b.n	800181a <lcdCommand+0x1ae>

        default:
            break;
 8001818:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800181a:	f107 030f 	add.w	r3, r7, #15
 800181e:	4619      	mov	r1, r3
 8001820:	2000      	movs	r0, #0
 8001822:	f000 f84f 	bl	80018c4 <lcdWriteByte>
 8001826:	4603      	mov	r3, r0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000604 	.word	0x20000604

08001834 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <lcdSetCursorPosition+0x50>)
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	79ba      	ldrb	r2, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	d303      	bcc.n	8001856 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <lcdSetCursorPosition+0x50>)
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <lcdSetCursorPosition+0x54>)
 800185a:	5cd2      	ldrb	r2, [r2, r3]
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800186e:	f107 030f 	add.w	r3, r7, #15
 8001872:	4619      	mov	r1, r3
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f825 	bl	80018c4 <lcdWriteByte>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000604 	.word	0x20000604
 8001888:	0800b6b8 	.word	0x0800b6b8

0800188c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e009      	b.n	80018b2 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f80c 	bl	80018c4 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	3301      	adds	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3f1      	bcc.n	800189e <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80018d0:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <lcdWriteByte+0xf0>)
 80018d2:	79da      	ldrb	r2, [r3, #7]
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f023 030f 	bic.w	r3, r3, #15
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <lcdWriteByte+0xf4>)
 80018f8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80018fa:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <lcdWriteByte+0xf0>)
 80018fc:	79da      	ldrb	r2, [r3, #7]
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4313      	orrs	r3, r2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	b25a      	sxtb	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b25b      	sxtb	r3, r3
 800190c:	f023 030f 	bic.w	r3, r3, #15
 8001910:	b25b      	sxtb	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <lcdWriteByte+0xf4>)
 800191a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <lcdWriteByte+0xf0>)
 800191e:	79da      	ldrb	r2, [r3, #7]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4313      	orrs	r3, r2
 8001924:	b2da      	uxtb	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <lcdWriteByte+0xf4>)
 800193a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <lcdWriteByte+0xf4>)
 800193e:	78da      	ldrb	r2, [r3, #3]
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001942:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001946:	79da      	ldrb	r2, [r3, #7]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4313      	orrs	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b25a      	sxtb	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001960:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <lcdWriteByte+0xf0>)
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	4619      	mov	r1, r3
 800196c:	2306      	movs	r3, #6
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <lcdWriteByte+0xf4>)
 8001970:	f003 fdca 	bl	8005508 <HAL_I2C_Master_Transmit_DMA>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <lcdWriteByte+0xba>
        return -1;
 800197a:	23ff      	movs	r3, #255	@ 0xff
 800197c:	e015      	b.n	80019aa <lcdWriteByte+0xe6>
    }

    usCont = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001982:	e009      	b.n	8001998 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	81fa      	strh	r2, [r7, #14]
 800198a:	2bc8      	cmp	r3, #200	@ 0xc8
 800198c:	d101      	bne.n	8001992 <lcdWriteByte+0xce>
    		return -1;
 800198e:	23ff      	movs	r3, #255	@ 0xff
 8001990:	e00b      	b.n	80019aa <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 face 	bl	8002f34 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <lcdWriteByte+0xf0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 ffa4 	bl	80058ea <HAL_I2C_GetState>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d1ed      	bne.n	8001984 <lcdWriteByte+0xc0>
    }

    return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000604 	.word	0x20000604
 80019b8:	200005fc 	.word	0x200005fc

080019bc <vPrintMotorSpeed>:
// Method description:  Imprime as velocidades das rodas no LCD //
// Input parameters:    fVelocidadeRodaEsquerda,                //
//                      float fVelocidadeROdaDireita            //
// Output parameters:   none                                    //
// *************************************************************//
void vPrintMotorSpeed(float fVelocidadeRodaEsquerda, float fVelocidadeRodaDireita){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	@ 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80019c6:	edc7 0a00 	vstr	s1, [r7]

    unsigned char ucLCD0Msg[17], ucLCD1Msg[17];
    int iVEInteiro, iVDInteiro;
    int iVEdec, iVDdec;

    iVEInteiro = (int)fVelocidadeRodaEsquerda;
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iVDInteiro = (int)fVelocidadeRodaDireita;
 80019d8:	edd7 7a00 	vldr	s15, [r7]
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    iVEdec = 100*(fVelocidadeRodaEsquerda - iVEInteiro);
 80019e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001a98 <vPrintMotorSpeed+0xdc>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
    iVDdec = 100*(fVelocidadeRodaDireita - iVDInteiro);
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a14:	ed97 7a00 	vldr	s14, [r7]
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a98 <vPrintMotorSpeed+0xdc>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    // Limpando o display
    //lcdDisplayClear();
    //lcdCursorHome();

    // Display Test
    sprintf((char *)ucLCD0Msg, "Speed L:  %02d,%01d", iVEInteiro, iVEdec);
 8001a2e:	f107 001c 	add.w	r0, r7, #28
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a36:	4919      	ldr	r1, [pc, #100]	@ (8001a9c <vPrintMotorSpeed+0xe0>)
 8001a38:	f009 f974 	bl	800ad24 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 0);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fef8 	bl	8001834 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fbe9 	bl	8000220 <strlen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff17 	bl	800188c <lcdPrintStr>

    sprintf((char *)ucLCD1Msg, "Speed R:  %02d,%01d", iVDInteiro, iVDdec);
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a66:	490e      	ldr	r1, [pc, #56]	@ (8001aa0 <vPrintMotorSpeed+0xe4>)
 8001a68:	f009 f95c 	bl	800ad24 <siprintf>
    // Set cursor at zero position of line 0
    lcdSetCursorPosition(0, 1);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fee0 	bl	8001834 <lcdSetCursorPosition>
    // Print text at cursor position
    lcdPrintStr((uint8_t*)ucLCD1Msg, strlen((char *)ucLCD1Msg));
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fbd1 	bl	8000220 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff feff 	bl	800188c <lcdPrintStr>
}
 8001a8e:	bf00      	nop
 8001a90:	3740      	adds	r7, #64	@ 0x40
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	42c80000 	.word	0x42c80000
 8001a9c:	0800b67c 	.word	0x0800b67c
 8001aa0:	0800b690 	.word	0x0800b690

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001aa8:	f001 f9d3 	bl	8002e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f862 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f7ff fb78 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab4:	f7ff fa5e 	bl	8000f74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001ab8:	f001 f900 	bl	8002cbc <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001abc:	f000 fda6 	bl	800260c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001ac0:	f7ff fbf8 	bl	80012b4 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001ac4:	f7fe fe72 	bl	80007ac <MX_ADC3_Init>
  MX_ADC1_Init();
 8001ac8:	f7fe fd7a 	bl	80005c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001acc:	f7fe fdfc 	bl	80006c8 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001ad0:	f7fe fef0 	bl	80008b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001ad4:	f7fe ff60 	bl	8000998 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001ad8:	f000 ff2a 	bl	8002930 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001adc:	f000 ff72 	bl	80029c4 <MX_TIM17_Init>
  MX_TIM6_Init();
 8001ae0:	f000 fe9e 	bl	8002820 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001ae4:	f000 fed2 	bl	800288c <MX_TIM15_Init>
  MX_TIM2_Init();
 8001ae8:	f000 fe4c 	bl	8002784 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8001aec:	4815      	ldr	r0, [pc, #84]	@ (8001b44 <main+0xa0>)
 8001aee:	f000 f8a3 	bl	8001c38 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 8001af2:	4915      	ldr	r1, [pc, #84]	@ (8001b48 <main+0xa4>)
 8001af4:	4815      	ldr	r0, [pc, #84]	@ (8001b4c <main+0xa8>)
 8001af6:	f7ff fa6f 	bl	8000fd8 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 8001afa:	4815      	ldr	r0, [pc, #84]	@ (8001b50 <main+0xac>)
 8001afc:	f000 f92a 	bl	8001d54 <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 8001b00:	4814      	ldr	r0, [pc, #80]	@ (8001b54 <main+0xb0>)
 8001b02:	f000 f943 	bl	8001d8c <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 8001b06:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <main+0xb4>)
 8001b08:	f000 f95c 	bl	8001dc4 <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 8001b0c:	4813      	ldr	r0, [pc, #76]	@ (8001b5c <main+0xb8>)
 8001b0e:	f000 f975 	bl	8001dfc <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 8001b12:	4813      	ldr	r0, [pc, #76]	@ (8001b60 <main+0xbc>)
 8001b14:	f000 f98e 	bl	8001e34 <vLineSensor5Init>
  lcdInit(&hi2c2,(uint8_t)0x27,(uint8_t)2,(uint8_t)16);
 8001b18:	2310      	movs	r3, #16
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	2127      	movs	r1, #39	@ 0x27
 8001b1e:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <main+0xc0>)
 8001b20:	f7ff fcea 	bl	80014f8 <lcdInit>
  HAL_TIM_Base_Start_IT(&htim15);
 8001b24:	4810      	ldr	r0, [pc, #64]	@ (8001b68 <main+0xc4>)
 8001b26:	f006 fb83 	bl	8008230 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  	//vPrintMotorSpeed(0, 0);
    while (1)
    {
    	vPrintMotorSpeed(velocidadeRodaEsquerda, velocidadeRodaDireita);
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <main+0xc8>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <main+0xcc>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	eef0 0a47 	vmov.f32	s1, s14
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff ff3d 	bl	80019bc <vPrintMotorSpeed>
 8001b42:	e7f2      	b.n	8001b2a <main+0x86>
 8001b44:	2000066c 	.word	0x2000066c
 8001b48:	200007e8 	.word	0x200007e8
 8001b4c:	2000079c 	.word	0x2000079c
 8001b50:	200000b4 	.word	0x200000b4
 8001b54:	20000120 	.word	0x20000120
 8001b58:	2000018c 	.word	0x2000018c
 8001b5c:	200001f8 	.word	0x200001f8
 8001b60:	20000264 	.word	0x20000264
 8001b64:	200004e8 	.word	0x200004e8
 8001b68:	20000750 	.word	0x20000750
 8001b6c:	200004e0 	.word	0x200004e0
 8001b70:	200004e4 	.word	0x200004e4

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	@ 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	2238      	movs	r2, #56	@ 0x38
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f009 f8ee 	bl	800ad64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f005 fac2 	bl	8007120 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba6:	2340      	movs	r3, #64	@ 0x40
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001bb6:	2355      	movs	r3, #85	@ 0x55
 8001bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fb5c 	bl	8007288 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bd6:	f000 f829 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bda:	230f      	movs	r3, #15
 8001bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bde:	2303      	movs	r3, #3
 8001be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fe5a 	bl	80078ac <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bfe:	f000 f815 	bl	8001c2c <Error_Handler>
  }
}
 8001c02:	bf00      	nop
 8001c04:	3750      	adds	r7, #80	@ 0x50
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 8001c1c:	f000 fade 	bl	80021dc <vLineSensorPIDControl>
	}
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000750 	.word	0x20000750

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <Error_Handler+0x8>

08001c38 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8001c40:	4a15      	ldr	r2, [pc, #84]	@ (8001c98 <vMotorInit+0x60>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <vMotorInit+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fbc9 	bl	80083e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <vMotorInit+0x60>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2104      	movs	r1, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fbc3 	bl	80083e4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c64:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <vMotorInit+0x64>)
 8001c66:	f003 fb79 	bl	800535c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c70:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <vMotorInit+0x64>)
 8001c72:	f003 fb73 	bl	800535c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <vMotorInit+0x64>)
 8001c7c:	f003 fb6e 	bl	800535c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f003 fb67 	bl	800535c <HAL_GPIO_WritePin>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000610 	.word	0x20000610
 8001c9c:	48000400 	.word	0x48000400

08001ca0 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001caa:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d4c <vSetRodasDC+0xac>
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <vSetRodasDC+0xb0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 2a90 	vmov	r2, s15
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8001cd2:	edd7 7a00 	vldr	s15, [r7]
 8001cd6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001d4c <vSetRodasDC+0xac>
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <vSetRodasDC+0xb0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf0:	ee17 2a90 	vmov	r2, s15
 8001cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 8001cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001d4c <vSetRodasDC+0xac>
 8001cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <vSetRodasDC+0xb0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d14:	ee17 2a90 	vmov	r2, s15
 8001d18:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8001d1a:	edd7 7a00 	vldr	s15, [r7]
 8001d1e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001d4c <vSetRodasDC+0xac>
 8001d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <vSetRodasDC+0xb0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	447a0000 	.word	0x447a0000
 8001d50:	20000610 	.word	0x20000610

08001d54 <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8001d5c:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <vLineSensor1Init+0x30>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <vLineSensor1Init+0x30>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	217f      	movs	r1, #127	@ 0x7f
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fc13 	bl	8004594 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <vLineSensor1Init+0x30>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4904      	ldr	r1, [pc, #16]	@ (8001d88 <vLineSensor1Init+0x34>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fcfe 	bl	8003778 <HAL_ADC_Start_DMA>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000614 	.word	0x20000614
 8001d88:	20000628 	.word	0x20000628

08001d8c <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 8001d94:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <vLineSensor2Init+0x30>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <vLineSensor2Init+0x30>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	217f      	movs	r1, #127	@ 0x7f
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fbf7 	bl	8004594 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <vLineSensor2Init+0x30>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4904      	ldr	r1, [pc, #16]	@ (8001dc0 <vLineSensor2Init+0x34>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fce2 	bl	8003778 <HAL_ADC_Start_DMA>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000618 	.word	0x20000618
 8001dc0:	2000062c 	.word	0x2000062c

08001dc4 <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8001dcc:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <vLineSensor3Init+0x30>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <vLineSensor3Init+0x30>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	217f      	movs	r1, #127	@ 0x7f
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fbdb 	bl	8004594 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <vLineSensor3Init+0x30>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4904      	ldr	r1, [pc, #16]	@ (8001df8 <vLineSensor3Init+0x34>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fcc6 	bl	8003778 <HAL_ADC_Start_DMA>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000061c 	.word	0x2000061c
 8001df8:	20000630 	.word	0x20000630

08001dfc <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8001e04:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <vLineSensor4Init+0x30>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <vLineSensor4Init+0x30>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	217f      	movs	r1, #127	@ 0x7f
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 fbbf 	bl	8004594 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8001e16:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <vLineSensor4Init+0x30>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4904      	ldr	r1, [pc, #16]	@ (8001e30 <vLineSensor4Init+0x34>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fcaa 	bl	8003778 <HAL_ADC_Start_DMA>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000620 	.word	0x20000620
 8001e30:	20000634 	.word	0x20000634

08001e34 <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8001e3c:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <vLineSensor5Init+0x30>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <vLineSensor5Init+0x30>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	217f      	movs	r1, #127	@ 0x7f
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fba3 	bl	8004594 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <vLineSensor5Init+0x30>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4904      	ldr	r1, [pc, #16]	@ (8001e68 <vLineSensor5Init+0x34>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fc8e 	bl	8003778 <HAL_ADC_Start_DMA>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000624 	.word	0x20000624
 8001e68:	20000638 	.word	0x20000638

08001e6c <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8001e6c:	b4b0      	push	{r4, r5, r7}
 8001e6e:	b091      	sub	sp, #68	@ 0x44
 8001e70:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 8001e72:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <fLineSensorCalculatePosition+0x120>)
 8001e74:	f107 0418 	add.w	r4, r7, #24
 8001e78:	461d      	mov	r5, r3
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8001e8e:	4b40      	ldr	r3, [pc, #256]	@ (8001f90 <fLineSensorCalculatePosition+0x124>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <fLineSensorCalculatePosition+0x128>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f98 <fLineSensorCalculatePosition+0x12c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <fLineSensorCalculatePosition+0x130>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <fLineSensorCalculatePosition+0x134>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eb0:	e04c      	b.n	8001f4c <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3340      	adds	r3, #64	@ 0x40
 8001eb8:	443b      	add	r3, r7
 8001eba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001ebe:	4939      	ldr	r1, [pc, #228]	@ (8001fa4 <fLineSensorCalculatePosition+0x138>)
 8001ec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ec2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d33d      	bcc.n	8001f46 <fLineSensorCalculatePosition+0xda>
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3340      	adds	r3, #64	@ 0x40
 8001ed0:	443b      	add	r3, r7
 8001ed2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001ed6:	4934      	ldr	r1, [pc, #208]	@ (8001fa8 <fLineSensorCalculatePosition+0x13c>)
 8001ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d831      	bhi.n	8001f46 <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3340      	adds	r3, #64	@ 0x40
 8001ee8:	443b      	add	r3, r7
 8001eea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001eee:	492d      	ldr	r1, [pc, #180]	@ (8001fa4 <fLineSensorCalculatePosition+0x138>)
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	3301      	adds	r3, #1
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3340      	adds	r3, #64	@ 0x40
 8001f14:	443b      	add	r3, r7
 8001f16:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8001f36:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001f3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	3301      	adds	r3, #1
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	ddaf      	ble.n	8001eb2 <fLineSensorCalculatePosition+0x46>
        }
    }


    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8001f52:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001f56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d101      	bne.n	8001f64 <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <fLineSensorCalculatePosition+0x140>)
 8001f62:	e00b      	b.n	8001f7c <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8001f64:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001f68:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f70:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <fLineSensorCalculatePosition+0x144>)
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	6013      	str	r3, [r2, #0]
    return posicao;
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb0 0a67 	vmov.f32	s0, s15
 8001f84:	3744      	adds	r7, #68	@ 0x44
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bcb0      	pop	{r4, r5, r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	0800b6a4 	.word	0x0800b6a4
 8001f90:	20000628 	.word	0x20000628
 8001f94:	2000062c 	.word	0x2000062c
 8001f98:	20000630 	.word	0x20000630
 8001f9c:	20000634 	.word	0x20000634
 8001fa0:	20000638 	.word	0x20000638
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	42c60000 	.word	0x42c60000
 8001fb0:	20000648 	.word	0x20000648

08001fb4 <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <isSensor3DetectingLine+0x38>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <isSensor3DetectingLine+0x3c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d808      	bhi.n	8001fd8 <isSensor3DetectingLine+0x24>
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <isSensor3DetectingLine+0x40>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <isSensor3DetectingLine+0x3c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d301      	bcc.n	8001fd8 <isSensor3DetectingLine+0x24>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <isSensor3DetectingLine+0x26>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000630 	.word	0x20000630
 8001ff4:	20000014 	.word	0x20000014

08001ff8 <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <isSensor4DetectingLine+0x38>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	461a      	mov	r2, r3
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <isSensor4DetectingLine+0x3c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d808      	bhi.n	800201c <isSensor4DetectingLine+0x24>
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <isSensor4DetectingLine+0x40>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	461a      	mov	r2, r3
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <isSensor4DetectingLine+0x3c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d301      	bcc.n	800201c <isSensor4DetectingLine+0x24>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <isSensor4DetectingLine+0x26>
 800201c:	2300      	movs	r3, #0
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000000 	.word	0x20000000
 8002034:	20000634 	.word	0x20000634
 8002038:	20000014 	.word	0x20000014

0800203c <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[1]);
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <isSensor2DetectingLine+0x38>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	461a      	mov	r2, r3
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <isSensor2DetectingLine+0x3c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d808      	bhi.n	8002060 <isSensor2DetectingLine+0x24>
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <isSensor2DetectingLine+0x40>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <isSensor2DetectingLine+0x3c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d301      	bcc.n	8002060 <isSensor2DetectingLine+0x24>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <isSensor2DetectingLine+0x26>
 8002060:	2300      	movs	r3, #0
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000
 8002078:	2000062c 	.word	0x2000062c
 800207c:	20000014 	.word	0x20000014

08002080 <ajustarVelocidadeMotores>:
}
bool isSensor5DetectingLine() {
    return (lineSensor5Value >= minThresholds[4] && lineSensor2Value <= maxThresholds[4]);
}

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
 800208a:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 800208e:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <ajustarVelocidadeMotores+0x144>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 8002094:	4b4c      	ldr	r3, [pc, #304]	@ (80021c8 <ajustarVelocidadeMotores+0x148>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 estiverem detectando a linha branca e o 2 e 4 nao
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()&& !isSensor2DetectingLine()) {
 800209a:	f7ff ff8b 	bl	8001fb4 <isSensor3DetectingLine>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8085 	beq.w	80021b0 <ajustarVelocidadeMotores+0x130>
 80020a6:	f7ff ffa7 	bl	8001ff8 <isSensor4DetectingLine>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07c      	beq.n	80021b0 <ajustarVelocidadeMotores+0x130>
 80020b6:	f7ff ffc1 	bl	800203c <isSensor2DetectingLine>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d074      	beq.n	80021b0 <ajustarVelocidadeMotores+0x130>
        left_duty_cycle = 0.341;
 80020c6:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <ajustarVelocidadeMotores+0x14c>)
 80020c8:	607b      	str	r3, [r7, #4]
        right_duty_cycle = 0.341;
 80020ca:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <ajustarVelocidadeMotores+0x14c>)
 80020cc:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 80020ce:	4a40      	ldr	r2, [pc, #256]	@ (80021d0 <ajustarVelocidadeMotores+0x150>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 80020d4:	4a3f      	ldr	r2, [pc, #252]	@ (80021d4 <ajustarVelocidadeMotores+0x154>)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80020da:	edd7 0a00 	vldr	s1, [r7]
 80020de:	ed97 0a01 	vldr	s0, [r7, #4]
 80020e2:	f7ff fddd 	bl	8001ca0 <vSetRodasDC>
        // Se a velocidade da roda esquerda é maior, ajustamos a direita
        if (velEsquerda > velDireita) {
 80020e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	dd29      	ble.n	800214c <ajustarVelocidadeMotores+0xcc>
            float ajuste = velEsquerda / velDireita; // Fator de ajuste
 80020f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80020fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002104:	edc7 7a02 	vstr	s15, [r7, #8]
            float novoDutyCycleDireita = right_duty_cycle / ajuste;
 8002108:	edd7 6a00 	vldr	s13, [r7]
 800210c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	edc7 7a07 	vstr	s15, [r7, #28]
            //EsquMaiorDir = novoDutyCycleDireita;
            fsaidaDutyDireita =novoDutyCycleDireita;
 8002118:	4a2e      	ldr	r2, [pc, #184]	@ (80021d4 <ajustarVelocidadeMotores+0x154>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	6013      	str	r3, [r2, #0]
            fsaidaDutyEsquerda = left_duty_cycle;
 800211e:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <ajustarVelocidadeMotores+0x150>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleDireita > max_duty_cycle) {
 8002124:	4b2c      	ldr	r3, [pc, #176]	@ (80021d8 <ajustarVelocidadeMotores+0x158>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ed97 7a07 	vldr	s14, [r7, #28]
 800212e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	dd02      	ble.n	800213e <ajustarVelocidadeMotores+0xbe>
                novoDutyCycleDireita = max_duty_cycle;
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <ajustarVelocidadeMotores+0x158>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61fb      	str	r3, [r7, #28]
            }
            vSetRodasDC(left_duty_cycle, novoDutyCycleDireita);
 800213e:	edd7 0a07 	vldr	s1, [r7, #28]
 8002142:	ed97 0a01 	vldr	s0, [r7, #4]
 8002146:	f7ff fdab 	bl	8001ca0 <vSetRodasDC>
 800214a:	e031      	b.n	80021b0 <ajustarVelocidadeMotores+0x130>
        }
        // Se a velocidade da roda direita é maior, ajustamos a esquerda
        else if (velDireita > velEsquerda) {
 800214c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002150:	edd7 7a05 	vldr	s15, [r7, #20]
 8002154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	dd28      	ble.n	80021b0 <ajustarVelocidadeMotores+0x130>
            float ajuste = velDireita / velEsquerda; // Fator de ajuste
 800215e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002162:	ed97 7a05 	vldr	s14, [r7, #20]
 8002166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216a:	edc7 7a03 	vstr	s15, [r7, #12]
            float novoDutyCycleEsquerda = left_duty_cycle / ajuste;
 800216e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002172:	ed97 7a03 	vldr	s14, [r7, #12]
 8002176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217a:	edc7 7a06 	vstr	s15, [r7, #24]
            fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 800217e:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <ajustarVelocidadeMotores+0x150>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6013      	str	r3, [r2, #0]
            fsaidaDutyDireita = right_duty_cycle;
 8002184:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <ajustarVelocidadeMotores+0x154>)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6013      	str	r3, [r2, #0]
            // Limita o novo duty cycle para o máximo permitido
            if (novoDutyCycleEsquerda > max_duty_cycle) {
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <ajustarVelocidadeMotores+0x158>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ed97 7a06 	vldr	s14, [r7, #24]
 8002194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	dd02      	ble.n	80021a4 <ajustarVelocidadeMotores+0x124>
                novoDutyCycleEsquerda = max_duty_cycle;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <ajustarVelocidadeMotores+0x158>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	61bb      	str	r3, [r7, #24]
            }
            vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle);
 80021a4:	edd7 0a00 	vldr	s1, [r7]
 80021a8:	ed97 0a06 	vldr	s0, [r7, #24]
 80021ac:	f7ff fd78 	bl	8001ca0 <vSetRodasDC>
//    	left_duty_cycle = max_duty_cycle;
//    }
//    if (right_duty_cycle > max_duty_cycle) {
//    	right_duty_cycle = max_duty_cycle;
//    }
    vSetRodasDC(left_duty_cycle, right_duty_cycle);
 80021b0:	edd7 0a00 	vldr	s1, [r7]
 80021b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80021b8:	f7ff fd72 	bl	8001ca0 <vSetRodasDC>
 }
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200004e0 	.word	0x200004e0
 80021c8:	200004e4 	.word	0x200004e4
 80021cc:	3eae978d 	.word	0x3eae978d
 80021d0:	20000640 	.word	0x20000640
 80021d4:	20000644 	.word	0x20000644
 80021d8:	20000038 	.word	0x20000038

080021dc <vLineSensorPIDControl>:
//        vSetRodasDC(left_duty_cycle, right_duty_cycle);
//    }



void vLineSensorPIDControl(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80021e2:	f000 fe9b 	bl	8002f1c <HAL_GetTick>
 80021e6:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 80021e8:	4b77      	ldr	r3, [pc, #476]	@ (80023c8 <vLineSensorPIDControl+0x1ec>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80023cc <vLineSensorPIDControl+0x1f0>
 80021fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002200:	4b73      	ldr	r3, [pc, #460]	@ (80023d0 <vLineSensorPIDControl+0x1f4>)
 8002202:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <vLineSensorPIDControl+0x1f4>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d802      	bhi.n	800221c <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8002216:	4b6e      	ldr	r3, [pc, #440]	@ (80023d0 <vLineSensorPIDControl+0x1f4>)
 8002218:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <vLineSensorPIDControl+0x1f8>)
 800221a:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 800221c:	f7ff fe26 	bl	8001e6c <fLineSensorCalculatePosition>
 8002220:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8002224:	edd7 7a00 	vldr	s15, [r7]
 8002228:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80023d8 <vLineSensorPIDControl+0x1fc>
 800222c:	eef4 7a47 	vcmp.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d106      	bne.n	8002244 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
    	vSetRodasDC(0, 0);
 8002236:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80023dc <vLineSensorPIDControl+0x200>
 800223a:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80023dc <vLineSensorPIDControl+0x200>
 800223e:	f7ff fd2f 	bl	8001ca0 <vSetRodasDC>
        return;
 8002242:	e0be      	b.n	80023c2 <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 8002244:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80023dc <vLineSensorPIDControl+0x200>
 8002248:	edd7 7a00 	vldr	s15, [r7]
 800224c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002250:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <vLineSensorPIDControl+0x204>)
 8002252:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8002256:	4b62      	ldr	r3, [pc, #392]	@ (80023e0 <vLineSensorPIDControl+0x204>)
 8002258:	ed93 7a00 	vldr	s14, [r3]
 800225c:	4b5c      	ldr	r3, [pc, #368]	@ (80023d0 <vLineSensorPIDControl+0x1f4>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <vLineSensorPIDControl+0x208>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002270:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <vLineSensorPIDControl+0x208>)
 8002272:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8002276:	4b5a      	ldr	r3, [pc, #360]	@ (80023e0 <vLineSensorPIDControl+0x204>)
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <vLineSensorPIDControl+0x20c>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002286:	4b52      	ldr	r3, [pc, #328]	@ (80023d0 <vLineSensorPIDControl+0x1f4>)
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	4b56      	ldr	r3, [pc, #344]	@ (80023ec <vLineSensorPIDControl+0x210>)
 8002292:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 8002296:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <vLineSensorPIDControl+0x214>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <vLineSensorPIDControl+0x204>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a6:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <vLineSensorPIDControl+0x218>)
 80022a8:	edd3 6a00 	vldr	s13, [r3]
 80022ac:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <vLineSensorPIDControl+0x208>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ba:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <vLineSensorPIDControl+0x21c>)
 80022bc:	edd3 6a00 	vldr	s13, [r3]
 80022c0:	4b4a      	ldr	r3, [pc, #296]	@ (80023ec <vLineSensorPIDControl+0x210>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	eef1 7a67 	vneg.f32	s15, s15
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <vLineSensorPIDControl+0x220>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 80022d8:	4b48      	ldr	r3, [pc, #288]	@ (80023fc <vLineSensorPIDControl+0x220>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a48      	ldr	r2, [pc, #288]	@ (8002400 <vLineSensorPIDControl+0x224>)
 80022de:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 80022e0:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <vLineSensorPIDControl+0x220>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <vLineSensorPIDControl+0x228>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	dd03      	ble.n	80022fe <vLineSensorPIDControl+0x122>
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <vLineSensorPIDControl+0x228>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a40      	ldr	r2, [pc, #256]	@ (80023fc <vLineSensorPIDControl+0x220>)
 80022fc:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <vLineSensorPIDControl+0x228>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb1 7a67 	vneg.f32	s14, s15
 8002308:	4b3c      	ldr	r3, [pc, #240]	@ (80023fc <vLineSensorPIDControl+0x220>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	dd07      	ble.n	8002328 <vLineSensorPIDControl+0x14c>
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <vLineSensorPIDControl+0x228>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eef1 7a67 	vneg.f32	s15, s15
 8002322:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <vLineSensorPIDControl+0x220>)
 8002324:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 8002328:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <vLineSensorPIDControl+0x204>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <vLineSensorPIDControl+0x20c>)
 800232e:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <vLineSensorPIDControl+0x1ec>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 8002336:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <vLineSensorPIDControl+0x22c>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <vLineSensorPIDControl+0x220>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <vLineSensorPIDControl+0x22c>)
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <vLineSensorPIDControl+0x220>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 0.5f) left_duty_cycle = max_duty_cycle;
 800235e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002362:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	dd02      	ble.n	8002376 <vLineSensorPIDControl+0x19a>
 8002370:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <vLineSensorPIDControl+0x228>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = base_speed;
 8002376:	edd7 7a03 	vldr	s15, [r7, #12]
 800237a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	d502      	bpl.n	800238a <vLineSensorPIDControl+0x1ae>
 8002384:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <vLineSensorPIDControl+0x22c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 0.5f) right_duty_cycle = max_duty_cycle;
 800238a:	edd7 7a02 	vldr	s15, [r7, #8]
 800238e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	dd02      	ble.n	80023a2 <vLineSensorPIDControl+0x1c6>
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <vLineSensorPIDControl+0x228>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = base_speed;
 80023a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d502      	bpl.n	80023b6 <vLineSensorPIDControl+0x1da>
 80023b0:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <vLineSensorPIDControl+0x22c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 80023b6:	edd7 0a02 	vldr	s1, [r7, #8]
 80023ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80023be:	f7ff fe5f 	bl	8002080 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000664 	.word	0x20000664
 80023cc:	447a0000 	.word	0x447a0000
 80023d0:	20000030 	.word	0x20000030
 80023d4:	3c23d70a 	.word	0x3c23d70a
 80023d8:	42c60000 	.word	0x42c60000
 80023dc:	00000000 	.word	0x00000000
 80023e0:	20000650 	.word	0x20000650
 80023e4:	20000658 	.word	0x20000658
 80023e8:	20000654 	.word	0x20000654
 80023ec:	2000065c 	.word	0x2000065c
 80023f0:	20000028 	.word	0x20000028
 80023f4:	2000064c 	.word	0x2000064c
 80023f8:	2000002c 	.word	0x2000002c
 80023fc:	20000660 	.word	0x20000660
 8002400:	2000063c 	.word	0x2000063c
 8002404:	20000038 	.word	0x20000038
 8002408:	20000034 	.word	0x20000034

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_MspInit+0x44>)
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <HAL_MspInit+0x44>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6613      	str	r3, [r2, #96]	@ 0x60
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_MspInit+0x44>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_MspInit+0x44>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	4a08      	ldr	r2, [pc, #32]	@ (8002450 <HAL_MspInit+0x44>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	@ 0x58
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_MspInit+0x44>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002442:	f004 ff11 	bl	8007268 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <NMI_Handler+0x4>

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <MemManage_Handler+0x4>

0800246c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <UsageFault_Handler+0x4>

0800247c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024aa:	f000 fd25 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <DMA1_Channel6_IRQHandler+0x10>)
 80024ba:	f002 fc6f 	bl	8004d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000053c 	.word	0x2000053c

080024c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <DMA1_Channel7_IRQHandler+0x10>)
 80024ce:	f002 fc65 	bl	8004d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000059c 	.word	0x2000059c

080024dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e0:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80024e2:	f006 fa43 	bl	800896c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80024e6:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80024e8:	f006 fa40 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000066c 	.word	0x2000066c
 80024f4:	20000750 	.word	0x20000750

080024f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4803      	ldr	r0, [pc, #12]	@ (800250c <TIM1_UP_TIM16_IRQHandler+0x14>)
 80024fe:	f006 fa35 	bl	800896c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002504:	f006 fa32 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2000066c 	.word	0x2000066c
 8002510:	2000079c 	.word	0x2000079c

08002514 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002518:	4803      	ldr	r0, [pc, #12]	@ (8002528 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800251a:	f006 fa27 	bl	800896c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800251e:	4803      	ldr	r0, [pc, #12]	@ (800252c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002520:	f006 fa24 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000066c 	.word	0x2000066c
 800252c:	200007e8 	.word	0x200007e8

08002530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <TIM2_IRQHandler+0x10>)
 8002536:	f006 fa19 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200006b8 	.word	0x200006b8

08002544 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002548:	4802      	ldr	r0, [pc, #8]	@ (8002554 <I2C2_EV_IRQHandler+0x10>)
 800254a:	f003 f8f1 	bl	8005730 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200004e8 	.word	0x200004e8

08002558 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <I2C2_ER_IRQHandler+0x10>)
 800255e:	f003 f901 	bl	8005764 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200004e8 	.word	0x200004e8

0800256c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002570:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002574:	f002 ff0a 	bl	800538c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f008 fbe2 	bl	800ad74 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20020000 	.word	0x20020000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20000668 	.word	0x20000668
 80025e4:	20000a18 	.word	0x20000a18

080025e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <SystemInit+0x20>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <SystemInit+0x20>)
 80025f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b09c      	sub	sp, #112	@ 0x70
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2234      	movs	r2, #52	@ 0x34
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f008 fb8c 	bl	800ad64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <MX_TIM1_Init+0x170>)
 800264e:	4a4c      	ldr	r2, [pc, #304]	@ (8002780 <MX_TIM1_Init+0x174>)
 8002650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002652:	4b4a      	ldr	r3, [pc, #296]	@ (800277c <MX_TIM1_Init+0x170>)
 8002654:	22a9      	movs	r2, #169	@ 0xa9
 8002656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b48      	ldr	r3, [pc, #288]	@ (800277c <MX_TIM1_Init+0x170>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800265e:	4b47      	ldr	r3, [pc, #284]	@ (800277c <MX_TIM1_Init+0x170>)
 8002660:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b45      	ldr	r3, [pc, #276]	@ (800277c <MX_TIM1_Init+0x170>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800266c:	4b43      	ldr	r3, [pc, #268]	@ (800277c <MX_TIM1_Init+0x170>)
 800266e:	2200      	movs	r2, #0
 8002670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002672:	4b42      	ldr	r3, [pc, #264]	@ (800277c <MX_TIM1_Init+0x170>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002678:	4840      	ldr	r0, [pc, #256]	@ (800277c <MX_TIM1_Init+0x170>)
 800267a:	f005 fd81 	bl	8008180 <HAL_TIM_Base_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002684:	f7ff fad2 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800268e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002692:	4619      	mov	r1, r3
 8002694:	4839      	ldr	r0, [pc, #228]	@ (800277c <MX_TIM1_Init+0x170>)
 8002696:	f006 fc69 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026a0:	f7ff fac4 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026a4:	4835      	ldr	r0, [pc, #212]	@ (800277c <MX_TIM1_Init+0x170>)
 80026a6:	f005 fe3b 	bl	8008320 <HAL_TIM_PWM_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026b0:	f7ff fabc 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026c4:	4619      	mov	r1, r3
 80026c6:	482d      	ldr	r0, [pc, #180]	@ (800277c <MX_TIM1_Init+0x170>)
 80026c8:	f007 fb4e 	bl	8009d68 <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80026d2:	f7ff faab 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d6:	2360      	movs	r3, #96	@ 0x60
 80026d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026de:	2300      	movs	r3, #0
 80026e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4820      	ldr	r0, [pc, #128]	@ (800277c <MX_TIM1_Init+0x170>)
 80026fc:	f006 fb22 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002706:	f7ff fa91 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800270a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800270e:	2204      	movs	r2, #4
 8002710:	4619      	mov	r1, r3
 8002712:	481a      	ldr	r0, [pc, #104]	@ (800277c <MX_TIM1_Init+0x170>)
 8002714:	f006 fb16 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800271e:	f7ff fa85 	bl	8001c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800273a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002748:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4807      	ldr	r0, [pc, #28]	@ (800277c <MX_TIM1_Init+0x170>)
 8002760:	f007 fb98 	bl	8009e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800276a:	f7ff fa5f 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800276e:	4803      	ldr	r0, [pc, #12]	@ (800277c <MX_TIM1_Init+0x170>)
 8002770:	f000 fa6c 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8002774:	bf00      	nop
 8002776:	3770      	adds	r7, #112	@ 0x70
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000066c 	.word	0x2000066c
 8002780:	40012c00 	.word	0x40012c00

08002784 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <MX_TIM2_Init+0x98>)
 80027a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000-1;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <MX_TIM2_Init+0x98>)
 80027ac:	f244 2267 	movw	r2, #16999	@ 0x4267
 80027b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <MX_TIM2_Init+0x98>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80027b8:	4b18      	ldr	r3, [pc, #96]	@ (800281c <MX_TIM2_Init+0x98>)
 80027ba:	f241 3287 	movw	r2, #4999	@ 0x1387
 80027be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <MX_TIM2_Init+0x98>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <MX_TIM2_Init+0x98>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027cc:	4813      	ldr	r0, [pc, #76]	@ (800281c <MX_TIM2_Init+0x98>)
 80027ce:	f005 fcd7 	bl	8008180 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027d8:	f7ff fa28 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4619      	mov	r1, r3
 80027e8:	480c      	ldr	r0, [pc, #48]	@ (800281c <MX_TIM2_Init+0x98>)
 80027ea:	f006 fbbf 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80027f4:	f7ff fa1a 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	@ (800281c <MX_TIM2_Init+0x98>)
 8002806:	f007 faaf 	bl	8009d68 <HAL_TIMEx_MasterConfigSynchronization>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002810:	f7ff fa0c 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200006b8 	.word	0x200006b8

08002820 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <MX_TIM6_Init+0x64>)
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <MX_TIM6_Init+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <MX_TIM6_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <MX_TIM6_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <MX_TIM6_Init+0x64>)
 8002844:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002848:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <MX_TIM6_Init+0x64>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <MX_TIM6_Init+0x64>)
 8002852:	f005 fc95 	bl	8008180 <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800285c:	f7ff f9e6 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <MX_TIM6_Init+0x64>)
 800286e:	f007 fa7b 	bl	8009d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002878:	f7ff f9d8 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000704 	.word	0x20000704
 8002888:	40001000 	.word	0x40001000

0800288c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028ac:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <MX_TIM15_Init+0xa0>)
 80028ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 17000-1;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028b2:	f244 2267 	movw	r2, #16999	@ 0x4267
 80028b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028c0:	2263      	movs	r2, #99	@ 0x63
 80028c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028ca:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80028d6:	4814      	ldr	r0, [pc, #80]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028d8:	f005 fc52 	bl	8008180 <HAL_TIM_Base_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80028e2:	f7ff f9a3 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	@ (8002928 <MX_TIM15_Init+0x9c>)
 80028f4:	f006 fb3a 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80028fe:	f7ff f995 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4806      	ldr	r0, [pc, #24]	@ (8002928 <MX_TIM15_Init+0x9c>)
 8002910:	f007 fa2a 	bl	8009d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800291a:	f7ff f987 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000750 	.word	0x20000750
 800292c:	40014000 	.word	0x40014000

08002930 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002936:	463b      	mov	r3, r7
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002942:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002944:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <MX_TIM16_Init+0x90>)
 8002946:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <MX_TIM16_Init+0x8c>)
 800294a:	22a9      	movs	r2, #169	@ 0xa9
 800294c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800295a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295c:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <MX_TIM16_Init+0x8c>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002962:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <MX_TIM16_Init+0x8c>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800296e:	4813      	ldr	r0, [pc, #76]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002970:	f005 fc06 	bl	8008180 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800297a:	f7ff f957 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800297e:	480f      	ldr	r0, [pc, #60]	@ (80029bc <MX_TIM16_Init+0x8c>)
 8002980:	f005 fe42 	bl	8008608 <HAL_TIM_IC_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800298a:	f7ff f94f 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002992:	2301      	movs	r3, #1
 8002994:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800299a:	230f      	movs	r3, #15
 800299c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800299e:	463b      	mov	r3, r7
 80029a0:	2200      	movs	r2, #0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	@ (80029bc <MX_TIM16_Init+0x8c>)
 80029a6:	f006 f930 	bl	8008c0a <HAL_TIM_IC_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80029b0:	f7ff f93c 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000079c 	.word	0x2000079c
 80029c0:	40014400 	.word	0x40014400

080029c4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80029ca:	463b      	mov	r3, r7
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80029d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a54 <MX_TIM17_Init+0x90>)
 80029da:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80029dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029de:	22a9      	movs	r2, #169	@ 0xa9
 80029e0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a02:	4813      	ldr	r0, [pc, #76]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 8002a04:	f005 fbbc 	bl	8008180 <HAL_TIM_Base_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002a0e:	f7ff f90d 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002a12:	480f      	ldr	r0, [pc, #60]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 8002a14:	f005 fdf8 	bl	8008608 <HAL_TIM_IC_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002a1e:	f7ff f905 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a26:	2301      	movs	r3, #1
 8002a28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002a2e:	230f      	movs	r3, #15
 8002a30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <MX_TIM17_Init+0x8c>)
 8002a3a:	f006 f8e6 	bl	8008c0a <HAL_TIM_IC_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8002a44:	f7ff f8f2 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200007e8 	.word	0x200007e8
 8002a54:	40014800 	.word	0x40014800

08002a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b090      	sub	sp, #64	@ 0x40
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	@ (8002c30 <HAL_TIM_Base_MspInit+0x1d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d124      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002a80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a86:	4b6b      	ldr	r3, [pc, #428]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2018      	movs	r0, #24
 8002a98:	f001 ffc1 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a9c:	2018      	movs	r0, #24
 8002a9e:	f001 ffd8 	bl	8004a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2019      	movs	r0, #25
 8002aa8:	f001 ffb9 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002aac:	2019      	movs	r0, #25
 8002aae:	f001 ffd0 	bl	8004a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	201a      	movs	r0, #26
 8002ab8:	f001 ffb1 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002abc:	201a      	movs	r0, #26
 8002abe:	f001 ffc8 	bl	8004a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ac2:	e0b0      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d114      	bne.n	8002af8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ace:	4b59      	ldr	r3, [pc, #356]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	4a58      	ldr	r2, [pc, #352]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ada:	4b56      	ldr	r3, [pc, #344]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	201c      	movs	r0, #28
 8002aec:	f001 ff97 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002af0:	201c      	movs	r0, #28
 8002af2:	f001 ffae 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 8002af6:	e096      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM6)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a4e      	ldr	r2, [pc, #312]	@ (8002c38 <HAL_TIM_Base_MspInit+0x1e0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10c      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b02:	4b4c      	ldr	r3, [pc, #304]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	4a4b      	ldr	r2, [pc, #300]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0e:	4b49      	ldr	r3, [pc, #292]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
}
 8002b1a:	e084      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM15)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a46      	ldr	r2, [pc, #280]	@ (8002c3c <HAL_TIM_Base_MspInit+0x1e4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d114      	bne.n	8002b50 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b26:	4b43      	ldr	r3, [pc, #268]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	4a42      	ldr	r2, [pc, #264]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b32:	4b40      	ldr	r3, [pc, #256]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2018      	movs	r0, #24
 8002b44:	f001 ff6b 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b48:	2018      	movs	r0, #24
 8002b4a:	f001 ff82 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 8002b4e:	e06a      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM16)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3a      	ldr	r2, [pc, #232]	@ (8002c40 <HAL_TIM_Base_MspInit+0x1e8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d130      	bne.n	8002bbc <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b5a:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5e:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b66:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4b30      	ldr	r3, [pc, #192]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4827      	ldr	r0, [pc, #156]	@ (8002c44 <HAL_TIM_Base_MspInit+0x1ec>)
 8002ba6:	f002 fa57 	bl	8005058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2019      	movs	r0, #25
 8002bb0:	f001 ff35 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bb4:	2019      	movs	r0, #25
 8002bb6:	f001 ff4c 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 8002bba:	e034      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM17)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_TIM_Base_MspInit+0x1f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d12f      	bne.n	8002c26 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	4a1a      	ldr	r2, [pc, #104]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd2:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b15      	ldr	r3, [pc, #84]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HAL_TIM_Base_MspInit+0x1dc>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002c06:	230a      	movs	r3, #10
 8002c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 8002c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	@ (8002c44 <HAL_TIM_Base_MspInit+0x1ec>)
 8002c12:	f002 fa21 	bl	8005058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	201a      	movs	r0, #26
 8002c1c:	f001 feff 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c20:	201a      	movs	r0, #26
 8002c22:	f001 ff16 	bl	8004a52 <HAL_NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3740      	adds	r7, #64	@ 0x40
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40001000 	.word	0x40001000
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	48000400 	.word	0x48000400
 8002c48:	40014800 	.word	0x40014800

08002c4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_TIM_MspPostInit+0x64>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8002c86:	2303      	movs	r3, #3
 8002c88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <HAL_TIM_MspPostInit+0x6c>)
 8002ca2:	f002 f9d9 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	48000800 	.word	0x48000800

08002cbc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cc2:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <MX_LPUART1_UART_Init+0x90>)
 8002cc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cec:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf2:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cfe:	4812      	ldr	r0, [pc, #72]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002d00:	f007 f9a2 	bl	800a048 <HAL_UART_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d0a:	f7fe ff8f 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002d12:	f007 ff3d 	bl	800ab90 <HAL_UARTEx_SetTxFifoThreshold>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002d1c:	f7fe ff86 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d20:	2100      	movs	r1, #0
 8002d22:	4809      	ldr	r0, [pc, #36]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002d24:	f007 ff72 	bl	800ac0c <HAL_UARTEx_SetRxFifoThreshold>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002d2e:	f7fe ff7d 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d32:	4805      	ldr	r0, [pc, #20]	@ (8002d48 <MX_LPUART1_UART_Init+0x8c>)
 8002d34:	f007 fef3 	bl	800ab1e <HAL_UARTEx_DisableFifoMode>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002d3e:	f7fe ff75 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000834 	.word	0x20000834
 8002d4c:	40008000 	.word	0x40008000

08002d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b09e      	sub	sp, #120	@ 0x78
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	2254      	movs	r2, #84	@ 0x54
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f007 fff7 	bl	800ad64 <memset>
  if(uartHandle->Instance==LPUART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <HAL_UART_MspInit+0xa8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d136      	bne.n	8002dee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d80:	2320      	movs	r3, #32
 8002d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 ffa9 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d98:	f7fe ff48 	bl	8001c2c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d9c:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db8:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_UART_MspInit+0xac>)
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002dcc:	230c      	movs	r3, #12
 8002dce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dea:	f002 f935 	bl	8005058 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002dee:	bf00      	nop
 8002df0:	3778      	adds	r7, #120	@ 0x78
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40008000 	.word	0x40008000
 8002dfc:	40021000 	.word	0x40021000

08002e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e00:	480d      	ldr	r0, [pc, #52]	@ (8002e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e04:	f7ff fbf0 	bl	80025e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e08:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e0a:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <LoopForever+0xe>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e20:	4c0a      	ldr	r4, [pc, #40]	@ (8002e4c <LoopForever+0x16>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f007 ffa7 	bl	800ad80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e32:	f7fe fe37 	bl	8001aa4 <main>

08002e36 <LoopForever>:

LoopForever:
    b LoopForever
 8002e36:	e7fe      	b.n	8002e36 <LoopForever>
  ldr   r0, =_estack
 8002e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002e44:	0800b740 	.word	0x0800b740
  ldr r2, =_sbss
 8002e48:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002e4c:	20000a14 	.word	0x20000a14

08002e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC1_2_IRQHandler>

08002e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	f001 fdd3 	bl	8004a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e62:	2000      	movs	r0, #0
 8002e64:	f000 f80e 	bl	8002e84 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	71fb      	strb	r3, [r7, #7]
 8002e72:	e001      	b.n	8002e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e74:	f7ff faca 	bl	800240c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e78:	79fb      	ldrb	r3, [r7, #7]

}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <HAL_InitTick+0x68>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d022      	beq.n	8002ede <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e98:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_InitTick+0x6c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_InitTick+0x68>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fdde 	bl	8004a6e <HAL_SYSTICK_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	d809      	bhi.n	8002ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec6:	f001 fdaa 	bl	8004a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_InitTick+0x70>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e004      	b.n	8002ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000044 	.word	0x20000044
 8002ef0:	2000003c 	.word	0x2000003c
 8002ef4:	20000040 	.word	0x20000040

08002ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_IncTick+0x1c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <HAL_IncTick+0x20>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <HAL_IncTick+0x1c>)
 8002f08:	6013      	str	r3, [r2, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	200008c8 	.word	0x200008c8
 8002f18:	20000044 	.word	0x20000044

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200008c8 	.word	0x200008c8

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d004      	beq.n	8002f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_Delay+0x40>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f58:	bf00      	nop
 8002f5a:	f7ff ffdf 	bl	8002f1c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d8f7      	bhi.n	8002f5a <HAL_Delay+0x26>
  {
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000044 	.word	0x20000044

08002f78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3360      	adds	r3, #96	@ 0x60
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <LL_ADC_SetOffset+0x44>)
 8003002:	4013      	ands	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	4313      	orrs	r3, r2
 8003010:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	03fff000 	.word	0x03fff000

08003028 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3360      	adds	r3, #96	@ 0x60
 8003036:	461a      	mov	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3360      	adds	r3, #96	@ 0x60
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	431a      	orrs	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3360      	adds	r3, #96	@ 0x60
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3360      	adds	r3, #96	@ 0x60
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	615a      	str	r2, [r3, #20]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003142:	b480      	push	{r7}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3330      	adds	r3, #48	@ 0x30
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	4413      	add	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	211f      	movs	r1, #31
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 011f 	and.w	r1, r3, #31
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3314      	adds	r3, #20
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	0e5b      	lsrs	r3, r3, #25
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	4413      	add	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	0d1b      	lsrs	r3, r3, #20
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2107      	movs	r1, #7
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	0d1b      	lsrs	r3, r3, #20
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0318 	and.w	r3, r3, #24
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003214:	40d9      	lsrs	r1, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	400b      	ands	r3, r1
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	0007ffff 	.word	0x0007ffff

08003238 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6093      	str	r3, [r2, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328c:	d101      	bne.n	8003292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800332c:	f043 0202 	orr.w	r2, r3, #2
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <LL_ADC_IsEnabled+0x18>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <LL_ADC_IsEnabled+0x1a>
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d101      	bne.n	800337e <LL_ADC_IsDisableOngoing+0x18>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <LL_ADC_IsDisableOngoing+0x1a>
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800339c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d101      	bne.n	80033cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d101      	bne.n	80033f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b089      	sub	sp, #36	@ 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e1a9      	b.n	800376e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fb27 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff19 	bl	8003278 <LL_ADC_IsDeepPowerDownEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff feff 	bl	8003254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff34 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff18 	bl	80032a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003470:	4b9c      	ldr	r3, [pc, #624]	@ (80036e4 <HAL_ADC_Init+0x2e4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	4a9c      	ldr	r2, [pc, #624]	@ (80036e8 <HAL_ADC_Init+0x2e8>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	3301      	adds	r3, #1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003484:	e002      	b.n	800348c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f9      	bne.n	8003486 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff16 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff76 	bl	80033b4 <LL_ADC_REG_IsConversionOngoing>
 80034c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 8142 	bne.w	800375c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 813e 	bne.w	800375c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034e8:	f043 0202 	orr.w	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff23 	bl	8003340 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d141      	bne.n	8003584 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003508:	d004      	beq.n	8003514 <HAL_ADC_Init+0x114>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a77      	ldr	r2, [pc, #476]	@ (80036ec <HAL_ADC_Init+0x2ec>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10f      	bne.n	8003534 <HAL_ADC_Init+0x134>
 8003514:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003518:	f7ff ff12 	bl	8003340 <LL_ADC_IsEnabled>
 800351c:	4604      	mov	r4, r0
 800351e:	4873      	ldr	r0, [pc, #460]	@ (80036ec <HAL_ADC_Init+0x2ec>)
 8003520:	f7ff ff0e 	bl	8003340 <LL_ADC_IsEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	4323      	orrs	r3, r4
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e012      	b.n	800355a <HAL_ADC_Init+0x15a>
 8003534:	486e      	ldr	r0, [pc, #440]	@ (80036f0 <HAL_ADC_Init+0x2f0>)
 8003536:	f7ff ff03 	bl	8003340 <LL_ADC_IsEnabled>
 800353a:	4604      	mov	r4, r0
 800353c:	486d      	ldr	r0, [pc, #436]	@ (80036f4 <HAL_ADC_Init+0x2f4>)
 800353e:	f7ff feff 	bl	8003340 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	431c      	orrs	r4, r3
 8003546:	486c      	ldr	r0, [pc, #432]	@ (80036f8 <HAL_ADC_Init+0x2f8>)
 8003548:	f7ff fefa 	bl	8003340 <LL_ADC_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	4323      	orrs	r3, r4
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003566:	d004      	beq.n	8003572 <HAL_ADC_Init+0x172>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5f      	ldr	r2, [pc, #380]	@ (80036ec <HAL_ADC_Init+0x2ec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_ADC_Init+0x176>
 8003572:	4a62      	ldr	r2, [pc, #392]	@ (80036fc <HAL_ADC_Init+0x2fc>)
 8003574:	e000      	b.n	8003578 <HAL_ADC_Init+0x178>
 8003576:	4a62      	ldr	r2, [pc, #392]	@ (8003700 <HAL_ADC_Init+0x300>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f7ff fcfa 	bl	8002f78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	7f5b      	ldrb	r3, [r3, #29]
 8003588:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800358e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003594:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800359a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d106      	bne.n	80035c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	045b      	lsls	r3, r3, #17
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	4b48      	ldr	r3, [pc, #288]	@ (8003704 <HAL_ADC_Init+0x304>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	69b9      	ldr	r1, [r7, #24]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fee5 	bl	80033da <LL_ADC_INJ_IsConversionOngoing>
 8003610:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d17f      	bne.n	8003718 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d17c      	bne.n	8003718 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003622:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800362a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800363a:	f023 0302 	bic.w	r3, r3, #2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	430b      	orrs	r3, r1
 8003646:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800365e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003668:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800366c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6911      	ldr	r1, [r2, #16]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800367e:	e013      	b.n	80036a8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800368e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80036a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d12a      	bne.n	8003708 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036d4:	430a      	orrs	r2, r1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
 80036e2:	e019      	b.n	8003718 <HAL_ADC_Init+0x318>
 80036e4:	2000003c 	.word	0x2000003c
 80036e8:	053e2d63 	.word	0x053e2d63
 80036ec:	50000100 	.word	0x50000100
 80036f0:	50000400 	.word	0x50000400
 80036f4:	50000500 	.word	0x50000500
 80036f8:	50000600 	.word	0x50000600
 80036fc:	50000300 	.word	0x50000300
 8003700:	50000700 	.word	0x50000700
 8003704:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10c      	bne.n	800373a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f023 010f 	bic.w	r1, r3, #15
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
 8003738:	e007      	b.n	800374a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 020f 	bic.w	r2, r2, #15
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	65da      	str	r2, [r3, #92]	@ 0x5c
 800375a:	e007      	b.n	800376c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800376c:	7ffb      	ldrb	r3, [r7, #31]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop

08003778 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378c:	d004      	beq.n	8003798 <HAL_ADC_Start_DMA+0x20>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5a      	ldr	r2, [pc, #360]	@ (80038fc <HAL_ADC_Start_DMA+0x184>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_ADC_Start_DMA+0x24>
 8003798:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <HAL_ADC_Start_DMA+0x188>)
 800379a:	e000      	b.n	800379e <HAL_ADC_Start_DMA+0x26>
 800379c:	4b59      	ldr	r3, [pc, #356]	@ (8003904 <HAL_ADC_Start_DMA+0x18c>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fd4a 	bl	8003238 <LL_ADC_GetMultimode>
 80037a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fe02 	bl	80033b4 <LL_ADC_REG_IsConversionOngoing>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 809b 	bne.w	80038ee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_Start_DMA+0x4e>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e096      	b.n	80038f4 <HAL_ADC_Start_DMA+0x17c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003908 <HAL_ADC_Start_DMA+0x190>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d008      	beq.n	80037ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	d17a      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fcf6 	bl	80041dc <ADC_Enable>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d16d      	bne.n	80038d6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3a      	ldr	r2, [pc, #232]	@ (80038fc <HAL_ADC_Start_DMA+0x184>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_ADC_Start_DMA+0xb4>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_ADC_Start_DMA+0x194>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d002      	beq.n	8003828 <HAL_ADC_Start_DMA+0xb0>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e003      	b.n	8003830 <HAL_ADC_Start_DMA+0xb8>
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <HAL_ADC_Start_DMA+0x198>)
 800382a:	e001      	b.n	8003830 <HAL_ADC_Start_DMA+0xb8>
 800382c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	4293      	cmp	r3, r2
 8003836:	d002      	beq.n	800383e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f023 0206 	bic.w	r2, r3, #6
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60
 8003862:	e002      	b.n	800386a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <HAL_ADC_Start_DMA+0x19c>)
 8003870:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_ADC_Start_DMA+0x1a0>)
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387e:	4a27      	ldr	r2, [pc, #156]	@ (800391c <HAL_ADC_Start_DMA+0x1a4>)
 8003880:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	221c      	movs	r2, #28
 8003888:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0210 	orr.w	r2, r2, #16
 80038a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3340      	adds	r3, #64	@ 0x40
 80038bc:	4619      	mov	r1, r3
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f001 f989 	bl	8004bd8 <HAL_DMA_Start_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fd5c 	bl	800338c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038d4:	e00d      	b.n	80038f2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80038de:	e008      	b.n	80038f2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80038ec:	e001      	b.n	80038f2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
 80038f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	50000100 	.word	0x50000100
 8003900:	50000300 	.word	0x50000300
 8003904:	50000700 	.word	0x50000700
 8003908:	50000600 	.word	0x50000600
 800390c:	50000500 	.word	0x50000500
 8003910:	50000400 	.word	0x50000400
 8003914:	080043c7 	.word	0x080043c7
 8003918:	0800449f 	.word	0x0800449f
 800391c:	080044bb 	.word	0x080044bb

08003920 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b0b6      	sub	sp, #216	@ 0xd8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x24>
 800397a:	2302      	movs	r3, #2
 800397c:	f000 bc13 	b.w	80041a6 <HAL_ADC_ConfigChannel+0x84a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd11 	bl	80033b4 <LL_ADC_REG_IsConversionOngoing>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 83f3 	bne.w	8004180 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f7ff fbcb 	bl	8003142 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fcff 	bl	80033b4 <LL_ADC_REG_IsConversionOngoing>
 80039b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fd0b 	bl	80033da <LL_ADC_INJ_IsConversionOngoing>
 80039c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 81d9 	bne.w	8003d84 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 81d4 	bne.w	8003d84 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039e4:	d10f      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7ff fbd2 	bl	800319a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb79 	bl	80030f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a04:	e00e      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7ff fbc1 	bl	800319a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fb69 	bl	80030f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d022      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6919      	ldr	r1, [r3, #16]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a56:	f7ff fac3 	bl	8002fe0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6919      	ldr	r1, [r3, #16]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7ff fb0f 	bl	800308a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x126>
 8003a7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x128>
 8003a82:	2300      	movs	r3, #0
 8003a84:	461a      	mov	r2, r3
 8003a86:	f7ff fb1b 	bl	80030c0 <LL_ADC_SetOffsetSaturation>
 8003a8a:	e17b      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fac8 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x15c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fabd 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	f003 021f 	and.w	r2, r3, #31
 8003ab6:	e01e      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x19a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fab2 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e004      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x1b2>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	0e9b      	lsrs	r3, r3, #26
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	e018      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1e4>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003b32:	2320      	movs	r3, #32
 8003b34:	e004      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d106      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fa81 	bl	8003054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fa65 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x222>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fa5a 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	0e9b      	lsrs	r3, r3, #26
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	e01e      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x260>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fa4f 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003b9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e004      	b.n	8003bba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x278>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	e018      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x2aa>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e004      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d106      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2101      	movs	r1, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fa1e 	bl	8003054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fa02 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x2e8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f9f7 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	f003 021f 	and.w	r2, r3, #31
 8003c42:	e01e      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x326>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f9ec 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003c6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x33e>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	e016      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x36c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e004      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff f9bd 	bl	8003054 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f9a1 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x3aa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f996 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	e017      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x3da>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff f98b 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e003      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x3f2>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	e011      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x416>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e003      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d106      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f968 	bl	8003054 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fad9 	bl	8003340 <LL_ADC_IsEnabled>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 813d 	bne.w	8004010 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7ff fa24 	bl	80031f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4aa2      	ldr	r2, [pc, #648]	@ (8004038 <HAL_ADC_ConfigChannel+0x6dc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f040 812e 	bne.w	8004010 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x480>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e019      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x4b4>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003dea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e003      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	bf94      	ite	ls
 8003e0a:	2301      	movls	r3, #1
 8003e0c:	2300      	movhi	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d079      	beq.n	8003f08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x4d4>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	3301      	adds	r3, #1
 8003e28:	069b      	lsls	r3, r3, #26
 8003e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e2e:	e015      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x500>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003e48:	2320      	movs	r3, #32
 8003e4a:	e003      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x520>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e9b      	lsrs	r3, r3, #26
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	e017      	b.n	8003eac <HAL_ADC_ConfigChannel+0x550>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	ea42 0103 	orr.w	r1, r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x576>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f003 021f 	and.w	r2, r3, #31
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	051b      	lsls	r3, r3, #20
 8003ed0:	e018      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x5a8>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003eea:	2320      	movs	r3, #32
 8003eec:	e003      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4613      	mov	r3, r2
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4413      	add	r3, r2
 8003f02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f04:	430b      	orrs	r3, r1
 8003f06:	e07e      	b.n	8004006 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x5c8>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	069b      	lsls	r3, r3, #26
 8003f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f22:	e015      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x5f4>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	e003      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	069b      	lsls	r3, r3, #26
 8003f4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x614>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	e017      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x644>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e003      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x670>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0e9b      	lsrs	r3, r3, #26
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3b1e      	subs	r3, #30
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	e01b      	b.n	8004004 <HAL_ADC_ConfigChannel+0x6a8>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	613b      	str	r3, [r7, #16]
  return result;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f003 021f 	and.w	r2, r3, #31
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b1e      	subs	r3, #30
 8003ffe:	051b      	lsls	r3, r3, #20
 8004000:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004004:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400a:	4619      	mov	r1, r3
 800400c:	f7ff f8c5 	bl	800319a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <HAL_ADC_ConfigChannel+0x6e0>)
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80be 	beq.w	800419a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004026:	d004      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x6d6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <HAL_ADC_ConfigChannel+0x6e4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10a      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x6ec>
 8004032:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <HAL_ADC_ConfigChannel+0x6e8>)
 8004034:	e009      	b.n	800404a <HAL_ADC_ConfigChannel+0x6ee>
 8004036:	bf00      	nop
 8004038:	407f0000 	.word	0x407f0000
 800403c:	80080000 	.word	0x80080000
 8004040:	50000100 	.word	0x50000100
 8004044:	50000300 	.word	0x50000300
 8004048:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_ADC_ConfigChannel+0x854>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe ffba 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8004050:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_ADC_ConfigChannel+0x858>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_ADC_ConfigChannel+0x70c>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a55      	ldr	r2, [pc, #340]	@ (80041b8 <HAL_ADC_ConfigChannel+0x85c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d13a      	bne.n	80040de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800406c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d134      	bne.n	80040de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407c:	d005      	beq.n	800408a <HAL_ADC_ConfigChannel+0x72e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4e      	ldr	r2, [pc, #312]	@ (80041bc <HAL_ADC_ConfigChannel+0x860>)
 8004084:	4293      	cmp	r3, r2
 8004086:	f040 8085 	bne.w	8004194 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004092:	d004      	beq.n	800409e <HAL_ADC_ConfigChannel+0x742>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a49      	ldr	r2, [pc, #292]	@ (80041c0 <HAL_ADC_ConfigChannel+0x864>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x746>
 800409e:	4a49      	ldr	r2, [pc, #292]	@ (80041c4 <HAL_ADC_ConfigChannel+0x868>)
 80040a0:	e000      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x748>
 80040a2:	4a43      	ldr	r2, [pc, #268]	@ (80041b0 <HAL_ADC_ConfigChannel+0x854>)
 80040a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fe ff75 	bl	8002f9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040b4:	4b44      	ldr	r3, [pc, #272]	@ (80041c8 <HAL_ADC_ConfigChannel+0x86c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	4a44      	ldr	r2, [pc, #272]	@ (80041cc <HAL_ADC_ConfigChannel+0x870>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ce:	e002      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f9      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040dc:	e05a      	b.n	8004194 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3b      	ldr	r2, [pc, #236]	@ (80041d0 <HAL_ADC_ConfigChannel+0x874>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d125      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d11f      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a31      	ldr	r2, [pc, #196]	@ (80041c0 <HAL_ADC_ConfigChannel+0x864>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d104      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x7ac>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a34      	ldr	r2, [pc, #208]	@ (80041d4 <HAL_ADC_ConfigChannel+0x878>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d047      	beq.n	8004198 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004110:	d004      	beq.n	800411c <HAL_ADC_ConfigChannel+0x7c0>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2a      	ldr	r2, [pc, #168]	@ (80041c0 <HAL_ADC_ConfigChannel+0x864>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x7c4>
 800411c:	4a29      	ldr	r2, [pc, #164]	@ (80041c4 <HAL_ADC_ConfigChannel+0x868>)
 800411e:	e000      	b.n	8004122 <HAL_ADC_ConfigChannel+0x7c6>
 8004120:	4a23      	ldr	r2, [pc, #140]	@ (80041b0 <HAL_ADC_ConfigChannel+0x854>)
 8004122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe ff36 	bl	8002f9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004132:	e031      	b.n	8004198 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a27      	ldr	r2, [pc, #156]	@ (80041d8 <HAL_ADC_ConfigChannel+0x87c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d12d      	bne.n	800419a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800413e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d127      	bne.n	800419a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <HAL_ADC_ConfigChannel+0x864>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800415c:	d004      	beq.n	8004168 <HAL_ADC_ConfigChannel+0x80c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_ADC_ConfigChannel+0x864>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_ADC_ConfigChannel+0x810>
 8004168:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <HAL_ADC_ConfigChannel+0x868>)
 800416a:	e000      	b.n	800416e <HAL_ADC_ConfigChannel+0x812>
 800416c:	4a10      	ldr	r2, [pc, #64]	@ (80041b0 <HAL_ADC_ConfigChannel+0x854>)
 800416e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f7fe ff10 	bl	8002f9e <LL_ADC_SetCommonPathInternalCh>
 800417e:	e00c      	b.n	800419a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004192:	e002      	b.n	800419a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004194:	bf00      	nop
 8004196:	e000      	b.n	800419a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004198:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	37d8      	adds	r7, #216	@ 0xd8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	50000700 	.word	0x50000700
 80041b4:	c3210000 	.word	0xc3210000
 80041b8:	90c00010 	.word	0x90c00010
 80041bc:	50000600 	.word	0x50000600
 80041c0:	50000100 	.word	0x50000100
 80041c4:	50000300 	.word	0x50000300
 80041c8:	2000003c 	.word	0x2000003c
 80041cc:	053e2d63 	.word	0x053e2d63
 80041d0:	c7520000 	.word	0xc7520000
 80041d4:	50000500 	.word	0x50000500
 80041d8:	cb840000 	.word	0xcb840000

080041dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f8a7 	bl	8003340 <LL_ADC_IsEnabled>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d176      	bne.n	80042e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4b3c      	ldr	r3, [pc, #240]	@ (80042f0 <ADC_Enable+0x114>)
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	f043 0210 	orr.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e062      	b.n	80042e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f862 	bl	80032f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004234:	d004      	beq.n	8004240 <ADC_Enable+0x64>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <ADC_Enable+0x118>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <ADC_Enable+0x68>
 8004240:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <ADC_Enable+0x11c>)
 8004242:	e000      	b.n	8004246 <ADC_Enable+0x6a>
 8004244:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <ADC_Enable+0x120>)
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe febc 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 800424c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800424e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004256:	4b2a      	ldr	r3, [pc, #168]	@ (8004300 <ADC_Enable+0x124>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	4a29      	ldr	r2, [pc, #164]	@ (8004304 <ADC_Enable+0x128>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004270:	e002      	b.n	8004278 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3b01      	subs	r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800427e:	f7fe fe4d 	bl	8002f1c <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004284:	e028      	b.n	80042d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f858 	bl	8003340 <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f828 	bl	80032f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042a0:	f7fe fe3c 	bl	8002f1c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d914      	bls.n	80042d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d00d      	beq.n	80042d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f043 0210 	orr.w	r2, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e007      	b.n	80042e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d1cf      	bne.n	8004286 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	8000003f 	.word	0x8000003f
 80042f4:	50000100 	.word	0x50000100
 80042f8:	50000300 	.word	0x50000300
 80042fc:	50000700 	.word	0x50000700
 8004300:	2000003c 	.word	0x2000003c
 8004304:	053e2d63 	.word	0x053e2d63

08004308 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f826 	bl	8003366 <LL_ADC_IsDisableOngoing>
 800431a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f80d 	bl	8003340 <LL_ADC_IsEnabled>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d047      	beq.n	80043bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d144      	bne.n	80043bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030d 	and.w	r3, r3, #13
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10c      	bne.n	800435a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe ffe7 	bl	8003318 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2203      	movs	r2, #3
 8004350:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004352:	f7fe fde3 	bl	8002f1c <HAL_GetTick>
 8004356:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004358:	e029      	b.n	80043ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435e:	f043 0210 	orr.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e023      	b.n	80043be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004376:	f7fe fdd1 	bl	8002f1c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d914      	bls.n	80043ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f043 0210 	orr.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a2:	f043 0201 	orr.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e007      	b.n	80043be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1dc      	bne.n	8004376 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d14b      	bne.n	8004478 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d021      	beq.n	800443e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fe8c 	bl	800311c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d032      	beq.n	8004470 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d12b      	bne.n	8004470 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11f      	bne.n	8004470 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800443c:	e018      	b.n	8004470 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d111      	bne.n	8004470 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fa55 	bl	8003920 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004476:	e00e      	b.n	8004496 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff fa5f 	bl	8003948 <HAL_ADC_ErrorCallback>
}
 800448a:	e004      	b.n	8004496 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fa41 	bl	8003934 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fa31 	bl	8003948 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <LL_ADC_IsEnabled>:
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <LL_ADC_IsEnabled+0x18>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <LL_ADC_IsEnabled+0x1a>
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_StartCalibration>:
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004526:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004530:	4313      	orrs	r3, r2
 8004532:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_ADC_IsCalibrationOnGoing>:
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800455a:	d101      	bne.n	8004560 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_REG_IsConversionOngoing>:
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d101      	bne.n	8004586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e04d      	b.n	800464c <HAL_ADCEx_Calibration_Start+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fea5 	bl	8004308 <ADC_Disable>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d136      	bne.n	8004636 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	f043 0202 	orr.w	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff96 	bl	8004514 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045e8:	e014      	b.n	8004614 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_ADCEx_Calibration_Start+0xc0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d90d      	bls.n	8004614 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f023 0312 	bic.w	r3, r3, #18
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e01b      	b.n	800464c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff94 	bl	8004546 <LL_ADC_IsCalibrationOnGoing>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e2      	bne.n	80045ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004634:	e005      	b.n	8004642 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	0004de01 	.word	0x0004de01

08004658 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b0a1      	sub	sp, #132	@ 0x84
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004672:	2302      	movs	r3, #2
 8004674:	e0e7      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800467e:	2300      	movs	r3, #0
 8004680:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004682:	2300      	movs	r3, #0
 8004684:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800468e:	d102      	bne.n	8004696 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004690:	4b6f      	ldr	r3, [pc, #444]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	e009      	b.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6e      	ldr	r2, [pc, #440]	@ (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d102      	bne.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	e001      	b.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0be      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff ff4f 	bl	800456e <LL_ADC_REG_IsConversionOngoing>
 80046d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ff49 	bl	800456e <LL_ADC_REG_IsConversionOngoing>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 80a0 	bne.w	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 809c 	bne.w	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f4:	d004      	beq.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a55      	ldr	r2, [pc, #340]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004700:	4b56      	ldr	r3, [pc, #344]	@ (800485c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004702:	e000      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004704:	4b56      	ldr	r3, [pc, #344]	@ (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004706:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d04b      	beq.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004722:	035b      	lsls	r3, r3, #13
 8004724:	430b      	orrs	r3, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800472a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004734:	d004      	beq.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a45      	ldr	r2, [pc, #276]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10f      	bne.n	8004760 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004740:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004744:	f7ff fed3 	bl	80044ee <LL_ADC_IsEnabled>
 8004748:	4604      	mov	r4, r0
 800474a:	4841      	ldr	r0, [pc, #260]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800474c:	f7ff fecf 	bl	80044ee <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	4323      	orrs	r3, r4
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e012      	b.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004760:	483c      	ldr	r0, [pc, #240]	@ (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004762:	f7ff fec4 	bl	80044ee <LL_ADC_IsEnabled>
 8004766:	4604      	mov	r4, r0
 8004768:	483b      	ldr	r0, [pc, #236]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800476a:	f7ff fec0 	bl	80044ee <LL_ADC_IsEnabled>
 800476e:	4603      	mov	r3, r0
 8004770:	431c      	orrs	r4, r3
 8004772:	483c      	ldr	r0, [pc, #240]	@ (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004774:	f7ff febb 	bl	80044ee <LL_ADC_IsEnabled>
 8004778:	4603      	mov	r3, r0
 800477a:	4323      	orrs	r3, r4
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d056      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800478a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004792:	f023 030f 	bic.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	6892      	ldr	r2, [r2, #8]
 800479e:	430a      	orrs	r2, r1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047a6:	e047      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047bc:	d004      	beq.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a23      	ldr	r2, [pc, #140]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10f      	bne.n	80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047cc:	f7ff fe8f 	bl	80044ee <LL_ADC_IsEnabled>
 80047d0:	4604      	mov	r4, r0
 80047d2:	481f      	ldr	r0, [pc, #124]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047d4:	f7ff fe8b 	bl	80044ee <LL_ADC_IsEnabled>
 80047d8:	4603      	mov	r3, r0
 80047da:	4323      	orrs	r3, r4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e012      	b.n	800480e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047e8:	481a      	ldr	r0, [pc, #104]	@ (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047ea:	f7ff fe80 	bl	80044ee <LL_ADC_IsEnabled>
 80047ee:	4604      	mov	r4, r0
 80047f0:	4819      	ldr	r0, [pc, #100]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047f2:	f7ff fe7c 	bl	80044ee <LL_ADC_IsEnabled>
 80047f6:	4603      	mov	r3, r0
 80047f8:	431c      	orrs	r4, r3
 80047fa:	481a      	ldr	r0, [pc, #104]	@ (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047fc:	f7ff fe77 	bl	80044ee <LL_ADC_IsEnabled>
 8004800:	4603      	mov	r3, r0
 8004802:	4323      	orrs	r3, r4
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800481a:	f023 030f 	bic.w	r3, r3, #15
 800481e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004820:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004822:	e009      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004836:	e000      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004838:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004842:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004846:	4618      	mov	r0, r3
 8004848:	3784      	adds	r7, #132	@ 0x84
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	50000100 	.word	0x50000100
 8004854:	50000400 	.word	0x50000400
 8004858:	50000500 	.word	0x50000500
 800485c:	50000300 	.word	0x50000300
 8004860:	50000700 	.word	0x50000700
 8004864:	50000600 	.word	0x50000600

08004868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <__NVIC_SetPriorityGrouping+0x44>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004884:	4013      	ands	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800489a:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <__NVIC_SetPriorityGrouping+0x44>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	60d3      	str	r3, [r2, #12]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <__NVIC_GetPriorityGrouping+0x18>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 0307 	and.w	r3, r3, #7
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	db0b      	blt.n	80048f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	f003 021f 	and.w	r2, r3, #31
 80048e4:	4907      	ldr	r1, [pc, #28]	@ (8004904 <__NVIC_EnableIRQ+0x38>)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2001      	movs	r0, #1
 80048ee:	fa00 f202 	lsl.w	r2, r0, r2
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	@ (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	@ (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf28      	it	cs
 800497a:	2304      	movcs	r3, #4
 800497c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
 8004982:	2b06      	cmp	r3, #6
 8004984:	d902      	bls.n	800498c <NVIC_EncodePriority+0x30>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3b03      	subs	r3, #3
 800498a:	e000      	b.n	800498e <NVIC_EncodePriority+0x32>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	401a      	ands	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43d9      	mvns	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	4313      	orrs	r3, r2
         );
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	@ 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049d4:	d301      	bcc.n	80049da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049da:	4a0a      	ldr	r2, [pc, #40]	@ (8004a04 <SysTick_Config+0x40>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e2:	210f      	movs	r1, #15
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f7ff ff8e 	bl	8004908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ec:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <SysTick_Config+0x40>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f2:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <SysTick_Config+0x40>)
 80049f4:	2207      	movs	r2, #7
 80049f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000e010 	.word	0xe000e010

08004a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff29 	bl	8004868 <__NVIC_SetPriorityGrouping>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	4603      	mov	r3, r0
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a2c:	f7ff ff40 	bl	80048b0 <__NVIC_GetPriorityGrouping>
 8004a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	f7ff ff90 	bl	800495c <NVIC_EncodePriority>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff ff5f 	bl	8004908 <__NVIC_SetPriority>
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff33 	bl	80048cc <__NVIC_EnableIRQ>
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ffa4 	bl	80049c4 <SysTick_Config>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e08d      	b.n	8004bb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b47      	ldr	r3, [pc, #284]	@ (8004bc0 <HAL_DMA_Init+0x138>)
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d80f      	bhi.n	8004ac6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b45      	ldr	r3, [pc, #276]	@ (8004bc4 <HAL_DMA_Init+0x13c>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a45      	ldr	r2, [pc, #276]	@ (8004bc8 <HAL_DMA_Init+0x140>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	@ (8004bcc <HAL_DMA_Init+0x144>)
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ac4:	e00e      	b.n	8004ae4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b40      	ldr	r3, [pc, #256]	@ (8004bd0 <HAL_DMA_Init+0x148>)
 8004ace:	4413      	add	r3, r2
 8004ad0:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc8 <HAL_DMA_Init+0x140>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	009a      	lsls	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd4 <HAL_DMA_Init+0x14c>)
 8004ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa2c 	bl	8004f94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b44:	d102      	bne.n	8004b4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_DMA_Init+0x104>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d80c      	bhi.n	8004b8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa4c 	bl	8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e008      	b.n	8004b9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40020407 	.word	0x40020407
 8004bc4:	bffdfff8 	.word	0xbffdfff8
 8004bc8:	cccccccd 	.word	0xcccccccd
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	bffdfbf8 	.word	0xbffdfbf8
 8004bd4:	40020400 	.word	0x40020400

08004bd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DMA_Start_IT+0x20>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e066      	b.n	8004cc6 <HAL_DMA_Start_IT+0xee>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d155      	bne.n	8004cb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f970 	bl	8004f16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 020e 	orr.w	r2, r2, #14
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e00f      	b.n	8004c70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 020a 	orr.w	r2, r2, #10
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e005      	b.n	8004cc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d00d      	beq.n	8004d02 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e047      	b.n	8004d92 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 020e 	bic.w	r2, r2, #14
 8004d10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	f003 021f 	and.w	r2, r3, #31
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f202 	lsl.w	r2, r1, r2
 8004d44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
    }
  }
  return status;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d026      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x7a>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d021      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0204 	bic.w	r2, r2, #4
 8004dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df4:	f003 021f 	and.w	r2, r3, #31
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004e02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d071      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e14:	e06c      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2202      	movs	r2, #2
 8004e20:	409a      	lsls	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02e      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d029      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 020a 	bic.w	r2, r2, #10
 8004e50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f003 021f 	and.w	r2, r3, #31
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2102      	movs	r1, #2
 8004e68:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d038      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e86:	e033      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2208      	movs	r2, #8
 8004e92:	409a      	lsls	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02a      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 020e 	bic.w	r2, r2, #14
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f003 021f 	and.w	r2, r3, #31
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
}
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f08:	b2db      	uxtb	r3, r3
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f2c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d108      	bne.n	8004f76 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f74:	e007      	b.n	8004f86 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	60da      	str	r2, [r3, #12]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b16      	ldr	r3, [pc, #88]	@ (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d802      	bhi.n	8004fae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e001      	b.n	8004fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004fb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b08      	subs	r3, #8
 8004fbe:	4a12      	ldr	r2, [pc, #72]	@ (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	009a      	lsls	r2, r3, #2
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004fde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40020407 	.word	0x40020407
 8005000:	40020800 	.word	0x40020800
 8005004:	40020820 	.word	0x40020820
 8005008:	cccccccd 	.word	0xcccccccd
 800500c:	40020880 	.word	0x40020880

08005010 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005032:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	1000823f 	.word	0x1000823f
 8005054:	40020940 	.word	0x40020940

08005058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005066:	e15a      	b.n	800531e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 814c 	beq.w	8005318 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d005      	beq.n	8005098 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005094:	2b02      	cmp	r3, #2
 8005096:	d130      	bne.n	80050fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ce:	2201      	movs	r2, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	f003 0201 	and.w	r2, r3, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d017      	beq.n	8005136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	2203      	movs	r2, #3
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d123      	bne.n	800518a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	08da      	lsrs	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	08da      	lsrs	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3208      	adds	r2, #8
 8005184:	6939      	ldr	r1, [r7, #16]
 8005186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0203 	and.w	r2, r3, #3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80a6 	beq.w	8005318 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051cc:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <HAL_GPIO_Init+0x2e4>)
 80051ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d0:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_GPIO_Init+0x2e4>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80051d8:	4b58      	ldr	r3, [pc, #352]	@ (800533c <HAL_GPIO_Init+0x2e4>)
 80051da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051e4:	4a56      	ldr	r2, [pc, #344]	@ (8005340 <HAL_GPIO_Init+0x2e8>)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	220f      	movs	r2, #15
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800520e:	d01f      	beq.n	8005250 <HAL_GPIO_Init+0x1f8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a4c      	ldr	r2, [pc, #304]	@ (8005344 <HAL_GPIO_Init+0x2ec>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d019      	beq.n	800524c <HAL_GPIO_Init+0x1f4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a4b      	ldr	r2, [pc, #300]	@ (8005348 <HAL_GPIO_Init+0x2f0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_GPIO_Init+0x1f0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <HAL_GPIO_Init+0x2f4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00d      	beq.n	8005244 <HAL_GPIO_Init+0x1ec>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a49      	ldr	r2, [pc, #292]	@ (8005350 <HAL_GPIO_Init+0x2f8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <HAL_GPIO_Init+0x1e8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a48      	ldr	r2, [pc, #288]	@ (8005354 <HAL_GPIO_Init+0x2fc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_GPIO_Init+0x1e4>
 8005238:	2305      	movs	r3, #5
 800523a:	e00a      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 800523c:	2306      	movs	r3, #6
 800523e:	e008      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005240:	2304      	movs	r3, #4
 8005242:	e006      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005244:	2303      	movs	r3, #3
 8005246:	e004      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005248:	2302      	movs	r3, #2
 800524a:	e002      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005250:	2300      	movs	r3, #0
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	f002 0203 	and.w	r2, r2, #3
 8005258:	0092      	lsls	r2, r2, #2
 800525a:	4093      	lsls	r3, r2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005262:	4937      	ldr	r1, [pc, #220]	@ (8005340 <HAL_GPIO_Init+0x2e8>)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	3302      	adds	r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005270:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <HAL_GPIO_Init+0x300>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	43db      	mvns	r3, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005294:	4a30      	ldr	r2, [pc, #192]	@ (8005358 <HAL_GPIO_Init+0x300>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800529a:	4b2f      	ldr	r3, [pc, #188]	@ (8005358 <HAL_GPIO_Init+0x300>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052be:	4a26      	ldr	r2, [pc, #152]	@ (8005358 <HAL_GPIO_Init+0x300>)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052c4:	4b24      	ldr	r3, [pc, #144]	@ (8005358 <HAL_GPIO_Init+0x300>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <HAL_GPIO_Init+0x300>)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <HAL_GPIO_Init+0x300>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005312:	4a11      	ldr	r2, [pc, #68]	@ (8005358 <HAL_GPIO_Init+0x300>)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3301      	adds	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f ae9d 	bne.w	8005068 <HAL_GPIO_Init+0x10>
  }
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	40010000 	.word	0x40010000
 8005344:	48000400 	.word	0x48000400
 8005348:	48000800 	.word	0x48000800
 800534c:	48000c00 	.word	0x48000c00
 8005350:	48001000 	.word	0x48001000
 8005354:	48001400 	.word	0x48001400
 8005358:	40010400 	.word	0x40010400

0800535c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	807b      	strh	r3, [r7, #2]
 8005368:	4613      	mov	r3, r2
 800536a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800536c:	787b      	ldrb	r3, [r7, #1]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005378:	e002      	b.n	8005380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800537a:	887a      	ldrh	r2, [r7, #2]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005396:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053a2:	4a05      	ldr	r2, [pc, #20]	@ (80053b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f806 	bl	80053bc <HAL_GPIO_EXTI_Callback>
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40010400 	.word	0x40010400

080053bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e08d      	b.n	8005500 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fb ff9b 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	@ 0x24
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005422:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005432:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	e006      	b.n	800545a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005458:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d108      	bne.n	8005474 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	e007      	b.n	8005484 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005482:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005496:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69d9      	ldr	r1, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	@ 0x28
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	461a      	mov	r2, r3
 8005514:	460b      	mov	r3, r1
 8005516:	817b      	strh	r3, [r7, #10]
 8005518:	4613      	mov	r3, r2
 800551a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b20      	cmp	r3, #32
 800552a:	f040 80ef 	bne.w	800570c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553c:	d101      	bne.n	8005542 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
 8005540:	e0e5      	b.n	800570e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_I2C_Master_Transmit_DMA+0x48>
 800554c:	2302      	movs	r3, #2
 800554e:	e0de      	b.n	800570e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2221      	movs	r2, #33	@ 0x21
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2210      	movs	r2, #16
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	893a      	ldrh	r2, [r7, #8]
 8005578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a66      	ldr	r2, [pc, #408]	@ (8005718 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800557e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a66      	ldr	r2, [pc, #408]	@ (800571c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2bff      	cmp	r3, #255	@ 0xff
 800558e:	d906      	bls.n	800559e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	22ff      	movs	r2, #255	@ 0xff
 8005594:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e007      	b.n	80055ae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055ac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01a      	beq.n	80055ec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d074      	beq.n	80056de <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d022      	beq.n	8005642 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	4a47      	ldr	r2, [pc, #284]	@ (8005720 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005602:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800560a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	2200      	movs	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800562c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005632:	f7ff fad1 	bl	8004bd8 <HAL_DMA_Start_IT>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d13a      	bne.n	80056b6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005640:	e013      	b.n	800566a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e051      	b.n	800570e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566e:	b2db      	uxtb	r3, r3
 8005670:	3301      	adds	r3, #1
 8005672:	b2da      	uxtb	r2, r3
 8005674:	8979      	ldrh	r1, [r7, #10]
 8005676:	4b2c      	ldr	r3, [pc, #176]	@ (8005728 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f001 fba3 	bl	8006dc8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800569c:	2110      	movs	r1, #16
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f001 fbc4 	bl	8006e2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e028      	b.n	8005708 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f043 0210 	orr.w	r2, r3, #16
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e017      	b.n	800570e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a12      	ldr	r2, [pc, #72]	@ (800572c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	8979      	ldrh	r1, [r7, #10]
 80056ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f001 fb68 	bl	8006dc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005700:	2101      	movs	r1, #1
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f001 fb92 	bl	8006e2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	ffff0000 	.word	0xffff0000
 800571c:	08005d47 	.word	0x08005d47
 8005720:	08006cc7 	.word	0x08006cc7
 8005724:	08006d5d 	.word	0x08006d5d
 8005728:	80002000 	.word	0x80002000
 800572c:	08005907 	.word	0x08005907

08005730 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
  }
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00f      	beq.n	80057a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005794:	f043 0201 	orr.w	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00f      	beq.n	80057fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	f043 0202 	orr.w	r2, r3, #2
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 030b 	and.w	r3, r3, #11
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 f91f 	bl	8006a50 <I2C_ITError>
  }
}
 8005812:	bf00      	nop
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
 8005876:	4613      	mov	r3, r2
 8005878:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f8:	b2db      	uxtb	r3, r3
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af02      	add	r7, sp, #8
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <I2C_Master_ISR_IT+0x1e>
 8005920:	2302      	movs	r3, #2
 8005922:	e113      	b.n	8005b4c <I2C_Master_ISR_IT+0x246>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d012      	beq.n	800595c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00d      	beq.n	800595c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2210      	movs	r2, #16
 8005946:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594c:	f043 0204 	orr.w	r2, r3, #4
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 f992 	bl	8006c7e <I2C_Flush_TXDR>
 800595a:	e0e4      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d022      	beq.n	80059ac <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01d      	beq.n	80059ac <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0304 	bic.w	r3, r3, #4
 8005976:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059aa:	e0bc      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d128      	bne.n	8005a08 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d023      	beq.n	8005a08 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01e      	beq.n	8005a08 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80a8 	beq.w	8005b26 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005a06:	e08e      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d05c      	beq.n	8005acc <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d057      	beq.n	8005acc <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d040      	beq.n	8005aa8 <I2C_Master_ISR_IT+0x1a2>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d13c      	bne.n	8005aa8 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2bff      	cmp	r3, #255	@ 0xff
 8005a44:	d90e      	bls.n	8005a64 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	22ff      	movs	r2, #255	@ 0xff
 8005a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	8a79      	ldrh	r1, [r7, #18]
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f001 f9b3 	bl	8006dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a62:	e032      	b.n	8005aca <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a76:	d00b      	beq.n	8005a90 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a7c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a82:	8a79      	ldrh	r1, [r7, #18]
 8005a84:	2000      	movs	r0, #0
 8005a86:	9000      	str	r0, [sp, #0]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f001 f99d 	bl	8006dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8e:	e01c      	b.n	8005aca <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	8a79      	ldrh	r1, [r7, #18]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f001 f991 	bl	8006dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa6:	e010      	b.n	8005aca <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab6:	d003      	beq.n	8005ac0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fcb0 	bl	800641e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005abe:	e032      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ac0:	2140      	movs	r1, #64	@ 0x40
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 ffc4 	bl	8006a50 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ac8:	e02d      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
 8005aca:	e02c      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d027      	beq.n	8005b26 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d022      	beq.n	8005b26 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d119      	bne.n	8005b1e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005af8:	d015      	beq.n	8005b26 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b02:	d108      	bne.n	8005b16 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	e007      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fc81 	bl	800641e <I2C_ITMasterSeqCplt>
 8005b1c:	e003      	b.n	8005b26 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b1e:	2140      	movs	r1, #64	@ 0x40
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 ff95 	bl	8006a50 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fd07 	bl	8006550 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <I2C_Slave_ISR_IT+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0e2      	b.n	8005d3e <I2C_Slave_ISR_IT+0x1ea>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005b94:	6939      	ldr	r1, [r7, #16]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fda2 	bl	80066e0 <I2C_ITSlaveCplt>
 8005b9c:	e0ca      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d04b      	beq.n	8005c40 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d046      	beq.n	8005c40 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d128      	bne.n	8005c0e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b28      	cmp	r3, #40	@ 0x28
 8005bc6:	d108      	bne.n	8005bda <I2C_Slave_ISR_IT+0x86>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bce:	d104      	bne.n	8005bda <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005bd0:	6939      	ldr	r1, [r7, #16]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fee8 	bl	80069a8 <I2C_ITListenCplt>
 8005bd8:	e031      	b.n	8005c3e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b29      	cmp	r3, #41	@ 0x29
 8005be4:	d10e      	bne.n	8005c04 <I2C_Slave_ISR_IT+0xb0>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bec:	d00a      	beq.n	8005c04 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f001 f841 	bl	8006c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fc4b 	bl	8006498 <I2C_ITSlaveSeqCplt>
 8005c02:	e01c      	b.n	8005c3e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c0c:	e08f      	b.n	8005d2e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2210      	movs	r2, #16
 8005c14:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <I2C_Slave_ISR_IT+0xdc>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c2e:	d17e      	bne.n	8005d2e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 ff0a 	bl	8006a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c3c:	e077      	b.n	8005d2e <I2C_Slave_ISR_IT+0x1da>
 8005c3e:	e076      	b.n	8005d2e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d02f      	beq.n	8005caa <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02a      	beq.n	8005caa <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d018      	beq.n	8005c90 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14b      	bne.n	8005d32 <I2C_Slave_ISR_IT+0x1de>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ca0:	d047      	beq.n	8005d32 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fbf8 	bl	8006498 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005ca8:	e043      	b.n	8005d32 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fb28 	bl	8006316 <I2C_ITAddrCplt>
 8005cc6:	e035      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d030      	beq.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02b      	beq.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d16:	e00d      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1e:	d002      	beq.n	8005d26 <I2C_Slave_ISR_IT+0x1d2>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fbb6 	bl	8006498 <I2C_ITSlaveSeqCplt>
 8005d2c:	e002      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005d32:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af02      	add	r7, sp, #8
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <I2C_Master_ISR_DMA+0x1a>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0d9      	b.n	8005f14 <I2C_Master_ISR_DMA+0x1ce>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d011      	beq.n	8005da0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2210      	movs	r2, #16
 8005d82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	f043 0204 	orr.w	r2, r3, #4
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d90:	2120      	movs	r1, #32
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f001 f84a 	bl	8006e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 ff70 	bl	8006c7e <I2C_Flush_TXDR>
 8005d9e:	e0b4      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d071      	beq.n	8005e8e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d06c      	beq.n	8005e8e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04e      	beq.n	8005e6c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dda:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2bff      	cmp	r3, #255	@ 0xff
 8005de4:	d906      	bls.n	8005df4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	@ 0xff
 8005dea:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e010      	b.n	8005e16 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e06:	d003      	beq.n	8005e10 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e002      	b.n	8005e16 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e14:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	8a79      	ldrh	r1, [r7, #18]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 ffcf 	bl	8006dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b22      	cmp	r3, #34	@ 0x22
 8005e46:	d108      	bne.n	8005e5a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e58:	e057      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e6a:	e04e      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e7a:	d003      	beq.n	8005e84 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 face 	bl	800641e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005e82:	e042      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fde2 	bl	8006a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005e8c:	e03d      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d028      	beq.n	8005eea <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d023      	beq.n	8005eea <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d119      	bne.n	8005ee0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eba:	d025      	beq.n	8005f08 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ec4:	d108      	bne.n	8005ed8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ed4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005ed6:	e017      	b.n	8005f08 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 faa0 	bl	800641e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005ede:	e013      	b.n	8005f08 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ee0:	2140      	movs	r1, #64	@ 0x40
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fdb4 	bl	8006a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ee8:	e00e      	b.n	8005f08 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fb25 	bl	8006550 <I2C_ITMasterCplt>
 8005f06:	e000      	b.n	8005f0a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005f08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005f28:	4b8d      	ldr	r3, [pc, #564]	@ (8006160 <I2C_Mem_ISR_DMA+0x244>)
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <I2C_Mem_ISR_DMA+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e10e      	b.n	8006158 <I2C_Mem_ISR_DMA+0x23c>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d016      	beq.n	8005f7a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0204 	orr.w	r2, r3, #4
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005f6a:	2120      	movs	r1, #32
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 ff5d 	bl	8006e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fe83 	bl	8006c7e <I2C_Flush_TXDR>
 8005f78:	e0e9      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fa0:	e0d5      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05f      	beq.n	800606c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d05a      	beq.n	800606c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 ffbb 	bl	8006f34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 ff33 	bl	8006e2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d048      	beq.n	8006062 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2bff      	cmp	r3, #255	@ 0xff
 8005fd8:	d910      	bls.n	8005ffc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	@ 0xff
 8005fde:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fee7 	bl	8006dc8 <I2C_TransferConfig>
 8005ffa:	e011      	b.n	8006020 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600a:	b299      	uxth	r1, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006010:	b2da      	uxtb	r2, r3
 8006012:	2300      	movs	r3, #0
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fed4 	bl	8006dc8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b22      	cmp	r3, #34	@ 0x22
 800603c:	d108      	bne.n	8006050 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800604c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800604e:	e07e      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800605e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006060:	e075      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006062:	2140      	movs	r1, #64	@ 0x40
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fcf3 	bl	8006a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800606a:	e070      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d05d      	beq.n	8006132 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800607c:	2b00      	cmp	r3, #0
 800607e:	d058      	beq.n	8006132 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006080:	2101      	movs	r1, #1
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 ff56 	bl	8006f34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006088:	2110      	movs	r1, #16
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fece 	bl	8006e2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b22      	cmp	r3, #34	@ 0x22
 800609a:	d101      	bne.n	80060a0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800609c:	4b31      	ldr	r3, [pc, #196]	@ (8006164 <I2C_Mem_ISR_DMA+0x248>)
 800609e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2bff      	cmp	r3, #255	@ 0xff
 80060a8:	d910      	bls.n	80060cc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	22ff      	movs	r2, #255	@ 0xff
 80060ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b4:	b299      	uxth	r1, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fe7f 	bl	8006dc8 <I2C_TransferConfig>
 80060ca:	e011      	b.n	80060f0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	b299      	uxth	r1, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fe6c 	bl	8006dc8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b22      	cmp	r3, #34	@ 0x22
 800610c:	d108      	bne.n	8006120 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800611c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800611e:	e016      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800612e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006130:	e00d      	b.n	800614e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fa01 	bl	8006550 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	80002000 	.word	0x80002000
 8006164:	80002400 	.word	0x80002400

08006168 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <I2C_Slave_ISR_DMA+0x24>
 8006188:	2302      	movs	r3, #2
 800618a:	e0c0      	b.n	800630e <I2C_Slave_ISR_DMA+0x1a6>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fa98 	bl	80066e0 <I2C_ITSlaveCplt>
 80061b0:	e0a8      	b.n	8006304 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8095 	beq.w	80062e8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 808f 	beq.w	80062e8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d07d      	beq.n	80062da <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80061fc:	2301      	movs	r3, #1
 80061fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00c      	beq.n	8006222 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800621e:	2301      	movs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d128      	bne.n	800627a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b28      	cmp	r3, #40	@ 0x28
 8006232:	d108      	bne.n	8006246 <I2C_Slave_ISR_DMA+0xde>
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800623a:	d104      	bne.n	8006246 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fbb2 	bl	80069a8 <I2C_ITListenCplt>
 8006244:	e048      	b.n	80062d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b29      	cmp	r3, #41	@ 0x29
 8006250:	d10e      	bne.n	8006270 <I2C_Slave_ISR_DMA+0x108>
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006258:	d00a      	beq.n	8006270 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2210      	movs	r2, #16
 8006260:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fd0b 	bl	8006c7e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f915 	bl	8006498 <I2C_ITSlaveSeqCplt>
 800626e:	e033      	b.n	80062d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2210      	movs	r2, #16
 8006276:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006278:	e034      	b.n	80062e4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2210      	movs	r2, #16
 8006280:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006294:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <I2C_Slave_ISR_DMA+0x13c>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062a2:	d11f      	bne.n	80062e4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b21      	cmp	r3, #33	@ 0x21
 80062a8:	d002      	beq.n	80062b0 <I2C_Slave_ISR_DMA+0x148>
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b29      	cmp	r3, #41	@ 0x29
 80062ae:	d103      	bne.n	80062b8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2221      	movs	r2, #33	@ 0x21
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062b6:	e008      	b.n	80062ca <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b22      	cmp	r3, #34	@ 0x22
 80062bc:	d002      	beq.n	80062c4 <I2C_Slave_ISR_DMA+0x15c>
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062c2:	d102      	bne.n	80062ca <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2222      	movs	r2, #34	@ 0x22
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ce:	4619      	mov	r1, r3
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fbbd 	bl	8006a50 <I2C_ITError>
      if (treatdmanack == 1U)
 80062d6:	e005      	b.n	80062e4 <I2C_Slave_ISR_DMA+0x17c>
 80062d8:	e004      	b.n	80062e4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2210      	movs	r2, #16
 80062e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062e2:	e00f      	b.n	8006304 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80062e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062e6:	e00d      	b.n	8006304 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f809 	bl	8006316 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800632c:	2b28      	cmp	r3, #40	@ 0x28
 800632e:	d16a      	bne.n	8006406 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800634e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800636a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d138      	bne.n	80063e6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006374:	897b      	ldrh	r3, [r7, #10]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	b29a      	uxth	r2, r3
 800637a:	89bb      	ldrh	r3, [r7, #12]
 800637c:	4053      	eors	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	f003 0306 	and.w	r3, r3, #6
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11c      	bne.n	80063c2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006388:	897b      	ldrh	r3, [r7, #10]
 800638a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	2b02      	cmp	r3, #2
 800639c:	d13b      	bne.n	8006416 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2208      	movs	r2, #8
 80063aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063b4:	89ba      	ldrh	r2, [r7, #12]
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fa55 	bl	800586a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063c0:	e029      	b.n	8006416 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80063c2:	893b      	ldrh	r3, [r7, #8]
 80063c4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fdb2 	bl	8006f34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063d8:	89ba      	ldrh	r2, [r7, #12]
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fa43 	bl	800586a <HAL_I2C_AddrCallback>
}
 80063e4:	e017      	b.n	8006416 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fda2 	bl	8006f34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063f8:	89ba      	ldrh	r2, [r7, #12]
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fa33 	bl	800586a <HAL_I2C_AddrCallback>
}
 8006404:	e007      	b.n	8006416 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2208      	movs	r2, #8
 800640c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b21      	cmp	r3, #33	@ 0x21
 8006438:	d115      	bne.n	8006466 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2211      	movs	r2, #17
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800644e:	2101      	movs	r1, #1
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fd6f 	bl	8006f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff f9db 	bl	800581a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006464:	e014      	b.n	8006490 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2212      	movs	r2, #18
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800647a:	2102      	movs	r1, #2
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fd59 	bl	8006f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff f9cf 	bl	800582e <HAL_I2C_MasterRxCpltCallback>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e00c      	b.n	80064e6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b29      	cmp	r3, #41	@ 0x29
 80064f0:	d112      	bne.n	8006518 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2228      	movs	r2, #40	@ 0x28
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2221      	movs	r2, #33	@ 0x21
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006500:	2101      	movs	r1, #1
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fd16 	bl	8006f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f996 	bl	8005842 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006516:	e017      	b.n	8006548 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b2a      	cmp	r3, #42	@ 0x2a
 8006522:	d111      	bne.n	8006548 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2228      	movs	r2, #40	@ 0x28
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2222      	movs	r2, #34	@ 0x22
 8006530:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006532:	2102      	movs	r1, #2
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fcfd 	bl	8006f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff f987 	bl	8005856 <HAL_I2C_SlaveRxCpltCallback>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2220      	movs	r2, #32
 8006564:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b21      	cmp	r3, #33	@ 0x21
 8006570:	d107      	bne.n	8006582 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006572:	2101      	movs	r1, #1
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fcdd 	bl	8006f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2211      	movs	r2, #17
 800657e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006580:	e00c      	b.n	800659c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b22      	cmp	r3, #34	@ 0x22
 800658c:	d106      	bne.n	800659c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800658e:	2102      	movs	r1, #2
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fccf 	bl	8006f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2212      	movs	r2, #18
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b4c      	ldr	r3, [pc, #304]	@ (80066d8 <I2C_ITMasterCplt+0x188>)
 80065a8:	400b      	ands	r3, r1
 80065aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a49      	ldr	r2, [pc, #292]	@ (80066dc <I2C_ITMasterCplt+0x18c>)
 80065b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f043 0204 	orr.w	r2, r3, #4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b60      	cmp	r3, #96	@ 0x60
 80065e0:	d10a      	bne.n	80065f8 <I2C_ITMasterCplt+0xa8>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80065f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb40 	bl	8006c7e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b60      	cmp	r3, #96	@ 0x60
 800660e:	d002      	beq.n	8006616 <I2C_ITMasterCplt+0xc6>
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa17 	bl	8006a50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006622:	e054      	b.n	80066ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b21      	cmp	r3, #33	@ 0x21
 800662e:	d124      	bne.n	800667a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d10b      	bne.n	8006662 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff f91d 	bl	800589a <HAL_I2C_MemTxCpltCallback>
}
 8006660:	e035      	b.n	80066ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff f8d1 	bl	800581a <HAL_I2C_MasterTxCpltCallback>
}
 8006678:	e029      	b.n	80066ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b22      	cmp	r3, #34	@ 0x22
 8006684:	d123      	bne.n	80066ce <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d10b      	bne.n	80066b8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff f8fc 	bl	80058ae <HAL_I2C_MemRxCpltCallback>
}
 80066b6:	e00a      	b.n	80066ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f8b0 	bl	800582e <HAL_I2C_MasterRxCpltCallback>
}
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	fe00e800 	.word	0xfe00e800
 80066dc:	ffff0000 	.word	0xffff0000

080066e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2220      	movs	r2, #32
 800670a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	2b21      	cmp	r3, #33	@ 0x21
 8006710:	d002      	beq.n	8006718 <I2C_ITSlaveCplt+0x38>
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	2b29      	cmp	r3, #41	@ 0x29
 8006716:	d108      	bne.n	800672a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006718:	f248 0101 	movw	r1, #32769	@ 0x8001
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc09 	bl	8006f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2221      	movs	r2, #33	@ 0x21
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30
 8006728:	e019      	b.n	800675e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	2b22      	cmp	r3, #34	@ 0x22
 800672e:	d002      	beq.n	8006736 <I2C_ITSlaveCplt+0x56>
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	2b2a      	cmp	r3, #42	@ 0x2a
 8006734:	d108      	bne.n	8006748 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006736:	f248 0102 	movw	r1, #32770	@ 0x8002
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fbfa 	bl	8006f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2222      	movs	r2, #34	@ 0x22
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
 8006746:	e00a      	b.n	800675e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	2b28      	cmp	r3, #40	@ 0x28
 800674c:	d107      	bne.n	800675e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800674e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fbee 	bl	8006f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800676c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4b89      	ldr	r3, [pc, #548]	@ (80069a0 <I2C_ITSlaveCplt+0x2c0>)
 800677a:	400b      	ands	r3, r1
 800677c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa7d 	bl	8006c7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d013      	beq.n	80067b6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800679c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01f      	beq.n	80067e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067b4:	e017      	b.n	80067e6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d012      	beq.n	80067e6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0304 	bic.w	r3, r3, #4
 80067f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b00      	cmp	r3, #0
 8006850:	d049      	beq.n	80068e6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006858:	2b00      	cmp	r3, #0
 800685a:	d044      	beq.n	80068e6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d128      	bne.n	80068b8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b28      	cmp	r3, #40	@ 0x28
 8006870:	d108      	bne.n	8006884 <I2C_ITSlaveCplt+0x1a4>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006878:	d104      	bne.n	8006884 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800687a:	6979      	ldr	r1, [r7, #20]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f893 	bl	80069a8 <I2C_ITListenCplt>
 8006882:	e030      	b.n	80068e6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b29      	cmp	r3, #41	@ 0x29
 800688e:	d10e      	bne.n	80068ae <I2C_ITSlaveCplt+0x1ce>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006896:	d00a      	beq.n	80068ae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f9ec 	bl	8006c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fdf6 	bl	8006498 <I2C_ITSlaveSeqCplt>
 80068ac:	e01b      	b.n	80068e6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2210      	movs	r2, #16
 80068b4:	61da      	str	r2, [r3, #28]
 80068b6:	e016      	b.n	80068e6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2210      	movs	r2, #16
 80068be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c4:	f043 0204 	orr.w	r2, r3, #4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <I2C_ITSlaveCplt+0x1fa>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068d8:	d105      	bne.n	80068e6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f8b5 	bl	8006a50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8a4 	bl	8006a50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b28      	cmp	r3, #40	@ 0x28
 8006912:	d141      	bne.n	8006998 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f846 	bl	80069a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800691c:	e03c      	b.n	8006998 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006926:	d014      	beq.n	8006952 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fdb5 	bl	8006498 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1c      	ldr	r2, [pc, #112]	@ (80069a4 <I2C_ITSlaveCplt+0x2c4>)
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe ff9b 	bl	8005886 <HAL_I2C_ListenCpltCallback>
}
 8006950:	e022      	b.n	8006998 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b22      	cmp	r3, #34	@ 0x22
 800695c:	d10e      	bne.n	800697c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fe ff6e 	bl	8005856 <HAL_I2C_SlaveRxCpltCallback>
}
 800697a:	e00d      	b.n	8006998 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fe ff55 	bl	8005842 <HAL_I2C_SlaveTxCpltCallback>
}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	fe00e800 	.word	0xfe00e800
 80069a4:	ffff0000 	.word	0xffff0000

080069a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a25      	ldr	r2, [pc, #148]	@ (8006a4c <I2C_ITListenCplt+0xa4>)
 80069b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d022      	beq.n	8006a24 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d012      	beq.n	8006a24 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1c:	f043 0204 	orr.w	r2, r3, #4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a24:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa83 	bl	8006f34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2210      	movs	r2, #16
 8006a34:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe ff21 	bl	8005886 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	ffff0000 	.word	0xffff0000

08006a50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a60:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a6d      	ldr	r2, [pc, #436]	@ (8006c24 <I2C_ITError+0x1d4>)
 8006a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b28      	cmp	r3, #40	@ 0x28
 8006a86:	d005      	beq.n	8006a94 <I2C_ITError+0x44>
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b29      	cmp	r3, #41	@ 0x29
 8006a8c:	d002      	beq.n	8006a94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a92:	d10b      	bne.n	8006aac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a94:	2103      	movs	r1, #3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa4c 	bl	8006f34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2228      	movs	r2, #40	@ 0x28
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a60      	ldr	r2, [pc, #384]	@ (8006c28 <I2C_ITError+0x1d8>)
 8006aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006aaa:	e030      	b.n	8006b0e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006aac:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa3f 	bl	8006f34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8e1 	bl	8006c7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b60      	cmp	r3, #96	@ 0x60
 8006ac6:	d01f      	beq.n	8006b08 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d114      	bne.n	8006b08 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d109      	bne.n	8006b00 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2210      	movs	r2, #16
 8006af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af8:	f043 0204 	orr.w	r2, r3, #4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2220      	movs	r2, #32
 8006b06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d039      	beq.n	8006b90 <I2C_ITError+0x140>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b11      	cmp	r3, #17
 8006b20:	d002      	beq.n	8006b28 <I2C_ITError+0xd8>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b21      	cmp	r3, #33	@ 0x21
 8006b26:	d133      	bne.n	8006b90 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b36:	d107      	bne.n	8006b48 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe f9d4 	bl	8004efa <HAL_DMA_GetState>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d017      	beq.n	8006b88 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	4a33      	ldr	r2, [pc, #204]	@ (8006c2c <I2C_ITError+0x1dc>)
 8006b5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe f8ae 	bl	8004cce <HAL_DMA_Abort_IT>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d04d      	beq.n	8006c14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b82:	4610      	mov	r0, r2
 8006b84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b86:	e045      	b.n	8006c14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f851 	bl	8006c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b8e:	e041      	b.n	8006c14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d039      	beq.n	8006c0c <I2C_ITError+0x1bc>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b12      	cmp	r3, #18
 8006b9c:	d002      	beq.n	8006ba4 <I2C_ITError+0x154>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b22      	cmp	r3, #34	@ 0x22
 8006ba2:	d133      	bne.n	8006c0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb2:	d107      	bne.n	8006bc4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe f996 	bl	8004efa <HAL_DMA_GetState>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d017      	beq.n	8006c04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	4a14      	ldr	r2, [pc, #80]	@ (8006c2c <I2C_ITError+0x1dc>)
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe f870 	bl	8004cce <HAL_DMA_Abort_IT>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d011      	beq.n	8006c18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c02:	e009      	b.n	8006c18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f813 	bl	8006c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c0a:	e005      	b.n	8006c18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f80f 	bl	8006c30 <I2C_TreatErrorCallback>
  }
}
 8006c12:	e002      	b.n	8006c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c18:	bf00      	nop
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	ffff0000 	.word	0xffff0000
 8006c28:	08005b55 	.word	0x08005b55
 8006c2c:	08006d8b 	.word	0x08006d8b

08006c30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b60      	cmp	r3, #96	@ 0x60
 8006c42:	d10e      	bne.n	8006c62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fe fe3b 	bl	80058d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c60:	e009      	b.n	8006c76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe fe26 	bl	80058c2 <HAL_I2C_ErrorCallback>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d103      	bne.n	8006c9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d007      	beq.n	8006cba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699a      	ldr	r2, [r3, #24]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0201 	orr.w	r2, r2, #1
 8006cb8:	619a      	str	r2, [r3, #24]
  }
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ce2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006cee:	2120      	movs	r1, #32
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f89b 	bl	8006e2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006cf6:	e02d      	b.n	8006d54 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2bff      	cmp	r3, #255	@ 0xff
 8006d0e:	d903      	bls.n	8006d18 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	22ff      	movs	r2, #255	@ 0xff
 8006d14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d16:	e004      	b.n	8006d22 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3328      	adds	r3, #40	@ 0x28
 8006d32:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006d38:	f7fd ff4e 	bl	8004bd8 <HAL_DMA_Start_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d42:	2110      	movs	r1, #16
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fe83 	bl	8006a50 <I2C_ITError>
}
 8006d4a:	e003      	b.n	8006d54 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006d4c:	2140      	movs	r1, #64	@ 0x40
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f86c 	bl	8006e2c <I2C_Enable_IRQ>
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d78:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d7a:	2110      	movs	r1, #16
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fe67 	bl	8006a50 <I2C_ITError>
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da4:	2200      	movs	r2, #0
 8006da6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	2200      	movs	r2, #0
 8006db6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff ff39 	bl	8006c30 <I2C_TreatErrorCallback>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	817b      	strh	r3, [r7, #10]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dda:	897b      	ldrh	r3, [r7, #10]
 8006ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006de0:	7a7b      	ldrb	r3, [r7, #9]
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006de8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006df6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	0d5b      	lsrs	r3, r3, #21
 8006e02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006e06:	4b08      	ldr	r3, [pc, #32]	@ (8006e28 <I2C_TransferConfig+0x60>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	ea02 0103 	and.w	r1, r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	03ff63ff 	.word	0x03ff63ff

08006e2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	4a39      	ldr	r2, [pc, #228]	@ (8006f28 <I2C_Enable_IRQ+0xfc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d032      	beq.n	8006eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006e4a:	4a38      	ldr	r2, [pc, #224]	@ (8006f2c <I2C_Enable_IRQ+0x100>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02d      	beq.n	8006eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006e54:	4a36      	ldr	r2, [pc, #216]	@ (8006f30 <I2C_Enable_IRQ+0x104>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d028      	beq.n	8006eac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da03      	bge.n	8006e6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006e68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e6a:	887b      	ldrh	r3, [r7, #2]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006e7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006e8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e8e:	887b      	ldrh	r3, [r7, #2]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d103      	bne.n	8006e9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006e9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e9c:	887b      	ldrh	r3, [r7, #2]
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d133      	bne.n	8006f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006eaa:	e02e      	b.n	8006f0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da03      	bge.n	8006ebc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006eba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006ecc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006ede:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ee0:	887b      	ldrh	r3, [r7, #2]
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d103      	bne.n	8006eee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006eec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d103      	bne.n	8006efc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006efa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006efc:	887b      	ldrh	r3, [r7, #2]
 8006efe:	2b40      	cmp	r3, #64	@ 0x40
 8006f00:	d103      	bne.n	8006f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	08005d47 	.word	0x08005d47
 8006f2c:	08006169 	.word	0x08006169
 8006f30:	08005f1d 	.word	0x08005f1d

08006f34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f44:	887b      	ldrh	r3, [r7, #2]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00f      	beq.n	8006f6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006f54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f62:	2b28      	cmp	r3, #40	@ 0x28
 8006f64:	d003      	beq.n	8006f6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006f6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f6e:	887b      	ldrh	r3, [r7, #2]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006f7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f8c:	2b28      	cmp	r3, #40	@ 0x28
 8006f8e:	d003      	beq.n	8006f98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006f96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da03      	bge.n	8006fa8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fa8:	887b      	ldrh	r3, [r7, #2]
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d103      	bne.n	8006fb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006fb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fb6:	887b      	ldrh	r3, [r7, #2]
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d103      	bne.n	8006fc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f043 0320 	orr.w	r3, r3, #32
 8006fc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006fc4:	887b      	ldrh	r3, [r7, #2]
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d103      	bne.n	8006fd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6819      	ldr	r1, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	43da      	mvns	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	400a      	ands	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b20      	cmp	r3, #32
 8007004:	d138      	bne.n	8007078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007010:	2302      	movs	r3, #2
 8007012:	e032      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	@ 0x24
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0201 	bic.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b20      	cmp	r3, #32
 800709a:	d139      	bne.n	8007110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e033      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	@ 0x24
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d141      	bne.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800712e:	4b4b      	ldr	r3, [pc, #300]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800713a:	d131      	bne.n	80071a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800713c:	4b47      	ldr	r3, [pc, #284]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800713e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007142:	4a46      	ldr	r2, [pc, #280]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800714c:	4b43      	ldr	r3, [pc, #268]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007154:	4a41      	ldr	r2, [pc, #260]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800715a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800715c:	4b40      	ldr	r3, [pc, #256]	@ (8007260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2232      	movs	r2, #50	@ 0x32
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	4a3f      	ldr	r2, [pc, #252]	@ (8007264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	0c9b      	lsrs	r3, r3, #18
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007172:	e002      	b.n	800717a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b01      	subs	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800717a:	4b38      	ldr	r3, [pc, #224]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007186:	d102      	bne.n	800718e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f2      	bne.n	8007174 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800718e:	4b33      	ldr	r3, [pc, #204]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800719a:	d158      	bne.n	800724e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e057      	b.n	8007250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071a0:	4b2e      	ldr	r3, [pc, #184]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a6:	4a2d      	ldr	r2, [pc, #180]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80071b0:	e04d      	b.n	800724e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b8:	d141      	bne.n	800723e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071ba:	4b28      	ldr	r3, [pc, #160]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c6:	d131      	bne.n	800722c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071c8:	4b24      	ldr	r3, [pc, #144]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	4a23      	ldr	r2, [pc, #140]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071d8:	4b20      	ldr	r3, [pc, #128]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80071e0:	4a1e      	ldr	r2, [pc, #120]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2232      	movs	r2, #50	@ 0x32
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80071f4:	fba2 2303 	umull	r2, r3, r2, r3
 80071f8:	0c9b      	lsrs	r3, r3, #18
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071fe:	e002      	b.n	8007206 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3b01      	subs	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007206:	4b15      	ldr	r3, [pc, #84]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007212:	d102      	bne.n	800721a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f2      	bne.n	8007200 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800721a:	4b10      	ldr	r3, [pc, #64]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007226:	d112      	bne.n	800724e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e011      	b.n	8007250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800722c:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007232:	4a0a      	ldr	r2, [pc, #40]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800723c:	e007      	b.n	800724e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800723e:	4b07      	ldr	r3, [pc, #28]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007246:	4a05      	ldr	r2, [pc, #20]	@ (800725c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007248:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800724c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40007000 	.word	0x40007000
 8007260:	2000003c 	.word	0x2000003c
 8007264:	431bde83 	.word	0x431bde83

08007268 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4a04      	ldr	r2, [pc, #16]	@ (8007284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007276:	6093      	str	r3, [r2, #8]
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40007000 	.word	0x40007000

08007288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e2fe      	b.n	8007898 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d075      	beq.n	8007392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a6:	4b97      	ldr	r3, [pc, #604]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072b0:	4b94      	ldr	r3, [pc, #592]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b0c      	cmp	r3, #12
 80072be:	d102      	bne.n	80072c6 <HAL_RCC_OscConfig+0x3e>
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d002      	beq.n	80072cc <HAL_RCC_OscConfig+0x44>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072cc:	4b8d      	ldr	r3, [pc, #564]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d05b      	beq.n	8007390 <HAL_RCC_OscConfig+0x108>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d157      	bne.n	8007390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e2d9      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d106      	bne.n	80072fc <HAL_RCC_OscConfig+0x74>
 80072ee:	4b85      	ldr	r3, [pc, #532]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a84      	ldr	r2, [pc, #528]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e01d      	b.n	8007338 <HAL_RCC_OscConfig+0xb0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0x98>
 8007306:	4b7f      	ldr	r3, [pc, #508]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7e      	ldr	r2, [pc, #504]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800730c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4b7c      	ldr	r3, [pc, #496]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7b      	ldr	r2, [pc, #492]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e00b      	b.n	8007338 <HAL_RCC_OscConfig+0xb0>
 8007320:	4b78      	ldr	r3, [pc, #480]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a77      	ldr	r2, [pc, #476]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	4b75      	ldr	r3, [pc, #468]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a74      	ldr	r2, [pc, #464]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d013      	beq.n	8007368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007340:	f7fb fdec 	bl	8002f1c <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007346:	e008      	b.n	800735a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007348:	f7fb fde8 	bl	8002f1c <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b64      	cmp	r3, #100	@ 0x64
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e29e      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800735a:	4b6a      	ldr	r3, [pc, #424]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f0      	beq.n	8007348 <HAL_RCC_OscConfig+0xc0>
 8007366:	e014      	b.n	8007392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fb fdd8 	bl	8002f1c <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007370:	f7fb fdd4 	bl	8002f1c <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b64      	cmp	r3, #100	@ 0x64
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e28a      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007382:	4b60      	ldr	r3, [pc, #384]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0xe8>
 800738e:	e000      	b.n	8007392 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d075      	beq.n	800748a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739e:	4b59      	ldr	r3, [pc, #356]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 030c 	and.w	r3, r3, #12
 80073a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073a8:	4b56      	ldr	r3, [pc, #344]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d102      	bne.n	80073be <HAL_RCC_OscConfig+0x136>
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d002      	beq.n	80073c4 <HAL_RCC_OscConfig+0x13c>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d11f      	bne.n	8007404 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_RCC_OscConfig+0x154>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e25d      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	4b49      	ldr	r3, [pc, #292]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	4946      	ldr	r1, [pc, #280]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073f0:	4b45      	ldr	r3, [pc, #276]	@ (8007508 <HAL_RCC_OscConfig+0x280>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fb fd45 	bl	8002e84 <HAL_InitTick>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d043      	beq.n	8007488 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e249      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d023      	beq.n	8007454 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800740c:	4b3d      	ldr	r3, [pc, #244]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a3c      	ldr	r2, [pc, #240]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fb fd80 	bl	8002f1c <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007420:	f7fb fd7c 	bl	8002f1c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e232      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007432:	4b34      	ldr	r3, [pc, #208]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743e:	4b31      	ldr	r3, [pc, #196]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	492d      	ldr	r1, [pc, #180]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800744e:	4313      	orrs	r3, r2
 8007450:	604b      	str	r3, [r1, #4]
 8007452:	e01a      	b.n	800748a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007454:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2a      	ldr	r2, [pc, #168]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800745a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800745e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fb fd5c 	bl	8002f1c <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007468:	f7fb fd58 	bl	8002f1c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e20e      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800747a:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x1e0>
 8007486:	e000      	b.n	800748a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01c      	beq.n	80074d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b19      	ldr	r3, [pc, #100]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80074a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074a4:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7fb fd35 	bl	8002f1c <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b6:	f7fb fd31 	bl	8002f1c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e1e7      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80074ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ef      	beq.n	80074b6 <HAL_RCC_OscConfig+0x22e>
 80074d6:	e020      	b.n	800751a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80074da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074de:	4a09      	ldr	r2, [pc, #36]	@ (8007504 <HAL_RCC_OscConfig+0x27c>)
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e8:	f7fb fd18 	bl	8002f1c <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074ee:	e00d      	b.n	800750c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074f0:	f7fb fd14 	bl	8002f1c <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d906      	bls.n	800750c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e1ca      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
 8007502:	bf00      	nop
 8007504:	40021000 	.word	0x40021000
 8007508:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800750c:	4b8c      	ldr	r3, [pc, #560]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800750e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1ea      	bne.n	80074f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a6 	beq.w	8007674 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800752c:	4b84      	ldr	r3, [pc, #528]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800752e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_RCC_OscConfig+0x2b4>
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <HAL_RCC_OscConfig+0x2b6>
 800753c:	2300      	movs	r3, #0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00d      	beq.n	800755e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007542:	4b7f      	ldr	r3, [pc, #508]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007546:	4a7e      	ldr	r2, [pc, #504]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800754c:	6593      	str	r3, [r2, #88]	@ 0x58
 800754e:	4b7c      	ldr	r3, [pc, #496]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800755a:	2301      	movs	r3, #1
 800755c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800755e:	4b79      	ldr	r3, [pc, #484]	@ (8007744 <HAL_RCC_OscConfig+0x4bc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d118      	bne.n	800759c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800756a:	4b76      	ldr	r3, [pc, #472]	@ (8007744 <HAL_RCC_OscConfig+0x4bc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a75      	ldr	r2, [pc, #468]	@ (8007744 <HAL_RCC_OscConfig+0x4bc>)
 8007570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007576:	f7fb fcd1 	bl	8002f1c <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757e:	f7fb fccd 	bl	8002f1c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e183      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007590:	4b6c      	ldr	r3, [pc, #432]	@ (8007744 <HAL_RCC_OscConfig+0x4bc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0f0      	beq.n	800757e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d108      	bne.n	80075b6 <HAL_RCC_OscConfig+0x32e>
 80075a4:	4b66      	ldr	r3, [pc, #408]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075aa:	4a65      	ldr	r2, [pc, #404]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075b4:	e024      	b.n	8007600 <HAL_RCC_OscConfig+0x378>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d110      	bne.n	80075e0 <HAL_RCC_OscConfig+0x358>
 80075be:	4b60      	ldr	r3, [pc, #384]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075c6:	f043 0304 	orr.w	r3, r3, #4
 80075ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d4:	4a5a      	ldr	r2, [pc, #360]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075de:	e00f      	b.n	8007600 <HAL_RCC_OscConfig+0x378>
 80075e0:	4b57      	ldr	r3, [pc, #348]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e6:	4a56      	ldr	r2, [pc, #344]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80075f0:	4b53      	ldr	r3, [pc, #332]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f6:	4a52      	ldr	r2, [pc, #328]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80075f8:	f023 0304 	bic.w	r3, r3, #4
 80075fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d016      	beq.n	8007636 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007608:	f7fb fc88 	bl	8002f1c <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760e:	e00a      	b.n	8007626 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007610:	f7fb fc84 	bl	8002f1c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e138      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007626:	4b46      	ldr	r3, [pc, #280]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ed      	beq.n	8007610 <HAL_RCC_OscConfig+0x388>
 8007634:	e015      	b.n	8007662 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007636:	f7fb fc71 	bl	8002f1c <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800763c:	e00a      	b.n	8007654 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763e:	f7fb fc6d 	bl	8002f1c <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e121      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007654:	4b3a      	ldr	r3, [pc, #232]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1ed      	bne.n	800763e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007662:	7ffb      	ldrb	r3, [r7, #31]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007668:	4b35      	ldr	r3, [pc, #212]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800766a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766c:	4a34      	ldr	r2, [pc, #208]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800766e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007672:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d03c      	beq.n	80076fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01c      	beq.n	80076c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007688:	4b2d      	ldr	r3, [pc, #180]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800768a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800768e:	4a2c      	ldr	r2, [pc, #176]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007698:	f7fb fc40 	bl	8002f1c <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076a0:	f7fb fc3c 	bl	8002f1c <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0f2      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076b2:	4b23      	ldr	r3, [pc, #140]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80076b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ef      	beq.n	80076a0 <HAL_RCC_OscConfig+0x418>
 80076c0:	e01b      	b.n	80076fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80076c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d2:	f7fb fc23 	bl	8002f1c <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076da:	f7fb fc1f 	bl	8002f1c <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e0d5      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076ec:	4b14      	ldr	r3, [pc, #80]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 80076ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1ef      	bne.n	80076da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80c9 	beq.w	8007896 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007704:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 030c 	and.w	r3, r3, #12
 800770c:	2b0c      	cmp	r3, #12
 800770e:	f000 8083 	beq.w	8007818 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d15e      	bne.n	80077d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a08      	ldr	r2, [pc, #32]	@ (8007740 <HAL_RCC_OscConfig+0x4b8>)
 8007720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007726:	f7fb fbf9 	bl	8002f1c <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800772c:	e00c      	b.n	8007748 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772e:	f7fb fbf5 	bl	8002f1c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d905      	bls.n	8007748 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e0ab      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
 8007740:	40021000 	.word	0x40021000
 8007744:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007748:	4b55      	ldr	r3, [pc, #340]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1ec      	bne.n	800772e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007754:	4b52      	ldr	r3, [pc, #328]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	4b52      	ldr	r3, [pc, #328]	@ (80078a4 <HAL_RCC_OscConfig+0x61c>)
 800775a:	4013      	ands	r3, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6a11      	ldr	r1, [r2, #32]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007764:	3a01      	subs	r2, #1
 8007766:	0112      	lsls	r2, r2, #4
 8007768:	4311      	orrs	r1, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800776e:	0212      	lsls	r2, r2, #8
 8007770:	4311      	orrs	r1, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007776:	0852      	lsrs	r2, r2, #1
 8007778:	3a01      	subs	r2, #1
 800777a:	0552      	lsls	r2, r2, #21
 800777c:	4311      	orrs	r1, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007782:	0852      	lsrs	r2, r2, #1
 8007784:	3a01      	subs	r2, #1
 8007786:	0652      	lsls	r2, r2, #25
 8007788:	4311      	orrs	r1, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800778e:	06d2      	lsls	r2, r2, #27
 8007790:	430a      	orrs	r2, r1
 8007792:	4943      	ldr	r1, [pc, #268]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 8007794:	4313      	orrs	r3, r2
 8007796:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007798:	4b41      	ldr	r3, [pc, #260]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a40      	ldr	r2, [pc, #256]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 800779e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077a4:	4b3e      	ldr	r3, [pc, #248]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	4a3d      	ldr	r2, [pc, #244]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 80077aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fb fbb4 	bl	8002f1c <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b8:	f7fb fbb0 	bl	8002f1c <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e066      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ca:	4b35      	ldr	r3, [pc, #212]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0x530>
 80077d6:	e05e      	b.n	8007896 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077d8:	4b31      	ldr	r3, [pc, #196]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a30      	ldr	r2, [pc, #192]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 80077de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e4:	f7fb fb9a 	bl	8002f1c <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ec:	f7fb fb96 	bl	8002f1c <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e04c      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077fe:	4b28      	ldr	r3, [pc, #160]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800780a:	4b25      	ldr	r3, [pc, #148]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	4924      	ldr	r1, [pc, #144]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <HAL_RCC_OscConfig+0x620>)
 8007812:	4013      	ands	r3, r2
 8007814:	60cb      	str	r3, [r1, #12]
 8007816:	e03e      	b.n	8007896 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e039      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007824:	4b1e      	ldr	r3, [pc, #120]	@ (80078a0 <HAL_RCC_OscConfig+0x618>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f003 0203 	and.w	r2, r3, #3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	429a      	cmp	r2, r3
 8007836:	d12c      	bne.n	8007892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	3b01      	subs	r3, #1
 8007844:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007846:	429a      	cmp	r2, r3
 8007848:	d123      	bne.n	8007892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007854:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007856:	429a      	cmp	r2, r3
 8007858:	d11b      	bne.n	8007892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007866:	429a      	cmp	r2, r3
 8007868:	d113      	bne.n	8007892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	3b01      	subs	r3, #1
 8007878:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800787a:	429a      	cmp	r2, r3
 800787c:	d109      	bne.n	8007892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	3b01      	subs	r3, #1
 800788c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800788e:	429a      	cmp	r2, r3
 8007890:	d001      	beq.n	8007896 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40021000 	.word	0x40021000
 80078a4:	019f800c 	.word	0x019f800c
 80078a8:	feeefffc 	.word	0xfeeefffc

080078ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e11e      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c4:	4b91      	ldr	r3, [pc, #580]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d910      	bls.n	80078f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b8e      	ldr	r3, [pc, #568]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f023 020f 	bic.w	r2, r3, #15
 80078da:	498c      	ldr	r1, [pc, #560]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	4313      	orrs	r3, r2
 80078e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e2:	4b8a      	ldr	r3, [pc, #552]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e106      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d073      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d129      	bne.n	800795c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007908:	4b81      	ldr	r3, [pc, #516]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0f4      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007918:	f000 f99e 	bl	8007c58 <RCC_GetSysClockFreqFromPLLSource>
 800791c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4a7c      	ldr	r2, [pc, #496]	@ (8007b14 <HAL_RCC_ClockConfig+0x268>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d93f      	bls.n	80079a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007926:	4b7a      	ldr	r3, [pc, #488]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800793a:	2b00      	cmp	r3, #0
 800793c:	d033      	beq.n	80079a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007942:	2b00      	cmp	r3, #0
 8007944:	d12f      	bne.n	80079a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007946:	4b72      	ldr	r3, [pc, #456]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800794e:	4a70      	ldr	r2, [pc, #448]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007954:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007956:	2380      	movs	r3, #128	@ 0x80
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e024      	b.n	80079a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d107      	bne.n	8007974 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007964:	4b6a      	ldr	r3, [pc, #424]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e0c6      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007974:	4b66      	ldr	r3, [pc, #408]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0be      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007984:	f000 f8ce 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4a61      	ldr	r2, [pc, #388]	@ (8007b14 <HAL_RCC_ClockConfig+0x268>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d909      	bls.n	80079a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007992:	4b5f      	ldr	r3, [pc, #380]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800799a:	4a5d      	ldr	r2, [pc, #372]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 800799c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80079a2:	2380      	movs	r3, #128	@ 0x80
 80079a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079a6:	4b5a      	ldr	r3, [pc, #360]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f023 0203 	bic.w	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4957      	ldr	r1, [pc, #348]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b8:	f7fb fab0 	bl	8002f1c <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c0:	f7fb faac 	bl	8002f1c <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e095      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d6:	4b4e      	ldr	r3, [pc, #312]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 020c 	and.w	r2, r3, #12
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d1eb      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a00:	4b43      	ldr	r3, [pc, #268]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	4a42      	ldr	r2, [pc, #264]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007a0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007a18:	4b3d      	ldr	r3, [pc, #244]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a20:	4a3b      	ldr	r2, [pc, #236]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a28:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	4936      	ldr	r1, [pc, #216]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b80      	cmp	r3, #128	@ 0x80
 8007a40:	d105      	bne.n	8007a4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007a42:	4b33      	ldr	r3, [pc, #204]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4a32      	ldr	r2, [pc, #200]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007a48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d21d      	bcs.n	8007a98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 020f 	bic.w	r2, r3, #15
 8007a64:	4929      	ldr	r1, [pc, #164]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007a6c:	f7fb fa56 	bl	8002f1c <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a74:	f7fb fa52 	bl	8002f1c <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e03b      	b.n	8007b02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	4b20      	ldr	r3, [pc, #128]	@ (8007b0c <HAL_RCC_ClockConfig+0x260>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d1ed      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	4917      	ldr	r1, [pc, #92]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ac2:	4b13      	ldr	r3, [pc, #76]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	490f      	ldr	r1, [pc, #60]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ad6:	f000 f825 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007ada:	4602      	mov	r2, r0
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <HAL_RCC_ClockConfig+0x264>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	490c      	ldr	r1, [pc, #48]	@ (8007b18 <HAL_RCC_ClockConfig+0x26c>)
 8007ae8:	5ccb      	ldrb	r3, [r1, r3]
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	fa22 f303 	lsr.w	r3, r2, r3
 8007af2:	4a0a      	ldr	r2, [pc, #40]	@ (8007b1c <HAL_RCC_ClockConfig+0x270>)
 8007af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007af6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <HAL_RCC_ClockConfig+0x274>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fb f9c2 	bl	8002e84 <HAL_InitTick>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40022000 	.word	0x40022000
 8007b10:	40021000 	.word	0x40021000
 8007b14:	04c4b400 	.word	0x04c4b400
 8007b18:	0800b6bc 	.word	0x0800b6bc
 8007b1c:	2000003c 	.word	0x2000003c
 8007b20:	20000040 	.word	0x20000040

08007b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d102      	bne.n	8007b3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b36:	4b2a      	ldr	r3, [pc, #168]	@ (8007be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e047      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b3c:	4b27      	ldr	r3, [pc, #156]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d102      	bne.n	8007b4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b48:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e03e      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b4e:	4b23      	ldr	r3, [pc, #140]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 030c 	and.w	r3, r3, #12
 8007b56:	2b0c      	cmp	r3, #12
 8007b58:	d136      	bne.n	8007bc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b5a:	4b20      	ldr	r3, [pc, #128]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b64:	4b1d      	ldr	r3, [pc, #116]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	091b      	lsrs	r3, r3, #4
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d10c      	bne.n	8007b92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b78:	4a1a      	ldr	r2, [pc, #104]	@ (8007be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b82:	68d2      	ldr	r2, [r2, #12]
 8007b84:	0a12      	lsrs	r2, r2, #8
 8007b86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b8a:	fb02 f303 	mul.w	r3, r2, r3
 8007b8e:	617b      	str	r3, [r7, #20]
      break;
 8007b90:	e00c      	b.n	8007bac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b92:	4a13      	ldr	r2, [pc, #76]	@ (8007be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9a:	4a10      	ldr	r2, [pc, #64]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b9c:	68d2      	ldr	r2, [r2, #12]
 8007b9e:	0a12      	lsrs	r2, r2, #8
 8007ba0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ba4:	fb02 f303 	mul.w	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]
      break;
 8007baa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bac:	4b0b      	ldr	r3, [pc, #44]	@ (8007bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	0e5b      	lsrs	r3, r3, #25
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e001      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007bcc:	693b      	ldr	r3, [r7, #16]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	00f42400 	.word	0x00f42400
 8007be4:	016e3600 	.word	0x016e3600

08007be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bec:	4b03      	ldr	r3, [pc, #12]	@ (8007bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8007bee:	681b      	ldr	r3, [r3, #0]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	2000003c 	.word	0x2000003c

08007c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007c04:	f7ff fff0 	bl	8007be8 <HAL_RCC_GetHCLKFreq>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	4904      	ldr	r1, [pc, #16]	@ (8007c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c16:	5ccb      	ldrb	r3, [r1, r3]
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40021000 	.word	0x40021000
 8007c28:	0800b6cc 	.word	0x0800b6cc

08007c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007c30:	f7ff ffda 	bl	8007be8 <HAL_RCC_GetHCLKFreq>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	0adb      	lsrs	r3, r3, #11
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	4904      	ldr	r1, [pc, #16]	@ (8007c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c42:	5ccb      	ldrb	r3, [r1, r3]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40021000 	.word	0x40021000
 8007c54:	0800b6cc 	.word	0x0800b6cc

08007c58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c68:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d10c      	bne.n	8007c96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c7c:	4a17      	ldr	r2, [pc, #92]	@ (8007cdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	4a14      	ldr	r2, [pc, #80]	@ (8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c86:	68d2      	ldr	r2, [r2, #12]
 8007c88:	0a12      	lsrs	r2, r2, #8
 8007c8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	617b      	str	r3, [r7, #20]
    break;
 8007c94:	e00c      	b.n	8007cb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c96:	4a12      	ldr	r2, [pc, #72]	@ (8007ce0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ca0:	68d2      	ldr	r2, [r2, #12]
 8007ca2:	0a12      	lsrs	r2, r2, #8
 8007ca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	617b      	str	r3, [r7, #20]
    break;
 8007cae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cb0:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	0e5b      	lsrs	r3, r3, #25
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007cca:	687b      	ldr	r3, [r7, #4]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	40021000 	.word	0x40021000
 8007cdc:	016e3600 	.word	0x016e3600
 8007ce0:	00f42400 	.word	0x00f42400

08007ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cec:	2300      	movs	r3, #0
 8007cee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8098 	beq.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d02:	2300      	movs	r3, #0
 8007d04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d06:	4b43      	ldr	r3, [pc, #268]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d12:	4b40      	ldr	r3, [pc, #256]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	4a3f      	ldr	r2, [pc, #252]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d26:	60bb      	str	r3, [r7, #8]
 8007d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a39      	ldr	r2, [pc, #228]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d3a:	f7fb f8ef 	bl	8002f1c <HAL_GetTick>
 8007d3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d40:	e009      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d42:	f7fb f8eb 	bl	8002f1c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d902      	bls.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	74fb      	strb	r3, [r7, #19]
        break;
 8007d54:	e005      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d56:	4b30      	ldr	r3, [pc, #192]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007d62:	7cfb      	ldrb	r3, [r7, #19]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d159      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d68:	4b2a      	ldr	r3, [pc, #168]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01e      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d019      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d84:	4b23      	ldr	r3, [pc, #140]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d90:	4b20      	ldr	r3, [pc, #128]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d96:	4a1f      	ldr	r2, [pc, #124]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007da0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007db0:	4a18      	ldr	r2, [pc, #96]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d016      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc2:	f7fb f8ab 	bl	8002f1c <HAL_GetTick>
 8007dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dc8:	e00b      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dca:	f7fb f8a7 	bl	8002f1c <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d902      	bls.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	74fb      	strb	r3, [r7, #19]
            break;
 8007de0:	e006      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ec      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007df0:	7cfb      	ldrb	r3, [r7, #19]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007df6:	4b07      	ldr	r3, [pc, #28]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e04:	4903      	ldr	r1, [pc, #12]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007e0c:	e008      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e0e:	7cfb      	ldrb	r3, [r7, #19]
 8007e10:	74bb      	strb	r3, [r7, #18]
 8007e12:	e005      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	7cfb      	ldrb	r3, [r7, #19]
 8007e1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e20:	7c7b      	ldrb	r3, [r7, #17]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d105      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e26:	4ba7      	ldr	r3, [pc, #668]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2a:	4aa6      	ldr	r2, [pc, #664]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e3e:	4ba1      	ldr	r3, [pc, #644]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e44:	f023 0203 	bic.w	r2, r3, #3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	499d      	ldr	r1, [pc, #628]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e60:	4b98      	ldr	r3, [pc, #608]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e66:	f023 020c 	bic.w	r2, r3, #12
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	4995      	ldr	r1, [pc, #596]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e82:	4b90      	ldr	r3, [pc, #576]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	498c      	ldr	r1, [pc, #560]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ea4:	4b87      	ldr	r3, [pc, #540]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	4984      	ldr	r1, [pc, #528]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	497b      	ldr	r1, [pc, #492]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ee8:	4b76      	ldr	r3, [pc, #472]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	4973      	ldr	r1, [pc, #460]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	496a      	ldr	r1, [pc, #424]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f2c:	4b65      	ldr	r3, [pc, #404]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	4962      	ldr	r1, [pc, #392]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	4959      	ldr	r1, [pc, #356]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f70:	4b54      	ldr	r3, [pc, #336]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f76:	f023 0203 	bic.w	r2, r3, #3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	4951      	ldr	r1, [pc, #324]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f92:	4b4c      	ldr	r3, [pc, #304]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	4948      	ldr	r1, [pc, #288]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d015      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fb4:	4b43      	ldr	r3, [pc, #268]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc2:	4940      	ldr	r1, [pc, #256]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fd2:	d105      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d015      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fec:	4b35      	ldr	r3, [pc, #212]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffa:	4932      	ldr	r1, [pc, #200]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800800a:	d105      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800800c:	4b2d      	ldr	r3, [pc, #180]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4a2c      	ldr	r2, [pc, #176]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008016:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d015      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008024:	4b27      	ldr	r3, [pc, #156]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	4924      	ldr	r1, [pc, #144]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008042:	d105      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008044:	4b1f      	ldr	r3, [pc, #124]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a1e      	ldr	r2, [pc, #120]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800804a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800804e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d015      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800805c:	4b19      	ldr	r3, [pc, #100]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800805e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806a:	4916      	ldr	r1, [pc, #88]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800806c:	4313      	orrs	r3, r2
 800806e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800807a:	d105      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800807c:	4b11      	ldr	r3, [pc, #68]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	4a10      	ldr	r2, [pc, #64]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008086:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d019      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008094:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a2:	4908      	ldr	r1, [pc, #32]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080b2:	d109      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080b4:	4b03      	ldr	r3, [pc, #12]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4a02      	ldr	r2, [pc, #8]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080be:	60d3      	str	r3, [r2, #12]
 80080c0:	e002      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80080c2:	bf00      	nop
 80080c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d015      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80080d4:	4b29      	ldr	r3, [pc, #164]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	4926      	ldr	r1, [pc, #152]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f2:	d105      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80080f4:	4b21      	ldr	r3, [pc, #132]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	4a20      	ldr	r2, [pc, #128]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d015      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800810c:	4b1b      	ldr	r3, [pc, #108]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008112:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800811a:	4918      	ldr	r1, [pc, #96]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812a:	d105      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800812c:	4b13      	ldr	r3, [pc, #76]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	4a12      	ldr	r2, [pc, #72]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008136:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008144:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008146:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800814a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008152:	490a      	ldr	r1, [pc, #40]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800815e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008162:	d105      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	4a04      	ldr	r2, [pc, #16]	@ (800817c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800816e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008170:	7cbb      	ldrb	r3, [r7, #18]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000

08008180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e049      	b.n	8008226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7fa fc56 	bl	8002a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f001 f808 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d001      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e054      	b.n	80082f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <HAL_TIM_Base_Start_IT+0xd0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008272:	d01d      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a22      	ldr	r2, [pc, #136]	@ (8008304 <HAL_TIM_Base_Start_IT+0xd4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a21      	ldr	r2, [pc, #132]	@ (8008308 <HAL_TIM_Base_Start_IT+0xd8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1f      	ldr	r2, [pc, #124]	@ (800830c <HAL_TIM_Base_Start_IT+0xdc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1e      	ldr	r2, [pc, #120]	@ (8008310 <HAL_TIM_Base_Start_IT+0xe0>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008314 <HAL_TIM_Base_Start_IT+0xe4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008318 <HAL_TIM_Base_Start_IT+0xe8>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d115      	bne.n	80082dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	4b19      	ldr	r3, [pc, #100]	@ (800831c <HAL_TIM_Base_Start_IT+0xec>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d015      	beq.n	80082ee <HAL_TIM_Base_Start_IT+0xbe>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c8:	d011      	beq.n	80082ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082da:	e008      	b.n	80082ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e000      	b.n	80082f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00
 8008310:	40013400 	.word	0x40013400
 8008314:	40014000 	.word	0x40014000
 8008318:	40015000 	.word	0x40015000
 800831c:	00010007 	.word	0x00010007

08008320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e049      	b.n	80083c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f841 	bl	80083ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f000 ff38 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d109      	bne.n	8008408 <HAL_TIM_PWM_Start+0x24>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	e03c      	b.n	8008482 <HAL_TIM_PWM_Start+0x9e>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d109      	bne.n	8008422 <HAL_TIM_PWM_Start+0x3e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b01      	cmp	r3, #1
 8008418:	bf14      	ite	ne
 800841a:	2301      	movne	r3, #1
 800841c:	2300      	moveq	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	e02f      	b.n	8008482 <HAL_TIM_PWM_Start+0x9e>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d109      	bne.n	800843c <HAL_TIM_PWM_Start+0x58>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	bf14      	ite	ne
 8008434:	2301      	movne	r3, #1
 8008436:	2300      	moveq	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e022      	b.n	8008482 <HAL_TIM_PWM_Start+0x9e>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b0c      	cmp	r3, #12
 8008440:	d109      	bne.n	8008456 <HAL_TIM_PWM_Start+0x72>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	bf14      	ite	ne
 800844e:	2301      	movne	r3, #1
 8008450:	2300      	moveq	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	e015      	b.n	8008482 <HAL_TIM_PWM_Start+0x9e>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b10      	cmp	r3, #16
 800845a:	d109      	bne.n	8008470 <HAL_TIM_PWM_Start+0x8c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	e008      	b.n	8008482 <HAL_TIM_PWM_Start+0x9e>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	bf14      	ite	ne
 800847c:	2301      	movne	r3, #1
 800847e:	2300      	moveq	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e0a6      	b.n	80085d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_TIM_PWM_Start+0xb6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008498:	e023      	b.n	80084e2 <HAL_TIM_PWM_Start+0xfe>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d104      	bne.n	80084aa <HAL_TIM_PWM_Start+0xc6>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084a8:	e01b      	b.n	80084e2 <HAL_TIM_PWM_Start+0xfe>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start+0xd6>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084b8:	e013      	b.n	80084e2 <HAL_TIM_PWM_Start+0xfe>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b0c      	cmp	r3, #12
 80084be:	d104      	bne.n	80084ca <HAL_TIM_PWM_Start+0xe6>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084c8:	e00b      	b.n	80084e2 <HAL_TIM_PWM_Start+0xfe>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b10      	cmp	r3, #16
 80084ce:	d104      	bne.n	80084da <HAL_TIM_PWM_Start+0xf6>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084d8:	e003      	b.n	80084e2 <HAL_TIM_PWM_Start+0xfe>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2201      	movs	r2, #1
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fc16 	bl	8009d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a3a      	ldr	r2, [pc, #232]	@ (80085e0 <HAL_TIM_PWM_Start+0x1fc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d018      	beq.n	800852c <HAL_TIM_PWM_Start+0x148>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a39      	ldr	r2, [pc, #228]	@ (80085e4 <HAL_TIM_PWM_Start+0x200>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d013      	beq.n	800852c <HAL_TIM_PWM_Start+0x148>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a37      	ldr	r2, [pc, #220]	@ (80085e8 <HAL_TIM_PWM_Start+0x204>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00e      	beq.n	800852c <HAL_TIM_PWM_Start+0x148>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a36      	ldr	r2, [pc, #216]	@ (80085ec <HAL_TIM_PWM_Start+0x208>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d009      	beq.n	800852c <HAL_TIM_PWM_Start+0x148>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a34      	ldr	r2, [pc, #208]	@ (80085f0 <HAL_TIM_PWM_Start+0x20c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <HAL_TIM_PWM_Start+0x148>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a33      	ldr	r2, [pc, #204]	@ (80085f4 <HAL_TIM_PWM_Start+0x210>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d101      	bne.n	8008530 <HAL_TIM_PWM_Start+0x14c>
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <HAL_TIM_PWM_Start+0x14e>
 8008530:	2300      	movs	r3, #0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008544:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a25      	ldr	r2, [pc, #148]	@ (80085e0 <HAL_TIM_PWM_Start+0x1fc>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d022      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008558:	d01d      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a26      	ldr	r2, [pc, #152]	@ (80085f8 <HAL_TIM_PWM_Start+0x214>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d018      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a24      	ldr	r2, [pc, #144]	@ (80085fc <HAL_TIM_PWM_Start+0x218>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a23      	ldr	r2, [pc, #140]	@ (8008600 <HAL_TIM_PWM_Start+0x21c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00e      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a19      	ldr	r2, [pc, #100]	@ (80085e4 <HAL_TIM_PWM_Start+0x200>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <HAL_TIM_PWM_Start+0x204>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_TIM_PWM_Start+0x1b2>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a18      	ldr	r2, [pc, #96]	@ (80085f4 <HAL_TIM_PWM_Start+0x210>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d115      	bne.n	80085c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	4b19      	ldr	r3, [pc, #100]	@ (8008604 <HAL_TIM_PWM_Start+0x220>)
 800859e:	4013      	ands	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d015      	beq.n	80085d4 <HAL_TIM_PWM_Start+0x1f0>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ae:	d011      	beq.n	80085d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c0:	e008      	b.n	80085d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0201 	orr.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e000      	b.n	80085d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40013400 	.word	0x40013400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800
 80085f4:	40015000 	.word	0x40015000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	00010007 	.word	0x00010007

08008608 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e049      	b.n	80086ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f841 	bl	80086b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f000 fdc4 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <HAL_TIM_IC_Start_IT+0x1e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	e023      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_IC_Start_IT+0x2e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	e01b      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d104      	bne.n	800870a <HAL_TIM_IC_Start_IT+0x3e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008706:	b2db      	uxtb	r3, r3
 8008708:	e013      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b0c      	cmp	r3, #12
 800870e:	d104      	bne.n	800871a <HAL_TIM_IC_Start_IT+0x4e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008716:	b2db      	uxtb	r3, r3
 8008718:	e00b      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b10      	cmp	r3, #16
 800871e:	d104      	bne.n	800872a <HAL_TIM_IC_Start_IT+0x5e>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008726:	b2db      	uxtb	r3, r3
 8008728:	e003      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008730:	b2db      	uxtb	r3, r3
 8008732:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <HAL_TIM_IC_Start_IT+0x78>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008740:	b2db      	uxtb	r3, r3
 8008742:	e013      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b04      	cmp	r3, #4
 8008748:	d104      	bne.n	8008754 <HAL_TIM_IC_Start_IT+0x88>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e00b      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b08      	cmp	r3, #8
 8008758:	d104      	bne.n	8008764 <HAL_TIM_IC_Start_IT+0x98>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008760:	b2db      	uxtb	r3, r3
 8008762:	e003      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800876a:	b2db      	uxtb	r3, r3
 800876c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d102      	bne.n	800877a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008774:	7b7b      	ldrb	r3, [r7, #13]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e0e2      	b.n	8008944 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_TIM_IC_Start_IT+0xc2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800878c:	e023      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b04      	cmp	r3, #4
 8008792:	d104      	bne.n	800879e <HAL_TIM_IC_Start_IT+0xd2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800879c:	e01b      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_IC_Start_IT+0xe2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087ac:	e013      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b0c      	cmp	r3, #12
 80087b2:	d104      	bne.n	80087be <HAL_TIM_IC_Start_IT+0xf2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087bc:	e00b      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_IC_Start_IT+0x102>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087cc:	e003      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x11a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087e4:	e013      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d104      	bne.n	80087f6 <HAL_TIM_IC_Start_IT+0x12a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f4:	e00b      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d104      	bne.n	8008806 <HAL_TIM_IC_Start_IT+0x13a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008804:	e003      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b0c      	cmp	r3, #12
 8008812:	d841      	bhi.n	8008898 <HAL_TIM_IC_Start_IT+0x1cc>
 8008814:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <HAL_TIM_IC_Start_IT+0x150>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	08008851 	.word	0x08008851
 8008820:	08008899 	.word	0x08008899
 8008824:	08008899 	.word	0x08008899
 8008828:	08008899 	.word	0x08008899
 800882c:	08008863 	.word	0x08008863
 8008830:	08008899 	.word	0x08008899
 8008834:	08008899 	.word	0x08008899
 8008838:	08008899 	.word	0x08008899
 800883c:	08008875 	.word	0x08008875
 8008840:	08008899 	.word	0x08008899
 8008844:	08008899 	.word	0x08008899
 8008848:	08008899 	.word	0x08008899
 800884c:	08008887 	.word	0x08008887
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0202 	orr.w	r2, r2, #2
 800885e:	60da      	str	r2, [r3, #12]
      break;
 8008860:	e01d      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0204 	orr.w	r2, r2, #4
 8008870:	60da      	str	r2, [r3, #12]
      break;
 8008872:	e014      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	60da      	str	r2, [r3, #12]
      break;
 8008884:	e00b      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0210 	orr.w	r2, r2, #16
 8008894:	60da      	str	r2, [r3, #12]
      break;
 8008896:	e002      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
      break;
 800889c:	bf00      	nop
  }

  if (status == HAL_OK)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d14e      	bne.n	8008942 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fa35 	bl	8009d1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a25      	ldr	r2, [pc, #148]	@ (800894c <HAL_TIM_IC_Start_IT+0x280>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c4:	d01d      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a21      	ldr	r2, [pc, #132]	@ (8008950 <HAL_TIM_IC_Start_IT+0x284>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008954 <HAL_TIM_IC_Start_IT+0x288>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1e      	ldr	r2, [pc, #120]	@ (8008958 <HAL_TIM_IC_Start_IT+0x28c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1c      	ldr	r2, [pc, #112]	@ (800895c <HAL_TIM_IC_Start_IT+0x290>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008960 <HAL_TIM_IC_Start_IT+0x294>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a19      	ldr	r2, [pc, #100]	@ (8008964 <HAL_TIM_IC_Start_IT+0x298>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d115      	bne.n	800892e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	4b17      	ldr	r3, [pc, #92]	@ (8008968 <HAL_TIM_IC_Start_IT+0x29c>)
 800890a:	4013      	ands	r3, r2
 800890c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b06      	cmp	r3, #6
 8008912:	d015      	beq.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800891a:	d011      	beq.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892c:	e008      	b.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0201 	orr.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e000      	b.n	8008942 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008940:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40015000 	.word	0x40015000
 8008968:	00010007 	.word	0x00010007

0800896c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d020      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01b      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f06f 0202 	mvn.w	r2, #2
 80089a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7f8 fbcc 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 80089bc:	e005      	b.n	80089ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fbea 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fbf1 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d020      	beq.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01b      	beq.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0204 	mvn.w	r2, #4
 80089ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f8 fba6 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008a08:	e005      	b.n	8008a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fbc4 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fbcb 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d020      	beq.n	8008a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01b      	beq.n	8008a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0208 	mvn.w	r2, #8
 8008a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7f8 fb80 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008a54:	e005      	b.n	8008a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fb9e 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fba5 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f003 0310 	and.w	r3, r3, #16
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d020      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f003 0310 	and.w	r3, r3, #16
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01b      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0210 	mvn.w	r2, #16
 8008a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2208      	movs	r2, #8
 8008a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7f8 fb5a 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
 8008aa0:	e005      	b.n	8008aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fb78 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fb7f 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00c      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0201 	mvn.w	r2, #1
 8008ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7f9 f89a 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00c      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fa65 	bl	8009fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00c      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 fa5d 	bl	8009fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00c      	beq.n	8008b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d007      	beq.n	8008b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb39 	bl	80091c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00c      	beq.n	8008b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f06f 0220 	mvn.w	r2, #32
 8008b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fa25 	bl	8009fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00c      	beq.n	8008b96 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fa31 	bl	8009ff8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00c      	beq.n	8008bba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fa29 	bl	800a00c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fa21 	bl	800a020 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 fa19 	bl	800a034 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e088      	b.n	8008d3a <HAL_TIM_IC_ConfigChannel+0x130>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d11b      	bne.n	8008c6e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c46:	f000 fea3 	bl	8009990 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 020c 	bic.w	r2, r2, #12
 8008c58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6999      	ldr	r1, [r3, #24]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	619a      	str	r2, [r3, #24]
 8008c6c:	e060      	b.n	8008d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d11c      	bne.n	8008cae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008c84:	f000 ff27 	bl	8009ad6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c96:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6999      	ldr	r1, [r3, #24]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	021a      	lsls	r2, r3, #8
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	619a      	str	r2, [r3, #24]
 8008cac:	e040      	b.n	8008d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d11b      	bne.n	8008cec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008cc4:	f000 ff74 	bl	8009bb0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 020c 	bic.w	r2, r2, #12
 8008cd6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69d9      	ldr	r1, [r3, #28]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	61da      	str	r2, [r3, #28]
 8008cea:	e021      	b.n	8008d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d11c      	bne.n	8008d2c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008d02:	f000 ff91 	bl	8009c28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69da      	ldr	r2, [r3, #28]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69d9      	ldr	r1, [r3, #28]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	021a      	lsls	r2, r3, #8
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	61da      	str	r2, [r3, #28]
 8008d2a:	e001      	b.n	8008d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e0ff      	b.n	8008f62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b14      	cmp	r3, #20
 8008d6e:	f200 80f0 	bhi.w	8008f52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008f53 	.word	0x08008f53
 8008d80:	08008f53 	.word	0x08008f53
 8008d84:	08008f53 	.word	0x08008f53
 8008d88:	08008e0d 	.word	0x08008e0d
 8008d8c:	08008f53 	.word	0x08008f53
 8008d90:	08008f53 	.word	0x08008f53
 8008d94:	08008f53 	.word	0x08008f53
 8008d98:	08008e4f 	.word	0x08008e4f
 8008d9c:	08008f53 	.word	0x08008f53
 8008da0:	08008f53 	.word	0x08008f53
 8008da4:	08008f53 	.word	0x08008f53
 8008da8:	08008e8f 	.word	0x08008e8f
 8008dac:	08008f53 	.word	0x08008f53
 8008db0:	08008f53 	.word	0x08008f53
 8008db4:	08008f53 	.word	0x08008f53
 8008db8:	08008ed1 	.word	0x08008ed1
 8008dbc:	08008f53 	.word	0x08008f53
 8008dc0:	08008f53 	.word	0x08008f53
 8008dc4:	08008f53 	.word	0x08008f53
 8008dc8:	08008f11 	.word	0x08008f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fab2 	bl	800933c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0208 	orr.w	r2, r2, #8
 8008de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0204 	bic.w	r2, r2, #4
 8008df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6999      	ldr	r1, [r3, #24]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	619a      	str	r2, [r3, #24]
      break;
 8008e0a:	e0a5      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fb2c 	bl	8009470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6999      	ldr	r1, [r3, #24]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	619a      	str	r2, [r3, #24]
      break;
 8008e4c:	e084      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fb9f 	bl	8009598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0208 	orr.w	r2, r2, #8
 8008e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0204 	bic.w	r2, r2, #4
 8008e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69d9      	ldr	r1, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	61da      	str	r2, [r3, #28]
      break;
 8008e8c:	e064      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fc11 	bl	80096bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69da      	ldr	r2, [r3, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69d9      	ldr	r1, [r3, #28]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	021a      	lsls	r2, r3, #8
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	61da      	str	r2, [r3, #28]
      break;
 8008ece:	e043      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fc84 	bl	80097e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0208 	orr.w	r2, r2, #8
 8008eea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0204 	bic.w	r2, r2, #4
 8008efa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f0e:	e023      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fcce 	bl	80098b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	021a      	lsls	r2, r3, #8
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f50:	e002      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
      break;
 8008f56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop

08008f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIM_ConfigClockSource+0x1c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e0f6      	b.n	8009176 <HAL_TIM_ConfigClockSource+0x20a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008fa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a6f      	ldr	r2, [pc, #444]	@ (8009180 <HAL_TIM_ConfigClockSource+0x214>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 80c1 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8008fc8:	4a6d      	ldr	r2, [pc, #436]	@ (8009180 <HAL_TIM_ConfigClockSource+0x214>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 80c6 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd0:	4a6c      	ldr	r2, [pc, #432]	@ (8009184 <HAL_TIM_ConfigClockSource+0x218>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 80b9 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8008fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8009184 <HAL_TIM_ConfigClockSource+0x218>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 80be 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe0:	4a69      	ldr	r2, [pc, #420]	@ (8009188 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f000 80b1 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8008fe8:	4a67      	ldr	r2, [pc, #412]	@ (8009188 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f200 80b6 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff0:	4a66      	ldr	r2, [pc, #408]	@ (800918c <HAL_TIM_ConfigClockSource+0x220>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 80a9 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8008ff8:	4a64      	ldr	r2, [pc, #400]	@ (800918c <HAL_TIM_ConfigClockSource+0x220>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f200 80ae 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009000:	4a63      	ldr	r2, [pc, #396]	@ (8009190 <HAL_TIM_ConfigClockSource+0x224>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f000 80a1 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009008:	4a61      	ldr	r2, [pc, #388]	@ (8009190 <HAL_TIM_ConfigClockSource+0x224>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f200 80a6 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009010:	4a60      	ldr	r2, [pc, #384]	@ (8009194 <HAL_TIM_ConfigClockSource+0x228>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f000 8099 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009018:	4a5e      	ldr	r2, [pc, #376]	@ (8009194 <HAL_TIM_ConfigClockSource+0x228>)
 800901a:	4293      	cmp	r3, r2
 800901c:	f200 809e 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009020:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009024:	f000 8091 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800902c:	f200 8096 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009034:	f000 8089 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800903c:	f200 808e 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009044:	d03e      	beq.n	80090c4 <HAL_TIM_ConfigClockSource+0x158>
 8009046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904a:	f200 8087 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009052:	f000 8086 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1f6>
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d87f      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 800905c:	2b70      	cmp	r3, #112	@ 0x70
 800905e:	d01a      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x12a>
 8009060:	2b70      	cmp	r3, #112	@ 0x70
 8009062:	d87b      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009064:	2b60      	cmp	r3, #96	@ 0x60
 8009066:	d050      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x19e>
 8009068:	2b60      	cmp	r3, #96	@ 0x60
 800906a:	d877      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 800906c:	2b50      	cmp	r3, #80	@ 0x50
 800906e:	d03c      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x17e>
 8009070:	2b50      	cmp	r3, #80	@ 0x50
 8009072:	d873      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009074:	2b40      	cmp	r3, #64	@ 0x40
 8009076:	d058      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d86f      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 800907c:	2b30      	cmp	r3, #48	@ 0x30
 800907e:	d064      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d86b      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d060      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d867      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d05c      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009090:	2b10      	cmp	r3, #16
 8009092:	d05a      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1de>
 8009094:	e062      	b.n	800915c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	f000 fe19 	bl	8009cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	609a      	str	r2, [r3, #8]
      break;
 80090c2:	e04f      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090d4:	f000 fe02 	bl	8009cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090e6:	609a      	str	r2, [r3, #8]
      break;
 80090e8:	e03c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fcbe 	bl	8009a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2150      	movs	r1, #80	@ 0x50
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fdcd 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 8009108:	e02c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009116:	461a      	mov	r2, r3
 8009118:	f000 fd1a 	bl	8009b50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2160      	movs	r1, #96	@ 0x60
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fdbd 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 8009128:	e01c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009136:	461a      	mov	r2, r3
 8009138:	f000 fc9e 	bl	8009a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2140      	movs	r1, #64	@ 0x40
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fdad 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 8009148:	e00c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	4610      	mov	r0, r2
 8009156:	f000 fda4 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 800915a:	e003      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
      break;
 8009160:	e000      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	00100070 	.word	0x00100070
 8009184:	00100060 	.word	0x00100060
 8009188:	00100050 	.word	0x00100050
 800918c:	00100040 	.word	0x00100040
 8009190:	00100030 	.word	0x00100030
 8009194:	00100020 	.word	0x00100020

08009198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a4c      	ldr	r2, [pc, #304]	@ (8009318 <TIM_Base_SetConfig+0x144>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d017      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f2:	d013      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a49      	ldr	r2, [pc, #292]	@ (800931c <TIM_Base_SetConfig+0x148>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00f      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a48      	ldr	r2, [pc, #288]	@ (8009320 <TIM_Base_SetConfig+0x14c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00b      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a47      	ldr	r2, [pc, #284]	@ (8009324 <TIM_Base_SetConfig+0x150>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d007      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a46      	ldr	r2, [pc, #280]	@ (8009328 <TIM_Base_SetConfig+0x154>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_Base_SetConfig+0x48>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a45      	ldr	r2, [pc, #276]	@ (800932c <TIM_Base_SetConfig+0x158>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d108      	bne.n	800922e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a39      	ldr	r2, [pc, #228]	@ (8009318 <TIM_Base_SetConfig+0x144>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d023      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923c:	d01f      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a36      	ldr	r2, [pc, #216]	@ (800931c <TIM_Base_SetConfig+0x148>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d01b      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a35      	ldr	r2, [pc, #212]	@ (8009320 <TIM_Base_SetConfig+0x14c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d017      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a34      	ldr	r2, [pc, #208]	@ (8009324 <TIM_Base_SetConfig+0x150>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a33      	ldr	r2, [pc, #204]	@ (8009328 <TIM_Base_SetConfig+0x154>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00f      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a33      	ldr	r2, [pc, #204]	@ (8009330 <TIM_Base_SetConfig+0x15c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00b      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a32      	ldr	r2, [pc, #200]	@ (8009334 <TIM_Base_SetConfig+0x160>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a31      	ldr	r2, [pc, #196]	@ (8009338 <TIM_Base_SetConfig+0x164>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_Base_SetConfig+0xaa>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a2c      	ldr	r2, [pc, #176]	@ (800932c <TIM_Base_SetConfig+0x158>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d108      	bne.n	8009290 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a18      	ldr	r2, [pc, #96]	@ (8009318 <TIM_Base_SetConfig+0x144>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <TIM_Base_SetConfig+0x110>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a1a      	ldr	r2, [pc, #104]	@ (8009328 <TIM_Base_SetConfig+0x154>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00f      	beq.n	80092e4 <TIM_Base_SetConfig+0x110>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009330 <TIM_Base_SetConfig+0x15c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_Base_SetConfig+0x110>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a19      	ldr	r2, [pc, #100]	@ (8009334 <TIM_Base_SetConfig+0x160>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_Base_SetConfig+0x110>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a18      	ldr	r2, [pc, #96]	@ (8009338 <TIM_Base_SetConfig+0x164>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_Base_SetConfig+0x110>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a13      	ldr	r2, [pc, #76]	@ (800932c <TIM_Base_SetConfig+0x158>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d103      	bne.n	80092ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d105      	bne.n	800930a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f023 0201 	bic.w	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	611a      	str	r2, [r3, #16]
  }
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40013400 	.word	0x40013400
 800932c:	40015000 	.word	0x40015000
 8009330:	40014000 	.word	0x40014000
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800

0800933c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	f023 0201 	bic.w	r2, r3, #1
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800936a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0303 	bic.w	r3, r3, #3
 8009376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 0302 	bic.w	r3, r3, #2
 8009388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a30      	ldr	r2, [pc, #192]	@ (8009458 <TIM_OC1_SetConfig+0x11c>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d013      	beq.n	80093c4 <TIM_OC1_SetConfig+0x88>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a2f      	ldr	r2, [pc, #188]	@ (800945c <TIM_OC1_SetConfig+0x120>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00f      	beq.n	80093c4 <TIM_OC1_SetConfig+0x88>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a2e      	ldr	r2, [pc, #184]	@ (8009460 <TIM_OC1_SetConfig+0x124>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d00b      	beq.n	80093c4 <TIM_OC1_SetConfig+0x88>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a2d      	ldr	r2, [pc, #180]	@ (8009464 <TIM_OC1_SetConfig+0x128>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d007      	beq.n	80093c4 <TIM_OC1_SetConfig+0x88>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009468 <TIM_OC1_SetConfig+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d003      	beq.n	80093c4 <TIM_OC1_SetConfig+0x88>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2b      	ldr	r2, [pc, #172]	@ (800946c <TIM_OC1_SetConfig+0x130>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d10c      	bne.n	80093de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f023 0308 	bic.w	r3, r3, #8
 80093ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f023 0304 	bic.w	r3, r3, #4
 80093dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009458 <TIM_OC1_SetConfig+0x11c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <TIM_OC1_SetConfig+0xd2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a1c      	ldr	r2, [pc, #112]	@ (800945c <TIM_OC1_SetConfig+0x120>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00f      	beq.n	800940e <TIM_OC1_SetConfig+0xd2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009460 <TIM_OC1_SetConfig+0x124>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00b      	beq.n	800940e <TIM_OC1_SetConfig+0xd2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009464 <TIM_OC1_SetConfig+0x128>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_OC1_SetConfig+0xd2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a19      	ldr	r2, [pc, #100]	@ (8009468 <TIM_OC1_SetConfig+0x12c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_OC1_SetConfig+0xd2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a18      	ldr	r2, [pc, #96]	@ (800946c <TIM_OC1_SetConfig+0x130>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d111      	bne.n	8009432 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800941c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4313      	orrs	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	621a      	str	r2, [r3, #32]
}
 800944c:	bf00      	nop
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	40012c00 	.word	0x40012c00
 800945c:	40013400 	.word	0x40013400
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800
 800946c:	40015000 	.word	0x40015000

08009470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	f023 0210 	bic.w	r2, r3, #16
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800949e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f023 0320 	bic.w	r3, r3, #32
 80094be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009580 <TIM_OC2_SetConfig+0x110>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <TIM_OC2_SetConfig+0x74>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009584 <TIM_OC2_SetConfig+0x114>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC2_SetConfig+0x74>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a2a      	ldr	r2, [pc, #168]	@ (8009588 <TIM_OC2_SetConfig+0x118>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d10d      	bne.n	8009500 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	011b      	lsls	r3, r3, #4
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a1f      	ldr	r2, [pc, #124]	@ (8009580 <TIM_OC2_SetConfig+0x110>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d013      	beq.n	8009530 <TIM_OC2_SetConfig+0xc0>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a1e      	ldr	r2, [pc, #120]	@ (8009584 <TIM_OC2_SetConfig+0x114>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00f      	beq.n	8009530 <TIM_OC2_SetConfig+0xc0>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1e      	ldr	r2, [pc, #120]	@ (800958c <TIM_OC2_SetConfig+0x11c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00b      	beq.n	8009530 <TIM_OC2_SetConfig+0xc0>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <TIM_OC2_SetConfig+0x120>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d007      	beq.n	8009530 <TIM_OC2_SetConfig+0xc0>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1c      	ldr	r2, [pc, #112]	@ (8009594 <TIM_OC2_SetConfig+0x124>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_OC2_SetConfig+0xc0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a17      	ldr	r2, [pc, #92]	@ (8009588 <TIM_OC2_SetConfig+0x118>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d113      	bne.n	8009558 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800953e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4313      	orrs	r3, r2
 800954a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	621a      	str	r2, [r3, #32]
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40015000 	.word	0x40015000
 800958c:	40014000 	.word	0x40014000
 8009590:	40014400 	.word	0x40014400
 8009594:	40014800 	.word	0x40014800

08009598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2b      	ldr	r2, [pc, #172]	@ (80096a4 <TIM_OC3_SetConfig+0x10c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d007      	beq.n	800960a <TIM_OC3_SetConfig+0x72>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2a      	ldr	r2, [pc, #168]	@ (80096a8 <TIM_OC3_SetConfig+0x110>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <TIM_OC3_SetConfig+0x72>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a29      	ldr	r2, [pc, #164]	@ (80096ac <TIM_OC3_SetConfig+0x114>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d10d      	bne.n	8009626 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a1e      	ldr	r2, [pc, #120]	@ (80096a4 <TIM_OC3_SetConfig+0x10c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d013      	beq.n	8009656 <TIM_OC3_SetConfig+0xbe>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a1d      	ldr	r2, [pc, #116]	@ (80096a8 <TIM_OC3_SetConfig+0x110>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d00f      	beq.n	8009656 <TIM_OC3_SetConfig+0xbe>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a1d      	ldr	r2, [pc, #116]	@ (80096b0 <TIM_OC3_SetConfig+0x118>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00b      	beq.n	8009656 <TIM_OC3_SetConfig+0xbe>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a1c      	ldr	r2, [pc, #112]	@ (80096b4 <TIM_OC3_SetConfig+0x11c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d007      	beq.n	8009656 <TIM_OC3_SetConfig+0xbe>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a1b      	ldr	r2, [pc, #108]	@ (80096b8 <TIM_OC3_SetConfig+0x120>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d003      	beq.n	8009656 <TIM_OC3_SetConfig+0xbe>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a16      	ldr	r2, [pc, #88]	@ (80096ac <TIM_OC3_SetConfig+0x114>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d113      	bne.n	800967e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800965c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	011b      	lsls	r3, r3, #4
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	621a      	str	r2, [r3, #32]
}
 8009698:	bf00      	nop
 800969a:	371c      	adds	r7, #28
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40012c00 	.word	0x40012c00
 80096a8:	40013400 	.word	0x40013400
 80096ac:	40015000 	.word	0x40015000
 80096b0:	40014000 	.word	0x40014000
 80096b4:	40014400 	.word	0x40014400
 80096b8:	40014800 	.word	0x40014800

080096bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800970a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	031b      	lsls	r3, r3, #12
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a2c      	ldr	r2, [pc, #176]	@ (80097cc <TIM_OC4_SetConfig+0x110>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d007      	beq.n	8009730 <TIM_OC4_SetConfig+0x74>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a2b      	ldr	r2, [pc, #172]	@ (80097d0 <TIM_OC4_SetConfig+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_OC4_SetConfig+0x74>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a2a      	ldr	r2, [pc, #168]	@ (80097d4 <TIM_OC4_SetConfig+0x118>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10d      	bne.n	800974c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	031b      	lsls	r3, r3, #12
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800974a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a1f      	ldr	r2, [pc, #124]	@ (80097cc <TIM_OC4_SetConfig+0x110>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d013      	beq.n	800977c <TIM_OC4_SetConfig+0xc0>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a1e      	ldr	r2, [pc, #120]	@ (80097d0 <TIM_OC4_SetConfig+0x114>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d00f      	beq.n	800977c <TIM_OC4_SetConfig+0xc0>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a1e      	ldr	r2, [pc, #120]	@ (80097d8 <TIM_OC4_SetConfig+0x11c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00b      	beq.n	800977c <TIM_OC4_SetConfig+0xc0>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1d      	ldr	r2, [pc, #116]	@ (80097dc <TIM_OC4_SetConfig+0x120>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d007      	beq.n	800977c <TIM_OC4_SetConfig+0xc0>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1c      	ldr	r2, [pc, #112]	@ (80097e0 <TIM_OC4_SetConfig+0x124>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_OC4_SetConfig+0xc0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a17      	ldr	r2, [pc, #92]	@ (80097d4 <TIM_OC4_SetConfig+0x118>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d113      	bne.n	80097a4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009782:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800978a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	019b      	lsls	r3, r3, #6
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	019b      	lsls	r3, r3, #6
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40012c00 	.word	0x40012c00
 80097d0:	40013400 	.word	0x40013400
 80097d4:	40015000 	.word	0x40015000
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40014400 	.word	0x40014400
 80097e0:	40014800 	.word	0x40014800

080097e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	041b      	lsls	r3, r3, #16
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <TIM_OC5_SetConfig+0xbc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d013      	beq.n	8009866 <TIM_OC5_SetConfig+0x82>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a18      	ldr	r2, [pc, #96]	@ (80098a4 <TIM_OC5_SetConfig+0xc0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00f      	beq.n	8009866 <TIM_OC5_SetConfig+0x82>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a17      	ldr	r2, [pc, #92]	@ (80098a8 <TIM_OC5_SetConfig+0xc4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00b      	beq.n	8009866 <TIM_OC5_SetConfig+0x82>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a16      	ldr	r2, [pc, #88]	@ (80098ac <TIM_OC5_SetConfig+0xc8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d007      	beq.n	8009866 <TIM_OC5_SetConfig+0x82>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a15      	ldr	r2, [pc, #84]	@ (80098b0 <TIM_OC5_SetConfig+0xcc>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d003      	beq.n	8009866 <TIM_OC5_SetConfig+0x82>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a14      	ldr	r2, [pc, #80]	@ (80098b4 <TIM_OC5_SetConfig+0xd0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d109      	bne.n	800987a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800986c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	621a      	str	r2, [r3, #32]
}
 8009894:	bf00      	nop
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	40012c00 	.word	0x40012c00
 80098a4:	40013400 	.word	0x40013400
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800
 80098b4:	40015000 	.word	0x40015000

080098b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	051b      	lsls	r3, r3, #20
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a1a      	ldr	r2, [pc, #104]	@ (8009978 <TIM_OC6_SetConfig+0xc0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d013      	beq.n	800993c <TIM_OC6_SetConfig+0x84>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a19      	ldr	r2, [pc, #100]	@ (800997c <TIM_OC6_SetConfig+0xc4>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00f      	beq.n	800993c <TIM_OC6_SetConfig+0x84>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a18      	ldr	r2, [pc, #96]	@ (8009980 <TIM_OC6_SetConfig+0xc8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00b      	beq.n	800993c <TIM_OC6_SetConfig+0x84>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a17      	ldr	r2, [pc, #92]	@ (8009984 <TIM_OC6_SetConfig+0xcc>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d007      	beq.n	800993c <TIM_OC6_SetConfig+0x84>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a16      	ldr	r2, [pc, #88]	@ (8009988 <TIM_OC6_SetConfig+0xd0>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC6_SetConfig+0x84>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a15      	ldr	r2, [pc, #84]	@ (800998c <TIM_OC6_SetConfig+0xd4>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d109      	bne.n	8009950 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40012c00 	.word	0x40012c00
 800997c:	40013400 	.word	0x40013400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800
 800998c:	40015000 	.word	0x40015000

08009990 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	f023 0201 	bic.w	r2, r3, #1
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4a28      	ldr	r2, [pc, #160]	@ (8009a5c <TIM_TI1_SetConfig+0xcc>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d01b      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c4:	d017      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a25      	ldr	r2, [pc, #148]	@ (8009a60 <TIM_TI1_SetConfig+0xd0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d013      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a24      	ldr	r2, [pc, #144]	@ (8009a64 <TIM_TI1_SetConfig+0xd4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00f      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4a23      	ldr	r2, [pc, #140]	@ (8009a68 <TIM_TI1_SetConfig+0xd8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4a22      	ldr	r2, [pc, #136]	@ (8009a6c <TIM_TI1_SetConfig+0xdc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d007      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4a21      	ldr	r2, [pc, #132]	@ (8009a70 <TIM_TI1_SetConfig+0xe0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d003      	beq.n	80099f6 <TIM_TI1_SetConfig+0x66>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a20      	ldr	r2, [pc, #128]	@ (8009a74 <TIM_TI1_SetConfig+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d101      	bne.n	80099fa <TIM_TI1_SetConfig+0x6a>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <TIM_TI1_SetConfig+0x6c>
 80099fa:	2300      	movs	r3, #0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e003      	b.n	8009a1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f043 0301 	orr.w	r3, r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f023 030a 	bic.w	r3, r3, #10
 8009a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f003 030a 	and.w	r3, r3, #10
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	621a      	str	r2, [r3, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40012c00 	.word	0x40012c00
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40000800 	.word	0x40000800
 8009a68:	40000c00 	.word	0x40000c00
 8009a6c:	40013400 	.word	0x40013400
 8009a70:	40014000 	.word	0x40014000
 8009a74:	40015000 	.word	0x40015000

08009a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f023 0201 	bic.w	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f023 030a 	bic.w	r3, r3, #10
 8009ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	621a      	str	r2, [r3, #32]
}
 8009aca:	bf00      	nop
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b087      	sub	sp, #28
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f023 0210 	bic.w	r2, r3, #16
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	031b      	lsls	r3, r3, #12
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	621a      	str	r2, [r3, #32]
}
 8009b44:	bf00      	nop
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f023 0210 	bic.w	r2, r3, #16
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	031b      	lsls	r3, r3, #12
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	621a      	str	r2, [r3, #32]
}
 8009ba4:	bf00      	nop
 8009ba6:	371c      	adds	r7, #28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009c00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	621a      	str	r2, [r3, #32]
}
 8009c1c:	bf00      	nop
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	031b      	lsls	r3, r3, #12
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	031b      	lsls	r3, r3, #12
 8009c80:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	621a      	str	r2, [r3, #32]
}
 8009c96:	bf00      	nop
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f043 0307 	orr.w	r3, r3, #7
 8009cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	609a      	str	r2, [r3, #8]
}
 8009cd0:	bf00      	nop
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	021a      	lsls	r2, r3, #8
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	609a      	str	r2, [r3, #8]
}
 8009d10:	bf00      	nop
 8009d12:	371c      	adds	r7, #28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f003 031f 	and.w	r3, r3, #31
 8009d2e:	2201      	movs	r2, #1
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6a1a      	ldr	r2, [r3, #32]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	401a      	ands	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a1a      	ldr	r2, [r3, #32]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f003 031f 	and.w	r3, r3, #31
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	fa01 f303 	lsl.w	r3, r1, r3
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	621a      	str	r2, [r3, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
	...

08009d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e074      	b.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a34      	ldr	r2, [pc, #208]	@ (8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d009      	beq.n	8009dbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a33      	ldr	r2, [pc, #204]	@ (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d004      	beq.n	8009dbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a31      	ldr	r2, [pc, #196]	@ (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d108      	bne.n	8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009dc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a21      	ldr	r2, [pc, #132]	@ (8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d022      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e00:	d01d      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a1f      	ldr	r2, [pc, #124]	@ (8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d018      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1d      	ldr	r2, [pc, #116]	@ (8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d013      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00e      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a15      	ldr	r2, [pc, #84]	@ (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d009      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d004      	beq.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a11      	ldr	r2, [pc, #68]	@ (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d10c      	bne.n	8009e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	40012c00 	.word	0x40012c00
 8009e7c:	40013400 	.word	0x40013400
 8009e80:	40015000 	.word	0x40015000
 8009e84:	40000400 	.word	0x40000400
 8009e88:	40000800 	.word	0x40000800
 8009e8c:	40000c00 	.word	0x40000c00
 8009e90:	40014000 	.word	0x40014000

08009e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e078      	b.n	8009fa2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f16:	4313      	orrs	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d009      	beq.n	8009f56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d004      	beq.n	8009f56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a19      	ldr	r2, [pc, #100]	@ (8009fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d11c      	bne.n	8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	40015000 	.word	0x40015000

08009fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e042      	b.n	800a0e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a060:	2b00      	cmp	r3, #0
 800a062:	d106      	bne.n	800a072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7f8 fe6f 	bl	8002d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	@ 0x24
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0201 	bic.w	r2, r2, #1
 800a088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fb24 	bl	800a6e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f825 	bl	800a0e8 <UART_SetConfig>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d101      	bne.n	800a0a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e01b      	b.n	800a0e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fba3 	bl	800a824 <UART_CheckIdleState>
 800a0de:	4603      	mov	r3, r0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0ec:	b08c      	sub	sp, #48	@ 0x30
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	431a      	orrs	r2, r3
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	431a      	orrs	r2, r3
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4baa      	ldr	r3, [pc, #680]	@ (800a3c0 <UART_SetConfig+0x2d8>)
 800a118:	4013      	ands	r3, r2
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	6812      	ldr	r2, [r2, #0]
 800a11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a120:	430b      	orrs	r3, r1
 800a122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a9f      	ldr	r2, [pc, #636]	@ (800a3c4 <UART_SetConfig+0x2dc>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d004      	beq.n	800a154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a150:	4313      	orrs	r3, r2
 800a152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a15e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a168:	430b      	orrs	r3, r1
 800a16a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a172:	f023 010f 	bic.w	r1, r3, #15
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a90      	ldr	r2, [pc, #576]	@ (800a3c8 <UART_SetConfig+0x2e0>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d125      	bne.n	800a1d8 <UART_SetConfig+0xf0>
 800a18c:	4b8f      	ldr	r3, [pc, #572]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a192:	f003 0303 	and.w	r3, r3, #3
 800a196:	2b03      	cmp	r3, #3
 800a198:	d81a      	bhi.n	800a1d0 <UART_SetConfig+0xe8>
 800a19a:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <UART_SetConfig+0xb8>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b1 	.word	0x0800a1b1
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1b9 	.word	0x0800a1b9
 800a1ac:	0800a1c9 	.word	0x0800a1c9
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b6:	e116      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1be:	e112      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	e10e      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	e10a      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d6:	e106      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a7c      	ldr	r2, [pc, #496]	@ (800a3d0 <UART_SetConfig+0x2e8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d138      	bne.n	800a254 <UART_SetConfig+0x16c>
 800a1e2:	4b7a      	ldr	r3, [pc, #488]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1e8:	f003 030c 	and.w	r3, r3, #12
 800a1ec:	2b0c      	cmp	r3, #12
 800a1ee:	d82d      	bhi.n	800a24c <UART_SetConfig+0x164>
 800a1f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <UART_SetConfig+0x110>)
 800a1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f6:	bf00      	nop
 800a1f8:	0800a22d 	.word	0x0800a22d
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	0800a24d 	.word	0x0800a24d
 800a204:	0800a24d 	.word	0x0800a24d
 800a208:	0800a23d 	.word	0x0800a23d
 800a20c:	0800a24d 	.word	0x0800a24d
 800a210:	0800a24d 	.word	0x0800a24d
 800a214:	0800a24d 	.word	0x0800a24d
 800a218:	0800a235 	.word	0x0800a235
 800a21c:	0800a24d 	.word	0x0800a24d
 800a220:	0800a24d 	.word	0x0800a24d
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a245 	.word	0x0800a245
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a232:	e0d8      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a234:	2302      	movs	r3, #2
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23a:	e0d4      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a23c:	2304      	movs	r3, #4
 800a23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a242:	e0d0      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a244:	2308      	movs	r3, #8
 800a246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24a:	e0cc      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a24c:	2310      	movs	r3, #16
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a252:	e0c8      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a5e      	ldr	r2, [pc, #376]	@ (800a3d4 <UART_SetConfig+0x2ec>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d125      	bne.n	800a2aa <UART_SetConfig+0x1c2>
 800a25e:	4b5b      	ldr	r3, [pc, #364]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a264:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a268:	2b30      	cmp	r3, #48	@ 0x30
 800a26a:	d016      	beq.n	800a29a <UART_SetConfig+0x1b2>
 800a26c:	2b30      	cmp	r3, #48	@ 0x30
 800a26e:	d818      	bhi.n	800a2a2 <UART_SetConfig+0x1ba>
 800a270:	2b20      	cmp	r3, #32
 800a272:	d00a      	beq.n	800a28a <UART_SetConfig+0x1a2>
 800a274:	2b20      	cmp	r3, #32
 800a276:	d814      	bhi.n	800a2a2 <UART_SetConfig+0x1ba>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <UART_SetConfig+0x19a>
 800a27c:	2b10      	cmp	r3, #16
 800a27e:	d008      	beq.n	800a292 <UART_SetConfig+0x1aa>
 800a280:	e00f      	b.n	800a2a2 <UART_SetConfig+0x1ba>
 800a282:	2300      	movs	r3, #0
 800a284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a288:	e0ad      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a28a:	2302      	movs	r3, #2
 800a28c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a290:	e0a9      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a292:	2304      	movs	r3, #4
 800a294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a298:	e0a5      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a29a:	2308      	movs	r3, #8
 800a29c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a0:	e0a1      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a8:	e09d      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a4a      	ldr	r2, [pc, #296]	@ (800a3d8 <UART_SetConfig+0x2f0>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d125      	bne.n	800a300 <UART_SetConfig+0x218>
 800a2b4:	4b45      	ldr	r3, [pc, #276]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2be:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2c0:	d016      	beq.n	800a2f0 <UART_SetConfig+0x208>
 800a2c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2c4:	d818      	bhi.n	800a2f8 <UART_SetConfig+0x210>
 800a2c6:	2b80      	cmp	r3, #128	@ 0x80
 800a2c8:	d00a      	beq.n	800a2e0 <UART_SetConfig+0x1f8>
 800a2ca:	2b80      	cmp	r3, #128	@ 0x80
 800a2cc:	d814      	bhi.n	800a2f8 <UART_SetConfig+0x210>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <UART_SetConfig+0x1f0>
 800a2d2:	2b40      	cmp	r3, #64	@ 0x40
 800a2d4:	d008      	beq.n	800a2e8 <UART_SetConfig+0x200>
 800a2d6:	e00f      	b.n	800a2f8 <UART_SetConfig+0x210>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2de:	e082      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e6:	e07e      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ee:	e07a      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f6:	e076      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fe:	e072      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a35      	ldr	r2, [pc, #212]	@ (800a3dc <UART_SetConfig+0x2f4>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d12a      	bne.n	800a360 <UART_SetConfig+0x278>
 800a30a:	4b30      	ldr	r3, [pc, #192]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a318:	d01a      	beq.n	800a350 <UART_SetConfig+0x268>
 800a31a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a31e:	d81b      	bhi.n	800a358 <UART_SetConfig+0x270>
 800a320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a324:	d00c      	beq.n	800a340 <UART_SetConfig+0x258>
 800a326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a32a:	d815      	bhi.n	800a358 <UART_SetConfig+0x270>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <UART_SetConfig+0x250>
 800a330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a334:	d008      	beq.n	800a348 <UART_SetConfig+0x260>
 800a336:	e00f      	b.n	800a358 <UART_SetConfig+0x270>
 800a338:	2300      	movs	r3, #0
 800a33a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a33e:	e052      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a340:	2302      	movs	r3, #2
 800a342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a346:	e04e      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a348:	2304      	movs	r3, #4
 800a34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34e:	e04a      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a350:	2308      	movs	r3, #8
 800a352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a356:	e046      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a358:	2310      	movs	r3, #16
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35e:	e042      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a17      	ldr	r2, [pc, #92]	@ (800a3c4 <UART_SetConfig+0x2dc>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d13a      	bne.n	800a3e0 <UART_SetConfig+0x2f8>
 800a36a:	4b18      	ldr	r3, [pc, #96]	@ (800a3cc <UART_SetConfig+0x2e4>)
 800a36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a370:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a374:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a378:	d01a      	beq.n	800a3b0 <UART_SetConfig+0x2c8>
 800a37a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a37e:	d81b      	bhi.n	800a3b8 <UART_SetConfig+0x2d0>
 800a380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a384:	d00c      	beq.n	800a3a0 <UART_SetConfig+0x2b8>
 800a386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a38a:	d815      	bhi.n	800a3b8 <UART_SetConfig+0x2d0>
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <UART_SetConfig+0x2b0>
 800a390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a394:	d008      	beq.n	800a3a8 <UART_SetConfig+0x2c0>
 800a396:	e00f      	b.n	800a3b8 <UART_SetConfig+0x2d0>
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a39e:	e022      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a6:	e01e      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a3a8:	2304      	movs	r3, #4
 800a3aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ae:	e01a      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b6:	e016      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3be:	e012      	b.n	800a3e6 <UART_SetConfig+0x2fe>
 800a3c0:	cfff69f3 	.word	0xcfff69f3
 800a3c4:	40008000 	.word	0x40008000
 800a3c8:	40013800 	.word	0x40013800
 800a3cc:	40021000 	.word	0x40021000
 800a3d0:	40004400 	.word	0x40004400
 800a3d4:	40004800 	.word	0x40004800
 800a3d8:	40004c00 	.word	0x40004c00
 800a3dc:	40005000 	.word	0x40005000
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4aae      	ldr	r2, [pc, #696]	@ (800a6a4 <UART_SetConfig+0x5bc>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	f040 8097 	bne.w	800a520 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d823      	bhi.n	800a442 <UART_SetConfig+0x35a>
 800a3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a400 <UART_SetConfig+0x318>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a443 	.word	0x0800a443
 800a408:	0800a42d 	.word	0x0800a42d
 800a40c:	0800a443 	.word	0x0800a443
 800a410:	0800a433 	.word	0x0800a433
 800a414:	0800a443 	.word	0x0800a443
 800a418:	0800a443 	.word	0x0800a443
 800a41c:	0800a443 	.word	0x0800a443
 800a420:	0800a43b 	.word	0x0800a43b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a424:	f7fd fbec 	bl	8007c00 <HAL_RCC_GetPCLK1Freq>
 800a428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a42a:	e010      	b.n	800a44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a42c:	4b9e      	ldr	r3, [pc, #632]	@ (800a6a8 <UART_SetConfig+0x5c0>)
 800a42e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a430:	e00d      	b.n	800a44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a432:	f7fd fb77 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 800a436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a438:	e009      	b.n	800a44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a43a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a43e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a440:	e005      	b.n	800a44e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a44c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8130 	beq.w	800a6b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	4a94      	ldr	r2, [pc, #592]	@ (800a6ac <UART_SetConfig+0x5c4>)
 800a45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a460:	461a      	mov	r2, r3
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	fbb3 f3f2 	udiv	r3, r3, r2
 800a468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	4413      	add	r3, r2
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	429a      	cmp	r2, r3
 800a478:	d305      	bcc.n	800a486 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a480:	69ba      	ldr	r2, [r7, #24]
 800a482:	429a      	cmp	r2, r3
 800a484:	d903      	bls.n	800a48e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a48c:	e113      	b.n	800a6b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	2200      	movs	r2, #0
 800a492:	60bb      	str	r3, [r7, #8]
 800a494:	60fa      	str	r2, [r7, #12]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	4a84      	ldr	r2, [pc, #528]	@ (800a6ac <UART_SetConfig+0x5c4>)
 800a49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4b0:	f7f5 ff0e 	bl	80002d0 <__aeabi_uldivmod>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	f04f 0300 	mov.w	r3, #0
 800a4c4:	020b      	lsls	r3, r1, #8
 800a4c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4ca:	0202      	lsls	r2, r0, #8
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	6849      	ldr	r1, [r1, #4]
 800a4d0:	0849      	lsrs	r1, r1, #1
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	eb12 0804 	adds.w	r8, r2, r4
 800a4dc:	eb43 0905 	adc.w	r9, r3, r5
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	469a      	mov	sl, r3
 800a4e8:	4693      	mov	fp, r2
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	465b      	mov	r3, fp
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	f7f5 feed 	bl	80002d0 <__aeabi_uldivmod>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a504:	d308      	bcc.n	800a518 <UART_SetConfig+0x430>
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a50c:	d204      	bcs.n	800a518 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a3a      	ldr	r2, [r7, #32]
 800a514:	60da      	str	r2, [r3, #12]
 800a516:	e0ce      	b.n	800a6b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a51e:	e0ca      	b.n	800a6b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a528:	d166      	bne.n	800a5f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a52a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d827      	bhi.n	800a582 <UART_SetConfig+0x49a>
 800a532:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <UART_SetConfig+0x450>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a565 	.word	0x0800a565
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	0800a583 	.word	0x0800a583
 800a548:	0800a573 	.word	0x0800a573
 800a54c:	0800a583 	.word	0x0800a583
 800a550:	0800a583 	.word	0x0800a583
 800a554:	0800a583 	.word	0x0800a583
 800a558:	0800a57b 	.word	0x0800a57b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a55c:	f7fd fb50 	bl	8007c00 <HAL_RCC_GetPCLK1Freq>
 800a560:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a562:	e014      	b.n	800a58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a564:	f7fd fb62 	bl	8007c2c <HAL_RCC_GetPCLK2Freq>
 800a568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a56a:	e010      	b.n	800a58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a56c:	4b4e      	ldr	r3, [pc, #312]	@ (800a6a8 <UART_SetConfig+0x5c0>)
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a570:	e00d      	b.n	800a58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a572:	f7fd fad7 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 800a576:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a578:	e009      	b.n	800a58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a57a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a57e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a580:	e005      	b.n	800a58e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a58c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8090 	beq.w	800a6b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59a:	4a44      	ldr	r2, [pc, #272]	@ (800a6ac <UART_SetConfig+0x5c4>)
 800a59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5a8:	005a      	lsls	r2, r3, #1
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	441a      	add	r2, r3
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	2b0f      	cmp	r3, #15
 800a5c0:	d916      	bls.n	800a5f0 <UART_SetConfig+0x508>
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5c8:	d212      	bcs.n	800a5f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f023 030f 	bic.w	r3, r3, #15
 800a5d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	085b      	lsrs	r3, r3, #1
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	8bfb      	ldrh	r3, [r7, #30]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	8bfa      	ldrh	r2, [r7, #30]
 800a5ec:	60da      	str	r2, [r3, #12]
 800a5ee:	e062      	b.n	800a6b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5f6:	e05e      	b.n	800a6b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d828      	bhi.n	800a652 <UART_SetConfig+0x56a>
 800a600:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x520>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a62d 	.word	0x0800a62d
 800a60c:	0800a635 	.word	0x0800a635
 800a610:	0800a63d 	.word	0x0800a63d
 800a614:	0800a653 	.word	0x0800a653
 800a618:	0800a643 	.word	0x0800a643
 800a61c:	0800a653 	.word	0x0800a653
 800a620:	0800a653 	.word	0x0800a653
 800a624:	0800a653 	.word	0x0800a653
 800a628:	0800a64b 	.word	0x0800a64b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a62c:	f7fd fae8 	bl	8007c00 <HAL_RCC_GetPCLK1Freq>
 800a630:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a632:	e014      	b.n	800a65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a634:	f7fd fafa 	bl	8007c2c <HAL_RCC_GetPCLK2Freq>
 800a638:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a63a:	e010      	b.n	800a65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a63c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <UART_SetConfig+0x5c0>)
 800a63e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a640:	e00d      	b.n	800a65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a642:	f7fd fa6f 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 800a646:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a648:	e009      	b.n	800a65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a64e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a650:	e005      	b.n	800a65e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a65c:	bf00      	nop
    }

    if (pclk != 0U)
 800a65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d028      	beq.n	800a6b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a668:	4a10      	ldr	r2, [pc, #64]	@ (800a6ac <UART_SetConfig+0x5c4>)
 800a66a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a66e:	461a      	mov	r2, r3
 800a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a672:	fbb3 f2f2 	udiv	r2, r3, r2
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	441a      	add	r2, r3
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	d910      	bls.n	800a6b0 <UART_SetConfig+0x5c8>
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a694:	d20c      	bcs.n	800a6b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	b29a      	uxth	r2, r3
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60da      	str	r2, [r3, #12]
 800a6a0:	e009      	b.n	800a6b6 <UART_SetConfig+0x5ce>
 800a6a2:	bf00      	nop
 800a6a4:	40008000 	.word	0x40008000
 800a6a8:	00f42400 	.word	0x00f42400
 800a6ac:	0800b6d4 	.word	0x0800b6d4
      }
      else
      {
        ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3730      	adds	r7, #48	@ 0x30
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a6e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	f003 0308 	and.w	r3, r3, #8
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00a      	beq.n	800a70a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01a      	beq.n	800a7f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7de:	d10a      	bne.n	800a7f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	605a      	str	r2, [r3, #4]
  }
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b098      	sub	sp, #96	@ 0x60
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a834:	f7f8 fb72 	bl	8002f1c <HAL_GetTick>
 800a838:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0308 	and.w	r3, r3, #8
 800a844:	2b08      	cmp	r3, #8
 800a846:	d12f      	bne.n	800a8a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a848:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a850:	2200      	movs	r2, #0
 800a852:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f88e 	bl	800a978 <UART_WaitOnFlagUntilTimeout>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d022      	beq.n	800a8a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a876:	653b      	str	r3, [r7, #80]	@ 0x50
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a880:	647b      	str	r3, [r7, #68]	@ 0x44
 800a882:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a884:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a888:	e841 2300 	strex	r3, r2, [r1]
 800a88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e6      	bne.n	800a862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e063      	b.n	800a970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0304 	and.w	r3, r3, #4
 800a8b2:	2b04      	cmp	r3, #4
 800a8b4:	d149      	bne.n	800a94a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f857 	bl	800a978 <UART_WaitOnFlagUntilTimeout>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d03c      	beq.n	800a94a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e6      	bne.n	800a8d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3308      	adds	r3, #8
 800a908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	60fb      	str	r3, [r7, #12]
   return(result);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f023 0301 	bic.w	r3, r3, #1
 800a918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a922:	61fa      	str	r2, [r7, #28]
 800a924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	69b9      	ldr	r1, [r7, #24]
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	617b      	str	r3, [r7, #20]
   return(result);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e5      	bne.n	800a902 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e012      	b.n	800a970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3758      	adds	r7, #88	@ 0x58
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a988:	e04f      	b.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d04b      	beq.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a992:	f7f8 fac3 	bl	8002f1c <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e04e      	b.n	800aa4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d037      	beq.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b80      	cmp	r3, #128	@ 0x80
 800a9be:	d034      	beq.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b40      	cmp	r3, #64	@ 0x40
 800a9c4:	d031      	beq.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d110      	bne.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2208      	movs	r2, #8
 800a9da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f838 	bl	800aa52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2208      	movs	r2, #8
 800a9e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e029      	b.n	800aa4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa04:	d111      	bne.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f81e 	bl	800aa52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e00f      	b.n	800aa4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	69da      	ldr	r2, [r3, #28]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	4013      	ands	r3, r2
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	bf0c      	ite	eq
 800aa3a:	2301      	moveq	r3, #1
 800aa3c:	2300      	movne	r3, #0
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	79fb      	ldrb	r3, [r7, #7]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d0a0      	beq.n	800a98a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b095      	sub	sp, #84	@ 0x54
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa78:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaa2:	f023 0301 	bic.w	r3, r3, #1
 800aaa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3308      	adds	r3, #8
 800aaae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e3      	bne.n	800aa8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d118      	bne.n	800aafe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f023 0310 	bic.w	r3, r3, #16
 800aae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6979      	ldr	r1, [r7, #20]
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e6      	bne.n	800aacc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab12:	bf00      	nop
 800ab14:	3754      	adds	r7, #84	@ 0x54
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b085      	sub	sp, #20
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e027      	b.n	800ab84 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2224      	movs	r2, #36	@ 0x24
 800ab40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e02d      	b.n	800ac04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2224      	movs	r2, #36	@ 0x24
 800abb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0201 	bic.w	r2, r2, #1
 800abce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f84f 	bl	800ac88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d101      	bne.n	800ac24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac20:	2302      	movs	r3, #2
 800ac22:	e02d      	b.n	800ac80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2224      	movs	r2, #36	@ 0x24
 800ac30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0201 	bic.w	r2, r2, #1
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f811 	bl	800ac88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d108      	bne.n	800acaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aca8:	e031      	b.n	800ad0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acaa:	2308      	movs	r3, #8
 800acac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acae:	2308      	movs	r3, #8
 800acb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	0e5b      	lsrs	r3, r3, #25
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f003 0307 	and.w	r3, r3, #7
 800acc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	0f5b      	lsrs	r3, r3, #29
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	7b3a      	ldrb	r2, [r7, #12]
 800acd6:	4911      	ldr	r1, [pc, #68]	@ (800ad1c <UARTEx_SetNbDataToProcess+0x94>)
 800acd8:	5c8a      	ldrb	r2, [r1, r2]
 800acda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800acde:	7b3a      	ldrb	r2, [r7, #12]
 800ace0:	490f      	ldr	r1, [pc, #60]	@ (800ad20 <UARTEx_SetNbDataToProcess+0x98>)
 800ace2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ace4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ace8:	b29a      	uxth	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	7b7a      	ldrb	r2, [r7, #13]
 800acf4:	4909      	ldr	r1, [pc, #36]	@ (800ad1c <UARTEx_SetNbDataToProcess+0x94>)
 800acf6:	5c8a      	ldrb	r2, [r1, r2]
 800acf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acfc:	7b7a      	ldrb	r2, [r7, #13]
 800acfe:	4908      	ldr	r1, [pc, #32]	@ (800ad20 <UARTEx_SetNbDataToProcess+0x98>)
 800ad00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad0e:	bf00      	nop
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	0800b6ec 	.word	0x0800b6ec
 800ad20:	0800b6f4 	.word	0x0800b6f4

0800ad24 <siprintf>:
 800ad24:	b40e      	push	{r1, r2, r3}
 800ad26:	b500      	push	{lr}
 800ad28:	b09c      	sub	sp, #112	@ 0x70
 800ad2a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad2c:	9002      	str	r0, [sp, #8]
 800ad2e:	9006      	str	r0, [sp, #24]
 800ad30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad34:	4809      	ldr	r0, [pc, #36]	@ (800ad5c <siprintf+0x38>)
 800ad36:	9107      	str	r1, [sp, #28]
 800ad38:	9104      	str	r1, [sp, #16]
 800ad3a:	4909      	ldr	r1, [pc, #36]	@ (800ad60 <siprintf+0x3c>)
 800ad3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad40:	9105      	str	r1, [sp, #20]
 800ad42:	6800      	ldr	r0, [r0, #0]
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	a902      	add	r1, sp, #8
 800ad48:	f000 f994 	bl	800b074 <_svfiprintf_r>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]
 800ad52:	b01c      	add	sp, #112	@ 0x70
 800ad54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad58:	b003      	add	sp, #12
 800ad5a:	4770      	bx	lr
 800ad5c:	20000048 	.word	0x20000048
 800ad60:	ffff0208 	.word	0xffff0208

0800ad64 <memset>:
 800ad64:	4402      	add	r2, r0
 800ad66:	4603      	mov	r3, r0
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d100      	bne.n	800ad6e <memset+0xa>
 800ad6c:	4770      	bx	lr
 800ad6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad72:	e7f9      	b.n	800ad68 <memset+0x4>

0800ad74 <__errno>:
 800ad74:	4b01      	ldr	r3, [pc, #4]	@ (800ad7c <__errno+0x8>)
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	20000048 	.word	0x20000048

0800ad80 <__libc_init_array>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4d0d      	ldr	r5, [pc, #52]	@ (800adb8 <__libc_init_array+0x38>)
 800ad84:	4c0d      	ldr	r4, [pc, #52]	@ (800adbc <__libc_init_array+0x3c>)
 800ad86:	1b64      	subs	r4, r4, r5
 800ad88:	10a4      	asrs	r4, r4, #2
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	42a6      	cmp	r6, r4
 800ad8e:	d109      	bne.n	800ada4 <__libc_init_array+0x24>
 800ad90:	4d0b      	ldr	r5, [pc, #44]	@ (800adc0 <__libc_init_array+0x40>)
 800ad92:	4c0c      	ldr	r4, [pc, #48]	@ (800adc4 <__libc_init_array+0x44>)
 800ad94:	f000 fc66 	bl	800b664 <_init>
 800ad98:	1b64      	subs	r4, r4, r5
 800ad9a:	10a4      	asrs	r4, r4, #2
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	42a6      	cmp	r6, r4
 800ada0:	d105      	bne.n	800adae <__libc_init_array+0x2e>
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada8:	4798      	blx	r3
 800adaa:	3601      	adds	r6, #1
 800adac:	e7ee      	b.n	800ad8c <__libc_init_array+0xc>
 800adae:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb2:	4798      	blx	r3
 800adb4:	3601      	adds	r6, #1
 800adb6:	e7f2      	b.n	800ad9e <__libc_init_array+0x1e>
 800adb8:	0800b738 	.word	0x0800b738
 800adbc:	0800b738 	.word	0x0800b738
 800adc0:	0800b738 	.word	0x0800b738
 800adc4:	0800b73c 	.word	0x0800b73c

0800adc8 <__retarget_lock_acquire_recursive>:
 800adc8:	4770      	bx	lr

0800adca <__retarget_lock_release_recursive>:
 800adca:	4770      	bx	lr

0800adcc <_free_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4605      	mov	r5, r0
 800add0:	2900      	cmp	r1, #0
 800add2:	d041      	beq.n	800ae58 <_free_r+0x8c>
 800add4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add8:	1f0c      	subs	r4, r1, #4
 800adda:	2b00      	cmp	r3, #0
 800addc:	bfb8      	it	lt
 800adde:	18e4      	addlt	r4, r4, r3
 800ade0:	f000 f8e0 	bl	800afa4 <__malloc_lock>
 800ade4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <_free_r+0x90>)
 800ade6:	6813      	ldr	r3, [r2, #0]
 800ade8:	b933      	cbnz	r3, 800adf8 <_free_r+0x2c>
 800adea:	6063      	str	r3, [r4, #4]
 800adec:	6014      	str	r4, [r2, #0]
 800adee:	4628      	mov	r0, r5
 800adf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf4:	f000 b8dc 	b.w	800afb0 <__malloc_unlock>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d908      	bls.n	800ae0e <_free_r+0x42>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	1821      	adds	r1, r4, r0
 800ae00:	428b      	cmp	r3, r1
 800ae02:	bf01      	itttt	eq
 800ae04:	6819      	ldreq	r1, [r3, #0]
 800ae06:	685b      	ldreq	r3, [r3, #4]
 800ae08:	1809      	addeq	r1, r1, r0
 800ae0a:	6021      	streq	r1, [r4, #0]
 800ae0c:	e7ed      	b.n	800adea <_free_r+0x1e>
 800ae0e:	461a      	mov	r2, r3
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	b10b      	cbz	r3, 800ae18 <_free_r+0x4c>
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	d9fa      	bls.n	800ae0e <_free_r+0x42>
 800ae18:	6811      	ldr	r1, [r2, #0]
 800ae1a:	1850      	adds	r0, r2, r1
 800ae1c:	42a0      	cmp	r0, r4
 800ae1e:	d10b      	bne.n	800ae38 <_free_r+0x6c>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	4401      	add	r1, r0
 800ae24:	1850      	adds	r0, r2, r1
 800ae26:	4283      	cmp	r3, r0
 800ae28:	6011      	str	r1, [r2, #0]
 800ae2a:	d1e0      	bne.n	800adee <_free_r+0x22>
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	6053      	str	r3, [r2, #4]
 800ae32:	4408      	add	r0, r1
 800ae34:	6010      	str	r0, [r2, #0]
 800ae36:	e7da      	b.n	800adee <_free_r+0x22>
 800ae38:	d902      	bls.n	800ae40 <_free_r+0x74>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	e7d6      	b.n	800adee <_free_r+0x22>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	1821      	adds	r1, r4, r0
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf04      	itt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	6063      	str	r3, [r4, #4]
 800ae4e:	bf04      	itt	eq
 800ae50:	1809      	addeq	r1, r1, r0
 800ae52:	6021      	streq	r1, [r4, #0]
 800ae54:	6054      	str	r4, [r2, #4]
 800ae56:	e7ca      	b.n	800adee <_free_r+0x22>
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000a10 	.word	0x20000a10

0800ae60 <sbrk_aligned>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	4e0f      	ldr	r6, [pc, #60]	@ (800aea0 <sbrk_aligned+0x40>)
 800ae64:	460c      	mov	r4, r1
 800ae66:	6831      	ldr	r1, [r6, #0]
 800ae68:	4605      	mov	r5, r0
 800ae6a:	b911      	cbnz	r1, 800ae72 <sbrk_aligned+0x12>
 800ae6c:	f000 fba6 	bl	800b5bc <_sbrk_r>
 800ae70:	6030      	str	r0, [r6, #0]
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 fba1 	bl	800b5bc <_sbrk_r>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d103      	bne.n	800ae86 <sbrk_aligned+0x26>
 800ae7e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae82:	4620      	mov	r0, r4
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	1cc4      	adds	r4, r0, #3
 800ae88:	f024 0403 	bic.w	r4, r4, #3
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	d0f8      	beq.n	800ae82 <sbrk_aligned+0x22>
 800ae90:	1a21      	subs	r1, r4, r0
 800ae92:	4628      	mov	r0, r5
 800ae94:	f000 fb92 	bl	800b5bc <_sbrk_r>
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d1f2      	bne.n	800ae82 <sbrk_aligned+0x22>
 800ae9c:	e7ef      	b.n	800ae7e <sbrk_aligned+0x1e>
 800ae9e:	bf00      	nop
 800aea0:	20000a0c 	.word	0x20000a0c

0800aea4 <_malloc_r>:
 800aea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea8:	1ccd      	adds	r5, r1, #3
 800aeaa:	f025 0503 	bic.w	r5, r5, #3
 800aeae:	3508      	adds	r5, #8
 800aeb0:	2d0c      	cmp	r5, #12
 800aeb2:	bf38      	it	cc
 800aeb4:	250c      	movcc	r5, #12
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	4606      	mov	r6, r0
 800aeba:	db01      	blt.n	800aec0 <_malloc_r+0x1c>
 800aebc:	42a9      	cmp	r1, r5
 800aebe:	d904      	bls.n	800aeca <_malloc_r+0x26>
 800aec0:	230c      	movs	r3, #12
 800aec2:	6033      	str	r3, [r6, #0]
 800aec4:	2000      	movs	r0, #0
 800aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afa0 <_malloc_r+0xfc>
 800aece:	f000 f869 	bl	800afa4 <__malloc_lock>
 800aed2:	f8d8 3000 	ldr.w	r3, [r8]
 800aed6:	461c      	mov	r4, r3
 800aed8:	bb44      	cbnz	r4, 800af2c <_malloc_r+0x88>
 800aeda:	4629      	mov	r1, r5
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff ffbf 	bl	800ae60 <sbrk_aligned>
 800aee2:	1c43      	adds	r3, r0, #1
 800aee4:	4604      	mov	r4, r0
 800aee6:	d158      	bne.n	800af9a <_malloc_r+0xf6>
 800aee8:	f8d8 4000 	ldr.w	r4, [r8]
 800aeec:	4627      	mov	r7, r4
 800aeee:	2f00      	cmp	r7, #0
 800aef0:	d143      	bne.n	800af7a <_malloc_r+0xd6>
 800aef2:	2c00      	cmp	r4, #0
 800aef4:	d04b      	beq.n	800af8e <_malloc_r+0xea>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	4639      	mov	r1, r7
 800aefa:	4630      	mov	r0, r6
 800aefc:	eb04 0903 	add.w	r9, r4, r3
 800af00:	f000 fb5c 	bl	800b5bc <_sbrk_r>
 800af04:	4581      	cmp	r9, r0
 800af06:	d142      	bne.n	800af8e <_malloc_r+0xea>
 800af08:	6821      	ldr	r1, [r4, #0]
 800af0a:	1a6d      	subs	r5, r5, r1
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ffa6 	bl	800ae60 <sbrk_aligned>
 800af14:	3001      	adds	r0, #1
 800af16:	d03a      	beq.n	800af8e <_malloc_r+0xea>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	442b      	add	r3, r5
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	f8d8 3000 	ldr.w	r3, [r8]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	bb62      	cbnz	r2, 800af80 <_malloc_r+0xdc>
 800af26:	f8c8 7000 	str.w	r7, [r8]
 800af2a:	e00f      	b.n	800af4c <_malloc_r+0xa8>
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	1b52      	subs	r2, r2, r5
 800af30:	d420      	bmi.n	800af74 <_malloc_r+0xd0>
 800af32:	2a0b      	cmp	r2, #11
 800af34:	d917      	bls.n	800af66 <_malloc_r+0xc2>
 800af36:	1961      	adds	r1, r4, r5
 800af38:	42a3      	cmp	r3, r4
 800af3a:	6025      	str	r5, [r4, #0]
 800af3c:	bf18      	it	ne
 800af3e:	6059      	strne	r1, [r3, #4]
 800af40:	6863      	ldr	r3, [r4, #4]
 800af42:	bf08      	it	eq
 800af44:	f8c8 1000 	streq.w	r1, [r8]
 800af48:	5162      	str	r2, [r4, r5]
 800af4a:	604b      	str	r3, [r1, #4]
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 f82f 	bl	800afb0 <__malloc_unlock>
 800af52:	f104 000b 	add.w	r0, r4, #11
 800af56:	1d23      	adds	r3, r4, #4
 800af58:	f020 0007 	bic.w	r0, r0, #7
 800af5c:	1ac2      	subs	r2, r0, r3
 800af5e:	bf1c      	itt	ne
 800af60:	1a1b      	subne	r3, r3, r0
 800af62:	50a3      	strne	r3, [r4, r2]
 800af64:	e7af      	b.n	800aec6 <_malloc_r+0x22>
 800af66:	6862      	ldr	r2, [r4, #4]
 800af68:	42a3      	cmp	r3, r4
 800af6a:	bf0c      	ite	eq
 800af6c:	f8c8 2000 	streq.w	r2, [r8]
 800af70:	605a      	strne	r2, [r3, #4]
 800af72:	e7eb      	b.n	800af4c <_malloc_r+0xa8>
 800af74:	4623      	mov	r3, r4
 800af76:	6864      	ldr	r4, [r4, #4]
 800af78:	e7ae      	b.n	800aed8 <_malloc_r+0x34>
 800af7a:	463c      	mov	r4, r7
 800af7c:	687f      	ldr	r7, [r7, #4]
 800af7e:	e7b6      	b.n	800aeee <_malloc_r+0x4a>
 800af80:	461a      	mov	r2, r3
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	42a3      	cmp	r3, r4
 800af86:	d1fb      	bne.n	800af80 <_malloc_r+0xdc>
 800af88:	2300      	movs	r3, #0
 800af8a:	6053      	str	r3, [r2, #4]
 800af8c:	e7de      	b.n	800af4c <_malloc_r+0xa8>
 800af8e:	230c      	movs	r3, #12
 800af90:	6033      	str	r3, [r6, #0]
 800af92:	4630      	mov	r0, r6
 800af94:	f000 f80c 	bl	800afb0 <__malloc_unlock>
 800af98:	e794      	b.n	800aec4 <_malloc_r+0x20>
 800af9a:	6005      	str	r5, [r0, #0]
 800af9c:	e7d6      	b.n	800af4c <_malloc_r+0xa8>
 800af9e:	bf00      	nop
 800afa0:	20000a10 	.word	0x20000a10

0800afa4 <__malloc_lock>:
 800afa4:	4801      	ldr	r0, [pc, #4]	@ (800afac <__malloc_lock+0x8>)
 800afa6:	f7ff bf0f 	b.w	800adc8 <__retarget_lock_acquire_recursive>
 800afaa:	bf00      	nop
 800afac:	20000a08 	.word	0x20000a08

0800afb0 <__malloc_unlock>:
 800afb0:	4801      	ldr	r0, [pc, #4]	@ (800afb8 <__malloc_unlock+0x8>)
 800afb2:	f7ff bf0a 	b.w	800adca <__retarget_lock_release_recursive>
 800afb6:	bf00      	nop
 800afb8:	20000a08 	.word	0x20000a08

0800afbc <__ssputs_r>:
 800afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	688e      	ldr	r6, [r1, #8]
 800afc2:	461f      	mov	r7, r3
 800afc4:	42be      	cmp	r6, r7
 800afc6:	680b      	ldr	r3, [r1, #0]
 800afc8:	4682      	mov	sl, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	4690      	mov	r8, r2
 800afce:	d82d      	bhi.n	800b02c <__ssputs_r+0x70>
 800afd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afd8:	d026      	beq.n	800b028 <__ssputs_r+0x6c>
 800afda:	6965      	ldr	r5, [r4, #20]
 800afdc:	6909      	ldr	r1, [r1, #16]
 800afde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afe2:	eba3 0901 	sub.w	r9, r3, r1
 800afe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afea:	1c7b      	adds	r3, r7, #1
 800afec:	444b      	add	r3, r9
 800afee:	106d      	asrs	r5, r5, #1
 800aff0:	429d      	cmp	r5, r3
 800aff2:	bf38      	it	cc
 800aff4:	461d      	movcc	r5, r3
 800aff6:	0553      	lsls	r3, r2, #21
 800aff8:	d527      	bpl.n	800b04a <__ssputs_r+0x8e>
 800affa:	4629      	mov	r1, r5
 800affc:	f7ff ff52 	bl	800aea4 <_malloc_r>
 800b000:	4606      	mov	r6, r0
 800b002:	b360      	cbz	r0, 800b05e <__ssputs_r+0xa2>
 800b004:	6921      	ldr	r1, [r4, #16]
 800b006:	464a      	mov	r2, r9
 800b008:	f000 fae8 	bl	800b5dc <memcpy>
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	6126      	str	r6, [r4, #16]
 800b01a:	6165      	str	r5, [r4, #20]
 800b01c:	444e      	add	r6, r9
 800b01e:	eba5 0509 	sub.w	r5, r5, r9
 800b022:	6026      	str	r6, [r4, #0]
 800b024:	60a5      	str	r5, [r4, #8]
 800b026:	463e      	mov	r6, r7
 800b028:	42be      	cmp	r6, r7
 800b02a:	d900      	bls.n	800b02e <__ssputs_r+0x72>
 800b02c:	463e      	mov	r6, r7
 800b02e:	6820      	ldr	r0, [r4, #0]
 800b030:	4632      	mov	r2, r6
 800b032:	4641      	mov	r1, r8
 800b034:	f000 faa8 	bl	800b588 <memmove>
 800b038:	68a3      	ldr	r3, [r4, #8]
 800b03a:	1b9b      	subs	r3, r3, r6
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	4433      	add	r3, r6
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	2000      	movs	r0, #0
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	462a      	mov	r2, r5
 800b04c:	f000 fad4 	bl	800b5f8 <_realloc_r>
 800b050:	4606      	mov	r6, r0
 800b052:	2800      	cmp	r0, #0
 800b054:	d1e0      	bne.n	800b018 <__ssputs_r+0x5c>
 800b056:	6921      	ldr	r1, [r4, #16]
 800b058:	4650      	mov	r0, sl
 800b05a:	f7ff feb7 	bl	800adcc <_free_r>
 800b05e:	230c      	movs	r3, #12
 800b060:	f8ca 3000 	str.w	r3, [sl]
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	f04f 30ff 	mov.w	r0, #4294967295
 800b070:	e7e9      	b.n	800b046 <__ssputs_r+0x8a>
	...

0800b074 <_svfiprintf_r>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	4698      	mov	r8, r3
 800b07a:	898b      	ldrh	r3, [r1, #12]
 800b07c:	061b      	lsls	r3, r3, #24
 800b07e:	b09d      	sub	sp, #116	@ 0x74
 800b080:	4607      	mov	r7, r0
 800b082:	460d      	mov	r5, r1
 800b084:	4614      	mov	r4, r2
 800b086:	d510      	bpl.n	800b0aa <_svfiprintf_r+0x36>
 800b088:	690b      	ldr	r3, [r1, #16]
 800b08a:	b973      	cbnz	r3, 800b0aa <_svfiprintf_r+0x36>
 800b08c:	2140      	movs	r1, #64	@ 0x40
 800b08e:	f7ff ff09 	bl	800aea4 <_malloc_r>
 800b092:	6028      	str	r0, [r5, #0]
 800b094:	6128      	str	r0, [r5, #16]
 800b096:	b930      	cbnz	r0, 800b0a6 <_svfiprintf_r+0x32>
 800b098:	230c      	movs	r3, #12
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	b01d      	add	sp, #116	@ 0x74
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a6:	2340      	movs	r3, #64	@ 0x40
 800b0a8:	616b      	str	r3, [r5, #20]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ae:	2320      	movs	r3, #32
 800b0b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b8:	2330      	movs	r3, #48	@ 0x30
 800b0ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b258 <_svfiprintf_r+0x1e4>
 800b0be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0c2:	f04f 0901 	mov.w	r9, #1
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	469a      	mov	sl, r3
 800b0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ce:	b10a      	cbz	r2, 800b0d4 <_svfiprintf_r+0x60>
 800b0d0:	2a25      	cmp	r2, #37	@ 0x25
 800b0d2:	d1f9      	bne.n	800b0c8 <_svfiprintf_r+0x54>
 800b0d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d8:	d00b      	beq.n	800b0f2 <_svfiprintf_r+0x7e>
 800b0da:	465b      	mov	r3, fp
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff ff6b 	bl	800afbc <__ssputs_r>
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	f000 80a7 	beq.w	800b23a <_svfiprintf_r+0x1c6>
 800b0ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ee:	445a      	add	r2, fp
 800b0f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 809f 	beq.w	800b23a <_svfiprintf_r+0x1c6>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b106:	f10a 0a01 	add.w	sl, sl, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	9307      	str	r3, [sp, #28]
 800b10e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b112:	931a      	str	r3, [sp, #104]	@ 0x68
 800b114:	4654      	mov	r4, sl
 800b116:	2205      	movs	r2, #5
 800b118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11c:	484e      	ldr	r0, [pc, #312]	@ (800b258 <_svfiprintf_r+0x1e4>)
 800b11e:	f7f5 f887 	bl	8000230 <memchr>
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	b9d8      	cbnz	r0, 800b15e <_svfiprintf_r+0xea>
 800b126:	06d0      	lsls	r0, r2, #27
 800b128:	bf44      	itt	mi
 800b12a:	2320      	movmi	r3, #32
 800b12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b130:	0711      	lsls	r1, r2, #28
 800b132:	bf44      	itt	mi
 800b134:	232b      	movmi	r3, #43	@ 0x2b
 800b136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b13a:	f89a 3000 	ldrb.w	r3, [sl]
 800b13e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b140:	d015      	beq.n	800b16e <_svfiprintf_r+0xfa>
 800b142:	9a07      	ldr	r2, [sp, #28]
 800b144:	4654      	mov	r4, sl
 800b146:	2000      	movs	r0, #0
 800b148:	f04f 0c0a 	mov.w	ip, #10
 800b14c:	4621      	mov	r1, r4
 800b14e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b152:	3b30      	subs	r3, #48	@ 0x30
 800b154:	2b09      	cmp	r3, #9
 800b156:	d94b      	bls.n	800b1f0 <_svfiprintf_r+0x17c>
 800b158:	b1b0      	cbz	r0, 800b188 <_svfiprintf_r+0x114>
 800b15a:	9207      	str	r2, [sp, #28]
 800b15c:	e014      	b.n	800b188 <_svfiprintf_r+0x114>
 800b15e:	eba0 0308 	sub.w	r3, r0, r8
 800b162:	fa09 f303 	lsl.w	r3, r9, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	46a2      	mov	sl, r4
 800b16c:	e7d2      	b.n	800b114 <_svfiprintf_r+0xa0>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	1d19      	adds	r1, r3, #4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	9103      	str	r1, [sp, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfbb      	ittet	lt
 800b17a:	425b      	neglt	r3, r3
 800b17c:	f042 0202 	orrlt.w	r2, r2, #2
 800b180:	9307      	strge	r3, [sp, #28]
 800b182:	9307      	strlt	r3, [sp, #28]
 800b184:	bfb8      	it	lt
 800b186:	9204      	strlt	r2, [sp, #16]
 800b188:	7823      	ldrb	r3, [r4, #0]
 800b18a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b18c:	d10a      	bne.n	800b1a4 <_svfiprintf_r+0x130>
 800b18e:	7863      	ldrb	r3, [r4, #1]
 800b190:	2b2a      	cmp	r3, #42	@ 0x2a
 800b192:	d132      	bne.n	800b1fa <_svfiprintf_r+0x186>
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	1d1a      	adds	r2, r3, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	9203      	str	r2, [sp, #12]
 800b19c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1a0:	3402      	adds	r4, #2
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b268 <_svfiprintf_r+0x1f4>
 800b1a8:	7821      	ldrb	r1, [r4, #0]
 800b1aa:	2203      	movs	r2, #3
 800b1ac:	4650      	mov	r0, sl
 800b1ae:	f7f5 f83f 	bl	8000230 <memchr>
 800b1b2:	b138      	cbz	r0, 800b1c4 <_svfiprintf_r+0x150>
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	eba0 000a 	sub.w	r0, r0, sl
 800b1ba:	2240      	movs	r2, #64	@ 0x40
 800b1bc:	4082      	lsls	r2, r0
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	3401      	adds	r4, #1
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	4824      	ldr	r0, [pc, #144]	@ (800b25c <_svfiprintf_r+0x1e8>)
 800b1ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1ce:	2206      	movs	r2, #6
 800b1d0:	f7f5 f82e 	bl	8000230 <memchr>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d036      	beq.n	800b246 <_svfiprintf_r+0x1d2>
 800b1d8:	4b21      	ldr	r3, [pc, #132]	@ (800b260 <_svfiprintf_r+0x1ec>)
 800b1da:	bb1b      	cbnz	r3, 800b224 <_svfiprintf_r+0x1b0>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	3307      	adds	r3, #7
 800b1e0:	f023 0307 	bic.w	r3, r3, #7
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ea:	4433      	add	r3, r6
 800b1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ee:	e76a      	b.n	800b0c6 <_svfiprintf_r+0x52>
 800b1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	e7a8      	b.n	800b14c <_svfiprintf_r+0xd8>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	9305      	str	r3, [sp, #20]
 800b200:	4619      	mov	r1, r3
 800b202:	f04f 0c0a 	mov.w	ip, #10
 800b206:	4620      	mov	r0, r4
 800b208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20c:	3a30      	subs	r2, #48	@ 0x30
 800b20e:	2a09      	cmp	r2, #9
 800b210:	d903      	bls.n	800b21a <_svfiprintf_r+0x1a6>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0c6      	beq.n	800b1a4 <_svfiprintf_r+0x130>
 800b216:	9105      	str	r1, [sp, #20]
 800b218:	e7c4      	b.n	800b1a4 <_svfiprintf_r+0x130>
 800b21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b21e:	4604      	mov	r4, r0
 800b220:	2301      	movs	r3, #1
 800b222:	e7f0      	b.n	800b206 <_svfiprintf_r+0x192>
 800b224:	ab03      	add	r3, sp, #12
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	462a      	mov	r2, r5
 800b22a:	4b0e      	ldr	r3, [pc, #56]	@ (800b264 <_svfiprintf_r+0x1f0>)
 800b22c:	a904      	add	r1, sp, #16
 800b22e:	4638      	mov	r0, r7
 800b230:	f3af 8000 	nop.w
 800b234:	1c42      	adds	r2, r0, #1
 800b236:	4606      	mov	r6, r0
 800b238:	d1d6      	bne.n	800b1e8 <_svfiprintf_r+0x174>
 800b23a:	89ab      	ldrh	r3, [r5, #12]
 800b23c:	065b      	lsls	r3, r3, #25
 800b23e:	f53f af2d 	bmi.w	800b09c <_svfiprintf_r+0x28>
 800b242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b244:	e72c      	b.n	800b0a0 <_svfiprintf_r+0x2c>
 800b246:	ab03      	add	r3, sp, #12
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	462a      	mov	r2, r5
 800b24c:	4b05      	ldr	r3, [pc, #20]	@ (800b264 <_svfiprintf_r+0x1f0>)
 800b24e:	a904      	add	r1, sp, #16
 800b250:	4638      	mov	r0, r7
 800b252:	f000 f879 	bl	800b348 <_printf_i>
 800b256:	e7ed      	b.n	800b234 <_svfiprintf_r+0x1c0>
 800b258:	0800b6fc 	.word	0x0800b6fc
 800b25c:	0800b706 	.word	0x0800b706
 800b260:	00000000 	.word	0x00000000
 800b264:	0800afbd 	.word	0x0800afbd
 800b268:	0800b702 	.word	0x0800b702

0800b26c <_printf_common>:
 800b26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b270:	4616      	mov	r6, r2
 800b272:	4698      	mov	r8, r3
 800b274:	688a      	ldr	r2, [r1, #8]
 800b276:	690b      	ldr	r3, [r1, #16]
 800b278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b27c:	4293      	cmp	r3, r2
 800b27e:	bfb8      	it	lt
 800b280:	4613      	movlt	r3, r2
 800b282:	6033      	str	r3, [r6, #0]
 800b284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b288:	4607      	mov	r7, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	b10a      	cbz	r2, 800b292 <_printf_common+0x26>
 800b28e:	3301      	adds	r3, #1
 800b290:	6033      	str	r3, [r6, #0]
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	0699      	lsls	r1, r3, #26
 800b296:	bf42      	ittt	mi
 800b298:	6833      	ldrmi	r3, [r6, #0]
 800b29a:	3302      	addmi	r3, #2
 800b29c:	6033      	strmi	r3, [r6, #0]
 800b29e:	6825      	ldr	r5, [r4, #0]
 800b2a0:	f015 0506 	ands.w	r5, r5, #6
 800b2a4:	d106      	bne.n	800b2b4 <_printf_common+0x48>
 800b2a6:	f104 0a19 	add.w	sl, r4, #25
 800b2aa:	68e3      	ldr	r3, [r4, #12]
 800b2ac:	6832      	ldr	r2, [r6, #0]
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	42ab      	cmp	r3, r5
 800b2b2:	dc26      	bgt.n	800b302 <_printf_common+0x96>
 800b2b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	3b00      	subs	r3, #0
 800b2bc:	bf18      	it	ne
 800b2be:	2301      	movne	r3, #1
 800b2c0:	0692      	lsls	r2, r2, #26
 800b2c2:	d42b      	bmi.n	800b31c <_printf_common+0xb0>
 800b2c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	47c8      	blx	r9
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d01e      	beq.n	800b310 <_printf_common+0xa4>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	6922      	ldr	r2, [r4, #16]
 800b2d6:	f003 0306 	and.w	r3, r3, #6
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	bf02      	ittt	eq
 800b2de:	68e5      	ldreq	r5, [r4, #12]
 800b2e0:	6833      	ldreq	r3, [r6, #0]
 800b2e2:	1aed      	subeq	r5, r5, r3
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	bf0c      	ite	eq
 800b2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ec:	2500      	movne	r5, #0
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bfc4      	itt	gt
 800b2f2:	1a9b      	subgt	r3, r3, r2
 800b2f4:	18ed      	addgt	r5, r5, r3
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	341a      	adds	r4, #26
 800b2fa:	42b5      	cmp	r5, r6
 800b2fc:	d11a      	bne.n	800b334 <_printf_common+0xc8>
 800b2fe:	2000      	movs	r0, #0
 800b300:	e008      	b.n	800b314 <_printf_common+0xa8>
 800b302:	2301      	movs	r3, #1
 800b304:	4652      	mov	r2, sl
 800b306:	4641      	mov	r1, r8
 800b308:	4638      	mov	r0, r7
 800b30a:	47c8      	blx	r9
 800b30c:	3001      	adds	r0, #1
 800b30e:	d103      	bne.n	800b318 <_printf_common+0xac>
 800b310:	f04f 30ff 	mov.w	r0, #4294967295
 800b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b318:	3501      	adds	r5, #1
 800b31a:	e7c6      	b.n	800b2aa <_printf_common+0x3e>
 800b31c:	18e1      	adds	r1, r4, r3
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	2030      	movs	r0, #48	@ 0x30
 800b322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b326:	4422      	add	r2, r4
 800b328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b32c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b330:	3302      	adds	r3, #2
 800b332:	e7c7      	b.n	800b2c4 <_printf_common+0x58>
 800b334:	2301      	movs	r3, #1
 800b336:	4622      	mov	r2, r4
 800b338:	4641      	mov	r1, r8
 800b33a:	4638      	mov	r0, r7
 800b33c:	47c8      	blx	r9
 800b33e:	3001      	adds	r0, #1
 800b340:	d0e6      	beq.n	800b310 <_printf_common+0xa4>
 800b342:	3601      	adds	r6, #1
 800b344:	e7d9      	b.n	800b2fa <_printf_common+0x8e>
	...

0800b348 <_printf_i>:
 800b348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b34c:	7e0f      	ldrb	r7, [r1, #24]
 800b34e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b350:	2f78      	cmp	r7, #120	@ 0x78
 800b352:	4691      	mov	r9, r2
 800b354:	4680      	mov	r8, r0
 800b356:	460c      	mov	r4, r1
 800b358:	469a      	mov	sl, r3
 800b35a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b35e:	d807      	bhi.n	800b370 <_printf_i+0x28>
 800b360:	2f62      	cmp	r7, #98	@ 0x62
 800b362:	d80a      	bhi.n	800b37a <_printf_i+0x32>
 800b364:	2f00      	cmp	r7, #0
 800b366:	f000 80d2 	beq.w	800b50e <_printf_i+0x1c6>
 800b36a:	2f58      	cmp	r7, #88	@ 0x58
 800b36c:	f000 80b9 	beq.w	800b4e2 <_printf_i+0x19a>
 800b370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b378:	e03a      	b.n	800b3f0 <_printf_i+0xa8>
 800b37a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b37e:	2b15      	cmp	r3, #21
 800b380:	d8f6      	bhi.n	800b370 <_printf_i+0x28>
 800b382:	a101      	add	r1, pc, #4	@ (adr r1, 800b388 <_printf_i+0x40>)
 800b384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b388:	0800b3e1 	.word	0x0800b3e1
 800b38c:	0800b3f5 	.word	0x0800b3f5
 800b390:	0800b371 	.word	0x0800b371
 800b394:	0800b371 	.word	0x0800b371
 800b398:	0800b371 	.word	0x0800b371
 800b39c:	0800b371 	.word	0x0800b371
 800b3a0:	0800b3f5 	.word	0x0800b3f5
 800b3a4:	0800b371 	.word	0x0800b371
 800b3a8:	0800b371 	.word	0x0800b371
 800b3ac:	0800b371 	.word	0x0800b371
 800b3b0:	0800b371 	.word	0x0800b371
 800b3b4:	0800b4f5 	.word	0x0800b4f5
 800b3b8:	0800b41f 	.word	0x0800b41f
 800b3bc:	0800b4af 	.word	0x0800b4af
 800b3c0:	0800b371 	.word	0x0800b371
 800b3c4:	0800b371 	.word	0x0800b371
 800b3c8:	0800b517 	.word	0x0800b517
 800b3cc:	0800b371 	.word	0x0800b371
 800b3d0:	0800b41f 	.word	0x0800b41f
 800b3d4:	0800b371 	.word	0x0800b371
 800b3d8:	0800b371 	.word	0x0800b371
 800b3dc:	0800b4b7 	.word	0x0800b4b7
 800b3e0:	6833      	ldr	r3, [r6, #0]
 800b3e2:	1d1a      	adds	r2, r3, #4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6032      	str	r2, [r6, #0]
 800b3e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e09d      	b.n	800b530 <_printf_i+0x1e8>
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	6820      	ldr	r0, [r4, #0]
 800b3f8:	1d19      	adds	r1, r3, #4
 800b3fa:	6031      	str	r1, [r6, #0]
 800b3fc:	0606      	lsls	r6, r0, #24
 800b3fe:	d501      	bpl.n	800b404 <_printf_i+0xbc>
 800b400:	681d      	ldr	r5, [r3, #0]
 800b402:	e003      	b.n	800b40c <_printf_i+0xc4>
 800b404:	0645      	lsls	r5, r0, #25
 800b406:	d5fb      	bpl.n	800b400 <_printf_i+0xb8>
 800b408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b40c:	2d00      	cmp	r5, #0
 800b40e:	da03      	bge.n	800b418 <_printf_i+0xd0>
 800b410:	232d      	movs	r3, #45	@ 0x2d
 800b412:	426d      	negs	r5, r5
 800b414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b418:	4859      	ldr	r0, [pc, #356]	@ (800b580 <_printf_i+0x238>)
 800b41a:	230a      	movs	r3, #10
 800b41c:	e011      	b.n	800b442 <_printf_i+0xfa>
 800b41e:	6821      	ldr	r1, [r4, #0]
 800b420:	6833      	ldr	r3, [r6, #0]
 800b422:	0608      	lsls	r0, r1, #24
 800b424:	f853 5b04 	ldr.w	r5, [r3], #4
 800b428:	d402      	bmi.n	800b430 <_printf_i+0xe8>
 800b42a:	0649      	lsls	r1, r1, #25
 800b42c:	bf48      	it	mi
 800b42e:	b2ad      	uxthmi	r5, r5
 800b430:	2f6f      	cmp	r7, #111	@ 0x6f
 800b432:	4853      	ldr	r0, [pc, #332]	@ (800b580 <_printf_i+0x238>)
 800b434:	6033      	str	r3, [r6, #0]
 800b436:	bf14      	ite	ne
 800b438:	230a      	movne	r3, #10
 800b43a:	2308      	moveq	r3, #8
 800b43c:	2100      	movs	r1, #0
 800b43e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b442:	6866      	ldr	r6, [r4, #4]
 800b444:	60a6      	str	r6, [r4, #8]
 800b446:	2e00      	cmp	r6, #0
 800b448:	bfa2      	ittt	ge
 800b44a:	6821      	ldrge	r1, [r4, #0]
 800b44c:	f021 0104 	bicge.w	r1, r1, #4
 800b450:	6021      	strge	r1, [r4, #0]
 800b452:	b90d      	cbnz	r5, 800b458 <_printf_i+0x110>
 800b454:	2e00      	cmp	r6, #0
 800b456:	d04b      	beq.n	800b4f0 <_printf_i+0x1a8>
 800b458:	4616      	mov	r6, r2
 800b45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b45e:	fb03 5711 	mls	r7, r3, r1, r5
 800b462:	5dc7      	ldrb	r7, [r0, r7]
 800b464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b468:	462f      	mov	r7, r5
 800b46a:	42bb      	cmp	r3, r7
 800b46c:	460d      	mov	r5, r1
 800b46e:	d9f4      	bls.n	800b45a <_printf_i+0x112>
 800b470:	2b08      	cmp	r3, #8
 800b472:	d10b      	bne.n	800b48c <_printf_i+0x144>
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	07df      	lsls	r7, r3, #31
 800b478:	d508      	bpl.n	800b48c <_printf_i+0x144>
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	6861      	ldr	r1, [r4, #4]
 800b47e:	4299      	cmp	r1, r3
 800b480:	bfde      	ittt	le
 800b482:	2330      	movle	r3, #48	@ 0x30
 800b484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b48c:	1b92      	subs	r2, r2, r6
 800b48e:	6122      	str	r2, [r4, #16]
 800b490:	f8cd a000 	str.w	sl, [sp]
 800b494:	464b      	mov	r3, r9
 800b496:	aa03      	add	r2, sp, #12
 800b498:	4621      	mov	r1, r4
 800b49a:	4640      	mov	r0, r8
 800b49c:	f7ff fee6 	bl	800b26c <_printf_common>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d14a      	bne.n	800b53a <_printf_i+0x1f2>
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	b004      	add	sp, #16
 800b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	f043 0320 	orr.w	r3, r3, #32
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	4833      	ldr	r0, [pc, #204]	@ (800b584 <_printf_i+0x23c>)
 800b4b8:	2778      	movs	r7, #120	@ 0x78
 800b4ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	6831      	ldr	r1, [r6, #0]
 800b4c2:	061f      	lsls	r7, r3, #24
 800b4c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4c8:	d402      	bmi.n	800b4d0 <_printf_i+0x188>
 800b4ca:	065f      	lsls	r7, r3, #25
 800b4cc:	bf48      	it	mi
 800b4ce:	b2ad      	uxthmi	r5, r5
 800b4d0:	6031      	str	r1, [r6, #0]
 800b4d2:	07d9      	lsls	r1, r3, #31
 800b4d4:	bf44      	itt	mi
 800b4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b4da:	6023      	strmi	r3, [r4, #0]
 800b4dc:	b11d      	cbz	r5, 800b4e6 <_printf_i+0x19e>
 800b4de:	2310      	movs	r3, #16
 800b4e0:	e7ac      	b.n	800b43c <_printf_i+0xf4>
 800b4e2:	4827      	ldr	r0, [pc, #156]	@ (800b580 <_printf_i+0x238>)
 800b4e4:	e7e9      	b.n	800b4ba <_printf_i+0x172>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	f023 0320 	bic.w	r3, r3, #32
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	e7f6      	b.n	800b4de <_printf_i+0x196>
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	e7bd      	b.n	800b470 <_printf_i+0x128>
 800b4f4:	6833      	ldr	r3, [r6, #0]
 800b4f6:	6825      	ldr	r5, [r4, #0]
 800b4f8:	6961      	ldr	r1, [r4, #20]
 800b4fa:	1d18      	adds	r0, r3, #4
 800b4fc:	6030      	str	r0, [r6, #0]
 800b4fe:	062e      	lsls	r6, r5, #24
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	d501      	bpl.n	800b508 <_printf_i+0x1c0>
 800b504:	6019      	str	r1, [r3, #0]
 800b506:	e002      	b.n	800b50e <_printf_i+0x1c6>
 800b508:	0668      	lsls	r0, r5, #25
 800b50a:	d5fb      	bpl.n	800b504 <_printf_i+0x1bc>
 800b50c:	8019      	strh	r1, [r3, #0]
 800b50e:	2300      	movs	r3, #0
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	4616      	mov	r6, r2
 800b514:	e7bc      	b.n	800b490 <_printf_i+0x148>
 800b516:	6833      	ldr	r3, [r6, #0]
 800b518:	1d1a      	adds	r2, r3, #4
 800b51a:	6032      	str	r2, [r6, #0]
 800b51c:	681e      	ldr	r6, [r3, #0]
 800b51e:	6862      	ldr	r2, [r4, #4]
 800b520:	2100      	movs	r1, #0
 800b522:	4630      	mov	r0, r6
 800b524:	f7f4 fe84 	bl	8000230 <memchr>
 800b528:	b108      	cbz	r0, 800b52e <_printf_i+0x1e6>
 800b52a:	1b80      	subs	r0, r0, r6
 800b52c:	6060      	str	r0, [r4, #4]
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	2300      	movs	r3, #0
 800b534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b538:	e7aa      	b.n	800b490 <_printf_i+0x148>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	4632      	mov	r2, r6
 800b53e:	4649      	mov	r1, r9
 800b540:	4640      	mov	r0, r8
 800b542:	47d0      	blx	sl
 800b544:	3001      	adds	r0, #1
 800b546:	d0ad      	beq.n	800b4a4 <_printf_i+0x15c>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	079b      	lsls	r3, r3, #30
 800b54c:	d413      	bmi.n	800b576 <_printf_i+0x22e>
 800b54e:	68e0      	ldr	r0, [r4, #12]
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	4298      	cmp	r0, r3
 800b554:	bfb8      	it	lt
 800b556:	4618      	movlt	r0, r3
 800b558:	e7a6      	b.n	800b4a8 <_printf_i+0x160>
 800b55a:	2301      	movs	r3, #1
 800b55c:	4632      	mov	r2, r6
 800b55e:	4649      	mov	r1, r9
 800b560:	4640      	mov	r0, r8
 800b562:	47d0      	blx	sl
 800b564:	3001      	adds	r0, #1
 800b566:	d09d      	beq.n	800b4a4 <_printf_i+0x15c>
 800b568:	3501      	adds	r5, #1
 800b56a:	68e3      	ldr	r3, [r4, #12]
 800b56c:	9903      	ldr	r1, [sp, #12]
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	42ab      	cmp	r3, r5
 800b572:	dcf2      	bgt.n	800b55a <_printf_i+0x212>
 800b574:	e7eb      	b.n	800b54e <_printf_i+0x206>
 800b576:	2500      	movs	r5, #0
 800b578:	f104 0619 	add.w	r6, r4, #25
 800b57c:	e7f5      	b.n	800b56a <_printf_i+0x222>
 800b57e:	bf00      	nop
 800b580:	0800b70d 	.word	0x0800b70d
 800b584:	0800b71e 	.word	0x0800b71e

0800b588 <memmove>:
 800b588:	4288      	cmp	r0, r1
 800b58a:	b510      	push	{r4, lr}
 800b58c:	eb01 0402 	add.w	r4, r1, r2
 800b590:	d902      	bls.n	800b598 <memmove+0x10>
 800b592:	4284      	cmp	r4, r0
 800b594:	4623      	mov	r3, r4
 800b596:	d807      	bhi.n	800b5a8 <memmove+0x20>
 800b598:	1e43      	subs	r3, r0, #1
 800b59a:	42a1      	cmp	r1, r4
 800b59c:	d008      	beq.n	800b5b0 <memmove+0x28>
 800b59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5a6:	e7f8      	b.n	800b59a <memmove+0x12>
 800b5a8:	4402      	add	r2, r0
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	428a      	cmp	r2, r1
 800b5ae:	d100      	bne.n	800b5b2 <memmove+0x2a>
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5ba:	e7f7      	b.n	800b5ac <memmove+0x24>

0800b5bc <_sbrk_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	@ (800b5d8 <_sbrk_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f6 ffd8 	bl	800257c <_sbrk>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_sbrk_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_sbrk_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000a04 	.word	0x20000a04

0800b5dc <memcpy>:
 800b5dc:	440a      	add	r2, r1
 800b5de:	4291      	cmp	r1, r2
 800b5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e4:	d100      	bne.n	800b5e8 <memcpy+0xc>
 800b5e6:	4770      	bx	lr
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f2:	4291      	cmp	r1, r2
 800b5f4:	d1f9      	bne.n	800b5ea <memcpy+0xe>
 800b5f6:	bd10      	pop	{r4, pc}

0800b5f8 <_realloc_r>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	4615      	mov	r5, r2
 800b600:	460c      	mov	r4, r1
 800b602:	b921      	cbnz	r1, 800b60e <_realloc_r+0x16>
 800b604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b608:	4611      	mov	r1, r2
 800b60a:	f7ff bc4b 	b.w	800aea4 <_malloc_r>
 800b60e:	b92a      	cbnz	r2, 800b61c <_realloc_r+0x24>
 800b610:	f7ff fbdc 	bl	800adcc <_free_r>
 800b614:	2400      	movs	r4, #0
 800b616:	4620      	mov	r0, r4
 800b618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61c:	f000 f81a 	bl	800b654 <_malloc_usable_size_r>
 800b620:	4285      	cmp	r5, r0
 800b622:	4606      	mov	r6, r0
 800b624:	d802      	bhi.n	800b62c <_realloc_r+0x34>
 800b626:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b62a:	d8f4      	bhi.n	800b616 <_realloc_r+0x1e>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4640      	mov	r0, r8
 800b630:	f7ff fc38 	bl	800aea4 <_malloc_r>
 800b634:	4607      	mov	r7, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	d0ec      	beq.n	800b614 <_realloc_r+0x1c>
 800b63a:	42b5      	cmp	r5, r6
 800b63c:	462a      	mov	r2, r5
 800b63e:	4621      	mov	r1, r4
 800b640:	bf28      	it	cs
 800b642:	4632      	movcs	r2, r6
 800b644:	f7ff ffca 	bl	800b5dc <memcpy>
 800b648:	4621      	mov	r1, r4
 800b64a:	4640      	mov	r0, r8
 800b64c:	f7ff fbbe 	bl	800adcc <_free_r>
 800b650:	463c      	mov	r4, r7
 800b652:	e7e0      	b.n	800b616 <_realloc_r+0x1e>

0800b654 <_malloc_usable_size_r>:
 800b654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b658:	1f18      	subs	r0, r3, #4
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	bfbc      	itt	lt
 800b65e:	580b      	ldrlt	r3, [r1, r0]
 800b660:	18c0      	addlt	r0, r0, r3
 800b662:	4770      	bx	lr

0800b664 <_init>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr

0800b670 <_fini>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	bf00      	nop
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr
