
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008bd8  08008bd8  00009bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c2c  08008c2c  0000a048  2**0
                  CONTENTS
  4 .ARM          00000008  08008c2c  08008c2c  00009c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c34  08008c34  0000a048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c34  08008c34  00009c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08008c3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000048  08008c84  0000a048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08008c84  0000a758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea0f  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d72  00000000  00000000  00028a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0002c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001389  00000000  00000000  0002e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029912  00000000  00000000  0002f4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e57  00000000  00000000  00058db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001124e9  00000000  00000000  00079c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c0f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b74  00000000  00000000  0018c138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00192cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008bc0 	.word	0x08008bc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	08008bc0 	.word	0x08008bc0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <__aeabi_uldivmod>:
 8000630:	b953      	cbnz	r3, 8000648 <__aeabi_uldivmod+0x18>
 8000632:	b94a      	cbnz	r2, 8000648 <__aeabi_uldivmod+0x18>
 8000634:	2900      	cmp	r1, #0
 8000636:	bf08      	it	eq
 8000638:	2800      	cmpeq	r0, #0
 800063a:	bf1c      	itt	ne
 800063c:	f04f 31ff 	movne.w	r1, #4294967295
 8000640:	f04f 30ff 	movne.w	r0, #4294967295
 8000644:	f000 b96a 	b.w	800091c <__aeabi_idiv0>
 8000648:	f1ad 0c08 	sub.w	ip, sp, #8
 800064c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000650:	f000 f806 	bl	8000660 <__udivmoddi4>
 8000654:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr

08000660 <__udivmoddi4>:
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000664:	9d08      	ldr	r5, [sp, #32]
 8000666:	460c      	mov	r4, r1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d14e      	bne.n	800070a <__udivmoddi4+0xaa>
 800066c:	4694      	mov	ip, r2
 800066e:	458c      	cmp	ip, r1
 8000670:	4686      	mov	lr, r0
 8000672:	fab2 f282 	clz	r2, r2
 8000676:	d962      	bls.n	800073e <__udivmoddi4+0xde>
 8000678:	b14a      	cbz	r2, 800068e <__udivmoddi4+0x2e>
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	4091      	lsls	r1, r2
 8000680:	fa20 f303 	lsr.w	r3, r0, r3
 8000684:	fa0c fc02 	lsl.w	ip, ip, r2
 8000688:	4319      	orrs	r1, r3
 800068a:	fa00 fe02 	lsl.w	lr, r0, r2
 800068e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000692:	fa1f f68c 	uxth.w	r6, ip
 8000696:	fbb1 f4f7 	udiv	r4, r1, r7
 800069a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800069e:	fb07 1114 	mls	r1, r7, r4, r1
 80006a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a6:	fb04 f106 	mul.w	r1, r4, r6
 80006aa:	4299      	cmp	r1, r3
 80006ac:	d90a      	bls.n	80006c4 <__udivmoddi4+0x64>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006b6:	f080 8112 	bcs.w	80008de <__udivmoddi4+0x27e>
 80006ba:	4299      	cmp	r1, r3
 80006bc:	f240 810f 	bls.w	80008de <__udivmoddi4+0x27e>
 80006c0:	3c02      	subs	r4, #2
 80006c2:	4463      	add	r3, ip
 80006c4:	1a59      	subs	r1, r3, r1
 80006c6:	fa1f f38e 	uxth.w	r3, lr
 80006ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80006ce:	fb07 1110 	mls	r1, r7, r0, r1
 80006d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006d6:	fb00 f606 	mul.w	r6, r0, r6
 80006da:	429e      	cmp	r6, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x94>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006e6:	f080 80fc 	bcs.w	80008e2 <__udivmoddi4+0x282>
 80006ea:	429e      	cmp	r6, r3
 80006ec:	f240 80f9 	bls.w	80008e2 <__udivmoddi4+0x282>
 80006f0:	4463      	add	r3, ip
 80006f2:	3802      	subs	r0, #2
 80006f4:	1b9b      	subs	r3, r3, r6
 80006f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006fa:	2100      	movs	r1, #0
 80006fc:	b11d      	cbz	r5, 8000706 <__udivmoddi4+0xa6>
 80006fe:	40d3      	lsrs	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	e9c5 3200 	strd	r3, r2, [r5]
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	428b      	cmp	r3, r1
 800070c:	d905      	bls.n	800071a <__udivmoddi4+0xba>
 800070e:	b10d      	cbz	r5, 8000714 <__udivmoddi4+0xb4>
 8000710:	e9c5 0100 	strd	r0, r1, [r5]
 8000714:	2100      	movs	r1, #0
 8000716:	4608      	mov	r0, r1
 8000718:	e7f5      	b.n	8000706 <__udivmoddi4+0xa6>
 800071a:	fab3 f183 	clz	r1, r3
 800071e:	2900      	cmp	r1, #0
 8000720:	d146      	bne.n	80007b0 <__udivmoddi4+0x150>
 8000722:	42a3      	cmp	r3, r4
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xcc>
 8000726:	4290      	cmp	r0, r2
 8000728:	f0c0 80f0 	bcc.w	800090c <__udivmoddi4+0x2ac>
 800072c:	1a86      	subs	r6, r0, r2
 800072e:	eb64 0303 	sbc.w	r3, r4, r3
 8000732:	2001      	movs	r0, #1
 8000734:	2d00      	cmp	r5, #0
 8000736:	d0e6      	beq.n	8000706 <__udivmoddi4+0xa6>
 8000738:	e9c5 6300 	strd	r6, r3, [r5]
 800073c:	e7e3      	b.n	8000706 <__udivmoddi4+0xa6>
 800073e:	2a00      	cmp	r2, #0
 8000740:	f040 8090 	bne.w	8000864 <__udivmoddi4+0x204>
 8000744:	eba1 040c 	sub.w	r4, r1, ip
 8000748:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800074c:	fa1f f78c 	uxth.w	r7, ip
 8000750:	2101      	movs	r1, #1
 8000752:	fbb4 f6f8 	udiv	r6, r4, r8
 8000756:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800075a:	fb08 4416 	mls	r4, r8, r6, r4
 800075e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000762:	fb07 f006 	mul.w	r0, r7, r6
 8000766:	4298      	cmp	r0, r3
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x11c>
 800076a:	eb1c 0303 	adds.w	r3, ip, r3
 800076e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x11a>
 8000774:	4298      	cmp	r0, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2b4>
 800077a:	4626      	mov	r6, r4
 800077c:	1a1c      	subs	r4, r3, r0
 800077e:	fa1f f38e 	uxth.w	r3, lr
 8000782:	fbb4 f0f8 	udiv	r0, r4, r8
 8000786:	fb08 4410 	mls	r4, r8, r0, r4
 800078a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078e:	fb00 f707 	mul.w	r7, r0, r7
 8000792:	429f      	cmp	r7, r3
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x148>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 34ff 	add.w	r4, r0, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x146>
 80007a0:	429f      	cmp	r7, r3
 80007a2:	f200 80b0 	bhi.w	8000906 <__udivmoddi4+0x2a6>
 80007a6:	4620      	mov	r0, r4
 80007a8:	1bdb      	subs	r3, r3, r7
 80007aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ae:	e7a5      	b.n	80006fc <__udivmoddi4+0x9c>
 80007b0:	f1c1 0620 	rsb	r6, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 f706 	lsr.w	r7, r2, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c0:	fa04 f301 	lsl.w	r3, r4, r1
 80007c4:	ea43 030c 	orr.w	r3, r3, ip
 80007c8:	40f4      	lsrs	r4, r6
 80007ca:	fa00 f801 	lsl.w	r8, r0, r1
 80007ce:	0c38      	lsrs	r0, r7, #16
 80007d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007d4:	fbb4 fef0 	udiv	lr, r4, r0
 80007d8:	fa1f fc87 	uxth.w	ip, r7
 80007dc:	fb00 441e 	mls	r4, r0, lr, r4
 80007e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e4:	fb0e f90c 	mul.w	r9, lr, ip
 80007e8:	45a1      	cmp	r9, r4
 80007ea:	fa02 f201 	lsl.w	r2, r2, r1
 80007ee:	d90a      	bls.n	8000806 <__udivmoddi4+0x1a6>
 80007f0:	193c      	adds	r4, r7, r4
 80007f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007f6:	f080 8084 	bcs.w	8000902 <__udivmoddi4+0x2a2>
 80007fa:	45a1      	cmp	r9, r4
 80007fc:	f240 8081 	bls.w	8000902 <__udivmoddi4+0x2a2>
 8000800:	f1ae 0e02 	sub.w	lr, lr, #2
 8000804:	443c      	add	r4, r7
 8000806:	eba4 0409 	sub.w	r4, r4, r9
 800080a:	fa1f f983 	uxth.w	r9, r3
 800080e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000812:	fb00 4413 	mls	r4, r0, r3, r4
 8000816:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081a:	fb03 fc0c 	mul.w	ip, r3, ip
 800081e:	45a4      	cmp	ip, r4
 8000820:	d907      	bls.n	8000832 <__udivmoddi4+0x1d2>
 8000822:	193c      	adds	r4, r7, r4
 8000824:	f103 30ff 	add.w	r0, r3, #4294967295
 8000828:	d267      	bcs.n	80008fa <__udivmoddi4+0x29a>
 800082a:	45a4      	cmp	ip, r4
 800082c:	d965      	bls.n	80008fa <__udivmoddi4+0x29a>
 800082e:	3b02      	subs	r3, #2
 8000830:	443c      	add	r4, r7
 8000832:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000836:	fba0 9302 	umull	r9, r3, r0, r2
 800083a:	eba4 040c 	sub.w	r4, r4, ip
 800083e:	429c      	cmp	r4, r3
 8000840:	46ce      	mov	lr, r9
 8000842:	469c      	mov	ip, r3
 8000844:	d351      	bcc.n	80008ea <__udivmoddi4+0x28a>
 8000846:	d04e      	beq.n	80008e6 <__udivmoddi4+0x286>
 8000848:	b155      	cbz	r5, 8000860 <__udivmoddi4+0x200>
 800084a:	ebb8 030e 	subs.w	r3, r8, lr
 800084e:	eb64 040c 	sbc.w	r4, r4, ip
 8000852:	fa04 f606 	lsl.w	r6, r4, r6
 8000856:	40cb      	lsrs	r3, r1
 8000858:	431e      	orrs	r6, r3
 800085a:	40cc      	lsrs	r4, r1
 800085c:	e9c5 6400 	strd	r6, r4, [r5]
 8000860:	2100      	movs	r1, #0
 8000862:	e750      	b.n	8000706 <__udivmoddi4+0xa6>
 8000864:	f1c2 0320 	rsb	r3, r2, #32
 8000868:	fa20 f103 	lsr.w	r1, r0, r3
 800086c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000870:	fa24 f303 	lsr.w	r3, r4, r3
 8000874:	4094      	lsls	r4, r2
 8000876:	430c      	orrs	r4, r1
 8000878:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800087c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000880:	fa1f f78c 	uxth.w	r7, ip
 8000884:	fbb3 f0f8 	udiv	r0, r3, r8
 8000888:	fb08 3110 	mls	r1, r8, r0, r3
 800088c:	0c23      	lsrs	r3, r4, #16
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb00 f107 	mul.w	r1, r0, r7
 8000896:	4299      	cmp	r1, r3
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x24c>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 36ff 	add.w	r6, r0, #4294967295
 80008a2:	d22c      	bcs.n	80008fe <__udivmoddi4+0x29e>
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d92a      	bls.n	80008fe <__udivmoddi4+0x29e>
 80008a8:	3802      	subs	r0, #2
 80008aa:	4463      	add	r3, ip
 80008ac:	1a5b      	subs	r3, r3, r1
 80008ae:	b2a4      	uxth	r4, r4
 80008b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008b4:	fb08 3311 	mls	r3, r8, r1, r3
 80008b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008bc:	fb01 f307 	mul.w	r3, r1, r7
 80008c0:	42a3      	cmp	r3, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x276>
 80008c4:	eb1c 0404 	adds.w	r4, ip, r4
 80008c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008cc:	d213      	bcs.n	80008f6 <__udivmoddi4+0x296>
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	d911      	bls.n	80008f6 <__udivmoddi4+0x296>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4464      	add	r4, ip
 80008d6:	1ae4      	subs	r4, r4, r3
 80008d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008dc:	e739      	b.n	8000752 <__udivmoddi4+0xf2>
 80008de:	4604      	mov	r4, r0
 80008e0:	e6f0      	b.n	80006c4 <__udivmoddi4+0x64>
 80008e2:	4608      	mov	r0, r1
 80008e4:	e706      	b.n	80006f4 <__udivmoddi4+0x94>
 80008e6:	45c8      	cmp	r8, r9
 80008e8:	d2ae      	bcs.n	8000848 <__udivmoddi4+0x1e8>
 80008ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80008ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80008f2:	3801      	subs	r0, #1
 80008f4:	e7a8      	b.n	8000848 <__udivmoddi4+0x1e8>
 80008f6:	4631      	mov	r1, r6
 80008f8:	e7ed      	b.n	80008d6 <__udivmoddi4+0x276>
 80008fa:	4603      	mov	r3, r0
 80008fc:	e799      	b.n	8000832 <__udivmoddi4+0x1d2>
 80008fe:	4630      	mov	r0, r6
 8000900:	e7d4      	b.n	80008ac <__udivmoddi4+0x24c>
 8000902:	46d6      	mov	lr, sl
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1a6>
 8000906:	4463      	add	r3, ip
 8000908:	3802      	subs	r0, #2
 800090a:	e74d      	b.n	80007a8 <__udivmoddi4+0x148>
 800090c:	4606      	mov	r6, r0
 800090e:	4623      	mov	r3, r4
 8000910:	4608      	mov	r0, r1
 8000912:	e70f      	b.n	8000734 <__udivmoddi4+0xd4>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	e730      	b.n	800077c <__udivmoddi4+0x11c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	@ 0x30
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2220      	movs	r2, #32
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f008 f915 	bl	8008b68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800093e:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000940:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000944:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000946:	4b36      	ldr	r3, [pc, #216]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000948:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800094c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000954:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800095a:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <MX_ADC1_Init+0x100>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000960:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000968:	2204      	movs	r2, #4
 800096a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <MX_ADC1_Init+0x100>)
 800096e:	2200      	movs	r2, #0
 8000970:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000974:	2201      	movs	r2, #1
 8000976:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <MX_ADC1_Init+0x100>)
 800097a:	2201      	movs	r2, #1
 800097c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097e:	4b28      	ldr	r3, [pc, #160]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000988:	2200      	movs	r2, #0
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <MX_ADC1_Init+0x100>)
 800098e:	2200      	movs	r2, #0
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_ADC1_Init+0x100>)
 800099c:	2200      	movs	r2, #0
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009bc:	2201      	movs	r2, #1
 80009be:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c0:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009c2:	f002 fabd 	bl	8002f40 <HAL_ADC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009cc:	f000 ff7e 	bl	80018cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <MX_ADC1_Init+0x100>)
 80009dc:	f003 fbdc 	bl	8004198 <HAL_ADCEx_MultiModeConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80009e6:	f000 ff71 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_ADC1_Init+0x104>)
 80009ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2306      	movs	r3, #6
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f6:	237f      	movs	r3, #127	@ 0x7f
 80009f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	2304      	movs	r3, #4
 80009fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <MX_ADC1_Init+0x100>)
 8000a08:	f002 fd48 	bl	800349c <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000a12:	f000 ff5b 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000064 	.word	0x20000064
 8000a24:	04300002 	.word	0x04300002

08000a28 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2220      	movs	r2, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f008 f897 	bl	8008b68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a3c:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <MX_ADC2_Init+0xdc>)
 8000a3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a46:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aba:	4811      	ldr	r0, [pc, #68]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000abc:	f002 fa40 	bl	8002f40 <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000ac6:	f000 ff01 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_ADC2_Init+0xe0>)
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad6:	237f      	movs	r3, #127	@ 0x7f
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ada:	2304      	movs	r3, #4
 8000adc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_ADC2_Init+0xd8>)
 8000ae8:	f002 fcd8 	bl	800349c <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000af2:	f000 feeb 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000d0 	.word	0x200000d0
 8000b04:	50000100 	.word	0x50000100
 8000b08:	0c900008 	.word	0x0c900008

08000b0c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2220      	movs	r2, #32
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f008 f81f 	bl	8008b68 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b2a:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b2c:	4a37      	ldr	r2, [pc, #220]	@ (8000c0c <MX_ADC3_Init+0x100>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000b30:	4b35      	ldr	r3, [pc, #212]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b32:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000b36:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b38:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b94:	220c      	movs	r2, #12
 8000b96:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000baa:	4817      	ldr	r0, [pc, #92]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000bac:	f002 f9c8 	bl	8002f40 <HAL_ADC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000bb6:	f000 fe89 	bl	80018cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000bc6:	f003 fae7 	bl	8004198 <HAL_ADCEx_MultiModeConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000bd0:	f000 fe7c 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_ADC3_Init+0x104>)
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be0:	237f      	movs	r3, #127	@ 0x7f
 8000be2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be4:	2304      	movs	r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_ADC3_Init+0xfc>)
 8000bf2:	f002 fc53 	bl	800349c <HAL_ADC_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000bfc:	f000 fe66 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	@ 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000013c 	.word	0x2000013c
 8000c0c:	50000400 	.word	0x50000400
 8000c10:	14f00020 	.word	0x14f00020

08000c14 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 ffa1 	bl	8008b68 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c26:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c28:	4a31      	ldr	r2, [pc, #196]	@ (8000cf0 <MX_ADC4_Init+0xdc>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c2e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000c32:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c34:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c46:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000c5e:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c90:	220c      	movs	r2, #12
 8000c92:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ca6:	4811      	ldr	r0, [pc, #68]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000ca8:	f002 f94a 	bl	8002f40 <HAL_ADC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000cb2:	f000 fe0b 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_ADC4_Init+0xe0>)
 8000cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cba:	2306      	movs	r3, #6
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc2:	237f      	movs	r3, #127	@ 0x7f
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	@ (8000cec <MX_ADC4_Init+0xd8>)
 8000cd4:	f002 fbe2 	bl	800349c <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000cde:	f000 fdf5 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001a8 	.word	0x200001a8
 8000cf0:	50000500 	.word	0x50000500
 8000cf4:	14f00020 	.word	0x14f00020

08000cf8 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 ff2f 	bl	8008b68 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d0c:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <MX_ADC5_Init+0xdc>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d10:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d12:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000d16:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d74:	220c      	movs	r2, #12
 8000d76:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000d8c:	f002 f8d8 	bl	8002f40 <HAL_ADC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000d96:	f000 fd99 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_ADC5_Init+0xe0>)
 8000d9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da6:	237f      	movs	r3, #127	@ 0x7f
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2304      	movs	r3, #4
 8000dac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_ADC5_Init+0xd8>)
 8000db8:	f002 fb70 	bl	800349c <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000dc2:	f000 fd83 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000214 	.word	0x20000214
 8000dd4:	50000600 	.word	0x50000600
 8000dd8:	08600004 	.word	0x08600004

08000ddc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0a6      	sub	sp, #152	@ 0x98
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df8:	2254      	movs	r2, #84	@ 0x54
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 feb3 	bl	8008b68 <memset>
  if(adcHandle->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e0a:	d16c      	bne.n	8000ee6 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e16:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fe83 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e28:	f000 fd50 	bl	80018cc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a9f      	ldr	r2, [pc, #636]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000e34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e36:	4b9e      	ldr	r3, [pc, #632]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10b      	bne.n	8000e56 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a9c      	ldr	r2, [pc, #624]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b9a      	ldr	r3, [pc, #616]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b97      	ldr	r3, [pc, #604]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	4a96      	ldr	r2, [pc, #600]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e62:	4b94      	ldr	r3, [pc, #592]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f003 fd61 	bl	8004950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000e90:	4a8a      	ldr	r2, [pc, #552]	@ (80010bc <HAL_ADC_MspInit+0x2e0>)
 8000e92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e94:	4b88      	ldr	r3, [pc, #544]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000e96:	2205      	movs	r2, #5
 8000e98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9a:	4b87      	ldr	r3, [pc, #540]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea0:	4b85      	ldr	r3, [pc, #532]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	4b84      	ldr	r3, [pc, #528]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eac:	4b82      	ldr	r3, [pc, #520]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb4:	4b80      	ldr	r3, [pc, #512]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec8:	487b      	ldr	r0, [pc, #492]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000eca:	f003 fb7d 	bl	80045c8 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000ed4:	f000 fcfa 	bl	80018cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a77      	ldr	r2, [pc, #476]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ede:	4a76      	ldr	r2, [pc, #472]	@ (80010b8 <HAL_ADC_MspInit+0x2dc>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000ee4:	e1e0      	b.n	80012a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a75      	ldr	r2, [pc, #468]	@ (80010c0 <HAL_ADC_MspInit+0x2e4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d16c      	bne.n	8000fca <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ef0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ef6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000efa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fe11 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000f0c:	f000 fcde 	bl	80018cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f10:	4b67      	ldr	r3, [pc, #412]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a66      	ldr	r2, [pc, #408]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000f18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f1a:	4b65      	ldr	r3, [pc, #404]	@ (80010b0 <HAL_ADC_MspInit+0x2d4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10b      	bne.n	8000f3a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f22:	4b64      	ldr	r3, [pc, #400]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a63      	ldr	r2, [pc, #396]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b61      	ldr	r3, [pc, #388]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b5b      	ldr	r3, [pc, #364]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
 8000f50:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000f52:	2340      	movs	r3, #64	@ 0x40
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f003 fcef 	bl	8004950 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000f72:	4b54      	ldr	r3, [pc, #336]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f74:	4a54      	ldr	r2, [pc, #336]	@ (80010c8 <HAL_ADC_MspInit+0x2ec>)
 8000f76:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f78:	4b52      	ldr	r3, [pc, #328]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f7a:	2224      	movs	r2, #36	@ 0x24
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7e:	4b51      	ldr	r3, [pc, #324]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f98:	4b4a      	ldr	r3, [pc, #296]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f9e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000fa0:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b47      	ldr	r3, [pc, #284]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000fac:	4845      	ldr	r0, [pc, #276]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000fae:	f003 fb0b 	bl	80045c8 <HAL_DMA_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000fb8:	f000 fc88 	bl	80018cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a41      	ldr	r2, [pc, #260]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000fc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fc2:	4a40      	ldr	r2, [pc, #256]	@ (80010c4 <HAL_ADC_MspInit+0x2e8>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000fc8:	e16e      	b.n	80012a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a3f      	ldr	r2, [pc, #252]	@ (80010cc <HAL_ADC_MspInit+0x2f0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	f040 8085 	bne.w	80010e0 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000fdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fd9e 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000ff2:	f000 fc6b 	bl	80018cc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ff6:	4b36      	ldr	r3, [pc, #216]	@ (80010d0 <HAL_ADC_MspInit+0x2f4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a34      	ldr	r2, [pc, #208]	@ (80010d0 <HAL_ADC_MspInit+0x2f4>)
 8000ffe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001000:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_ADC_MspInit+0x2f4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10b      	bne.n	8001020 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	4a29      	ldr	r2, [pc, #164]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <HAL_ADC_MspInit+0x2d8>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001050:	4619      	mov	r1, r3
 8001052:	4820      	ldr	r0, [pc, #128]	@ (80010d4 <HAL_ADC_MspInit+0x2f8>)
 8001054:	f003 fc7c 	bl	8004950 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 800105a:	4a20      	ldr	r2, [pc, #128]	@ (80010dc <HAL_ADC_MspInit+0x300>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001060:	2225      	movs	r2, #37	@ 0x25
 8001062:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001078:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800107c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001088:	2220      	movs	r2, #32
 800108a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 8001094:	f003 fa98 	bl	80045c8 <HAL_DMA_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 800109e:	f000 fc15 	bl	80018cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 80010a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_ADC_MspInit+0x2fc>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80010ae:	e0fb      	b.n	80012a8 <HAL_ADC_MspInit+0x4cc>
 80010b0:	20000460 	.word	0x20000460
 80010b4:	40021000 	.word	0x40021000
 80010b8:	20000280 	.word	0x20000280
 80010bc:	40020008 	.word	0x40020008
 80010c0:	50000100 	.word	0x50000100
 80010c4:	200002e0 	.word	0x200002e0
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	50000400 	.word	0x50000400
 80010d0:	20000464 	.word	0x20000464
 80010d4:	48000400 	.word	0x48000400
 80010d8:	20000340 	.word	0x20000340
 80010dc:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a72      	ldr	r2, [pc, #456]	@ (80012b0 <HAL_ADC_MspInit+0x4d4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d16c      	bne.n	80011c4 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80010ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80010f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80010f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fd14 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001106:	f000 fbe1 	bl	80018cc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800110a:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a68      	ldr	r2, [pc, #416]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 8001112:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001114:	4b67      	ldr	r3, [pc, #412]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10b      	bne.n	8001134 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800111c:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	4a65      	ldr	r2, [pc, #404]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001128:	4b63      	ldr	r3, [pc, #396]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b60      	ldr	r3, [pc, #384]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a5f      	ldr	r2, [pc, #380]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001140:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 800114c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001164:	4619      	mov	r1, r3
 8001166:	4855      	ldr	r0, [pc, #340]	@ (80012bc <HAL_ADC_MspInit+0x4e0>)
 8001168:	f003 fbf2 	bl	8004950 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800116c:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 800116e:	4a55      	ldr	r2, [pc, #340]	@ (80012c4 <HAL_ADC_MspInit+0x4e8>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001172:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 8001174:	2226      	movs	r2, #38	@ 0x26
 8001176:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001178:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	4b4e      	ldr	r3, [pc, #312]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118a:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 800118c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001190:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001192:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 8001194:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001198:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800119a:	4b49      	ldr	r3, [pc, #292]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 800119c:	2220      	movs	r2, #32
 800119e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80011a6:	4846      	ldr	r0, [pc, #280]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 80011a8:	f003 fa0e 	bl	80045c8 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80011b2:	f000 fb8b 	bl	80018cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a41      	ldr	r2, [pc, #260]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80011bc:	4a40      	ldr	r2, [pc, #256]	@ (80012c0 <HAL_ADC_MspInit+0x4e4>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80011c2:	e071      	b.n	80012a8 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3f      	ldr	r2, [pc, #252]	@ (80012c8 <HAL_ADC_MspInit+0x4ec>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d16c      	bne.n	80012a8 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80011d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fca2 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80011ea:	f000 fb6f 	bl	80018cc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ee:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a2f      	ldr	r2, [pc, #188]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 80011f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <HAL_ADC_MspInit+0x4d8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d10b      	bne.n	8001218 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001224:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <HAL_ADC_MspInit+0x4dc>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001230:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001238:	2303      	movs	r3, #3
 800123a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f003 fb7f 	bl	8004950 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001254:	4a1e      	ldr	r2, [pc, #120]	@ (80012d0 <HAL_ADC_MspInit+0x4f4>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001258:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 800125a:	2227      	movs	r2, #39	@ 0x27
 800125c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001276:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 800127a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001282:	2220      	movs	r2, #32
 8001284:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800128c:	480f      	ldr	r0, [pc, #60]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 800128e:	f003 f99b 	bl	80045c8 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8001298:	f000 fb18 	bl	80018cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 80012a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_ADC_MspInit+0x4f0>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80012a8:	bf00      	nop
 80012aa:	3798      	adds	r7, #152	@ 0x98
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	50000500 	.word	0x50000500
 80012b4:	20000464 	.word	0x20000464
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	200003a0 	.word	0x200003a0
 80012c4:	40020044 	.word	0x40020044
 80012c8:	50000600 	.word	0x50000600
 80012cc:	20000400 	.word	0x20000400
 80012d0:	40020058 	.word	0x40020058

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_DMA_Init+0x44>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <MX_DMA_Init+0x44>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_DMA_Init+0x44>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_DMA_Init+0x44>)
 80012f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <MX_DMA_Init+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_DMA_Init+0x44>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f005 f8f1 	bl	8006510 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f005 f8ed 	bl	8006510 <HAL_TIM_IC_Start_IT>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <processarCaptura+0x94>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d108      	bne.n	8001366 <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800135a:	4a1f      	ldr	r2, [pc, #124]	@ (80013d8 <processarCaptura+0x98>)
 800135c:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <processarCaptura+0x94>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001364:	e02f      	b.n	80013c6 <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136c:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <processarCaptura+0x9c>)
 800136e:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <processarCaptura+0x9c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <processarCaptura+0x98>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <processarCaptura+0xa0>)
 800137c:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <processarCaptura+0xa4>)
 8001380:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <processarCaptura+0xa0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013e8 <processarCaptura+0xa8>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <processarCaptura+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000047c 	.word	0x2000047c
 80013d8:	20000468 	.word	0x20000468
 80013dc:	2000046c 	.word	0x2000046c
 80013e0:	20000478 	.word	0x20000478
 80013e4:	49742400 	.word	0x49742400
 80013e8:	41a347ae 	.word	0x41a347ae

080013ec <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <processarCaptura2+0x94>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001406:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <processarCaptura2+0x98>)
 8001408:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <processarCaptura2+0x94>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 8001410:	e02f      	b.n	8001472 <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <processarCaptura2+0x9c>)
 800141a:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <processarCaptura2+0x9c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <processarCaptura2+0x98>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <processarCaptura2+0xa0>)
 8001428:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <processarCaptura2+0xa4>)
 800142c:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <processarCaptura2+0xa0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143a:	edd7 6a05 	vldr	s13, [r7, #20]
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001456:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001494 <processarCaptura2+0xa8>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <processarCaptura2+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000484 	.word	0x20000484
 8001484:	20000470 	.word	0x20000470
 8001488:	20000474 	.word	0x20000474
 800148c:	20000480 	.word	0x20000480
 8001490:	49742400 	.word	0x49742400
 8001494:	41a347ae 	.word	0x41a347ae

08001498 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d105      	bne.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80014aa:	490b      	ldr	r1, [pc, #44]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x40>)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff47 	bl	8001340 <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);

    }
}
 80014b2:	e008      	b.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x44>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d104      	bne.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80014bc:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x48>)
 80014be:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff93 	bl	80013ec <processarCaptura2>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000628 	.word	0x20000628
 80014d4:	20000490 	.word	0x20000490
 80014d8:	20000488 	.word	0x20000488
 80014dc:	20000674 	.word	0x20000674
 80014e0:	20000494 	.word	0x20000494
 80014e4:	2000048c 	.word	0x2000048c

080014e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <MX_GPIO_Init+0x104>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a34      	ldr	r2, [pc, #208]	@ (80015ec <MX_GPIO_Init+0x104>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_GPIO_Init+0x104>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <MX_GPIO_Init+0x104>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <MX_GPIO_Init+0x104>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001564:	4822      	ldr	r0, [pc, #136]	@ (80015f0 <MX_GPIO_Init+0x108>)
 8001566:	f003 fb75 	bl	8004c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f003 fb6e 	bl	8004c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4819      	ldr	r0, [pc, #100]	@ (80015f4 <MX_GPIO_Init+0x10c>)
 8001590:	f003 f9de 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 8001594:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4810      	ldr	r0, [pc, #64]	@ (80015f0 <MX_GPIO_Init+0x108>)
 80015ae:	f003 f9cf 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80015b2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ce:	f003 f9bf 	bl	8004950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2028      	movs	r0, #40	@ 0x28
 80015d8:	f002 ffc1 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015dc:	2028      	movs	r0, #40	@ 0x28
 80015de:	f002 ffd8 	bl	8004592 <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800

080015f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_I2C2_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <MX_I2C2_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_I2C2_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <MX_I2C2_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_I2C2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <MX_I2C2_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <MX_I2C2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_I2C2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_I2C2_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_I2C2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_I2C2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001632:	480e      	ldr	r0, [pc, #56]	@ (800166c <MX_I2C2_Init+0x74>)
 8001634:	f003 fb49 	bl	8004cca <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800163e:	f000 f945 	bl	80018cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <MX_I2C2_Init+0x74>)
 8001646:	f003 fbf5 	bl	8004e34 <HAL_I2CEx_ConfigAnalogFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001650:	f000 f93c 	bl	80018cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_I2C2_Init+0x74>)
 8001658:	f003 fc37 	bl	8004eca <HAL_I2CEx_ConfigDigitalFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 f933 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000498 	.word	0x20000498
 8001670:	40005800 	.word	0x40005800
 8001674:	30a0a7fb 	.word	0x30a0a7fb

08001678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a0      	sub	sp, #128	@ 0x80
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	2254      	movs	r2, #84	@ 0x54
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f007 fa65 	bl	8008b68 <memset>
  if(i2cHandle->Instance==I2C2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <HAL_I2C_MspInit+0xf0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d15b      	bne.n	8001760 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fa37 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f000 f904 	bl	80018cc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	4a28      	ldr	r2, [pc, #160]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d0:	4b26      	ldr	r3, [pc, #152]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4a22      	ldr	r2, [pc, #136]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 80016f4:	2310      	movs	r3, #16
 80016f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f8:	2312      	movs	r3, #18
 80016fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001704:	2304      	movs	r3, #4
 8001706:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800170c:	4619      	mov	r1, r3
 800170e:	4818      	ldr	r0, [pc, #96]	@ (8001770 <HAL_I2C_MspInit+0xf8>)
 8001710:	f003 f91e 	bl	8004950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001718:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001726:	2304      	movs	r3, #4
 8001728:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001734:	f003 f90c 	bl	8004950 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 800173e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001742:	6593      	str	r3, [r2, #88]	@ 0x58
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_I2C_MspInit+0xf4>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2021      	movs	r0, #33	@ 0x21
 8001756:	f002 ff02 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800175a:	2021      	movs	r0, #33	@ 0x21
 800175c:	f002 ff19 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001760:	bf00      	nop
 8001762:	3780      	adds	r7, #128	@ 0x80
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005800 	.word	0x40005800
 800176c:	40021000 	.word	0x40021000
 8001770:	48000800 	.word	0x48000800

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f001 f92d 	bl	80029d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f84a 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f7ff feb2 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001784:	f7ff fda6 	bl	80012d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001788:	f001 f85a 	bl	8002840 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800178c:	f000 fd68 	bl	8002260 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001790:	f7ff ff32 	bl	80015f8 <MX_I2C2_Init>
  MX_ADC3_Init();
 8001794:	f7ff f9ba 	bl	8000b0c <MX_ADC3_Init>
  MX_ADC1_Init();
 8001798:	f7ff f8c2 	bl	8000920 <MX_ADC1_Init>
  MX_ADC2_Init();
 800179c:	f7ff f944 	bl	8000a28 <MX_ADC2_Init>
  MX_ADC4_Init();
 80017a0:	f7ff fa38 	bl	8000c14 <MX_ADC4_Init>
  MX_ADC5_Init();
 80017a4:	f7ff faa8 	bl	8000cf8 <MX_ADC5_Init>
  MX_TIM16_Init();
 80017a8:	f000 fe9e 	bl	80024e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80017ac:	f000 fee6 	bl	800257c <MX_TIM17_Init>
  MX_TIM6_Init();
 80017b0:	f000 fe12 	bl	80023d8 <MX_TIM6_Init>
  MX_TIM15_Init();
 80017b4:	f000 fe46 	bl	8002444 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 80017b8:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <main+0x7c>)
 80017ba:	f000 f88d 	bl	80018d8 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <main+0x80>)
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <main+0x84>)
 80017c2:	f7ff fdab 	bl	800131c <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <main+0x88>)
 80017c8:	f000 f8f0 	bl	80019ac <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <main+0x8c>)
 80017ce:	f000 f909 	bl	80019e4 <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <main+0x90>)
 80017d4:	f000 f922 	bl	8001a1c <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 80017d8:	480b      	ldr	r0, [pc, #44]	@ (8001808 <main+0x94>)
 80017da:	f000 f93b 	bl	8001a54 <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <main+0x98>)
 80017e0:	f000 f954 	bl	8001a8c <vLineSensor5Init>
  HAL_TIM_Base_Start_IT(&htim15);
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <main+0x9c>)
 80017e6:	f004 fc45 	bl	8006074 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 80017ea:	bf00      	nop
 80017ec:	e7fd      	b.n	80017ea <main+0x76>
 80017ee:	bf00      	nop
 80017f0:	20000544 	.word	0x20000544
 80017f4:	20000674 	.word	0x20000674
 80017f8:	20000628 	.word	0x20000628
 80017fc:	20000064 	.word	0x20000064
 8001800:	200000d0 	.word	0x200000d0
 8001804:	2000013c 	.word	0x2000013c
 8001808:	200001a8 	.word	0x200001a8
 800180c:	20000214 	.word	0x20000214
 8001810:	200005dc 	.word	0x200005dc

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	@ 0x50
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	2238      	movs	r2, #56	@ 0x38
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f007 f9a0 	bl	8008b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001836:	2000      	movs	r0, #0
 8001838:	f003 fb94 	bl	8004f64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001852:	2304      	movs	r3, #4
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001856:	2355      	movs	r3, #85	@ 0x55
 8001858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800185e:	2302      	movs	r3, #2
 8001860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fc2e 	bl	80050cc <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001876:	f000 f829 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	2303      	movs	r3, #3
 8001880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2104      	movs	r1, #4
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ff2c 	bl	80056f0 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800189e:	f000 f815 	bl	80018cc <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	@ 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	// Chamada a cada 10 ms
	if (htim == &htim15){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x14>
		vLineSensorPIDControl();
 80018bc:	f000 fb16 	bl	8001eec <vLineSensorPIDControl>
	}
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200005dc 	.word	0x200005dc

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80018e0:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <vMotorInit+0x60>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <vMotorInit+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fc9b 	bl	8006228 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <vMotorInit+0x60>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2104      	movs	r1, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fc95 	bl	8006228 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001904:	480d      	ldr	r0, [pc, #52]	@ (800193c <vMotorInit+0x64>)
 8001906:	f003 f9a5 	bl	8004c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001910:	480a      	ldr	r0, [pc, #40]	@ (800193c <vMotorInit+0x64>)
 8001912:	f003 f99f 	bl	8004c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	4808      	ldr	r0, [pc, #32]	@ (800193c <vMotorInit+0x64>)
 800191c:	f003 f99a 	bl	8004c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192a:	f003 f993 	bl	8004c54 <HAL_GPIO_WritePin>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200004ec 	.word	0x200004ec
 800193c:	48000400 	.word	0x48000400

08001940 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0a01 	vstr	s0, [r7, #4]
 800194a:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000 -1);
 800194e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001952:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019a4 <vSetRodasDC+0x64>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800195e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <vSetRodasDC+0x68>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196c:	ee17 2a90 	vmov	r2, s15
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000 -1);
 8001972:	edd7 7a00 	vldr	s15, [r7]
 8001976:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80019a4 <vSetRodasDC+0x64>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <vSetRodasDC+0x68>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001990:	ee17 2a90 	vmov	r2, s15
 8001994:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	447a0000 	.word	0x447a0000
 80019a8:	200004ec 	.word	0x200004ec

080019ac <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 80019b4:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <vLineSensor1Init+0x30>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <vLineSensor1Init+0x30>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	217f      	movs	r1, #127	@ 0x7f
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fb87 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <vLineSensor1Init+0x30>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4904      	ldr	r1, [pc, #16]	@ (80019e0 <vLineSensor1Init+0x34>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 fc72 	bl	80032b8 <HAL_ADC_Start_DMA>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200004f0 	.word	0x200004f0
 80019e0:	20000504 	.word	0x20000504

080019e4 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 80019ec:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <vLineSensor2Init+0x30>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <vLineSensor2Init+0x30>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	217f      	movs	r1, #127	@ 0x7f
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fb6b 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <vLineSensor2Init+0x30>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <vLineSensor2Init+0x34>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fc56 	bl	80032b8 <HAL_ADC_Start_DMA>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200004f4 	.word	0x200004f4
 8001a18:	20000508 	.word	0x20000508

08001a1c <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 8001a24:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <vLineSensor3Init+0x30>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <vLineSensor3Init+0x30>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	217f      	movs	r1, #127	@ 0x7f
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fb4f 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <vLineSensor3Init+0x30>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4904      	ldr	r1, [pc, #16]	@ (8001a50 <vLineSensor3Init+0x34>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 fc3a 	bl	80032b8 <HAL_ADC_Start_DMA>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200004f8 	.word	0x200004f8
 8001a50:	2000050c 	.word	0x2000050c

08001a54 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8001a5c:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <vLineSensor4Init+0x30>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <vLineSensor4Init+0x30>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	217f      	movs	r1, #127	@ 0x7f
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fb33 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <vLineSensor4Init+0x30>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4904      	ldr	r1, [pc, #16]	@ (8001a88 <vLineSensor4Init+0x34>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fc1e 	bl	80032b8 <HAL_ADC_Start_DMA>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200004fc 	.word	0x200004fc
 8001a88:	20000510 	.word	0x20000510

08001a8c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8001a94:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <vLineSensor5Init+0x30>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <vLineSensor5Init+0x30>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	217f      	movs	r1, #127	@ 0x7f
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fb17 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <vLineSensor5Init+0x30>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4904      	ldr	r1, [pc, #16]	@ (8001ac0 <vLineSensor5Init+0x34>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fc02 	bl	80032b8 <HAL_ADC_Start_DMA>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000500 	.word	0x20000500
 8001ac0:	20000514 	.word	0x20000514

08001ac4 <fLineSensorCalculatePosition>:


// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8001ac4:	b4b0      	push	{r4, r5, r7}
 8001ac6:	b091      	sub	sp, #68	@ 0x44
 8001ac8:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <fLineSensorCalculatePosition+0x120>)
 8001acc:	f107 0418 	add.w	r4, r7, #24
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8001ae6:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <fLineSensorCalculatePosition+0x124>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <fLineSensorCalculatePosition+0x128>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <fLineSensorCalculatePosition+0x12c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <fLineSensorCalculatePosition+0x130>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf8 <fLineSensorCalculatePosition+0x134>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b08:	e04c      	b.n	8001ba4 <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3340      	adds	r3, #64	@ 0x40
 8001b10:	443b      	add	r3, r7
 8001b12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b16:	4939      	ldr	r1, [pc, #228]	@ (8001bfc <fLineSensorCalculatePosition+0x138>)
 8001b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d33d      	bcc.n	8001b9e <fLineSensorCalculatePosition+0xda>
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	3340      	adds	r3, #64	@ 0x40
 8001b28:	443b      	add	r3, r7
 8001b2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b2e:	4934      	ldr	r1, [pc, #208]	@ (8001c00 <fLineSensorCalculatePosition+0x13c>)
 8001b30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d831      	bhi.n	8001b9e <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3340      	adds	r3, #64	@ 0x40
 8001b40:	443b      	add	r3, r7
 8001b42:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b46:	492d      	ldr	r1, [pc, #180]	@ (8001bfc <fLineSensorCalculatePosition+0x138>)
 8001b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	3301      	adds	r3, #1
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8001b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	3340      	adds	r3, #64	@ 0x40
 8001b6c:	443b      	add	r3, r7
 8001b6e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b82:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8001b8e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001b92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	ddaf      	ble.n	8001b0a <fLineSensorCalculatePosition+0x46>
        }
    }

    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8001baa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	d101      	bne.n	8001bbc <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <fLineSensorCalculatePosition+0x140>)
 8001bba:	e00b      	b.n	8001bd4 <fLineSensorCalculatePosition+0x110>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8001bbc:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001bc0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    posicao3 = posicao;
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <fLineSensorCalculatePosition+0x144>)
 8001bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd0:	6013      	str	r3, [r2, #0]
    return posicao;
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	3744      	adds	r7, #68	@ 0x44
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bcb0      	pop	{r4, r5, r7}
 8001be2:	4770      	bx	lr
 8001be4:	08008bd8 	.word	0x08008bd8
 8001be8:	20000504 	.word	0x20000504
 8001bec:	20000508 	.word	0x20000508
 8001bf0:	2000050c 	.word	0x2000050c
 8001bf4:	20000510 	.word	0x20000510
 8001bf8:	20000514 	.word	0x20000514
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000014 	.word	0x20000014
 8001c04:	42c60000 	.word	0x42c60000
 8001c08:	20000524 	.word	0x20000524

08001c0c <isSensor3DetectingLine>:

bool isSensor3DetectingLine() {
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    return (lineSensor3Value >= minThresholds[2] && lineSensor3Value <= maxThresholds[2]);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <isSensor3DetectingLine+0x38>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <isSensor3DetectingLine+0x3c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d808      	bhi.n	8001c30 <isSensor3DetectingLine+0x24>
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <isSensor3DetectingLine+0x40>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <isSensor3DetectingLine+0x3c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d301      	bcc.n	8001c30 <isSensor3DetectingLine+0x24>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <isSensor3DetectingLine+0x26>
 8001c30:	2300      	movs	r3, #0
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	2000050c 	.word	0x2000050c
 8001c4c:	20000014 	.word	0x20000014

08001c50 <isSensor4DetectingLine>:

bool isSensor4DetectingLine() {
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
    return (lineSensor4Value >= minThresholds[3] && lineSensor4Value <= maxThresholds[3]);
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <isSensor4DetectingLine+0x38>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <isSensor4DetectingLine+0x3c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d808      	bhi.n	8001c74 <isSensor4DetectingLine+0x24>
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <isSensor4DetectingLine+0x40>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <isSensor4DetectingLine+0x3c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d301      	bcc.n	8001c74 <isSensor4DetectingLine+0x24>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <isSensor4DetectingLine+0x26>
 8001c74:	2300      	movs	r3, #0
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000510 	.word	0x20000510
 8001c90:	20000014 	.word	0x20000014

08001c94 <isSensor2DetectingLine>:

bool isSensor2DetectingLine() {
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
    return (lineSensor2Value >= minThresholds[1] && lineSensor2Value <= maxThresholds[2]);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <isSensor2DetectingLine+0x38>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <isSensor2DetectingLine+0x3c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d808      	bhi.n	8001cb8 <isSensor2DetectingLine+0x24>
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <isSensor2DetectingLine+0x40>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <isSensor2DetectingLine+0x3c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d301      	bcc.n	8001cb8 <isSensor2DetectingLine+0x24>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <isSensor2DetectingLine+0x26>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000508 	.word	0x20000508
 8001cd4:	20000014 	.word	0x20000014

08001cd8 <ajustarVelocidadeMotores>:

void ajustarVelocidadeMotores(float left_duty_cycle, float right_duty_cycle) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ce2:	edc7 0a00 	vstr	s1, [r7]
    // Obtém as velocidades atuais dos motores
    float velEsquerda = velocidadeRodaEsquerda;  // em cm/s
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <ajustarVelocidadeMotores+0x200>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]
    float velDireita = velocidadeRodaDireita;    // em cm/s
 8001cec:	4b7b      	ldr	r3, [pc, #492]	@ (8001edc <ajustarVelocidadeMotores+0x204>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]

    // Se o sensor 3 e o 4 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor4DetectingLine()) {
 8001cf2:	f7ff ff8b 	bl	8001c0c <isSensor3DetectingLine>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d028      	beq.n	8001d4e <ajustarVelocidadeMotores+0x76>
 8001cfc:	f7ff ffa8 	bl	8001c50 <isSensor4DetectingLine>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <ajustarVelocidadeMotores+0x76>
        left_duty_cycle = max_duty_cycle;
 8001d0c:	4b74      	ldr	r3, [pc, #464]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle - 0.1;
 8001d12:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fbe2 	bl	80004e0 <__aeabi_f2d>
 8001d1c:	a36c      	add	r3, pc, #432	@ (adr r3, 8001ed0 <ajustarVelocidadeMotores+0x1f8>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fa7d 	bl	8000220 <__aeabi_dsub>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fc2f 	bl	8000590 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 8001d36:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee4 <ajustarVelocidadeMotores+0x20c>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee8 <ajustarVelocidadeMotores+0x210>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8001d42:	edd7 0a00 	vldr	s1, [r7]
 8001d46:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d4a:	f7ff fdf9 	bl	8001940 <vSetRodasDC>
    }

    // Se o sensor 3 e o 2 estiverem detectando a linha branca
    if (isSensor3DetectingLine()&& !isSensor2DetectingLine()) {
 8001d4e:	f7ff ff5d 	bl	8001c0c <isSensor3DetectingLine>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d037      	beq.n	8001dc8 <ajustarVelocidadeMotores+0xf0>
 8001d58:	f7ff ff9c 	bl	8001c94 <isSensor2DetectingLine>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f083 0301 	eor.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d02f      	beq.n	8001dc8 <ajustarVelocidadeMotores+0xf0>
        left_duty_cycle = max_duty_cycle - 0.1;
 8001d68:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbb7 	bl	80004e0 <__aeabi_f2d>
 8001d72:	a357      	add	r3, pc, #348	@ (adr r3, 8001ed0 <ajustarVelocidadeMotores+0x1f8>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fa52 	bl	8000220 <__aeabi_dsub>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe fc04 	bl	8000590 <__aeabi_d2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle +0.1 ;
 8001d8c:	4b54      	ldr	r3, [pc, #336]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fba5 	bl	80004e0 <__aeabi_f2d>
 8001d96:	a34e      	add	r3, pc, #312	@ (adr r3, 8001ed0 <ajustarVelocidadeMotores+0x1f8>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fa42 	bl	8000224 <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fbf2 	bl	8000590 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 8001db0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee4 <ajustarVelocidadeMotores+0x20c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <ajustarVelocidadeMotores+0x210>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8001dbc:	edd7 0a00 	vldr	s1, [r7]
 8001dc0:	ed97 0a01 	vldr	s0, [r7, #4]
 8001dc4:	f7ff fdbc 	bl	8001940 <vSetRodasDC>
    }

    if (isSensor3DetectingLine()) {
 8001dc8:	f7ff ff20 	bl	8001c0c <isSensor3DetectingLine>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d011      	beq.n	8001df6 <ajustarVelocidadeMotores+0x11e>
        left_duty_cycle = max_duty_cycle;
 8001dd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	607b      	str	r3, [r7, #4]
        right_duty_cycle = max_duty_cycle;
 8001dd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	603b      	str	r3, [r7, #0]
        fsaidaDutyEsquerda = left_duty_cycle;
 8001dde:	4a41      	ldr	r2, [pc, #260]	@ (8001ee4 <ajustarVelocidadeMotores+0x20c>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
        fsaidaDutyDireita = right_duty_cycle;
 8001de4:	4a40      	ldr	r2, [pc, #256]	@ (8001ee8 <ajustarVelocidadeMotores+0x210>)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6013      	str	r3, [r2, #0]
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8001dea:	edd7 0a00 	vldr	s1, [r7]
 8001dee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001df2:	f7ff fda5 	bl	8001940 <vSetRodasDC>
    }

    // Se a velocidade da roda esquerda é maior, ajustamos a direita
    if (velEsquerda > velDireita) {
 8001df6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	dd26      	ble.n	8001e56 <ajustarVelocidadeMotores+0x17e>
        float ajuste = velEsquerda / velDireita; // Fator de ajuste
 8001e08:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e14:	edc7 7a02 	vstr	s15, [r7, #8]
        float novoDutyCycleDireita = right_duty_cycle * ajuste;
 8001e18:	ed97 7a00 	vldr	s14, [r7]
 8001e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	edc7 7a07 	vstr	s15, [r7, #28]
        //EsquMaiorDir = novoDutyCycleDireita;
        fsaidaDutyDireita =novoDutyCycleDireita;
 8001e28:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee8 <ajustarVelocidadeMotores+0x210>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	6013      	str	r3, [r2, #0]
        // Limita o novo duty cycle para o máximo permitido
        if (novoDutyCycleDireita > max_duty_cycle) {
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	dd02      	ble.n	8001e48 <ajustarVelocidadeMotores+0x170>
            novoDutyCycleDireita = max_duty_cycle;
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61fb      	str	r3, [r7, #28]
        }
        vSetRodasDC(left_duty_cycle, novoDutyCycleDireita);
 8001e48:	edd7 0a07 	vldr	s1, [r7, #28]
 8001e4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e50:	f7ff fd76 	bl	8001940 <vSetRodasDC>
    }
    else {
        // Se as velocidades estão equilibradas, aplica os duty cycles normais
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
    }
}
 8001e54:	e035      	b.n	8001ec2 <ajustarVelocidadeMotores+0x1ea>
    else if (velDireita > velEsquerda) {
 8001e56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	dd26      	ble.n	8001eb6 <ajustarVelocidadeMotores+0x1de>
        float ajuste = velDireita / velEsquerda; // Fator de ajuste
 8001e68:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	edc7 7a03 	vstr	s15, [r7, #12]
        float novoDutyCycleEsquerda = left_duty_cycle * ajuste;
 8001e78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	edc7 7a06 	vstr	s15, [r7, #24]
        fsaidaDutyEsquerda = novoDutyCycleEsquerda;
 8001e88:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <ajustarVelocidadeMotores+0x20c>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
        if (novoDutyCycleEsquerda > max_duty_cycle) {
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	dd02      	ble.n	8001ea8 <ajustarVelocidadeMotores+0x1d0>
            novoDutyCycleEsquerda = max_duty_cycle;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <ajustarVelocidadeMotores+0x208>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
        vSetRodasDC(novoDutyCycleEsquerda, right_duty_cycle);
 8001ea8:	edd7 0a00 	vldr	s1, [r7]
 8001eac:	ed97 0a06 	vldr	s0, [r7, #24]
 8001eb0:	f7ff fd46 	bl	8001940 <vSetRodasDC>
}
 8001eb4:	e005      	b.n	8001ec2 <ajustarVelocidadeMotores+0x1ea>
        vSetRodasDC(left_duty_cycle, right_duty_cycle);
 8001eb6:	edd7 0a00 	vldr	s1, [r7]
 8001eba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ebe:	f7ff fd3f 	bl	8001940 <vSetRodasDC>
}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	9999999a 	.word	0x9999999a
 8001ed4:	3fb99999 	.word	0x3fb99999
 8001ed8:	20000490 	.word	0x20000490
 8001edc:	20000494 	.word	0x20000494
 8001ee0:	20000038 	.word	0x20000038
 8001ee4:	2000051c 	.word	0x2000051c
 8001ee8:	20000520 	.word	0x20000520

08001eec <vLineSensorPIDControl>:


void vLineSensorPIDControl(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 8001ef2:	f000 fdd5 	bl	8002aa0 <HAL_GetTick>
 8001ef6:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 8001ef8:	4b77      	ldr	r3, [pc, #476]	@ (80020d8 <vLineSensorPIDControl+0x1ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f08:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80020dc <vLineSensorPIDControl+0x1f0>
 8001f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f10:	4b73      	ldr	r3, [pc, #460]	@ (80020e0 <vLineSensorPIDControl+0x1f4>)
 8001f12:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8001f16:	4b72      	ldr	r3, [pc, #456]	@ (80020e0 <vLineSensorPIDControl+0x1f4>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	d802      	bhi.n	8001f2c <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8001f26:	4b6e      	ldr	r3, [pc, #440]	@ (80020e0 <vLineSensorPIDControl+0x1f4>)
 8001f28:	4a6e      	ldr	r2, [pc, #440]	@ (80020e4 <vLineSensorPIDControl+0x1f8>)
 8001f2a:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 8001f2c:	f7ff fdca 	bl	8001ac4 <fLineSensorCalculatePosition>
 8001f30:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8001f34:	edd7 7a00 	vldr	s15, [r7]
 8001f38:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80020e8 <vLineSensorPIDControl+0x1fc>
 8001f3c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d106      	bne.n	8001f54 <vLineSensorPIDControl+0x68>
        // Se nenhum sensor detectar a linha, o carrinho pode parar ou continuar em frente
        vSetRodasDC(0, 0);
 8001f46:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80020ec <vLineSensorPIDControl+0x200>
 8001f4a:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80020ec <vLineSensorPIDControl+0x200>
 8001f4e:	f7ff fcf7 	bl	8001940 <vSetRodasDC>
        return;
 8001f52:	e0be      	b.n	80020d2 <vLineSensorPIDControl+0x1e6>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position; // Inverte o sinal para correção na direção oposta
 8001f54:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80020ec <vLineSensorPIDControl+0x200>
 8001f58:	edd7 7a00 	vldr	s15, [r7]
 8001f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f60:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <vLineSensorPIDControl+0x204>)
 8001f62:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8001f66:	4b62      	ldr	r3, [pc, #392]	@ (80020f0 <vLineSensorPIDControl+0x204>)
 8001f68:	ed93 7a00 	vldr	s14, [r3]
 8001f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <vLineSensorPIDControl+0x1f4>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f76:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <vLineSensorPIDControl+0x208>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <vLineSensorPIDControl+0x208>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8001f86:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <vLineSensorPIDControl+0x204>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80020f8 <vLineSensorPIDControl+0x20c>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f96:	4b52      	ldr	r3, [pc, #328]	@ (80020e0 <vLineSensorPIDControl+0x1f4>)
 8001f98:	ed93 7a00 	vldr	s14, [r3]
 8001f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa0:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <vLineSensorPIDControl+0x210>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 8001fa6:	4b56      	ldr	r3, [pc, #344]	@ (8002100 <vLineSensorPIDControl+0x214>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	4b50      	ldr	r3, [pc, #320]	@ (80020f0 <vLineSensorPIDControl+0x204>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <vLineSensorPIDControl+0x218>)
 8001fb8:	edd3 6a00 	vldr	s13, [r3]
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80020f4 <vLineSensorPIDControl+0x208>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fca:	4b4f      	ldr	r3, [pc, #316]	@ (8002108 <vLineSensorPIDControl+0x21c>)
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <vLineSensorPIDControl+0x210>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fde:	eef1 7a67 	vneg.f32	s15, s15
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800210c <vLineSensorPIDControl+0x220>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha = control_output;
 8001fe8:	4b48      	ldr	r3, [pc, #288]	@ (800210c <vLineSensorPIDControl+0x220>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <vLineSensorPIDControl+0x224>)
 8001fee:	6013      	str	r3, [r2, #0]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 8001ff0:	4b46      	ldr	r3, [pc, #280]	@ (800210c <vLineSensorPIDControl+0x220>)
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <vLineSensorPIDControl+0x228>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	dd03      	ble.n	800200e <vLineSensorPIDControl+0x122>
 8002006:	4b43      	ldr	r3, [pc, #268]	@ (8002114 <vLineSensorPIDControl+0x228>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a40      	ldr	r2, [pc, #256]	@ (800210c <vLineSensorPIDControl+0x220>)
 800200c:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 800200e:	4b41      	ldr	r3, [pc, #260]	@ (8002114 <vLineSensorPIDControl+0x228>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	eeb1 7a67 	vneg.f32	s14, s15
 8002018:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <vLineSensorPIDControl+0x220>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	dd07      	ble.n	8002038 <vLineSensorPIDControl+0x14c>
 8002028:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <vLineSensorPIDControl+0x228>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	eef1 7a67 	vneg.f32	s15, s15
 8002032:	4b36      	ldr	r3, [pc, #216]	@ (800210c <vLineSensorPIDControl+0x220>)
 8002034:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 8002038:	4b2d      	ldr	r3, [pc, #180]	@ (80020f0 <vLineSensorPIDControl+0x204>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2e      	ldr	r2, [pc, #184]	@ (80020f8 <vLineSensorPIDControl+0x20c>)
 800203e:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8002040:	4a25      	ldr	r2, [pc, #148]	@ (80020d8 <vLineSensorPIDControl+0x1ec>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]

    // Calcula os duty cycles dos motores
    float left_duty_cycle = base_speed + control_output;
 8002046:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <vLineSensorPIDControl+0x22c>)
 8002048:	ed93 7a00 	vldr	s14, [r3]
 800204c:	4b2f      	ldr	r3, [pc, #188]	@ (800210c <vLineSensorPIDControl+0x220>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_duty_cycle = base_speed - control_output;
 800205a:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <vLineSensorPIDControl+0x22c>)
 800205c:	ed93 7a00 	vldr	s14, [r3]
 8002060:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <vLineSensorPIDControl+0x220>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que os duty cycles estão entre 0 e 1
    if (left_duty_cycle > 1.0f) left_duty_cycle = 1.0f;
 800206e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	dd02      	ble.n	8002086 <vLineSensorPIDControl+0x19a>
 8002080:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002084:	60fb      	str	r3, [r7, #12]
    if (left_duty_cycle < 0.0f) left_duty_cycle = 0.0f;
 8002086:	edd7 7a03 	vldr	s15, [r7, #12]
 800208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d502      	bpl.n	800209a <vLineSensorPIDControl+0x1ae>
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
    if (right_duty_cycle > 1.0f) right_duty_cycle = 1.0f;
 800209a:	edd7 7a02 	vldr	s15, [r7, #8]
 800209e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020aa:	dd02      	ble.n	80020b2 <vLineSensorPIDControl+0x1c6>
 80020ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020b0:	60bb      	str	r3, [r7, #8]
    if (right_duty_cycle < 0.0f) right_duty_cycle = 0.0f;
 80020b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d502      	bpl.n	80020c6 <vLineSensorPIDControl+0x1da>
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]

    // Chama a função para ajustar a velocidade dos motores
    ajustarVelocidadeMotores(left_duty_cycle, right_duty_cycle);
 80020c6:	edd7 0a02 	vldr	s1, [r7, #8]
 80020ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80020ce:	f7ff fe03 	bl	8001cd8 <ajustarVelocidadeMotores>
    //ajustarVelocidadeMotores(.5, .5);
}
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000540 	.word	0x20000540
 80020dc:	447a0000 	.word	0x447a0000
 80020e0:	20000030 	.word	0x20000030
 80020e4:	3c23d70a 	.word	0x3c23d70a
 80020e8:	42c60000 	.word	0x42c60000
 80020ec:	00000000 	.word	0x00000000
 80020f0:	2000052c 	.word	0x2000052c
 80020f4:	20000534 	.word	0x20000534
 80020f8:	20000530 	.word	0x20000530
 80020fc:	20000538 	.word	0x20000538
 8002100:	20000028 	.word	0x20000028
 8002104:	20000528 	.word	0x20000528
 8002108:	2000002c 	.word	0x2000002c
 800210c:	2000053c 	.word	0x2000053c
 8002110:	20000518 	.word	0x20000518
 8002114:	20000038 	.word	0x20000038
 8002118:	20000034 	.word	0x20000034

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x44>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x44>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6613      	str	r3, [r2, #96]	@ 0x60
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x44>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_MspInit+0x44>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_MspInit+0x44>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_MspInit+0x44>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002152:	f002 ffab 	bl	80050ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <NMI_Handler+0x4>

0800216c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <MemManage_Handler+0x4>

0800217c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <UsageFault_Handler+0x4>

0800218c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ba:	f000 fc5f 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021c8:	4803      	ldr	r0, [pc, #12]	@ (80021d8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80021ca:	f004 faf1 	bl	80067b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80021ce:	4803      	ldr	r0, [pc, #12]	@ (80021dc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80021d0:	f004 faee 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000544 	.word	0x20000544
 80021dc:	200005dc 	.word	0x200005dc

080021e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021e4:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80021e6:	f004 fae3 	bl	80067b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80021ea:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80021ec:	f004 fae0 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000544 	.word	0x20000544
 80021f8:	20000628 	.word	0x20000628

080021fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002200:	4803      	ldr	r0, [pc, #12]	@ (8002210 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002202:	f004 fad5 	bl	80067b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002206:	4803      	ldr	r0, [pc, #12]	@ (8002214 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002208:	f004 fad2 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000544 	.word	0x20000544
 8002214:	20000674 	.word	0x20000674

08002218 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <I2C2_EV_IRQHandler+0x10>)
 800221e:	f002 fdef 	bl	8004e00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000498 	.word	0x20000498

0800222c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002230:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002234:	f002 fd26 	bl	8004c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b09c      	sub	sp, #112	@ 0x70
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2234      	movs	r2, #52	@ 0x34
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f006 fc64 	bl	8008b68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a0:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022a2:	4a4c      	ldr	r2, [pc, #304]	@ (80023d4 <MX_TIM1_Init+0x174>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80022a6:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022a8:	22a9      	movs	r2, #169	@ 0xa9
 80022aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b45      	ldr	r3, [pc, #276]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c0:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b42      	ldr	r3, [pc, #264]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022cc:	4840      	ldr	r0, [pc, #256]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022ce:	f003 fe79 	bl	8005fc4 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022d8:	f7ff faf8 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022e6:	4619      	mov	r1, r3
 80022e8:	4839      	ldr	r0, [pc, #228]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022ea:	f004 fd61 	bl	8006db0 <HAL_TIM_ConfigClockSource>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022f4:	f7ff faea 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022f8:	4835      	ldr	r0, [pc, #212]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80022fa:	f003 ff33 	bl	8006164 <HAL_TIM_PWM_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002304:	f7ff fae2 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002314:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002318:	4619      	mov	r1, r3
 800231a:	482d      	ldr	r0, [pc, #180]	@ (80023d0 <MX_TIM1_Init+0x170>)
 800231c:	f005 fc46 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002326:	f7ff fad1 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	@ 0x60
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002336:	2300      	movs	r3, #0
 8002338:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002346:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	4820      	ldr	r0, [pc, #128]	@ (80023d0 <MX_TIM1_Init+0x170>)
 8002350:	f004 fc1a 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800235a:	f7ff fab7 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800235e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002362:	2204      	movs	r2, #4
 8002364:	4619      	mov	r1, r3
 8002366:	481a      	ldr	r0, [pc, #104]	@ (80023d0 <MX_TIM1_Init+0x170>)
 8002368:	f004 fc0e 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002372:	f7ff faab 	bl	80018cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800238a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800238e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800239c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4807      	ldr	r0, [pc, #28]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80023b4:	f005 fc90 	bl	8007cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80023be:	f7ff fa85 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023c2:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <MX_TIM1_Init+0x170>)
 80023c4:	f000 fa04 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 80023c8:	bf00      	nop
 80023ca:	3770      	adds	r7, #112	@ 0x70
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000544 	.word	0x20000544
 80023d4:	40012c00 	.word	0x40012c00

080023d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_TIM6_Init+0x64>)
 80023ea:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <MX_TIM6_Init+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <MX_TIM6_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_TIM6_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <MX_TIM6_Init+0x64>)
 80023fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002400:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_TIM6_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <MX_TIM6_Init+0x64>)
 800240a:	f003 fddb 	bl	8005fc4 <HAL_TIM_Base_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002414:	f7ff fa5a 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_TIM6_Init+0x64>)
 8002426:	f005 fbc1 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002430:	f7ff fa4c 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000590 	.word	0x20000590
 8002440:	40001000 	.word	0x40001000

08002444 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 8002464:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <MX_TIM15_Init+0xa0>)
 8002466:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 170-1;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 800246a:	22a9      	movs	r2, #169	@ 0xa9
 800246c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 8002476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800247a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800248e:	4814      	ldr	r0, [pc, #80]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 8002490:	f003 fd98 	bl	8005fc4 <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800249a:	f7ff fa17 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 80024ac:	f004 fc80 	bl	8006db0 <HAL_TIM_ConfigClockSource>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024b6:	f7ff fa09 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4806      	ldr	r0, [pc, #24]	@ (80024e0 <MX_TIM15_Init+0x9c>)
 80024c8:	f005 fb70 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80024d2:	f7ff f9fb 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200005dc 	.word	0x200005dc
 80024e4:	40014000 	.word	0x40014000

080024e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ee:	463b      	mov	r3, r7
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <MX_TIM16_Init+0x8c>)
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <MX_TIM16_Init+0x90>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002502:	22a9      	movs	r2, #169	@ 0xa9
 8002504:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <MX_TIM16_Init+0x8c>)
 800250e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002512:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <MX_TIM16_Init+0x8c>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002526:	4813      	ldr	r0, [pc, #76]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002528:	f003 fd4c 	bl	8005fc4 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002532:	f7ff f9cb 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002536:	480f      	ldr	r0, [pc, #60]	@ (8002574 <MX_TIM16_Init+0x8c>)
 8002538:	f003 ff88 	bl	800644c <HAL_TIM_IC_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002542:	f7ff f9c3 	bl	80018cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800254a:	2301      	movs	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002552:	230f      	movs	r3, #15
 8002554:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	@ (8002574 <MX_TIM16_Init+0x8c>)
 800255e:	f004 fa76 	bl	8006a4e <HAL_TIM_IC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002568:	f7ff f9b0 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000628 	.word	0x20000628
 8002578:	40014400 	.word	0x40014400

0800257c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002582:	463b      	mov	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <MX_TIM17_Init+0x8c>)
 8002590:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <MX_TIM17_Init+0x90>)
 8002592:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <MX_TIM17_Init+0x8c>)
 8002596:	22a9      	movs	r2, #169	@ 0xa9
 8002598:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <MX_TIM17_Init+0x8c>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025ba:	4813      	ldr	r0, [pc, #76]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025bc:	f003 fd02 	bl	8005fc4 <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80025c6:	f7ff f981 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80025ca:	480f      	ldr	r0, [pc, #60]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025cc:	f003 ff3e 	bl	800644c <HAL_TIM_IC_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80025d6:	f7ff f979 	bl	80018cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025de:	2301      	movs	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80025e6:	230f      	movs	r3, #15
 80025e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	2200      	movs	r2, #0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	@ (8002608 <MX_TIM17_Init+0x8c>)
 80025f2:	f004 fa2c 	bl	8006a4e <HAL_TIM_IC_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 80025fc:	f7ff f966 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000674 	.word	0x20000674
 800260c:	40014800 	.word	0x40014800

08002610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	@ 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a61      	ldr	r2, [pc, #388]	@ (80027b4 <HAL_TIM_Base_MspInit+0x1a4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d124      	bne.n	800267c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002632:	4b61      	ldr	r3, [pc, #388]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002638:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800263c:	6613      	str	r3, [r2, #96]	@ 0x60
 800263e:	4b5e      	ldr	r3, [pc, #376]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2018      	movs	r0, #24
 8002650:	f001 ff85 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002654:	2018      	movs	r0, #24
 8002656:	f001 ff9c 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2019      	movs	r0, #25
 8002660:	f001 ff7d 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002664:	2019      	movs	r0, #25
 8002666:	f001 ff94 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201a      	movs	r0, #26
 8002670:	f001 ff75 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002674:	201a      	movs	r0, #26
 8002676:	f001 ff8c 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800267a:	e096      	b.n	80027aa <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM6)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_TIM_Base_MspInit+0x1ac>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10c      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002686:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	6593      	str	r3, [r2, #88]	@ 0x58
 8002692:	4b49      	ldr	r3, [pc, #292]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
}
 800269e:	e084      	b.n	80027aa <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM15)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a46      	ldr	r2, [pc, #280]	@ (80027c0 <HAL_TIM_Base_MspInit+0x1b0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d114      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ae:	4a42      	ldr	r2, [pc, #264]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026b6:	4b40      	ldr	r3, [pc, #256]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2018      	movs	r0, #24
 80026c8:	f001 ff49 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80026cc:	2018      	movs	r0, #24
 80026ce:	f001 ff60 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 80026d2:	e06a      	b.n	80027aa <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM16)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3a      	ldr	r2, [pc, #232]	@ (80027c4 <HAL_TIM_Base_MspInit+0x1b4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d130      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026de:	4b36      	ldr	r3, [pc, #216]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	4a35      	ldr	r2, [pc, #212]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ea:	4b33      	ldr	r3, [pc, #204]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002702:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 800270e:	2310      	movs	r3, #16
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800271e:	2301      	movs	r3, #1
 8002720:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4827      	ldr	r0, [pc, #156]	@ (80027c8 <HAL_TIM_Base_MspInit+0x1b8>)
 800272a:	f002 f911 	bl	8004950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2019      	movs	r0, #25
 8002734:	f001 ff13 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002738:	2019      	movs	r0, #25
 800273a:	f001 ff2a 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 800273e:	e034      	b.n	80027aa <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM17)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a21      	ldr	r2, [pc, #132]	@ (80027cc <HAL_TIM_Base_MspInit+0x1bc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12f      	bne.n	80027aa <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 800274c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274e:	4a1a      	ldr	r2, [pc, #104]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002754:	6613      	str	r3, [r2, #96]	@ 0x60
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a14      	ldr	r2, [pc, #80]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <HAL_TIM_Base_MspInit+0x1a8>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 800277a:	2320      	movs	r3, #32
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800278a:	230a      	movs	r3, #10
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <HAL_TIM_Base_MspInit+0x1b8>)
 8002796:	f002 f8db 	bl	8004950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	201a      	movs	r0, #26
 80027a0:	f001 fedd 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80027a4:	201a      	movs	r0, #26
 80027a6:	f001 fef4 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3738      	adds	r7, #56	@ 0x38
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40001000 	.word	0x40001000
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	48000400 	.word	0x48000400
 80027cc:	40014800 	.word	0x40014800

080027d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <HAL_TIM_MspPostInit+0x64>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d11b      	bne.n	800282a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_TIM_MspPostInit+0x68>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <HAL_TIM_MspPostInit+0x68>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <HAL_TIM_MspPostInit+0x68>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 800280a:	2303      	movs	r3, #3
 800280c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800281a:	2302      	movs	r3, #2
 800281c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	@ (800283c <HAL_TIM_MspPostInit+0x6c>)
 8002826:	f002 f893 	bl	8004950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800282a:	bf00      	nop
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40021000 	.word	0x40021000
 800283c:	48000800 	.word	0x48000800

08002840 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002846:	4a22      	ldr	r2, [pc, #136]	@ (80028d0 <MX_LPUART1_UART_Init+0x90>)
 8002848:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002870:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002882:	4812      	ldr	r0, [pc, #72]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002884:	f005 fb02 	bl	8007e8c <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800288e:	f7ff f81d 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002892:	2100      	movs	r1, #0
 8002894:	480d      	ldr	r0, [pc, #52]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 8002896:	f006 f89d 	bl	80089d4 <HAL_UARTEx_SetTxFifoThreshold>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80028a0:	f7ff f814 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a4:	2100      	movs	r1, #0
 80028a6:	4809      	ldr	r0, [pc, #36]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 80028a8:	f006 f8d2 	bl	8008a50 <HAL_UARTEx_SetRxFifoThreshold>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80028b2:	f7ff f80b 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_LPUART1_UART_Init+0x8c>)
 80028b8:	f006 f853 	bl	8008962 <HAL_UARTEx_DisableFifoMode>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80028c2:	f7ff f803 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200006c0 	.word	0x200006c0
 80028d0:	40008000 	.word	0x40008000

080028d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	@ 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	2254      	movs	r2, #84	@ 0x54
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f006 f937 	bl	8008b68 <memset>
  if(uartHandle->Instance==LPUART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1f      	ldr	r2, [pc, #124]	@ (800297c <HAL_UART_MspInit+0xa8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d136      	bne.n	8002972 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002904:	2320      	movs	r3, #32
 8002906:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f003 f909 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800291c:	f7fe ffd6 	bl	80018cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_UART_MspInit+0xac>)
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_UART_MspInit+0xac>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800292c:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <HAL_UART_MspInit+0xac>)
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <HAL_UART_MspInit+0xac>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <HAL_UART_MspInit+0xac>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_UART_MspInit+0xac>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002950:	230c      	movs	r3, #12
 8002952:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002960:	230c      	movs	r3, #12
 8002962:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800296e:	f001 ffef 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002972:	bf00      	nop
 8002974:	3778      	adds	r7, #120	@ 0x78
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40008000 	.word	0x40008000
 8002980:	40021000 	.word	0x40021000

08002984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002984:	480d      	ldr	r0, [pc, #52]	@ (80029bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002986:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002988:	f7ff fc58 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800298e:	490d      	ldr	r1, [pc, #52]	@ (80029c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <LoopForever+0xe>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a4:	4c0a      	ldr	r4, [pc, #40]	@ (80029d0 <LoopForever+0x16>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b2:	f006 f8e1 	bl	8008b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029b6:	f7fe fedd 	bl	8001774 <main>

080029ba <LoopForever>:

LoopForever:
    b LoopForever
 80029ba:	e7fe      	b.n	80029ba <LoopForever>
  ldr   r0, =_estack
 80029bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80029c8:	08008c3c 	.word	0x08008c3c
  ldr r2, =_sbss
 80029cc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80029d0:	20000758 	.word	0x20000758

080029d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC1_2_IRQHandler>

080029d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f001 fdb1 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029e6:	2000      	movs	r0, #0
 80029e8:	f000 f80e 	bl	8002a08 <HAL_InitTick>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	e001      	b.n	80029fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f8:	f7ff fb90 	bl	800211c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029fc:	79fb      	ldrb	r3, [r7, #7]

}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_InitTick+0x68>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d022      	beq.n	8002a62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_InitTick+0x6c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_InitTick+0x68>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fdbc 	bl	80045ae <HAL_SYSTICK_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	d809      	bhi.n	8002a56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a42:	2200      	movs	r2, #0
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4a:	f001 fd88 	bl	800455e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_InitTick+0x70>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e007      	b.n	8002a66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e004      	b.n	8002a66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e001      	b.n	8002a66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000044 	.word	0x20000044
 8002a74:	2000003c 	.word	0x2000003c
 8002a78:	20000040 	.word	0x20000040

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_IncTick+0x1c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_IncTick+0x20>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a03      	ldr	r2, [pc, #12]	@ (8002a98 <HAL_IncTick+0x1c>)
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20000754 	.word	0x20000754
 8002a9c:	20000044 	.word	0x20000044

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000754 	.word	0x20000754

08002ab8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3360      	adds	r3, #96	@ 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <LL_ADC_SetOffset+0x44>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	03fff000 	.word	0x03fff000

08002b68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3360      	adds	r3, #96	@ 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3360      	adds	r3, #96	@ 0x60
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3360      	adds	r3, #96	@ 0x60
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3360      	adds	r3, #96	@ 0x60
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	615a      	str	r2, [r3, #20]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3330      	adds	r3, #48	@ 0x30
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	211f      	movs	r1, #31
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 011f 	and.w	r1, r3, #31
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b087      	sub	sp, #28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	0e5b      	lsrs	r3, r3, #25
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0d1b      	lsrs	r3, r3, #20
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2107      	movs	r1, #7
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0d1b      	lsrs	r3, r3, #20
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0318 	and.w	r3, r3, #24
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d54:	40d9      	lsrs	r1, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	400b      	ands	r3, r1
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0007ffff 	.word	0x0007ffff

08002d78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 031f 	and.w	r3, r3, #31
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6093      	str	r3, [r2, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_IsEnabled+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_IsEnabled+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_IsDisableOngoing+0x18>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_IsDisableOngoing+0x1a>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1a9      	b.n	80032ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd ff37 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff19 	bl	8002db8 <LL_ADC_IsDeepPowerDownEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff feff 	bl	8002d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff34 	bl	8002e08 <LL_ADC_IsInternalRegulatorEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff18 	bl	8002de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb0:	4b9c      	ldr	r3, [pc, #624]	@ (8003224 <HAL_ADC_Init+0x2e4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	4a9c      	ldr	r2, [pc, #624]	@ (8003228 <HAL_ADC_Init+0x2e8>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff16 	bl	8002e08 <LL_ADC_IsInternalRegulatorEnabled>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10d      	bne.n	8002ffe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe6:	f043 0210 	orr.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff76 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003008:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8142 	bne.w	800329c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 813e 	bne.w	800329c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003028:	f043 0202 	orr.w	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff23 	bl	8002e80 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d141      	bne.n	80030c4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003048:	d004      	beq.n	8003054 <HAL_ADC_Init+0x114>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a77      	ldr	r2, [pc, #476]	@ (800322c <HAL_ADC_Init+0x2ec>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10f      	bne.n	8003074 <HAL_ADC_Init+0x134>
 8003054:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003058:	f7ff ff12 	bl	8002e80 <LL_ADC_IsEnabled>
 800305c:	4604      	mov	r4, r0
 800305e:	4873      	ldr	r0, [pc, #460]	@ (800322c <HAL_ADC_Init+0x2ec>)
 8003060:	f7ff ff0e 	bl	8002e80 <LL_ADC_IsEnabled>
 8003064:	4603      	mov	r3, r0
 8003066:	4323      	orrs	r3, r4
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_ADC_Init+0x15a>
 8003074:	486e      	ldr	r0, [pc, #440]	@ (8003230 <HAL_ADC_Init+0x2f0>)
 8003076:	f7ff ff03 	bl	8002e80 <LL_ADC_IsEnabled>
 800307a:	4604      	mov	r4, r0
 800307c:	486d      	ldr	r0, [pc, #436]	@ (8003234 <HAL_ADC_Init+0x2f4>)
 800307e:	f7ff feff 	bl	8002e80 <LL_ADC_IsEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	431c      	orrs	r4, r3
 8003086:	486c      	ldr	r0, [pc, #432]	@ (8003238 <HAL_ADC_Init+0x2f8>)
 8003088:	f7ff fefa 	bl	8002e80 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a6:	d004      	beq.n	80030b2 <HAL_ADC_Init+0x172>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5f      	ldr	r2, [pc, #380]	@ (800322c <HAL_ADC_Init+0x2ec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x176>
 80030b2:	4a62      	ldr	r2, [pc, #392]	@ (800323c <HAL_ADC_Init+0x2fc>)
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_Init+0x178>
 80030b6:	4a62      	ldr	r2, [pc, #392]	@ (8003240 <HAL_ADC_Init+0x300>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f7ff fcfa 	bl	8002ab8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7f5b      	ldrb	r3, [r3, #29]
 80030c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80030d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80030da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d106      	bne.n	8003100 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	045b      	lsls	r3, r3, #17
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	4b48      	ldr	r3, [pc, #288]	@ (8003244 <HAL_ADC_Init+0x304>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	430b      	orrs	r3, r1
 800312e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fee5 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 8003150:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d17f      	bne.n	8003258 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d17c      	bne.n	8003258 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003162:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800316a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800317a:	f023 0302 	bic.w	r3, r3, #2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d017      	beq.n	80031c0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800319e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6911      	ldr	r1, [r2, #16]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80031be:	e013      	b.n	80031e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d12a      	bne.n	8003248 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003214:	430a      	orrs	r2, r1
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	e019      	b.n	8003258 <HAL_ADC_Init+0x318>
 8003224:	2000003c 	.word	0x2000003c
 8003228:	053e2d63 	.word	0x053e2d63
 800322c:	50000100 	.word	0x50000100
 8003230:	50000400 	.word	0x50000400
 8003234:	50000500 	.word	0x50000500
 8003238:	50000600 	.word	0x50000600
 800323c:	50000300 	.word	0x50000300
 8003240:	50000700 	.word	0x50000700
 8003244:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10c      	bne.n	800327a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f023 010f 	bic.w	r1, r3, #15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
 8003278:	e007      	b.n	800328a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 020f 	bic.w	r2, r2, #15
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	65da      	str	r2, [r3, #92]	@ 0x5c
 800329a:	e007      	b.n	80032ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}
 80032b6:	bf00      	nop

080032b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Start_DMA+0x20>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_ADC_Start_DMA+0x184>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_Start_DMA+0x24>
 80032d8:	4b59      	ldr	r3, [pc, #356]	@ (8003440 <HAL_ADC_Start_DMA+0x188>)
 80032da:	e000      	b.n	80032de <HAL_ADC_Start_DMA+0x26>
 80032dc:	4b59      	ldr	r3, [pc, #356]	@ (8003444 <HAL_ADC_Start_DMA+0x18c>)
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fd4a 	bl	8002d78 <LL_ADC_GetMultimode>
 80032e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fe02 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 809b 	bne.w	800342e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Start_DMA+0x4e>
 8003302:	2302      	movs	r3, #2
 8003304:	e096      	b.n	8003434 <HAL_ADC_Start_DMA+0x17c>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4d      	ldr	r2, [pc, #308]	@ (8003448 <HAL_ADC_Start_DMA+0x190>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d008      	beq.n	800332a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d002      	beq.n	800332a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d17a      	bne.n	8003420 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fcf6 	bl	8003d1c <ADC_Enable>
 8003330:	4603      	mov	r3, r0
 8003332:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d16d      	bne.n	8003416 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <HAL_ADC_Start_DMA+0x184>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_ADC_Start_DMA+0xb4>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <HAL_ADC_Start_DMA+0x194>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d002      	beq.n	8003368 <HAL_ADC_Start_DMA+0xb0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e003      	b.n	8003370 <HAL_ADC_Start_DMA+0xb8>
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_ADC_Start_DMA+0x198>)
 800336a:	e001      	b.n	8003370 <HAL_ADC_Start_DMA+0xb8>
 800336c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4293      	cmp	r3, r2
 8003376:	d002      	beq.n	800337e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339a:	f023 0206 	bic.w	r2, r3, #6
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a2:	e002      	b.n	80033aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <HAL_ADC_Start_DMA+0x19c>)
 80033b0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b6:	4a28      	ldr	r2, [pc, #160]	@ (8003458 <HAL_ADC_Start_DMA+0x1a0>)
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	4a27      	ldr	r2, [pc, #156]	@ (800345c <HAL_ADC_Start_DMA+0x1a4>)
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	221c      	movs	r2, #28
 80033c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0210 	orr.w	r2, r2, #16
 80033e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3340      	adds	r3, #64	@ 0x40
 80033fc:	4619      	mov	r1, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f001 f989 	bl	8004718 <HAL_DMA_Start_IT>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fd5c 	bl	8002ecc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003414:	e00d      	b.n	8003432 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800341e:	e008      	b.n	8003432 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800342c:	e001      	b.n	8003432 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	50000100 	.word	0x50000100
 8003440:	50000300 	.word	0x50000300
 8003444:	50000700 	.word	0x50000700
 8003448:	50000600 	.word	0x50000600
 800344c:	50000500 	.word	0x50000500
 8003450:	50000400 	.word	0x50000400
 8003454:	08003f07 	.word	0x08003f07
 8003458:	08003fdf 	.word	0x08003fdf
 800345c:	08003ffb 	.word	0x08003ffb

08003460 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0b6      	sub	sp, #216	@ 0xd8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x24>
 80034ba:	2302      	movs	r3, #2
 80034bc:	f000 bc13 	b.w	8003ce6 <HAL_ADC_ConfigChannel+0x84a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fd11 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 83f3 	bne.w	8003cc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f7ff fbcb 	bl	8002c82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fcff 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80034f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fd0b 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 8003504:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003508:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 81d9 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 81d4 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003524:	d10f      	bne.n	8003546 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	4619      	mov	r1, r3
 8003532:	f7ff fbd2 	bl	8002cda <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fb79 	bl	8002c36 <LL_ADC_SetSamplingTimeCommonConfig>
 8003544:	e00e      	b.n	8003564 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff fbc1 	bl	8002cda <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fb69 	bl	8002c36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d022      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003596:	f7ff fac3 	bl	8002b20 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7ff fb0f 	bl	8002bca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x126>
 80035bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c0:	e000      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x128>
 80035c2:	2300      	movs	r3, #0
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff fb1b 	bl	8002c00 <LL_ADC_SetOffsetSaturation>
 80035ca:	e17b      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fac8 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x15c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fabd 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	f003 021f 	and.w	r2, r3, #31
 80035f6:	e01e      	b.n	8003636 <HAL_ADC_ConfigChannel+0x19a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fab2 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800361a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800361e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800362a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_ADC_ConfigChannel+0x1b2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	e018      	b.n	8003680 <HAL_ADC_ConfigChannel+0x1e4>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800366a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e004      	b.n	8003680 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003680:	429a      	cmp	r2, r3
 8003682:	d106      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fa81 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fa65 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x222>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fa5a 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	e01e      	b.n	80036fc <HAL_ADC_ConfigChannel+0x260>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fa4f 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80036dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80036e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e004      	b.n	80036fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80036f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x278>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	e018      	b.n	8003746 <HAL_ADC_ConfigChannel+0x2aa>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003728:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800372c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e004      	b.n	8003746 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003746:	429a      	cmp	r2, r3
 8003748:	d106      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fa1e 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fa02 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x2e8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f9f7 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	e01e      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x326>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff f9ec 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80037a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80037aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e004      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80037b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_ADC_ConfigChannel+0x33e>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0e9b      	lsrs	r3, r3, #26
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	e016      	b.n	8003808 <HAL_ADC_ConfigChannel+0x36c>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80037ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80037f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80037fa:	2320      	movs	r3, #32
 80037fc:	e004      	b.n	8003808 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003808:	429a      	cmp	r2, r3
 800380a:	d106      	bne.n	800381a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f9bd 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2103      	movs	r1, #3
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f9a1 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x3aa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f996 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	0e9b      	lsrs	r3, r3, #26
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	e017      	b.n	8003876 <HAL_ADC_ConfigChannel+0x3da>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2103      	movs	r1, #3
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f98b 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800385e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003860:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e003      	b.n	8003874 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800386c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <HAL_ADC_ConfigChannel+0x3f2>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	e011      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x416>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800389c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800389e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d106      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	2103      	movs	r1, #3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f968 	bl	8002b94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fad9 	bl	8002e80 <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 813d 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7ff fa24 	bl	8002d30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4aa2      	ldr	r2, [pc, #648]	@ (8003b78 <HAL_ADC_ConfigChannel+0x6dc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f040 812e 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_ADC_ConfigChannel+0x480>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	3301      	adds	r3, #1
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2b09      	cmp	r3, #9
 8003912:	bf94      	ite	ls
 8003914:	2301      	movls	r3, #1
 8003916:	2300      	movhi	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e019      	b.n	8003950 <HAL_ADC_ConfigChannel+0x4b4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800392a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800392e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	2b09      	cmp	r3, #9
 8003948:	bf94      	ite	ls
 800394a:	2301      	movls	r3, #1
 800394c:	2300      	movhi	r3, #0
 800394e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003950:	2b00      	cmp	r3, #0
 8003952:	d079      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x4d4>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	069b      	lsls	r3, r3, #26
 800396a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800396e:	e015      	b.n	800399c <HAL_ADC_ConfigChannel+0x500>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x520>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	3301      	adds	r3, #1
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	e017      	b.n	80039ec <HAL_ADC_ConfigChannel+0x550>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80039ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80039ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80039d4:	2320      	movs	r3, #32
 80039d6:	e003      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	ea42 0103 	orr.w	r1, r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x576>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	051b      	lsls	r3, r3, #20
 8003a10:	e018      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x5a8>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	e003      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a44:	430b      	orrs	r3, r1
 8003a46:	e07e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d107      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x5c8>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	069b      	lsls	r3, r3, #26
 8003a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a62:	e015      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x5f4>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x614>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	e017      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x644>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	61fb      	str	r3, [r7, #28]
  return result;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	ea42 0103 	orr.w	r1, r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x670>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	3b1e      	subs	r3, #30
 8003b04:	051b      	lsls	r3, r3, #20
 8003b06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	e01b      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x6a8>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	613b      	str	r3, [r7, #16]
  return result;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f003 021f 	and.w	r2, r3, #31
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b1e      	subs	r3, #30
 8003b3e:	051b      	lsls	r3, r3, #20
 8003b40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7ff f8c5 	bl	8002cda <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_ADC_ConfigChannel+0x6e0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80be 	beq.w	8003cda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b66:	d004      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x6d6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x6ec>
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_ADC_ConfigChannel+0x6e8>)
 8003b74:	e009      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x6ee>
 8003b76:	bf00      	nop
 8003b78:	407f0000 	.word	0x407f0000
 8003b7c:	80080000 	.word	0x80080000
 8003b80:	50000100 	.word	0x50000100
 8003b84:	50000300 	.word	0x50000300
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe ffba 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 8003b90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x858>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x70c>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x85c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d13a      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d134      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbc:	d005      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x72e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a4e      	ldr	r2, [pc, #312]	@ (8003cfc <HAL_ADC_ConfigChannel+0x860>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	f040 8085 	bne.w	8003cd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x742>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a49      	ldr	r2, [pc, #292]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x746>
 8003bde:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003be0:	e000      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x748>
 8003be2:	4a43      	ldr	r2, [pc, #268]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7fe ff75 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf4:	4b44      	ldr	r3, [pc, #272]	@ (8003d08 <HAL_ADC_ConfigChannel+0x86c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	4a44      	ldr	r2, [pc, #272]	@ (8003d0c <HAL_ADC_ConfigChannel+0x870>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c0e:	e002      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f9      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c1c:	e05a      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3b      	ldr	r2, [pc, #236]	@ (8003d10 <HAL_ADC_ConfigChannel+0x874>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d125      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11f      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a31      	ldr	r2, [pc, #196]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d104      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x7ac>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_ADC_ConfigChannel+0x878>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d047      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c50:	d004      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0x7c0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x7c4>
 8003c5c:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003c5e:	e000      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x7c6>
 8003c60:	4a23      	ldr	r2, [pc, #140]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe ff36 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c72:	e031      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a27      	ldr	r2, [pc, #156]	@ (8003d18 <HAL_ADC_ConfigChannel+0x87c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d12d      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d127      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x80c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x810>
 8003ca8:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003caa:	e000      	b.n	8003cae <HAL_ADC_ConfigChannel+0x812>
 8003cac:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe ff10 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
 8003cbe:	e00c      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003cd2:	e002      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ce2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	37d8      	adds	r7, #216	@ 0xd8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	50000700 	.word	0x50000700
 8003cf4:	c3210000 	.word	0xc3210000
 8003cf8:	90c00010 	.word	0x90c00010
 8003cfc:	50000600 	.word	0x50000600
 8003d00:	50000100 	.word	0x50000100
 8003d04:	50000300 	.word	0x50000300
 8003d08:	2000003c 	.word	0x2000003c
 8003d0c:	053e2d63 	.word	0x053e2d63
 8003d10:	c7520000 	.word	0xc7520000
 8003d14:	50000500 	.word	0x50000500
 8003d18:	cb840000 	.word	0xcb840000

08003d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f8a7 	bl	8002e80 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d176      	bne.n	8003e26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <ADC_Enable+0x114>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e062      	b.n	8003e28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f862 	bl	8002e30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d74:	d004      	beq.n	8003d80 <ADC_Enable+0x64>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <ADC_Enable+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <ADC_Enable+0x68>
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <ADC_Enable+0x11c>)
 8003d82:	e000      	b.n	8003d86 <ADC_Enable+0x6a>
 8003d84:	4b2d      	ldr	r3, [pc, #180]	@ (8003e3c <ADC_Enable+0x120>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe febc 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 8003d8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d96:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <ADC_Enable+0x124>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <ADC_Enable+0x128>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003db0:	e002      	b.n	8003db8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dbe:	f7fe fe6f 	bl	8002aa0 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dc4:	e028      	b.n	8003e18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f858 	bl	8002e80 <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f828 	bl	8002e30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003de0:	f7fe fe5e 	bl	8002aa0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d914      	bls.n	8003e18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00d      	beq.n	8003e18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	f043 0210 	orr.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d1cf      	bne.n	8003dc6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	8000003f 	.word	0x8000003f
 8003e34:	50000100 	.word	0x50000100
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	50000700 	.word	0x50000700
 8003e40:	2000003c 	.word	0x2000003c
 8003e44:	053e2d63 	.word	0x053e2d63

08003e48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f826 	bl	8002ea6 <LL_ADC_IsDisableOngoing>
 8003e5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff f80d 	bl	8002e80 <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d047      	beq.n	8003efc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d144      	bne.n	8003efc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030d 	and.w	r3, r3, #13
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe ffe7 	bl	8002e58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e92:	f7fe fe05 	bl	8002aa0 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e98:	e029      	b.n	8003eee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e023      	b.n	8003efe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb6:	f7fe fdf3 	bl	8002aa0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d914      	bls.n	8003eee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1dc      	bne.n	8003eb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d14b      	bne.n	8003fb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fe8c 	bl	8002c5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d032      	beq.n	8003fb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12b      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11f      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f7c:	e018      	b.n	8003fb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fa55 	bl	8003460 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fb6:	e00e      	b.n	8003fd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fa5f 	bl	8003488 <HAL_ADC_ErrorCallback>
}
 8003fca:	e004      	b.n	8003fd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fa41 	bl	8003474 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fa31 	bl	8003488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <LL_ADC_IsEnabled>:
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsEnabled+0x18>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsEnabled+0x1a>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_StartCalibration>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004070:	4313      	orrs	r3, r2
 8004072:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_ADC_IsCalibrationOnGoing>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409a:	d101      	bne.n	80040a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_ADC_REG_IsConversionOngoing>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e04d      	b.n	800418c <HAL_ADCEx_Calibration_Start+0xb8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fea5 	bl	8003e48 <ADC_Disable>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d136      	bne.n	8004176 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004110:	f023 0302 	bic.w	r3, r3, #2
 8004114:	f043 0202 	orr.w	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff96 	bl	8004054 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004128:	e014      	b.n	8004154 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d90d      	bls.n	8004154 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	f023 0312 	bic.w	r3, r3, #18
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e01b      	b.n	800418c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff94 	bl	8004086 <LL_ADC_IsCalibrationOnGoing>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e2      	bne.n	800412a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004174:	e005      	b.n	8004182 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0004de01 	.word	0x0004de01

08004198 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b0a1      	sub	sp, #132	@ 0x84
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0e7      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041be:	2300      	movs	r3, #0
 80041c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041c2:	2300      	movs	r3, #0
 80041c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ce:	d102      	bne.n	80041d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	e009      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d102      	bne.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80041e0:	4b6d      	ldr	r3, [pc, #436]	@ (8004398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	e001      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0be      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff4f 	bl	80040ae <LL_ADC_REG_IsConversionOngoing>
 8004210:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff49 	bl	80040ae <LL_ADC_REG_IsConversionOngoing>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 80a0 	bne.w	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 809c 	bne.w	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004234:	d004      	beq.n	8004240 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a55      	ldr	r2, [pc, #340]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004240:	4b56      	ldr	r3, [pc, #344]	@ (800439c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004242:	e000      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004244:	4b56      	ldr	r3, [pc, #344]	@ (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004246:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d04b      	beq.n	80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004262:	035b      	lsls	r3, r3, #13
 8004264:	430b      	orrs	r3, r1
 8004266:	431a      	orrs	r2, r3
 8004268:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800426a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004274:	d004      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a45      	ldr	r2, [pc, #276]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10f      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004280:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004284:	f7ff fed3 	bl	800402e <LL_ADC_IsEnabled>
 8004288:	4604      	mov	r4, r0
 800428a:	4841      	ldr	r0, [pc, #260]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800428c:	f7ff fecf 	bl	800402e <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	4323      	orrs	r3, r4
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e012      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80042a0:	483c      	ldr	r0, [pc, #240]	@ (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042a2:	f7ff fec4 	bl	800402e <LL_ADC_IsEnabled>
 80042a6:	4604      	mov	r4, r0
 80042a8:	483b      	ldr	r0, [pc, #236]	@ (8004398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042aa:	f7ff fec0 	bl	800402e <LL_ADC_IsEnabled>
 80042ae:	4603      	mov	r3, r0
 80042b0:	431c      	orrs	r4, r3
 80042b2:	483c      	ldr	r0, [pc, #240]	@ (80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042b4:	f7ff febb 	bl	800402e <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4323      	orrs	r3, r4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d056      	beq.n	8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042d2:	f023 030f 	bic.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	6811      	ldr	r1, [r2, #0]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	430a      	orrs	r2, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042e6:	e047      	b.n	8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042fc:	d004      	beq.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10f      	bne.n	8004328 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004308:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800430c:	f7ff fe8f 	bl	800402e <LL_ADC_IsEnabled>
 8004310:	4604      	mov	r4, r0
 8004312:	481f      	ldr	r0, [pc, #124]	@ (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004314:	f7ff fe8b 	bl	800402e <LL_ADC_IsEnabled>
 8004318:	4603      	mov	r3, r0
 800431a:	4323      	orrs	r3, r4
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e012      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004328:	481a      	ldr	r0, [pc, #104]	@ (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800432a:	f7ff fe80 	bl	800402e <LL_ADC_IsEnabled>
 800432e:	4604      	mov	r4, r0
 8004330:	4819      	ldr	r0, [pc, #100]	@ (8004398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004332:	f7ff fe7c 	bl	800402e <LL_ADC_IsEnabled>
 8004336:	4603      	mov	r3, r0
 8004338:	431c      	orrs	r4, r3
 800433a:	481a      	ldr	r0, [pc, #104]	@ (80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800433c:	f7ff fe77 	bl	800402e <LL_ADC_IsEnabled>
 8004340:	4603      	mov	r3, r0
 8004342:	4323      	orrs	r3, r4
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800435a:	f023 030f 	bic.w	r3, r3, #15
 800435e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004360:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004362:	e009      	b.n	8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004376:	e000      	b.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004382:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004386:	4618      	mov	r0, r3
 8004388:	3784      	adds	r7, #132	@ 0x84
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}
 800438e:	bf00      	nop
 8004390:	50000100 	.word	0x50000100
 8004394:	50000400 	.word	0x50000400
 8004398:	50000500 	.word	0x50000500
 800439c:	50000300 	.word	0x50000300
 80043a0:	50000700 	.word	0x50000700
 80043a4:	50000600 	.word	0x50000600

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	@ (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	@ (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	@ (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	@ 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004514:	d301      	bcc.n	800451a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <SysTick_Config+0x40>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004522:	210f      	movs	r1, #15
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	f7ff ff8e 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <SysTick_Config+0x40>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <SysTick_Config+0x40>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff29 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800456c:	f7ff ff40 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff90 	bl	800449c <NVIC_EncodePriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff5f 	bl	8004448 <__NVIC_SetPriority>
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff33 	bl	800440c <__NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa4 	bl	8004504 <SysTick_Config>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e08d      	b.n	80046f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <HAL_DMA_Init+0x138>)
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d80f      	bhi.n	8004606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <HAL_DMA_Init+0x13c>)
 80045ee:	4413      	add	r3, r2
 80045f0:	4a45      	ldr	r2, [pc, #276]	@ (8004708 <HAL_DMA_Init+0x140>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a42      	ldr	r2, [pc, #264]	@ (800470c <HAL_DMA_Init+0x144>)
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40
 8004604:	e00e      	b.n	8004624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	4b40      	ldr	r3, [pc, #256]	@ (8004710 <HAL_DMA_Init+0x148>)
 800460e:	4413      	add	r3, r2
 8004610:	4a3d      	ldr	r2, [pc, #244]	@ (8004708 <HAL_DMA_Init+0x140>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a3c      	ldr	r2, [pc, #240]	@ (8004714 <HAL_DMA_Init+0x14c>)
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f908 	bl	800488c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004684:	d102      	bne.n	800468c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <HAL_DMA_Init+0x104>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d80c      	bhi.n	80046cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f928 	bl	8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e008      	b.n	80046de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40020407 	.word	0x40020407
 8004704:	bffdfff8 	.word	0xbffdfff8
 8004708:	cccccccd 	.word	0xcccccccd
 800470c:	40020000 	.word	0x40020000
 8004710:	bffdfbf8 	.word	0xbffdfbf8
 8004714:	40020400 	.word	0x40020400

08004718 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_DMA_Start_IT+0x20>
 8004734:	2302      	movs	r3, #2
 8004736:	e066      	b.n	8004806 <HAL_DMA_Start_IT+0xee>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d155      	bne.n	80047f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f84c 	bl	800480e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 020e 	orr.w	r2, r2, #14
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e00f      	b.n	80047b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 020a 	orr.w	r2, r2, #10
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e005      	b.n	8004804 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004824:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004836:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f202 	lsl.w	r2, r1, r2
 800484a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b10      	cmp	r3, #16
 800485a:	d108      	bne.n	800486e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800486c:	e007      	b.n	800487e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d802      	bhi.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80048a0:	4b15      	ldr	r3, [pc, #84]	@ (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e001      	b.n	80048aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80048a6:	4b15      	ldr	r3, [pc, #84]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80048a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3b08      	subs	r3, #8
 80048b6:	4a12      	ldr	r2, [pc, #72]	@ (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	409a      	lsls	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40020407 	.word	0x40020407
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020820 	.word	0x40020820
 8004900:	cccccccd 	.word	0xcccccccd
 8004904:	40020880 	.word	0x40020880

08004908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a08      	ldr	r2, [pc, #32]	@ (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800492a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	1000823f 	.word	0x1000823f
 800494c:	40020940 	.word	0x40020940

08004950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800495e:	e15a      	b.n	8004c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 814c 	beq.w	8004c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d005      	beq.n	8004990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800498c:	2b02      	cmp	r3, #2
 800498e:	d130      	bne.n	80049f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	2203      	movs	r2, #3
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c6:	2201      	movs	r2, #1
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0201 	and.w	r2, r3, #1
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d017      	beq.n	8004a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	2203      	movs	r2, #3
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d123      	bne.n	8004a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	08da      	lsrs	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3208      	adds	r2, #8
 8004a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	220f      	movs	r2, #15
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	6939      	ldr	r1, [r7, #16]
 8004a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80a6 	beq.w	8004c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c34 <HAL_GPIO_Init+0x2e4>)
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c34 <HAL_GPIO_Init+0x2e4>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ad0:	4b58      	ldr	r3, [pc, #352]	@ (8004c34 <HAL_GPIO_Init+0x2e4>)
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004adc:	4a56      	ldr	r2, [pc, #344]	@ (8004c38 <HAL_GPIO_Init+0x2e8>)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	220f      	movs	r2, #15
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4013      	ands	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b06:	d01f      	beq.n	8004b48 <HAL_GPIO_Init+0x1f8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8004c3c <HAL_GPIO_Init+0x2ec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d019      	beq.n	8004b44 <HAL_GPIO_Init+0x1f4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a4b      	ldr	r2, [pc, #300]	@ (8004c40 <HAL_GPIO_Init+0x2f0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <HAL_GPIO_Init+0x1f0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c44 <HAL_GPIO_Init+0x2f4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00d      	beq.n	8004b3c <HAL_GPIO_Init+0x1ec>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a49      	ldr	r2, [pc, #292]	@ (8004c48 <HAL_GPIO_Init+0x2f8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <HAL_GPIO_Init+0x1e8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a48      	ldr	r2, [pc, #288]	@ (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_GPIO_Init+0x1e4>
 8004b30:	2305      	movs	r3, #5
 8004b32:	e00a      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b34:	2306      	movs	r3, #6
 8004b36:	e008      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	e006      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e004      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e002      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_GPIO_Init+0x1fa>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	f002 0203 	and.w	r2, r2, #3
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	4093      	lsls	r3, r2
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b5a:	4937      	ldr	r1, [pc, #220]	@ (8004c38 <HAL_GPIO_Init+0x2e8>)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	3302      	adds	r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b68:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b8c:	4a30      	ldr	r2, [pc, #192]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b92:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bb6:	4a26      	ldr	r2, [pc, #152]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bbc:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004be0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004be6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c0a:	4a11      	ldr	r2, [pc, #68]	@ (8004c50 <HAL_GPIO_Init+0x300>)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3301      	adds	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f47f ae9d 	bne.w	8004960 <HAL_GPIO_Init+0x10>
  }
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	48000400 	.word	0x48000400
 8004c40:	48000800 	.word	0x48000800
 8004c44:	48000c00 	.word	0x48000c00
 8004c48:	48001000 	.word	0x48001000
 8004c4c:	48001400 	.word	0x48001400
 8004c50:	40010400 	.word	0x40010400

08004c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	807b      	strh	r3, [r7, #2]
 8004c60:	4613      	mov	r3, r2
 8004c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c64:	787b      	ldrb	r3, [r7, #1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c6a:	887a      	ldrh	r2, [r7, #2]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c70:	e002      	b.n	8004c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c72:	887a      	ldrh	r2, [r7, #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c8e:	4b08      	ldr	r3, [pc, #32]	@ (8004cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c9a:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f806 	bl	8004cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e08d      	b.n	8004df8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc fcc1 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2224      	movs	r2, #36	@ 0x24
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	e006      	b.n	8004d52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d108      	bne.n	8004d6c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	e007      	b.n	8004d7c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69d9      	ldr	r1, [r3, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d138      	bne.n	8004ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e032      	b.n	8004ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	@ 0x24
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d139      	bne.n	8004f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e033      	b.n	8004f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	@ 0x24
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d141      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f72:	4b4b      	ldr	r3, [pc, #300]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7e:	d131      	bne.n	8004fe4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f80:	4b47      	ldr	r3, [pc, #284]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f86:	4a46      	ldr	r2, [pc, #280]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f90:	4b43      	ldr	r3, [pc, #268]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f98:	4a41      	ldr	r2, [pc, #260]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fa0:	4b40      	ldr	r3, [pc, #256]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2232      	movs	r2, #50	@ 0x32
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	4a3f      	ldr	r2, [pc, #252]	@ (80050a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	0c9b      	lsrs	r3, r3, #18
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb6:	e002      	b.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fbe:	4b38      	ldr	r3, [pc, #224]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fca:	d102      	bne.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f2      	bne.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fd2:	4b33      	ldr	r3, [pc, #204]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fde:	d158      	bne.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e057      	b.n	8005094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fea:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ff4:	e04d      	b.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffc:	d141      	bne.n	8005082 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ffe:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500a:	d131      	bne.n	8005070 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800500c:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	4a23      	ldr	r2, [pc, #140]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800501c:	4b20      	ldr	r3, [pc, #128]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005024:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800502a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800502c:	4b1d      	ldr	r3, [pc, #116]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2232      	movs	r2, #50	@ 0x32
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	0c9b      	lsrs	r3, r3, #18
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005042:	e002      	b.n	800504a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3b01      	subs	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005056:	d102      	bne.n	800505e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f2      	bne.n	8005044 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800505e:	4b10      	ldr	r3, [pc, #64]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506a:	d112      	bne.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e011      	b.n	8005094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005070:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005076:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005080:	e007      	b.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005082:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800508a:	4a05      	ldr	r2, [pc, #20]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005090:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40007000 	.word	0x40007000
 80050a4:	2000003c 	.word	0x2000003c
 80050a8:	431bde83 	.word	0x431bde83

080050ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a04      	ldr	r2, [pc, #16]	@ (80050c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ba:	6093      	str	r3, [r2, #8]
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40007000 	.word	0x40007000

080050cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e2fe      	b.n	80056dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ea:	4b97      	ldr	r3, [pc, #604]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f4:	4b94      	ldr	r3, [pc, #592]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d102      	bne.n	800510a <HAL_RCC_OscConfig+0x3e>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d002      	beq.n	8005110 <HAL_RCC_OscConfig+0x44>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d10b      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4b8d      	ldr	r3, [pc, #564]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05b      	beq.n	80051d4 <HAL_RCC_OscConfig+0x108>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d157      	bne.n	80051d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e2d9      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d106      	bne.n	8005140 <HAL_RCC_OscConfig+0x74>
 8005132:	4b85      	ldr	r3, [pc, #532]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a84      	ldr	r2, [pc, #528]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e01d      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b7f      	ldr	r3, [pc, #508]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7e      	ldr	r2, [pc, #504]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b7c      	ldr	r3, [pc, #496]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7b      	ldr	r2, [pc, #492]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005164:	4b78      	ldr	r3, [pc, #480]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a77      	ldr	r2, [pc, #476]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b75      	ldr	r3, [pc, #468]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a74      	ldr	r2, [pc, #464]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd fc8c 	bl	8002aa0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800518c:	f7fd fc88 	bl	8002aa0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	@ 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e29e      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800519e:	4b6a      	ldr	r3, [pc, #424]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0xc0>
 80051aa:	e014      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd fc78 	bl	8002aa0 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fd fc74 	bl	8002aa0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e28a      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051c6:	4b60      	ldr	r3, [pc, #384]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0xe8>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d075      	beq.n	80052ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e2:	4b59      	ldr	r3, [pc, #356]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ec:	4b56      	ldr	r3, [pc, #344]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d102      	bne.n	8005202 <HAL_RCC_OscConfig+0x136>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d002      	beq.n	8005208 <HAL_RCC_OscConfig+0x13c>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11f      	bne.n	8005248 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	4b4f      	ldr	r3, [pc, #316]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCC_OscConfig+0x154>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e25d      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b49      	ldr	r3, [pc, #292]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	4946      	ldr	r1, [pc, #280]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005234:	4b45      	ldr	r3, [pc, #276]	@ (800534c <HAL_RCC_OscConfig+0x280>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd fbe5 	bl	8002a08 <HAL_InitTick>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d043      	beq.n	80052cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e249      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d023      	beq.n	8005298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a3c      	ldr	r2, [pc, #240]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd fc20 	bl	8002aa0 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005264:	f7fd fc1c 	bl	8002aa0 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e232      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005276:	4b34      	ldr	r3, [pc, #208]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	492d      	ldr	r1, [pc, #180]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
 8005296:	e01a      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2a      	ldr	r2, [pc, #168]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800529e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd fbfc 	bl	8002aa0 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fd fbf8 	bl	8002aa0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e20e      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052be:	4b22      	ldr	r3, [pc, #136]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x1e0>
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d041      	beq.n	800535e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01c      	beq.n	800531c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e2:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80052e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e8:	4a17      	ldr	r2, [pc, #92]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fd fbd5 	bl	8002aa0 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fd fbd1 	bl	8002aa0 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e1e7      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800530c:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ef      	beq.n	80052fa <HAL_RCC_OscConfig+0x22e>
 800531a:	e020      	b.n	800535e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005322:	4a09      	ldr	r2, [pc, #36]	@ (8005348 <HAL_RCC_OscConfig+0x27c>)
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fd fbb8 	bl	8002aa0 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005332:	e00d      	b.n	8005350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005334:	f7fd fbb4 	bl	8002aa0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d906      	bls.n	8005350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1ca      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005350:	4b8c      	ldr	r3, [pc, #560]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ea      	bne.n	8005334 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80a6 	beq.w	80054b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005370:	4b84      	ldr	r3, [pc, #528]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_OscConfig+0x2b4>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x2b6>
 8005380:	2300      	movs	r3, #0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	4b7f      	ldr	r3, [pc, #508]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	4a7e      	ldr	r2, [pc, #504]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005390:	6593      	str	r3, [r2, #88]	@ 0x58
 8005392:	4b7c      	ldr	r3, [pc, #496]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800539e:	2301      	movs	r3, #1
 80053a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a2:	4b79      	ldr	r3, [pc, #484]	@ (8005588 <HAL_RCC_OscConfig+0x4bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d118      	bne.n	80053e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ae:	4b76      	ldr	r3, [pc, #472]	@ (8005588 <HAL_RCC_OscConfig+0x4bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a75      	ldr	r2, [pc, #468]	@ (8005588 <HAL_RCC_OscConfig+0x4bc>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ba:	f7fd fb71 	bl	8002aa0 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fd fb6d 	bl	8002aa0 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e183      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005588 <HAL_RCC_OscConfig+0x4bc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d108      	bne.n	80053fa <HAL_RCC_OscConfig+0x32e>
 80053e8:	4b66      	ldr	r3, [pc, #408]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ee:	4a65      	ldr	r2, [pc, #404]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053f8:	e024      	b.n	8005444 <HAL_RCC_OscConfig+0x378>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d110      	bne.n	8005424 <HAL_RCC_OscConfig+0x358>
 8005402:	4b60      	ldr	r3, [pc, #384]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005408:	4a5e      	ldr	r2, [pc, #376]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005412:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	4a5a      	ldr	r2, [pc, #360]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005422:	e00f      	b.n	8005444 <HAL_RCC_OscConfig+0x378>
 8005424:	4b57      	ldr	r3, [pc, #348]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542a:	4a56      	ldr	r2, [pc, #344]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005434:	4b53      	ldr	r3, [pc, #332]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	4a52      	ldr	r2, [pc, #328]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fd fb28 	bl	8002aa0 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005452:	e00a      	b.n	800546a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005454:	f7fd fb24 	bl	8002aa0 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e138      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546a:	4b46      	ldr	r3, [pc, #280]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ed      	beq.n	8005454 <HAL_RCC_OscConfig+0x388>
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fd fb11 	bl	8002aa0 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fd fb0d 	bl	8002aa0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e121      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005498:	4b3a      	ldr	r3, [pc, #232]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ed      	bne.n	8005482 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ac:	4b35      	ldr	r3, [pc, #212]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	4a34      	ldr	r2, [pc, #208]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d03c      	beq.n	800553e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01c      	beq.n	8005506 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80054ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fd fae0 	bl	8002aa0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e4:	f7fd fadc 	bl	8002aa0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0f2      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ef      	beq.n	80054e4 <HAL_RCC_OscConfig+0x418>
 8005504:	e01b      	b.n	800553e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005506:	4b1f      	ldr	r3, [pc, #124]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fd fac3 	bl	8002aa0 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551e:	f7fd fabf 	bl	8002aa0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0d5      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005530:	4b14      	ldr	r3, [pc, #80]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ef      	bne.n	800551e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80c9 	beq.w	80056da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005548:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b0c      	cmp	r3, #12
 8005552:	f000 8083 	beq.w	800565c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d15e      	bne.n	800561c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a08      	ldr	r2, [pc, #32]	@ (8005584 <HAL_RCC_OscConfig+0x4b8>)
 8005564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fd fa99 	bl	8002aa0 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	e00c      	b.n	800558c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005572:	f7fd fa95 	bl	8002aa0 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d905      	bls.n	800558c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0ab      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
 8005584:	40021000 	.word	0x40021000
 8005588:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558c:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ec      	bne.n	8005572 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005598:	4b52      	ldr	r3, [pc, #328]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b52      	ldr	r3, [pc, #328]	@ (80056e8 <HAL_RCC_OscConfig+0x61c>)
 800559e:	4013      	ands	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6a11      	ldr	r1, [r2, #32]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055a8:	3a01      	subs	r2, #1
 80055aa:	0112      	lsls	r2, r2, #4
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80055b2:	0212      	lsls	r2, r2, #8
 80055b4:	4311      	orrs	r1, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055ba:	0852      	lsrs	r2, r2, #1
 80055bc:	3a01      	subs	r2, #1
 80055be:	0552      	lsls	r2, r2, #21
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0652      	lsls	r2, r2, #25
 80055cc:	4311      	orrs	r1, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055d2:	06d2      	lsls	r2, r2, #27
 80055d4:	430a      	orrs	r2, r1
 80055d6:	4943      	ldr	r1, [pc, #268]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055dc:	4b41      	ldr	r3, [pc, #260]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a40      	ldr	r2, [pc, #256]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e8:	4b3e      	ldr	r3, [pc, #248]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a3d      	ldr	r2, [pc, #244]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd fa54 	bl	8002aa0 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fd fa50 	bl	8002aa0 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e066      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	4b35      	ldr	r3, [pc, #212]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x530>
 800561a:	e05e      	b.n	80056da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561c:	4b31      	ldr	r3, [pc, #196]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a30      	ldr	r2, [pc, #192]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd fa3a 	bl	8002aa0 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd fa36 	bl	8002aa0 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e04c      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005642:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800564e:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	4924      	ldr	r1, [pc, #144]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 8005654:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <HAL_RCC_OscConfig+0x620>)
 8005656:	4013      	ands	r3, r2
 8005658:	60cb      	str	r3, [r1, #12]
 800565a:	e03e      	b.n	80056da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e039      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005668:	4b1e      	ldr	r3, [pc, #120]	@ (80056e4 <HAL_RCC_OscConfig+0x618>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0203 	and.w	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	429a      	cmp	r2, r3
 800567a:	d12c      	bne.n	80056d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	3b01      	subs	r3, #1
 8005688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d123      	bne.n	80056d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d11b      	bne.n	80056d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d113      	bne.n	80056d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	3b01      	subs	r3, #1
 80056bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d001      	beq.n	80056da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000
 80056e8:	019f800c 	.word	0x019f800c
 80056ec:	feeefffc 	.word	0xfeeefffc

080056f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e11e      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b91      	ldr	r3, [pc, #580]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d910      	bls.n	8005738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b8e      	ldr	r3, [pc, #568]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 020f 	bic.w	r2, r3, #15
 800571e:	498c      	ldr	r1, [pc, #560]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b8a      	ldr	r3, [pc, #552]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e106      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d073      	beq.n	800582c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d129      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800574c:	4b81      	ldr	r3, [pc, #516]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0f4      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800575c:	f000 f99e 	bl	8005a9c <RCC_GetSysClockFreqFromPLLSource>
 8005760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4a7c      	ldr	r2, [pc, #496]	@ (8005958 <HAL_RCC_ClockConfig+0x268>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d93f      	bls.n	80057ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800576a:	4b7a      	ldr	r3, [pc, #488]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800577e:	2b00      	cmp	r3, #0
 8005780:	d033      	beq.n	80057ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d12f      	bne.n	80057ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800578a:	4b72      	ldr	r3, [pc, #456]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005792:	4a70      	ldr	r2, [pc, #448]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800579a:	2380      	movs	r3, #128	@ 0x80
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e024      	b.n	80057ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d107      	bne.n	80057b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0c6      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b8:	4b66      	ldr	r3, [pc, #408]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0be      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057c8:	f000 f8ce 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4a61      	ldr	r2, [pc, #388]	@ (8005958 <HAL_RCC_ClockConfig+0x268>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d909      	bls.n	80057ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057de:	4a5d      	ldr	r2, [pc, #372]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057ea:	4b5a      	ldr	r3, [pc, #360]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 0203 	bic.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4957      	ldr	r1, [pc, #348]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fd f950 	bl	8002aa0 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	e00a      	b.n	800581a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005804:	f7fd f94c 	bl	8002aa0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e095      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581a:	4b4e      	ldr	r3, [pc, #312]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 020c 	and.w	r2, r3, #12
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	429a      	cmp	r2, r3
 800582a:	d1eb      	bne.n	8005804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d023      	beq.n	8005880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005844:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800584a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800584e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800585c:	4b3d      	ldr	r3, [pc, #244]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005864:	4a3b      	ldr	r2, [pc, #236]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800586a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800586c:	4b39      	ldr	r3, [pc, #228]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4936      	ldr	r1, [pc, #216]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	e008      	b.n	8005892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b80      	cmp	r3, #128	@ 0x80
 8005884:	d105      	bne.n	8005892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005886:	4b33      	ldr	r3, [pc, #204]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4a32      	ldr	r2, [pc, #200]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 800588c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005892:	4b2f      	ldr	r3, [pc, #188]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d21d      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 020f 	bic.w	r2, r3, #15
 80058a8:	4929      	ldr	r1, [pc, #164]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058b0:	f7fd f8f6 	bl	8002aa0 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b8:	f7fd f8f2 	bl	8002aa0 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e03b      	b.n	8005946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ce:	4b20      	ldr	r3, [pc, #128]	@ (8005950 <HAL_RCC_ClockConfig+0x260>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1ed      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4917      	ldr	r1, [pc, #92]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	490f      	ldr	r1, [pc, #60]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800591a:	f000 f825 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 800591e:	4602      	mov	r2, r0
 8005920:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <HAL_RCC_ClockConfig+0x264>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	490c      	ldr	r1, [pc, #48]	@ (800595c <HAL_RCC_ClockConfig+0x26c>)
 800592c:	5ccb      	ldrb	r3, [r1, r3]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <HAL_RCC_ClockConfig+0x270>)
 8005938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800593a:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <HAL_RCC_ClockConfig+0x274>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fd f862 	bl	8002a08 <HAL_InitTick>
 8005944:	4603      	mov	r3, r0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40022000 	.word	0x40022000
 8005954:	40021000 	.word	0x40021000
 8005958:	04c4b400 	.word	0x04c4b400
 800595c:	08008bec 	.word	0x08008bec
 8005960:	2000003c 	.word	0x2000003c
 8005964:	20000040 	.word	0x20000040

08005968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800596e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b04      	cmp	r3, #4
 8005978:	d102      	bne.n	8005980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800597a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e047      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005980:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b08      	cmp	r3, #8
 800598a:	d102      	bne.n	8005992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800598c:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	e03e      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005992:	4b23      	ldr	r3, [pc, #140]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d136      	bne.n	8005a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800599e:	4b20      	ldr	r3, [pc, #128]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	3301      	adds	r3, #1
 80059b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	4a16      	ldr	r2, [pc, #88]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c6:	68d2      	ldr	r2, [r2, #12]
 80059c8:	0a12      	lsrs	r2, r2, #8
 80059ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	617b      	str	r3, [r7, #20]
      break;
 80059d4:	e00c      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d6:	4a13      	ldr	r2, [pc, #76]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	4a10      	ldr	r2, [pc, #64]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	0a12      	lsrs	r2, r2, #8
 80059e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]
      break;
 80059ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	0e5b      	lsrs	r3, r3, #25
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	3301      	adds	r3, #1
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e001      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a10:	693b      	ldr	r3, [r7, #16]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	00f42400 	.word	0x00f42400
 8005a28:	016e3600 	.word	0x016e3600

08005a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a30:	4b03      	ldr	r3, [pc, #12]	@ (8005a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	2000003c 	.word	0x2000003c

08005a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a48:	f7ff fff0 	bl	8005a2c <HAL_RCC_GetHCLKFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	4904      	ldr	r1, [pc, #16]	@ (8005a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	08008bfc 	.word	0x08008bfc

08005a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a74:	f7ff ffda 	bl	8005a2c <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b06      	ldr	r3, [pc, #24]	@ (8005a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0adb      	lsrs	r3, r3, #11
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4904      	ldr	r1, [pc, #16]	@ (8005a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	08008bfc 	.word	0x08008bfc

08005a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d10c      	bne.n	8005ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac0:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	4a14      	ldr	r2, [pc, #80]	@ (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aca:	68d2      	ldr	r2, [r2, #12]
 8005acc:	0a12      	lsrs	r2, r2, #8
 8005ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	617b      	str	r3, [r7, #20]
    break;
 8005ad8:	e00c      	b.n	8005af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ada:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae4:	68d2      	ldr	r2, [r2, #12]
 8005ae6:	0a12      	lsrs	r2, r2, #8
 8005ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aec:	fb02 f303 	mul.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
    break;
 8005af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af4:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	0e5b      	lsrs	r3, r3, #25
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	3301      	adds	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b0e:	687b      	ldr	r3, [r7, #4]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	016e3600 	.word	0x016e3600
 8005b24:	00f42400 	.word	0x00f42400

08005b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b30:	2300      	movs	r3, #0
 8005b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b34:	2300      	movs	r3, #0
 8005b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8098 	beq.w	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4a:	4b43      	ldr	r3, [pc, #268]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	4b40      	ldr	r3, [pc, #256]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b62:	4b3d      	ldr	r3, [pc, #244]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b72:	4b3a      	ldr	r3, [pc, #232]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a39      	ldr	r2, [pc, #228]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b7e:	f7fc ff8f 	bl	8002aa0 <HAL_GetTick>
 8005b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b84:	e009      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b86:	f7fc ff8b 	bl	8002aa0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d902      	bls.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	74fb      	strb	r3, [r7, #19]
        break;
 8005b98:	e005      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b9a:	4b30      	ldr	r3, [pc, #192]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ba6:	7cfb      	ldrb	r3, [r7, #19]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d159      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bac:	4b2a      	ldr	r3, [pc, #168]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01e      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d019      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc8:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd4:	4b20      	ldr	r3, [pc, #128]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bda:	4a1f      	ldr	r2, [pc, #124]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005be4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bf4:	4a18      	ldr	r2, [pc, #96]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fc ff4b 	bl	8002aa0 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0c:	e00b      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0e:	f7fc ff47 	bl	8002aa0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d902      	bls.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	74fb      	strb	r3, [r7, #19]
            break;
 8005c24:	e006      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c26:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ec      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c3a:	4b07      	ldr	r3, [pc, #28]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c48:	4903      	ldr	r1, [pc, #12]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c50:	e008      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	74bb      	strb	r3, [r7, #18]
 8005c56:	e005      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	7cfb      	ldrb	r3, [r7, #19]
 8005c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c64:	7c7b      	ldrb	r3, [r7, #17]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c82:	4ba1      	ldr	r3, [pc, #644]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c88:	f023 0203 	bic.w	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	499d      	ldr	r1, [pc, #628]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca4:	4b98      	ldr	r3, [pc, #608]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	f023 020c 	bic.w	r2, r3, #12
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4995      	ldr	r1, [pc, #596]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc6:	4b90      	ldr	r3, [pc, #576]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ccc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	498c      	ldr	r1, [pc, #560]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ce8:	4b87      	ldr	r3, [pc, #540]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	4984      	ldr	r1, [pc, #528]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	497b      	ldr	r1, [pc, #492]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d2c:	4b76      	ldr	r3, [pc, #472]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	4973      	ldr	r1, [pc, #460]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	496a      	ldr	r1, [pc, #424]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d70:	4b65      	ldr	r3, [pc, #404]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	4962      	ldr	r1, [pc, #392]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d92:	4b5d      	ldr	r3, [pc, #372]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	4959      	ldr	r1, [pc, #356]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005db4:	4b54      	ldr	r3, [pc, #336]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dba:	f023 0203 	bic.w	r2, r3, #3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc2:	4951      	ldr	r1, [pc, #324]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	4948      	ldr	r1, [pc, #288]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005df8:	4b43      	ldr	r3, [pc, #268]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e06:	4940      	ldr	r1, [pc, #256]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	4b3b      	ldr	r3, [pc, #236]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e30:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3e:	4932      	ldr	r1, [pc, #200]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e50:	4b2d      	ldr	r3, [pc, #180]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4a2c      	ldr	r2, [pc, #176]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e68:	4b27      	ldr	r3, [pc, #156]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	4924      	ldr	r1, [pc, #144]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e86:	d105      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e88:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea0:	4b19      	ldr	r3, [pc, #100]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	4916      	ldr	r1, [pc, #88]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a10      	ldr	r2, [pc, #64]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d019      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ede:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	4908      	ldr	r1, [pc, #32]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef8:	4b03      	ldr	r3, [pc, #12]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a02      	ldr	r2, [pc, #8]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f02:	60d3      	str	r3, [r2, #12]
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f06:	bf00      	nop
 8005f08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f18:	4b29      	ldr	r3, [pc, #164]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	4926      	ldr	r1, [pc, #152]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f36:	d105      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f38:	4b21      	ldr	r3, [pc, #132]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f5e:	4918      	ldr	r1, [pc, #96]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f70:	4b13      	ldr	r3, [pc, #76]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f88:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	490a      	ldr	r1, [pc, #40]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e049      	b.n	800606a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc fb10 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f001 f808 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d001      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e054      	b.n	8006136 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a26      	ldr	r2, [pc, #152]	@ (8006144 <HAL_TIM_Base_Start_IT+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b6:	d01d      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	@ (8006148 <HAL_TIM_Base_Start_IT+0xd4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	@ (800614c <HAL_TIM_Base_Start_IT+0xd8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006150 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1e      	ldr	r2, [pc, #120]	@ (8006154 <HAL_TIM_Base_Start_IT+0xe0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <HAL_TIM_Base_Start_IT+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0x80>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <HAL_TIM_Base_Start_IT+0xe8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d115      	bne.n	8006120 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <HAL_TIM_Base_Start_IT+0xec>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d015      	beq.n	8006132 <HAL_TIM_Base_Start_IT+0xbe>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800610c:	d011      	beq.n	8006132 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611e:	e008      	b.n	8006132 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e000      	b.n	8006134 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40000c00 	.word	0x40000c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40014000 	.word	0x40014000
 800615c:	40015000 	.word	0x40015000
 8006160:	00010007 	.word	0x00010007

08006164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e049      	b.n	800620a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f841 	bl	8006212 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f000 ff38 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start+0x24>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e03c      	b.n	80062c6 <HAL_TIM_PWM_Start+0x9e>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d109      	bne.n	8006266 <HAL_TIM_PWM_Start+0x3e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e02f      	b.n	80062c6 <HAL_TIM_PWM_Start+0x9e>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start+0x58>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e022      	b.n	80062c6 <HAL_TIM_PWM_Start+0x9e>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d109      	bne.n	800629a <HAL_TIM_PWM_Start+0x72>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	bf14      	ite	ne
 8006292:	2301      	movne	r3, #1
 8006294:	2300      	moveq	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	e015      	b.n	80062c6 <HAL_TIM_PWM_Start+0x9e>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b10      	cmp	r3, #16
 800629e:	d109      	bne.n	80062b4 <HAL_TIM_PWM_Start+0x8c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e008      	b.n	80062c6 <HAL_TIM_PWM_Start+0x9e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0a6      	b.n	800641c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0xb6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062dc:	e023      	b.n	8006326 <HAL_TIM_PWM_Start+0xfe>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start+0xc6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ec:	e01b      	b.n	8006326 <HAL_TIM_PWM_Start+0xfe>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d104      	bne.n	80062fe <HAL_TIM_PWM_Start+0xd6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062fc:	e013      	b.n	8006326 <HAL_TIM_PWM_Start+0xfe>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_Start+0xe6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800630c:	e00b      	b.n	8006326 <HAL_TIM_PWM_Start+0xfe>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b10      	cmp	r3, #16
 8006312:	d104      	bne.n	800631e <HAL_TIM_PWM_Start+0xf6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800631c:	e003      	b.n	8006326 <HAL_TIM_PWM_Start+0xfe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2201      	movs	r2, #1
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fc16 	bl	8007b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a3a      	ldr	r2, [pc, #232]	@ (8006424 <HAL_TIM_PWM_Start+0x1fc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIM_PWM_Start+0x148>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a39      	ldr	r2, [pc, #228]	@ (8006428 <HAL_TIM_PWM_Start+0x200>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIM_PWM_Start+0x148>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a37      	ldr	r2, [pc, #220]	@ (800642c <HAL_TIM_PWM_Start+0x204>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_PWM_Start+0x148>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a36      	ldr	r2, [pc, #216]	@ (8006430 <HAL_TIM_PWM_Start+0x208>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIM_PWM_Start+0x148>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a34      	ldr	r2, [pc, #208]	@ (8006434 <HAL_TIM_PWM_Start+0x20c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_PWM_Start+0x148>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a33      	ldr	r2, [pc, #204]	@ (8006438 <HAL_TIM_PWM_Start+0x210>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_TIM_PWM_Start+0x14c>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_TIM_PWM_Start+0x14e>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006388:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a25      	ldr	r2, [pc, #148]	@ (8006424 <HAL_TIM_PWM_Start+0x1fc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639c:	d01d      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a26      	ldr	r2, [pc, #152]	@ (800643c <HAL_TIM_PWM_Start+0x214>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <HAL_TIM_PWM_Start+0x218>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a23      	ldr	r2, [pc, #140]	@ (8006444 <HAL_TIM_PWM_Start+0x21c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <HAL_TIM_PWM_Start+0x200>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a18      	ldr	r2, [pc, #96]	@ (800642c <HAL_TIM_PWM_Start+0x204>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_TIM_PWM_Start+0x1b2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a18      	ldr	r2, [pc, #96]	@ (8006438 <HAL_TIM_PWM_Start+0x210>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d115      	bne.n	8006406 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	4b19      	ldr	r3, [pc, #100]	@ (8006448 <HAL_TIM_PWM_Start+0x220>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b06      	cmp	r3, #6
 80063ea:	d015      	beq.n	8006418 <HAL_TIM_PWM_Start+0x1f0>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f2:	d011      	beq.n	8006418 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	e008      	b.n	8006418 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e000      	b.n	800641a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800
 8006438:	40015000 	.word	0x40015000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	00010007 	.word	0x00010007

0800644c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e049      	b.n	80064f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f841 	bl	80064fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f000 fdc4 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <HAL_TIM_IC_Start_IT+0x1e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e023      	b.n	8006576 <HAL_TIM_IC_Start_IT+0x66>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b04      	cmp	r3, #4
 8006532:	d104      	bne.n	800653e <HAL_TIM_IC_Start_IT+0x2e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e01b      	b.n	8006576 <HAL_TIM_IC_Start_IT+0x66>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d104      	bne.n	800654e <HAL_TIM_IC_Start_IT+0x3e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800654a:	b2db      	uxtb	r3, r3
 800654c:	e013      	b.n	8006576 <HAL_TIM_IC_Start_IT+0x66>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d104      	bne.n	800655e <HAL_TIM_IC_Start_IT+0x4e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800655a:	b2db      	uxtb	r3, r3
 800655c:	e00b      	b.n	8006576 <HAL_TIM_IC_Start_IT+0x66>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b10      	cmp	r3, #16
 8006562:	d104      	bne.n	800656e <HAL_TIM_IC_Start_IT+0x5e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e003      	b.n	8006576 <HAL_TIM_IC_Start_IT+0x66>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006574:	b2db      	uxtb	r3, r3
 8006576:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_TIM_IC_Start_IT+0x78>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e013      	b.n	80065b0 <HAL_TIM_IC_Start_IT+0xa0>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b04      	cmp	r3, #4
 800658c:	d104      	bne.n	8006598 <HAL_TIM_IC_Start_IT+0x88>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e00b      	b.n	80065b0 <HAL_TIM_IC_Start_IT+0xa0>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b08      	cmp	r3, #8
 800659c:	d104      	bne.n	80065a8 <HAL_TIM_IC_Start_IT+0x98>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e003      	b.n	80065b0 <HAL_TIM_IC_Start_IT+0xa0>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d102      	bne.n	80065be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065b8:	7b7b      	ldrb	r3, [r7, #13]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d001      	beq.n	80065c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e0e2      	b.n	8006788 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_IC_Start_IT+0xc2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d0:	e023      	b.n	800661a <HAL_TIM_IC_Start_IT+0x10a>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_IC_Start_IT+0xd2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065e0:	e01b      	b.n	800661a <HAL_TIM_IC_Start_IT+0x10a>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_IC_Start_IT+0xe2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065f0:	e013      	b.n	800661a <HAL_TIM_IC_Start_IT+0x10a>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_IC_Start_IT+0xf2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006600:	e00b      	b.n	800661a <HAL_TIM_IC_Start_IT+0x10a>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b10      	cmp	r3, #16
 8006606:	d104      	bne.n	8006612 <HAL_TIM_IC_Start_IT+0x102>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006610:	e003      	b.n	800661a <HAL_TIM_IC_Start_IT+0x10a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_TIM_IC_Start_IT+0x11a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006628:	e013      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x142>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d104      	bne.n	800663a <HAL_TIM_IC_Start_IT+0x12a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006638:	e00b      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x142>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d104      	bne.n	800664a <HAL_TIM_IC_Start_IT+0x13a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006648:	e003      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x142>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b0c      	cmp	r3, #12
 8006656:	d841      	bhi.n	80066dc <HAL_TIM_IC_Start_IT+0x1cc>
 8006658:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <HAL_TIM_IC_Start_IT+0x150>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006695 	.word	0x08006695
 8006664:	080066dd 	.word	0x080066dd
 8006668:	080066dd 	.word	0x080066dd
 800666c:	080066dd 	.word	0x080066dd
 8006670:	080066a7 	.word	0x080066a7
 8006674:	080066dd 	.word	0x080066dd
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080066dd 	.word	0x080066dd
 8006680:	080066b9 	.word	0x080066b9
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066dd 	.word	0x080066dd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066cb 	.word	0x080066cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0202 	orr.w	r2, r2, #2
 80066a2:	60da      	str	r2, [r3, #12]
      break;
 80066a4:	e01d      	b.n	80066e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0204 	orr.w	r2, r2, #4
 80066b4:	60da      	str	r2, [r3, #12]
      break;
 80066b6:	e014      	b.n	80066e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0208 	orr.w	r2, r2, #8
 80066c6:	60da      	str	r2, [r3, #12]
      break;
 80066c8:	e00b      	b.n	80066e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0210 	orr.w	r2, r2, #16
 80066d8:	60da      	str	r2, [r3, #12]
      break;
 80066da:	e002      	b.n	80066e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
      break;
 80066e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d14e      	bne.n	8006786 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fa35 	bl	8007b60 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a25      	ldr	r2, [pc, #148]	@ (8006790 <HAL_TIM_IC_Start_IT+0x280>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006708:	d01d      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	@ (8006794 <HAL_TIM_IC_Start_IT+0x284>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <HAL_TIM_IC_Start_IT+0x288>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	@ (800679c <HAL_TIM_IC_Start_IT+0x28c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_TIM_IC_Start_IT+0x290>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_TIM_IC_Start_IT+0x294>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_TIM_IC_Start_IT+0x236>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a19      	ldr	r2, [pc, #100]	@ (80067a8 <HAL_TIM_IC_Start_IT+0x298>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d115      	bne.n	8006772 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	4b17      	ldr	r3, [pc, #92]	@ (80067ac <HAL_TIM_IC_Start_IT+0x29c>)
 800674e:	4013      	ands	r3, r2
 8006750:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b06      	cmp	r3, #6
 8006756:	d015      	beq.n	8006784 <HAL_TIM_IC_Start_IT+0x274>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800675e:	d011      	beq.n	8006784 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006770:	e008      	b.n	8006784 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e000      	b.n	8006786 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006784:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40015000 	.word	0x40015000
 80067ac:	00010007 	.word	0x00010007

080067b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d020      	beq.n	8006814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01b      	beq.n	8006814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0202 	mvn.w	r2, #2
 80067e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fa fe4c 	bl	8001498 <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbea 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fbf1 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d020      	beq.n	8006860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01b      	beq.n	8006860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0204 	mvn.w	r2, #4
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fa fe26 	bl	8001498 <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fbc4 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fbcb 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d020      	beq.n	80068ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01b      	beq.n	80068ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0208 	mvn.w	r2, #8
 800687c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2204      	movs	r2, #4
 8006882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fa fe00 	bl	8001498 <HAL_TIM_IC_CaptureCallback>
 8006898:	e005      	b.n	80068a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fb9e 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fba5 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d020      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01b      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0210 	mvn.w	r2, #16
 80068c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2208      	movs	r2, #8
 80068ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fa fdda 	bl	8001498 <HAL_TIM_IC_CaptureCallback>
 80068e4:	e005      	b.n	80068f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fb78 	bl	8006fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb7f 	bl	8006ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00c      	beq.n	800691c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0201 	mvn.w	r2, #1
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fa ffc8 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fa65 	bl	8007e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fa5d 	bl	8007e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800698a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fb39 	bl	8007004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f06f 0220 	mvn.w	r2, #32
 80069ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fa25 	bl	8007e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00c      	beq.n	80069da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80069d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fa31 	bl	8007e3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fa29 	bl	8007e50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00c      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fa21 	bl	8007e64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fa19 	bl	8007e78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e088      	b.n	8006b7e <HAL_TIM_IC_ConfigChannel+0x130>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d11b      	bne.n	8006ab2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a8a:	f000 fea3 	bl	80077d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 020c 	bic.w	r2, r2, #12
 8006a9c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6999      	ldr	r1, [r3, #24]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	619a      	str	r2, [r3, #24]
 8006ab0:	e060      	b.n	8006b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11c      	bne.n	8006af2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006ac8:	f000 ff27 	bl	800791a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ada:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	021a      	lsls	r2, r3, #8
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	619a      	str	r2, [r3, #24]
 8006af0:	e040      	b.n	8006b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d11b      	bne.n	8006b30 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006b08:	f000 ff74 	bl	80079f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 020c 	bic.w	r2, r2, #12
 8006b1a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69d9      	ldr	r1, [r3, #28]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	e021      	b.n	8006b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b0c      	cmp	r3, #12
 8006b34:	d11c      	bne.n	8006b70 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b46:	f000 ff91 	bl	8007a6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006b58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	021a      	lsls	r2, r3, #8
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	61da      	str	r2, [r3, #28]
 8006b6e:	e001      	b.n	8006b74 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e0ff      	b.n	8006da6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b14      	cmp	r3, #20
 8006bb2:	f200 80f0 	bhi.w	8006d96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006d97 	.word	0x08006d97
 8006bc4:	08006d97 	.word	0x08006d97
 8006bc8:	08006d97 	.word	0x08006d97
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006d97 	.word	0x08006d97
 8006bd4:	08006d97 	.word	0x08006d97
 8006bd8:	08006d97 	.word	0x08006d97
 8006bdc:	08006c93 	.word	0x08006c93
 8006be0:	08006d97 	.word	0x08006d97
 8006be4:	08006d97 	.word	0x08006d97
 8006be8:	08006d97 	.word	0x08006d97
 8006bec:	08006cd3 	.word	0x08006cd3
 8006bf0:	08006d97 	.word	0x08006d97
 8006bf4:	08006d97 	.word	0x08006d97
 8006bf8:	08006d97 	.word	0x08006d97
 8006bfc:	08006d15 	.word	0x08006d15
 8006c00:	08006d97 	.word	0x08006d97
 8006c04:	08006d97 	.word	0x08006d97
 8006c08:	08006d97 	.word	0x08006d97
 8006c0c:	08006d55 	.word	0x08006d55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fab2 	bl	8007180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0208 	orr.w	r2, r2, #8
 8006c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0204 	bic.w	r2, r2, #4
 8006c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6999      	ldr	r1, [r3, #24]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	619a      	str	r2, [r3, #24]
      break;
 8006c4e:	e0a5      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fb2c 	bl	80072b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	619a      	str	r2, [r3, #24]
      break;
 8006c90:	e084      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fb9f 	bl	80073dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0208 	orr.w	r2, r2, #8
 8006cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0204 	bic.w	r2, r2, #4
 8006cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69d9      	ldr	r1, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	61da      	str	r2, [r3, #28]
      break;
 8006cd0:	e064      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fc11 	bl	8007500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	021a      	lsls	r2, r3, #8
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	61da      	str	r2, [r3, #28]
      break;
 8006d12:	e043      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fc84 	bl	8007628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0208 	orr.w	r2, r2, #8
 8006d2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0204 	bic.w	r2, r2, #4
 8006d3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d52:	e023      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fcce 	bl	80076fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	021a      	lsls	r2, r3, #8
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d94:	e002      	b.n	8006d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop

08006db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIM_ConfigClockSource+0x1c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0f6      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x20a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006dea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a6f      	ldr	r2, [pc, #444]	@ (8006fc4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	f000 80c1 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e0c:	4a6d      	ldr	r2, [pc, #436]	@ (8006fc4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	f200 80c6 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e14:	4a6c      	ldr	r2, [pc, #432]	@ (8006fc8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f000 80b9 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8006fc8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	f200 80be 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e24:	4a69      	ldr	r2, [pc, #420]	@ (8006fcc <HAL_TIM_ConfigClockSource+0x21c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f000 80b1 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e2c:	4a67      	ldr	r2, [pc, #412]	@ (8006fcc <HAL_TIM_ConfigClockSource+0x21c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	f200 80b6 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e34:	4a66      	ldr	r2, [pc, #408]	@ (8006fd0 <HAL_TIM_ConfigClockSource+0x220>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	f000 80a9 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e3c:	4a64      	ldr	r2, [pc, #400]	@ (8006fd0 <HAL_TIM_ConfigClockSource+0x220>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	f200 80ae 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	4a63      	ldr	r2, [pc, #396]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x224>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 80a1 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e4c:	4a61      	ldr	r2, [pc, #388]	@ (8006fd4 <HAL_TIM_ConfigClockSource+0x224>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f200 80a6 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	4a60      	ldr	r2, [pc, #384]	@ (8006fd8 <HAL_TIM_ConfigClockSource+0x228>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f000 8099 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e5c:	4a5e      	ldr	r2, [pc, #376]	@ (8006fd8 <HAL_TIM_ConfigClockSource+0x228>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f200 809e 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e68:	f000 8091 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e70:	f200 8096 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e78:	f000 8089 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e80:	f200 808e 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e88:	d03e      	beq.n	8006f08 <HAL_TIM_ConfigClockSource+0x158>
 8006e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8e:	f200 8087 	bhi.w	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e96:	f000 8086 	beq.w	8006fa6 <HAL_TIM_ConfigClockSource+0x1f6>
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9e:	d87f      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea0:	2b70      	cmp	r3, #112	@ 0x70
 8006ea2:	d01a      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x12a>
 8006ea4:	2b70      	cmp	r3, #112	@ 0x70
 8006ea6:	d87b      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea8:	2b60      	cmp	r3, #96	@ 0x60
 8006eaa:	d050      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x19e>
 8006eac:	2b60      	cmp	r3, #96	@ 0x60
 8006eae:	d877      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb0:	2b50      	cmp	r3, #80	@ 0x50
 8006eb2:	d03c      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x17e>
 8006eb4:	2b50      	cmp	r3, #80	@ 0x50
 8006eb6:	d873      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb8:	2b40      	cmp	r3, #64	@ 0x40
 8006eba:	d058      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x1be>
 8006ebc:	2b40      	cmp	r3, #64	@ 0x40
 8006ebe:	d86f      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec0:	2b30      	cmp	r3, #48	@ 0x30
 8006ec2:	d064      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006ec4:	2b30      	cmp	r3, #48	@ 0x30
 8006ec6:	d86b      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d060      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d867      	bhi.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d05c      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d05a      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x1de>
 8006ed8:	e062      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eea:	f000 fe19 	bl	8007b20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	609a      	str	r2, [r3, #8]
      break;
 8006f06:	e04f      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f18:	f000 fe02 	bl	8007b20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f2a:	609a      	str	r2, [r3, #8]
      break;
 8006f2c:	e03c      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 fcbe 	bl	80078bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2150      	movs	r1, #80	@ 0x50
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fdcd 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8006f4c:	e02c      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 fd1a 	bl	8007994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2160      	movs	r1, #96	@ 0x60
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fdbd 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e01c      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 fc9e 	bl	80078bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2140      	movs	r1, #64	@ 0x40
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fdad 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e00c      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f000 fda4 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8006f9e:	e003      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	e000      	b.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	00100070 	.word	0x00100070
 8006fc8:	00100060 	.word	0x00100060
 8006fcc:	00100050 	.word	0x00100050
 8006fd0:	00100040 	.word	0x00100040
 8006fd4:	00100030 	.word	0x00100030
 8006fd8:	00100020 	.word	0x00100020

08006fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a4c      	ldr	r2, [pc, #304]	@ (800715c <TIM_Base_SetConfig+0x144>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d017      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d013      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a49      	ldr	r2, [pc, #292]	@ (8007160 <TIM_Base_SetConfig+0x148>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a48      	ldr	r2, [pc, #288]	@ (8007164 <TIM_Base_SetConfig+0x14c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a47      	ldr	r2, [pc, #284]	@ (8007168 <TIM_Base_SetConfig+0x150>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a46      	ldr	r2, [pc, #280]	@ (800716c <TIM_Base_SetConfig+0x154>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0x48>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a45      	ldr	r2, [pc, #276]	@ (8007170 <TIM_Base_SetConfig+0x158>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a39      	ldr	r2, [pc, #228]	@ (800715c <TIM_Base_SetConfig+0x144>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d023      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007080:	d01f      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a36      	ldr	r2, [pc, #216]	@ (8007160 <TIM_Base_SetConfig+0x148>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01b      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a35      	ldr	r2, [pc, #212]	@ (8007164 <TIM_Base_SetConfig+0x14c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d017      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a34      	ldr	r2, [pc, #208]	@ (8007168 <TIM_Base_SetConfig+0x150>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a33      	ldr	r2, [pc, #204]	@ (800716c <TIM_Base_SetConfig+0x154>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00f      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a33      	ldr	r2, [pc, #204]	@ (8007174 <TIM_Base_SetConfig+0x15c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a32      	ldr	r2, [pc, #200]	@ (8007178 <TIM_Base_SetConfig+0x160>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d007      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a31      	ldr	r2, [pc, #196]	@ (800717c <TIM_Base_SetConfig+0x164>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_Base_SetConfig+0xaa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007170 <TIM_Base_SetConfig+0x158>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d108      	bne.n	80070d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <TIM_Base_SetConfig+0x144>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <TIM_Base_SetConfig+0x110>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1a      	ldr	r2, [pc, #104]	@ (800716c <TIM_Base_SetConfig+0x154>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0x110>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a1a      	ldr	r2, [pc, #104]	@ (8007174 <TIM_Base_SetConfig+0x15c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0x110>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a19      	ldr	r2, [pc, #100]	@ (8007178 <TIM_Base_SetConfig+0x160>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0x110>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a18      	ldr	r2, [pc, #96]	@ (800717c <TIM_Base_SetConfig+0x164>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0x110>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a13      	ldr	r2, [pc, #76]	@ (8007170 <TIM_Base_SetConfig+0x158>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f023 0201 	bic.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]
  }
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40013400 	.word	0x40013400
 8007170:	40015000 	.word	0x40015000
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f023 0201 	bic.w	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 0302 	bic.w	r3, r3, #2
 80071cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a30      	ldr	r2, [pc, #192]	@ (800729c <TIM_OC1_SetConfig+0x11c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <TIM_OC1_SetConfig+0x88>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a2f      	ldr	r2, [pc, #188]	@ (80072a0 <TIM_OC1_SetConfig+0x120>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00f      	beq.n	8007208 <TIM_OC1_SetConfig+0x88>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a2e      	ldr	r2, [pc, #184]	@ (80072a4 <TIM_OC1_SetConfig+0x124>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00b      	beq.n	8007208 <TIM_OC1_SetConfig+0x88>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a2d      	ldr	r2, [pc, #180]	@ (80072a8 <TIM_OC1_SetConfig+0x128>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <TIM_OC1_SetConfig+0x88>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a2c      	ldr	r2, [pc, #176]	@ (80072ac <TIM_OC1_SetConfig+0x12c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_OC1_SetConfig+0x88>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2b      	ldr	r2, [pc, #172]	@ (80072b0 <TIM_OC1_SetConfig+0x130>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d10c      	bne.n	8007222 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0308 	bic.w	r3, r3, #8
 800720e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 0304 	bic.w	r3, r3, #4
 8007220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1d      	ldr	r2, [pc, #116]	@ (800729c <TIM_OC1_SetConfig+0x11c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <TIM_OC1_SetConfig+0xd2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1c      	ldr	r2, [pc, #112]	@ (80072a0 <TIM_OC1_SetConfig+0x120>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_OC1_SetConfig+0xd2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1b      	ldr	r2, [pc, #108]	@ (80072a4 <TIM_OC1_SetConfig+0x124>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_OC1_SetConfig+0xd2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <TIM_OC1_SetConfig+0x128>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_OC1_SetConfig+0xd2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a19      	ldr	r2, [pc, #100]	@ (80072ac <TIM_OC1_SetConfig+0x12c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC1_SetConfig+0xd2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <TIM_OC1_SetConfig+0x130>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d111      	bne.n	8007276 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	621a      	str	r2, [r3, #32]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	40015000 	.word	0x40015000

080072b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f023 0210 	bic.w	r2, r3, #16
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0320 	bic.w	r3, r3, #32
 8007302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a2c      	ldr	r2, [pc, #176]	@ (80073c4 <TIM_OC2_SetConfig+0x110>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_OC2_SetConfig+0x74>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2b      	ldr	r2, [pc, #172]	@ (80073c8 <TIM_OC2_SetConfig+0x114>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC2_SetConfig+0x74>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a2a      	ldr	r2, [pc, #168]	@ (80073cc <TIM_OC2_SetConfig+0x118>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10d      	bne.n	8007344 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800732e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007342:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1f      	ldr	r2, [pc, #124]	@ (80073c4 <TIM_OC2_SetConfig+0x110>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d013      	beq.n	8007374 <TIM_OC2_SetConfig+0xc0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1e      	ldr	r2, [pc, #120]	@ (80073c8 <TIM_OC2_SetConfig+0x114>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00f      	beq.n	8007374 <TIM_OC2_SetConfig+0xc0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1e      	ldr	r2, [pc, #120]	@ (80073d0 <TIM_OC2_SetConfig+0x11c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00b      	beq.n	8007374 <TIM_OC2_SetConfig+0xc0>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1d      	ldr	r2, [pc, #116]	@ (80073d4 <TIM_OC2_SetConfig+0x120>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d007      	beq.n	8007374 <TIM_OC2_SetConfig+0xc0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1c      	ldr	r2, [pc, #112]	@ (80073d8 <TIM_OC2_SetConfig+0x124>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC2_SetConfig+0xc0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <TIM_OC2_SetConfig+0x118>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d113      	bne.n	800739c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800737a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40015000 	.word	0x40015000
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800

080073dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800740a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2b      	ldr	r2, [pc, #172]	@ (80074e8 <TIM_OC3_SetConfig+0x10c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d007      	beq.n	800744e <TIM_OC3_SetConfig+0x72>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2a      	ldr	r2, [pc, #168]	@ (80074ec <TIM_OC3_SetConfig+0x110>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_OC3_SetConfig+0x72>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a29      	ldr	r2, [pc, #164]	@ (80074f0 <TIM_OC3_SetConfig+0x114>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d10d      	bne.n	800746a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a1e      	ldr	r2, [pc, #120]	@ (80074e8 <TIM_OC3_SetConfig+0x10c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <TIM_OC3_SetConfig+0xbe>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <TIM_OC3_SetConfig+0x110>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00f      	beq.n	800749a <TIM_OC3_SetConfig+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1d      	ldr	r2, [pc, #116]	@ (80074f4 <TIM_OC3_SetConfig+0x118>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00b      	beq.n	800749a <TIM_OC3_SetConfig+0xbe>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <TIM_OC3_SetConfig+0x11c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <TIM_OC3_SetConfig+0xbe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1b      	ldr	r2, [pc, #108]	@ (80074fc <TIM_OC3_SetConfig+0x120>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_OC3_SetConfig+0xbe>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <TIM_OC3_SetConfig+0x114>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d113      	bne.n	80074c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	621a      	str	r2, [r3, #32]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40015000 	.word	0x40015000
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400
 80074fc:	40014800 	.word	0x40014800

08007500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800753a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800754e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	031b      	lsls	r3, r3, #12
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a2c      	ldr	r2, [pc, #176]	@ (8007610 <TIM_OC4_SetConfig+0x110>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_OC4_SetConfig+0x74>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a2b      	ldr	r2, [pc, #172]	@ (8007614 <TIM_OC4_SetConfig+0x114>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_OC4_SetConfig+0x74>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <TIM_OC4_SetConfig+0x118>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d10d      	bne.n	8007590 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800757a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	031b      	lsls	r3, r3, #12
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800758e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a1f      	ldr	r2, [pc, #124]	@ (8007610 <TIM_OC4_SetConfig+0x110>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <TIM_OC4_SetConfig+0xc0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1e      	ldr	r2, [pc, #120]	@ (8007614 <TIM_OC4_SetConfig+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_OC4_SetConfig+0xc0>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1e      	ldr	r2, [pc, #120]	@ (800761c <TIM_OC4_SetConfig+0x11c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_OC4_SetConfig+0xc0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007620 <TIM_OC4_SetConfig+0x120>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_OC4_SetConfig+0xc0>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007624 <TIM_OC4_SetConfig+0x124>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_OC4_SetConfig+0xc0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a17      	ldr	r2, [pc, #92]	@ (8007618 <TIM_OC4_SetConfig+0x118>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d113      	bne.n	80075e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	019b      	lsls	r3, r3, #6
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	019b      	lsls	r3, r3, #6
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40015000 	.word	0x40015000
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400
 8007624:	40014800 	.word	0x40014800

08007628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800766c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a19      	ldr	r2, [pc, #100]	@ (80076e4 <TIM_OC5_SetConfig+0xbc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <TIM_OC5_SetConfig+0x82>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a18      	ldr	r2, [pc, #96]	@ (80076e8 <TIM_OC5_SetConfig+0xc0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00f      	beq.n	80076aa <TIM_OC5_SetConfig+0x82>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <TIM_OC5_SetConfig+0xc4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00b      	beq.n	80076aa <TIM_OC5_SetConfig+0x82>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a16      	ldr	r2, [pc, #88]	@ (80076f0 <TIM_OC5_SetConfig+0xc8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_OC5_SetConfig+0x82>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <TIM_OC5_SetConfig+0xcc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_OC5_SetConfig+0x82>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a14      	ldr	r2, [pc, #80]	@ (80076f8 <TIM_OC5_SetConfig+0xd0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d109      	bne.n	80076be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	621a      	str	r2, [r3, #32]
}
 80076d8:	bf00      	nop
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40014400 	.word	0x40014400
 80076f4:	40014800 	.word	0x40014800
 80076f8:	40015000 	.word	0x40015000

080076fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	051b      	lsls	r3, r3, #20
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a1a      	ldr	r2, [pc, #104]	@ (80077bc <TIM_OC6_SetConfig+0xc0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <TIM_OC6_SetConfig+0x84>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a19      	ldr	r2, [pc, #100]	@ (80077c0 <TIM_OC6_SetConfig+0xc4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00f      	beq.n	8007780 <TIM_OC6_SetConfig+0x84>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a18      	ldr	r2, [pc, #96]	@ (80077c4 <TIM_OC6_SetConfig+0xc8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00b      	beq.n	8007780 <TIM_OC6_SetConfig+0x84>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a17      	ldr	r2, [pc, #92]	@ (80077c8 <TIM_OC6_SetConfig+0xcc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d007      	beq.n	8007780 <TIM_OC6_SetConfig+0x84>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <TIM_OC6_SetConfig+0xd0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_OC6_SetConfig+0x84>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a15      	ldr	r2, [pc, #84]	@ (80077d0 <TIM_OC6_SetConfig+0xd4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d109      	bne.n	8007794 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	621a      	str	r2, [r3, #32]
}
 80077ae:	bf00      	nop
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40014400 	.word	0x40014400
 80077cc:	40014800 	.word	0x40014800
 80077d0:	40015000 	.word	0x40015000

080077d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f023 0201 	bic.w	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a28      	ldr	r2, [pc, #160]	@ (80078a0 <TIM_TI1_SetConfig+0xcc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01b      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007808:	d017      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4a25      	ldr	r2, [pc, #148]	@ (80078a4 <TIM_TI1_SetConfig+0xd0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d013      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4a24      	ldr	r2, [pc, #144]	@ (80078a8 <TIM_TI1_SetConfig+0xd4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00f      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4a23      	ldr	r2, [pc, #140]	@ (80078ac <TIM_TI1_SetConfig+0xd8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00b      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a22      	ldr	r2, [pc, #136]	@ (80078b0 <TIM_TI1_SetConfig+0xdc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a21      	ldr	r2, [pc, #132]	@ (80078b4 <TIM_TI1_SetConfig+0xe0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_TI1_SetConfig+0x66>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4a20      	ldr	r2, [pc, #128]	@ (80078b8 <TIM_TI1_SetConfig+0xe4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d101      	bne.n	800783e <TIM_TI1_SetConfig+0x6a>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <TIM_TI1_SetConfig+0x6c>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e003      	b.n	800785e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	b2db      	uxtb	r3, r3
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f023 030a 	bic.w	r3, r3, #10
 8007878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f003 030a 	and.w	r3, r3, #10
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40013400 	.word	0x40013400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40015000 	.word	0x40015000

080078bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f023 030a 	bic.w	r3, r3, #10
 80078f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f023 0210 	bic.w	r2, r3, #16
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	031b      	lsls	r3, r3, #12
 800795e:	b29b      	uxth	r3, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800796c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	621a      	str	r2, [r3, #32]
}
 8007988:	bf00      	nop
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0210 	bic.w	r2, r3, #16
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	621a      	str	r2, [r3, #32]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007a44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	031b      	lsls	r3, r3, #12
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007abe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	031b      	lsls	r3, r3, #12
 8007ac4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f043 0307 	orr.w	r3, r3, #7
 8007b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	021a      	lsls	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2201      	movs	r2, #1
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e074      	b.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a34      	ldr	r2, [pc, #208]	@ (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a33      	ldr	r2, [pc, #204]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a31      	ldr	r2, [pc, #196]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d108      	bne.n	8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a21      	ldr	r2, [pc, #132]	@ (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d022      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c44:	d01d      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a18      	ldr	r2, [pc, #96]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a11      	ldr	r2, [pc, #68]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10c      	bne.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	40015000 	.word	0x40015000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40014000 	.word	0x40014000

08007cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e078      	b.n	8007de6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1c      	ldr	r2, [pc, #112]	@ (8007df4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007df8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a19      	ldr	r2, [pc, #100]	@ (8007dfc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d11c      	bne.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da4:	051b      	lsls	r3, r3, #20
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	40013400 	.word	0x40013400
 8007dfc:	40015000 	.word	0x40015000

08007e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e042      	b.n	8007f24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fa fd0f 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2224      	movs	r2, #36	@ 0x24
 8007eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fb24 	bl	8008524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f825 	bl	8007f2c <UART_SetConfig>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e01b      	b.n	8007f24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fba3 	bl	8008668 <UART_CheckIdleState>
 8007f22:	4603      	mov	r3, r0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f30:	b08c      	sub	sp, #48	@ 0x30
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	431a      	orrs	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4baa      	ldr	r3, [pc, #680]	@ (8008204 <UART_SetConfig+0x2d8>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a9f      	ldr	r2, [pc, #636]	@ (8008208 <UART_SetConfig+0x2dc>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f94:	4313      	orrs	r3, r2
 8007f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fa2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	f023 010f 	bic.w	r1, r3, #15
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a90      	ldr	r2, [pc, #576]	@ (800820c <UART_SetConfig+0x2e0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d125      	bne.n	800801c <UART_SetConfig+0xf0>
 8007fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8008210 <UART_SetConfig+0x2e4>)
 8007fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d81a      	bhi.n	8008014 <UART_SetConfig+0xe8>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <UART_SetConfig+0xb8>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	0800800d 	.word	0x0800800d
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e116      	b.n	800822a <UART_SetConfig+0x2fe>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e112      	b.n	800822a <UART_SetConfig+0x2fe>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e10e      	b.n	800822a <UART_SetConfig+0x2fe>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e10a      	b.n	800822a <UART_SetConfig+0x2fe>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e106      	b.n	800822a <UART_SetConfig+0x2fe>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a7c      	ldr	r2, [pc, #496]	@ (8008214 <UART_SetConfig+0x2e8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d138      	bne.n	8008098 <UART_SetConfig+0x16c>
 8008026:	4b7a      	ldr	r3, [pc, #488]	@ (8008210 <UART_SetConfig+0x2e4>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802c:	f003 030c 	and.w	r3, r3, #12
 8008030:	2b0c      	cmp	r3, #12
 8008032:	d82d      	bhi.n	8008090 <UART_SetConfig+0x164>
 8008034:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <UART_SetConfig+0x110>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008071 	.word	0x08008071
 8008040:	08008091 	.word	0x08008091
 8008044:	08008091 	.word	0x08008091
 8008048:	08008091 	.word	0x08008091
 800804c:	08008081 	.word	0x08008081
 8008050:	08008091 	.word	0x08008091
 8008054:	08008091 	.word	0x08008091
 8008058:	08008091 	.word	0x08008091
 800805c:	08008079 	.word	0x08008079
 8008060:	08008091 	.word	0x08008091
 8008064:	08008091 	.word	0x08008091
 8008068:	08008091 	.word	0x08008091
 800806c:	08008089 	.word	0x08008089
 8008070:	2300      	movs	r3, #0
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e0d8      	b.n	800822a <UART_SetConfig+0x2fe>
 8008078:	2302      	movs	r3, #2
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e0d4      	b.n	800822a <UART_SetConfig+0x2fe>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008086:	e0d0      	b.n	800822a <UART_SetConfig+0x2fe>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808e:	e0cc      	b.n	800822a <UART_SetConfig+0x2fe>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008096:	e0c8      	b.n	800822a <UART_SetConfig+0x2fe>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a5e      	ldr	r2, [pc, #376]	@ (8008218 <UART_SetConfig+0x2ec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d125      	bne.n	80080ee <UART_SetConfig+0x1c2>
 80080a2:	4b5b      	ldr	r3, [pc, #364]	@ (8008210 <UART_SetConfig+0x2e4>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080ac:	2b30      	cmp	r3, #48	@ 0x30
 80080ae:	d016      	beq.n	80080de <UART_SetConfig+0x1b2>
 80080b0:	2b30      	cmp	r3, #48	@ 0x30
 80080b2:	d818      	bhi.n	80080e6 <UART_SetConfig+0x1ba>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d00a      	beq.n	80080ce <UART_SetConfig+0x1a2>
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d814      	bhi.n	80080e6 <UART_SetConfig+0x1ba>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <UART_SetConfig+0x19a>
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d008      	beq.n	80080d6 <UART_SetConfig+0x1aa>
 80080c4:	e00f      	b.n	80080e6 <UART_SetConfig+0x1ba>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080cc:	e0ad      	b.n	800822a <UART_SetConfig+0x2fe>
 80080ce:	2302      	movs	r3, #2
 80080d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d4:	e0a9      	b.n	800822a <UART_SetConfig+0x2fe>
 80080d6:	2304      	movs	r3, #4
 80080d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080dc:	e0a5      	b.n	800822a <UART_SetConfig+0x2fe>
 80080de:	2308      	movs	r3, #8
 80080e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e4:	e0a1      	b.n	800822a <UART_SetConfig+0x2fe>
 80080e6:	2310      	movs	r3, #16
 80080e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ec:	e09d      	b.n	800822a <UART_SetConfig+0x2fe>
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a4a      	ldr	r2, [pc, #296]	@ (800821c <UART_SetConfig+0x2f0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d125      	bne.n	8008144 <UART_SetConfig+0x218>
 80080f8:	4b45      	ldr	r3, [pc, #276]	@ (8008210 <UART_SetConfig+0x2e4>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008102:	2bc0      	cmp	r3, #192	@ 0xc0
 8008104:	d016      	beq.n	8008134 <UART_SetConfig+0x208>
 8008106:	2bc0      	cmp	r3, #192	@ 0xc0
 8008108:	d818      	bhi.n	800813c <UART_SetConfig+0x210>
 800810a:	2b80      	cmp	r3, #128	@ 0x80
 800810c:	d00a      	beq.n	8008124 <UART_SetConfig+0x1f8>
 800810e:	2b80      	cmp	r3, #128	@ 0x80
 8008110:	d814      	bhi.n	800813c <UART_SetConfig+0x210>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <UART_SetConfig+0x1f0>
 8008116:	2b40      	cmp	r3, #64	@ 0x40
 8008118:	d008      	beq.n	800812c <UART_SetConfig+0x200>
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x210>
 800811c:	2300      	movs	r3, #0
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e082      	b.n	800822a <UART_SetConfig+0x2fe>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e07e      	b.n	800822a <UART_SetConfig+0x2fe>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e07a      	b.n	800822a <UART_SetConfig+0x2fe>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e076      	b.n	800822a <UART_SetConfig+0x2fe>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e072      	b.n	800822a <UART_SetConfig+0x2fe>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a35      	ldr	r2, [pc, #212]	@ (8008220 <UART_SetConfig+0x2f4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d12a      	bne.n	80081a4 <UART_SetConfig+0x278>
 800814e:	4b30      	ldr	r3, [pc, #192]	@ (8008210 <UART_SetConfig+0x2e4>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800815c:	d01a      	beq.n	8008194 <UART_SetConfig+0x268>
 800815e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008162:	d81b      	bhi.n	800819c <UART_SetConfig+0x270>
 8008164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008168:	d00c      	beq.n	8008184 <UART_SetConfig+0x258>
 800816a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800816e:	d815      	bhi.n	800819c <UART_SetConfig+0x270>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <UART_SetConfig+0x250>
 8008174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008178:	d008      	beq.n	800818c <UART_SetConfig+0x260>
 800817a:	e00f      	b.n	800819c <UART_SetConfig+0x270>
 800817c:	2300      	movs	r3, #0
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e052      	b.n	800822a <UART_SetConfig+0x2fe>
 8008184:	2302      	movs	r3, #2
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818a:	e04e      	b.n	800822a <UART_SetConfig+0x2fe>
 800818c:	2304      	movs	r3, #4
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008192:	e04a      	b.n	800822a <UART_SetConfig+0x2fe>
 8008194:	2308      	movs	r3, #8
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819a:	e046      	b.n	800822a <UART_SetConfig+0x2fe>
 800819c:	2310      	movs	r3, #16
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a2:	e042      	b.n	800822a <UART_SetConfig+0x2fe>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a17      	ldr	r2, [pc, #92]	@ (8008208 <UART_SetConfig+0x2dc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d13a      	bne.n	8008224 <UART_SetConfig+0x2f8>
 80081ae:	4b18      	ldr	r3, [pc, #96]	@ (8008210 <UART_SetConfig+0x2e4>)
 80081b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081bc:	d01a      	beq.n	80081f4 <UART_SetConfig+0x2c8>
 80081be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081c2:	d81b      	bhi.n	80081fc <UART_SetConfig+0x2d0>
 80081c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c8:	d00c      	beq.n	80081e4 <UART_SetConfig+0x2b8>
 80081ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ce:	d815      	bhi.n	80081fc <UART_SetConfig+0x2d0>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <UART_SetConfig+0x2b0>
 80081d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d8:	d008      	beq.n	80081ec <UART_SetConfig+0x2c0>
 80081da:	e00f      	b.n	80081fc <UART_SetConfig+0x2d0>
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e2:	e022      	b.n	800822a <UART_SetConfig+0x2fe>
 80081e4:	2302      	movs	r3, #2
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ea:	e01e      	b.n	800822a <UART_SetConfig+0x2fe>
 80081ec:	2304      	movs	r3, #4
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f2:	e01a      	b.n	800822a <UART_SetConfig+0x2fe>
 80081f4:	2308      	movs	r3, #8
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fa:	e016      	b.n	800822a <UART_SetConfig+0x2fe>
 80081fc:	2310      	movs	r3, #16
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008202:	e012      	b.n	800822a <UART_SetConfig+0x2fe>
 8008204:	cfff69f3 	.word	0xcfff69f3
 8008208:	40008000 	.word	0x40008000
 800820c:	40013800 	.word	0x40013800
 8008210:	40021000 	.word	0x40021000
 8008214:	40004400 	.word	0x40004400
 8008218:	40004800 	.word	0x40004800
 800821c:	40004c00 	.word	0x40004c00
 8008220:	40005000 	.word	0x40005000
 8008224:	2310      	movs	r3, #16
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4aae      	ldr	r2, [pc, #696]	@ (80084e8 <UART_SetConfig+0x5bc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	f040 8097 	bne.w	8008364 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008236:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800823a:	2b08      	cmp	r3, #8
 800823c:	d823      	bhi.n	8008286 <UART_SetConfig+0x35a>
 800823e:	a201      	add	r2, pc, #4	@ (adr r2, 8008244 <UART_SetConfig+0x318>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008269 	.word	0x08008269
 8008248:	08008287 	.word	0x08008287
 800824c:	08008271 	.word	0x08008271
 8008250:	08008287 	.word	0x08008287
 8008254:	08008277 	.word	0x08008277
 8008258:	08008287 	.word	0x08008287
 800825c:	08008287 	.word	0x08008287
 8008260:	08008287 	.word	0x08008287
 8008264:	0800827f 	.word	0x0800827f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008268:	f7fd fbec 	bl	8005a44 <HAL_RCC_GetPCLK1Freq>
 800826c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800826e:	e010      	b.n	8008292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008270:	4b9e      	ldr	r3, [pc, #632]	@ (80084ec <UART_SetConfig+0x5c0>)
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008274:	e00d      	b.n	8008292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008276:	f7fd fb77 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 800827a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800827c:	e009      	b.n	8008292 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800827e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008284:	e005      	b.n	8008292 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8130 	beq.w	80084fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	4a94      	ldr	r2, [pc, #592]	@ (80084f0 <UART_SetConfig+0x5c4>)
 80082a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d305      	bcc.n	80082ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d903      	bls.n	80082d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082d0:	e113      	b.n	80084fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2200      	movs	r2, #0
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	60fa      	str	r2, [r7, #12]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082de:	4a84      	ldr	r2, [pc, #528]	@ (80084f0 <UART_SetConfig+0x5c4>)
 80082e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2200      	movs	r2, #0
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082f4:	f7f8 f99c 	bl	8000630 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4610      	mov	r0, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	020b      	lsls	r3, r1, #8
 800830a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800830e:	0202      	lsls	r2, r0, #8
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	6849      	ldr	r1, [r1, #4]
 8008314:	0849      	lsrs	r1, r1, #1
 8008316:	2000      	movs	r0, #0
 8008318:	460c      	mov	r4, r1
 800831a:	4605      	mov	r5, r0
 800831c:	eb12 0804 	adds.w	r8, r2, r4
 8008320:	eb43 0905 	adc.w	r9, r3, r5
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	469a      	mov	sl, r3
 800832c:	4693      	mov	fp, r2
 800832e:	4652      	mov	r2, sl
 8008330:	465b      	mov	r3, fp
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f8 f97b 	bl	8000630 <__aeabi_uldivmod>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4613      	mov	r3, r2
 8008340:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008348:	d308      	bcc.n	800835c <UART_SetConfig+0x430>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008350:	d204      	bcs.n	800835c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6a3a      	ldr	r2, [r7, #32]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	e0ce      	b.n	80084fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008362:	e0ca      	b.n	80084fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800836c:	d166      	bne.n	800843c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800836e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008372:	2b08      	cmp	r3, #8
 8008374:	d827      	bhi.n	80083c6 <UART_SetConfig+0x49a>
 8008376:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <UART_SetConfig+0x450>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	080083c7 	.word	0x080083c7
 800838c:	080083b7 	.word	0x080083b7
 8008390:	080083c7 	.word	0x080083c7
 8008394:	080083c7 	.word	0x080083c7
 8008398:	080083c7 	.word	0x080083c7
 800839c:	080083bf 	.word	0x080083bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fd fb50 	bl	8005a44 <HAL_RCC_GetPCLK1Freq>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083a6:	e014      	b.n	80083d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a8:	f7fd fb62 	bl	8005a70 <HAL_RCC_GetPCLK2Freq>
 80083ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ae:	e010      	b.n	80083d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b0:	4b4e      	ldr	r3, [pc, #312]	@ (80084ec <UART_SetConfig+0x5c0>)
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083b4:	e00d      	b.n	80083d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b6:	f7fd fad7 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80083ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083bc:	e009      	b.n	80083d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c4:	e005      	b.n	80083d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8090 	beq.w	80084fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	4a44      	ldr	r2, [pc, #272]	@ (80084f0 <UART_SetConfig+0x5c4>)
 80083e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ec:	005a      	lsls	r2, r3, #1
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	441a      	add	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d916      	bls.n	8008434 <UART_SetConfig+0x508>
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840c:	d212      	bcs.n	8008434 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f023 030f 	bic.w	r3, r3, #15
 8008416:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	b29b      	uxth	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b29a      	uxth	r2, r3
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	4313      	orrs	r3, r2
 8008428:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	8bfa      	ldrh	r2, [r7, #30]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e062      	b.n	80084fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800843a:	e05e      	b.n	80084fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800843c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008440:	2b08      	cmp	r3, #8
 8008442:	d828      	bhi.n	8008496 <UART_SetConfig+0x56a>
 8008444:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <UART_SetConfig+0x520>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	08008471 	.word	0x08008471
 8008450:	08008479 	.word	0x08008479
 8008454:	08008481 	.word	0x08008481
 8008458:	08008497 	.word	0x08008497
 800845c:	08008487 	.word	0x08008487
 8008460:	08008497 	.word	0x08008497
 8008464:	08008497 	.word	0x08008497
 8008468:	08008497 	.word	0x08008497
 800846c:	0800848f 	.word	0x0800848f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008470:	f7fd fae8 	bl	8005a44 <HAL_RCC_GetPCLK1Freq>
 8008474:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008476:	e014      	b.n	80084a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008478:	f7fd fafa 	bl	8005a70 <HAL_RCC_GetPCLK2Freq>
 800847c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800847e:	e010      	b.n	80084a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008480:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <UART_SetConfig+0x5c0>)
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008484:	e00d      	b.n	80084a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008486:	f7fd fa6f 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 800848a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848c:	e009      	b.n	80084a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008494:	e005      	b.n	80084a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084a0:	bf00      	nop
    }

    if (pclk != 0U)
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d028      	beq.n	80084fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	4a10      	ldr	r2, [pc, #64]	@ (80084f0 <UART_SetConfig+0x5c4>)
 80084ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	441a      	add	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	2b0f      	cmp	r3, #15
 80084d0:	d910      	bls.n	80084f4 <UART_SetConfig+0x5c8>
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d8:	d20c      	bcs.n	80084f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	b29a      	uxth	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60da      	str	r2, [r3, #12]
 80084e4:	e009      	b.n	80084fa <UART_SetConfig+0x5ce>
 80084e6:	bf00      	nop
 80084e8:	40008000 	.word	0x40008000
 80084ec:	00f42400 	.word	0x00f42400
 80084f0:	08008c04 	.word	0x08008c04
      }
      else
      {
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2201      	movs	r2, #1
 8008506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008516:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	@ 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01a      	beq.n	800863a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008622:	d10a      	bne.n	800863a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	605a      	str	r2, [r3, #4]
  }
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b098      	sub	sp, #96	@ 0x60
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008678:	f7fa fa12 	bl	8002aa0 <HAL_GetTick>
 800867c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b08      	cmp	r3, #8
 800868a:	d12f      	bne.n	80086ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800868c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008694:	2200      	movs	r2, #0
 8008696:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f88e 	bl	80087bc <UART_WaitOnFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d022      	beq.n	80086ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e6      	bne.n	80086a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2220      	movs	r2, #32
 80086dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e063      	b.n	80087b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d149      	bne.n	800878e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008702:	2200      	movs	r2, #0
 8008704:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f857 	bl	80087bc <UART_WaitOnFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d03c      	beq.n	800878e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	623b      	str	r3, [r7, #32]
   return(result);
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008732:	633b      	str	r3, [r7, #48]	@ 0x30
 8008734:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e6      	bne.n	8008714 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	60fb      	str	r3, [r7, #12]
   return(result);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f023 0301 	bic.w	r3, r3, #1
 800875c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008766:	61fa      	str	r2, [r7, #28]
 8008768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	69b9      	ldr	r1, [r7, #24]
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	617b      	str	r3, [r7, #20]
   return(result);
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e5      	bne.n	8008746 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e012      	b.n	80087b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3758      	adds	r7, #88	@ 0x58
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	4613      	mov	r3, r2
 80087ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087cc:	e04f      	b.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d04b      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d6:	f7fa f963 	bl	8002aa0 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d302      	bcc.n	80087ec <UART_WaitOnFlagUntilTimeout+0x30>
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e04e      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d037      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b80      	cmp	r3, #128	@ 0x80
 8008802:	d034      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b40      	cmp	r3, #64	@ 0x40
 8008808:	d031      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b08      	cmp	r3, #8
 8008816:	d110      	bne.n	800883a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2208      	movs	r2, #8
 800881e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f838 	bl	8008896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2208      	movs	r2, #8
 800882a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e029      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008848:	d111      	bne.n	800886e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 f81e 	bl	8008896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e00f      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4013      	ands	r3, r2
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	bf0c      	ite	eq
 800887e:	2301      	moveq	r3, #1
 8008880:	2300      	movne	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	429a      	cmp	r2, r3
 800888a:	d0a0      	beq.n	80087ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008896:	b480      	push	{r7}
 8008898:	b095      	sub	sp, #84	@ 0x54
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e6      	bne.n	800889e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e3      	bne.n	80088d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890c:	2b01      	cmp	r3, #1
 800890e:	d118      	bne.n	8008942 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	60bb      	str	r3, [r7, #8]
   return(result);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f023 0310 	bic.w	r3, r3, #16
 8008924:	647b      	str	r3, [r7, #68]	@ 0x44
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	613b      	str	r3, [r7, #16]
   return(result);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008956:	bf00      	nop
 8008958:	3754      	adds	r7, #84	@ 0x54
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008962:	b480      	push	{r7}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_UARTEx_DisableFifoMode+0x16>
 8008974:	2302      	movs	r3, #2
 8008976:	e027      	b.n	80089c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2224      	movs	r2, #36	@ 0x24
 8008984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e02d      	b.n	8008a48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2224      	movs	r2, #36	@ 0x24
 80089f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f84f 	bl	8008acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e02d      	b.n	8008ac4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2224      	movs	r2, #36	@ 0x24
 8008a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f811 	bl	8008acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008aec:	e031      	b.n	8008b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aee:	2308      	movs	r3, #8
 8008af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008af2:	2308      	movs	r3, #8
 8008af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	0e5b      	lsrs	r3, r3, #25
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	0f5b      	lsrs	r3, r3, #29
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	7b3a      	ldrb	r2, [r7, #12]
 8008b1a:	4911      	ldr	r1, [pc, #68]	@ (8008b60 <UARTEx_SetNbDataToProcess+0x94>)
 8008b1c:	5c8a      	ldrb	r2, [r1, r2]
 8008b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b22:	7b3a      	ldrb	r2, [r7, #12]
 8008b24:	490f      	ldr	r1, [pc, #60]	@ (8008b64 <UARTEx_SetNbDataToProcess+0x98>)
 8008b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	7b7a      	ldrb	r2, [r7, #13]
 8008b38:	4909      	ldr	r1, [pc, #36]	@ (8008b60 <UARTEx_SetNbDataToProcess+0x94>)
 8008b3a:	5c8a      	ldrb	r2, [r1, r2]
 8008b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b40:	7b7a      	ldrb	r2, [r7, #13]
 8008b42:	4908      	ldr	r1, [pc, #32]	@ (8008b64 <UARTEx_SetNbDataToProcess+0x98>)
 8008b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b52:	bf00      	nop
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	08008c1c 	.word	0x08008c1c
 8008b64:	08008c24 	.word	0x08008c24

08008b68 <memset>:
 8008b68:	4402      	add	r2, r0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d100      	bne.n	8008b72 <memset+0xa>
 8008b70:	4770      	bx	lr
 8008b72:	f803 1b01 	strb.w	r1, [r3], #1
 8008b76:	e7f9      	b.n	8008b6c <memset+0x4>

08008b78 <__libc_init_array>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008bb0 <__libc_init_array+0x38>)
 8008b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008bb4 <__libc_init_array+0x3c>)
 8008b7e:	1b64      	subs	r4, r4, r5
 8008b80:	10a4      	asrs	r4, r4, #2
 8008b82:	2600      	movs	r6, #0
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	d109      	bne.n	8008b9c <__libc_init_array+0x24>
 8008b88:	4d0b      	ldr	r5, [pc, #44]	@ (8008bb8 <__libc_init_array+0x40>)
 8008b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008bbc <__libc_init_array+0x44>)
 8008b8c:	f000 f818 	bl	8008bc0 <_init>
 8008b90:	1b64      	subs	r4, r4, r5
 8008b92:	10a4      	asrs	r4, r4, #2
 8008b94:	2600      	movs	r6, #0
 8008b96:	42a6      	cmp	r6, r4
 8008b98:	d105      	bne.n	8008ba6 <__libc_init_array+0x2e>
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba0:	4798      	blx	r3
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	e7ee      	b.n	8008b84 <__libc_init_array+0xc>
 8008ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008baa:	4798      	blx	r3
 8008bac:	3601      	adds	r6, #1
 8008bae:	e7f2      	b.n	8008b96 <__libc_init_array+0x1e>
 8008bb0:	08008c34 	.word	0x08008c34
 8008bb4:	08008c34 	.word	0x08008c34
 8008bb8:	08008c34 	.word	0x08008c34
 8008bbc:	08008c38 	.word	0x08008c38

08008bc0 <_init>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr

08008bcc <_fini>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr
